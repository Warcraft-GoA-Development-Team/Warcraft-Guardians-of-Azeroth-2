GetDiarchyArticle = {
	type = character

	# Fallback: "a".
	text = {
		localization_key = article_a
		fallback = yes
		trigger = { always = no }
	}

	# Some start with vowels.
	text = {
		localization_key = article_an
		trigger = {
			liege = { has_diarchy_parameter = dismissal_requires_gift }
		}
	}
}

GetLiegeYou = {
	type = character

	# You.
	text = {
		trigger = {
			this = { is_local_player = yes }
		}
		localization_key = CHARACTER_NAME_ME
	}
	# The liege.
	text = {
		trigger = { always = no }
		fallback = yes
		localization_key = LIEGE_POSSESSIVE
	}
}

GetLiegeYour = {
	type = character

	# You.
	text = {
		trigger = {
			this = { is_local_player = yes }
		}
		localization_key = CHARACTER_NAME_MY
	}
	# The liege.
	text = {
		trigger = { always = no }
		fallback = yes
		localization_key = LIEGE_POSSESSIVE
	}
}

GetChildInvalid = {
	type = character

	# Child.
	text = {
		trigger = { is_adult = no }
		localization_key = invalid_child
	}
	# Incapable.
	text = {
		trigger = { is_incapable = yes }
		localization_key = invalid_incapable
	}
	# Fallback.
	text = {
		trigger = { always = no }
		fallback = yes
		localization_key = invalid_helpless
	}
}

GetChildInvalidPossessive = {
	type = character

	# Child.
	text = {
		trigger = { is_adult = no }
		localization_key = invalid_child_possessive
	}
	# Incapable.
	text = {
		trigger = { is_incapable = yes }
		localization_key = invalid_incapable_possessive
	}
	# Fallback.
	text = {
		trigger = { always = no }
		fallback = yes
		localization_key = invalid_helpless_possessive
	}
}

GetWarning_WeakDiarchSuccessionScore = {
	type = character

	# People get annoyed if you skip them.
	text = {
		trigger = {
			liege = {
				any_diarchy_succession_character = { diarchy_regent_succession_score_value > root.diarchy_regent_succession_score_value }
			}
		}
		localization_key = diarch.succession_offence.succession_score
	}
}

GetWarning_DiarchAppointmentCourtlies = {
	type = character

	# Unrelated lowborns.
	text = {
		trigger = {
			# Designating the first person in the queue is your best choice, so they can't ever upset anyone.
			liege = {
				any_diarchy_succession_character = { diarchy_regent_succession_score_value > root.diarchy_regent_succession_score_value }
			}
			# Now calc everything else.
			save_temporary_scope_as = char_temp
			liege = {
				any_vassal = {
					has_vassal_stance = courtly
					NOT = { this = scope:char_temp }
				}
			}
			is_lowborn = yes
			NOT = {
				any_close_or_extended_family_member = { this = root.liege }
			}
		}
		localization_key = diarch.succession_offence.unrelated_lowborn
	}
	# Related lowborns.
	text = {
		trigger = {
			# Designating the first person in the queue is your best choice, so they can't ever upset anyone.
			liege = {
				any_diarchy_succession_character = { diarchy_regent_succession_score_value > root.diarchy_regent_succession_score_value }
			}
			# Now calc everything else.
			save_temporary_scope_as = char_temp
			liege = {
				any_vassal = {
					has_vassal_stance = courtly
					NOT = { this = scope:char_temp }
				}
			}
			is_lowborn = yes
			always = no
		}
		localization_key = diarch.succession_offence.related_lowborn
	}
	# Low succession score characters.
	text = {
		trigger = {
			# Designating the first person in the queue is your best choice, so they can't ever upset anyone.
			liege = {
				any_diarchy_succession_character = { diarchy_regent_succession_score_value > root.diarchy_regent_succession_score_value }
			}
			# Now calc everything else.
			save_temporary_scope_as = char_temp
			liege = {
				any_vassal = {
					has_vassal_stance = courtly
					NOT = { this = scope:char_temp }
				}
			}
			diarchy_regent_succession_score_value <= courtly_offence_at_succession_threshold_low
		}
		localization_key = diarch.succession_offence.low_succession
	}
	# Medium succession score characters.
	text = {
		trigger = {
			# Designating the first person in the queue is your best choice, so they can't ever upset anyone.
			liege = {
				any_diarchy_succession_character = { diarchy_regent_succession_score_value > root.diarchy_regent_succession_score_value }
			}
			# Now calc everything else.
			save_temporary_scope_as = char_temp
			liege = {
				any_vassal = {
					has_vassal_stance = courtly
					NOT = { this = scope:char_temp }
				}
			}
			diarchy_regent_succession_score_value <= courtly_offence_at_succession_threshold_medium
		}
		localization_key = diarch.succession_offence.medium_succession
	}
	# High succession score characters.
	text = {
		trigger = {
			# Designating the first person in the queue is your best choice, so they can't ever upset anyone.
			liege = {
				any_diarchy_succession_character = { diarchy_regent_succession_score_value > root.diarchy_regent_succession_score_value }
			}
			# Now calc everything else.
			save_temporary_scope_as = char_temp
			liege = {
				any_vassal = {
					has_vassal_stance = courtly
					NOT = { this = scope:char_temp }
				}
			}
			diarchy_regent_succession_score_value <= courtly_offence_at_succession_threshold_high
		}
		localization_key = diarch.succession_offence.high_succession
	}
	text = { localization_key = diarch.succession_offence.empty }
}

GetCustomTooltip_WeakDiarchSuccessionScore = {
	type = character

	# People get annoyed if you skip them.
	text = {
		trigger = {
			liege = {
				any_diarchy_succession_character = { diarchy_regent_succession_score_value > root.diarchy_regent_succession_score_value }
			}
		}
		localization_key = diarch.succession_offence.succession_score.guts
	}
}

GetCustomTooltip_DiarchAppointmentCourtlies = {
	type = character

	# Unrelated lowborns.
	text = {
		trigger = {
			# Designating the first person in the queue is your best choice, so they can't ever upset anyone.
			liege = {
				any_diarchy_succession_character = { diarchy_regent_succession_score_value > root.diarchy_regent_succession_score_value }
			}
			# Now calc everything else.
			save_temporary_scope_as = char_temp
			liege = {
				any_vassal = {
					has_vassal_stance = courtly
					NOT = { this = scope:char_temp }
				}
			}
			is_lowborn = yes
			NOT = {
				any_close_or_extended_family_member = { this = root.liege }
			}
		}
		localization_key = diarch.succession_offence.unrelated_lowborn.guts
	}
	# Related lowborns.
	text = {
		trigger = {
			# Designating the first person in the queue is your best choice, so they can't ever upset anyone.
			liege = {
				any_diarchy_succession_character = { diarchy_regent_succession_score_value > root.diarchy_regent_succession_score_value }
			}
			# Now calc everything else.
			save_temporary_scope_as = char_temp
			liege = {
				any_vassal = {
					has_vassal_stance = courtly
					NOT = { this = scope:char_temp }
				}
			}
			is_lowborn = yes
			always = no
		}
		localization_key = diarch.succession_offence.related_lowborn.guts
	}
	# Low succession score characters.
	text = {
		trigger = {
			# Designating the first person in the queue is your best choice, so they can't ever upset anyone.
			liege = {
				any_diarchy_succession_character = { diarchy_regent_succession_score_value > root.diarchy_regent_succession_score_value }
			}
			# Now calc everything else.
			save_temporary_scope_as = char_temp
			liege = {
				any_vassal = {
					has_vassal_stance = courtly
					NOT = { this = scope:char_temp }
				}
			}
			diarchy_regent_succession_score_value <= courtly_offence_at_succession_threshold_low
		}
		localization_key = diarch.succession_offence.low_succession.guts
	}
	# Medium succession score characters.
	text = {
		trigger = {
			# Designating the first person in the queue is your best choice, so they can't ever upset anyone.
			liege = {
				any_diarchy_succession_character = { diarchy_regent_succession_score_value > root.diarchy_regent_succession_score_value }
			}
			# Now calc everything else.
			save_temporary_scope_as = char_temp
			liege = {
				any_vassal = {
					has_vassal_stance = courtly
					NOT = { this = scope:char_temp }
				}
			}
			diarchy_regent_succession_score_value <= courtly_offence_at_succession_threshold_medium
		}
		localization_key = diarch.succession_offence.medium_succession.guts
	}
	# High succession score characters.
	text = {
		trigger = {
			# Designating the first person in the queue is your best choice, so they can't ever upset anyone.
			liege = {
				any_diarchy_succession_character = { diarchy_regent_succession_score_value > root.diarchy_regent_succession_score_value }
			}
			# Now calc everything else.
			save_temporary_scope_as = char_temp
			liege = {
				any_vassal = {
					has_vassal_stance = courtly
					NOT = { this = scope:char_temp }
				}
			}
			diarchy_regent_succession_score_value <= courtly_offence_at_succession_threshold_high
		}
		localization_key = diarch.succession_offence.high_succession.guts
	}
	text = { localization_key = diarch.succession_offence.empty }
}
