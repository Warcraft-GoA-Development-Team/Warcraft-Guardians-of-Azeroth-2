#Scripted effects relating to Murder Schemes

#####################################################################
# EFFECT LIST
#####################################################################
# !!! Remember to add all new effects with a short description here !!!

#murder_outcome_roll_effect
#murder_success_effect
#murder_failure_effect

######################################################################
# EFFECTS
######################################################################

#Sets up the Outcome Roll values
murder_outcome_roll_setup_effect = {
	#Discovery Roll setup
	save_scope_value_as = {
		name = discovery_chance
		value = {
			value = 100
			subtract = scope:scheme.scheme_secrecy
		}
	}
}

#Roll to check whether a Murder Scheme is a success or a failure, and whether the owner is discovered
murder_outcome_roll_effect = {
	#SUCCESS ROLL
	random = {
		chance = scope:scheme.scheme_success_chance
		custom_tooltip = murder_successful_roll_tt
		save_scope_value_as = {
			name = scheme_successful
			value = yes
		}
	}
	### End Success roll
	#DISCOVERY ROLL
	custom_description_no_bullet = {
		text = in_addition_effect_tooltip
	}
	random = {
		chance = scope:discovery_chance
		custom_tooltip = scheme_remain_secret_roll_tt
		save_scope_value_as = {
			name = scheme_discovered
			value = yes
		}
		if = {
			limit = {
				exists = scope:target.host
			}
			scope:target.host = {
				save_scope_as = murder_exposer
			}
		}
		else = {
			scope:target = {
				save_scope_as = murder_exposer
			}
		}
	}
	### End Discovery roll

	hidden_effect = {
		#FIRE CORRECT ON ACTIONS
		if = {
			limit = {
				exists = scope:scheme_successful
			}
			trigger_event = {
				on_action = murder_save_roll
				days = 3
			}
		}
		else = {
			trigger_event = {
				on_action = murder_failed
				days = 3
			}
		}
	}
}


# Used in the immediate of the Scheme Owner's success event
murder_success_effect = {
	play_music_cue = mx_cue_murder
	#Check if it is a Rival being murdered
	if = {
		limit = {
			scope:scheme.scheme_owner = {
				has_relation_rival = scope:scheme.scheme_target
			}
		}
		save_scope_value_as = {
			name = murdered_rival
			value = yes
		}
	}
	#End of Rival check

	scope:target = {
		trigger_event = murder_outcome.5001
	}

	show_as_tooltip = {
		murder_success_kill_effect = yes
	}

	#Stress reduction
	if = {
		limit = {
			# Warcraft
			scope:owner = {
				has_trait = sadistic
			}
		}
		scope:owner = {
			stress_impact = {
				sadistic = minor_stress_impact_loss
			}
		}
	}
	if = {
		limit = {
			exists = scope:murdered_rival
		}
		if = {
			limit = {
				scope:owner = {
					has_trait = vengeful
				}
			}
			scope:owner = {
				stress_impact = {
					vengeful = massive_stress_impact_loss
				}
			}
		}
		else_if = {
			limit = {
				scope:owner = {
					has_trait = forgiving
				}
			}
			scope:owner = {
				stress_impact = {
					base = medium_stress_impact_loss
					forgiving = minor_stress_impact_gain
				}
			}
		}
		else = {
			scope:owner = {
				add_stress = major_stress_loss
			}
		}
	}
}

murder_success_kill_effect = {
	# Warcraft
	# To prevent demons from firing the Target is Away even
	scope:scheme = { end_scheme = yes }
	
	if = {
		limit = {
			exists = scope:scheme_discovered
		}
		known_murder_effect = {
			VICTIM = scope:target
			MURDERER = scope:owner
			EXPOSER = scope:murder_exposer
		}
	}
	else = {
		if = {
			limit = { this = scope:owner }
			if = {
				limit = {
					exists = scope:murder_method	
					scope:murder_method = flag:bricked
				}
				show_as_tooltip = {
					unknown_murder_effect = {
						VICTIM = scope:target
						MURDERER = scope:owner
						REASON = death_disappearance
					}
				}
			}
			else = {
				show_as_tooltip = {
					unknown_murder_effect = {
						VICTIM = scope:target
						MURDERER = scope:owner
						REASON = death_mysterious
					}
				}
			}
		}
		else_if = {
			limit = { this = scope:target }
			custom_tooltip = murder_unknown_murder_against_you_was_successful
			hidden_effect = {
				if = {
					limit = {
						exists = scope:murder_method
						scope:murder_method = flag:bricked
					}
					unknown_murder_effect = {
						VICTIM = scope:target
						MURDERER = scope:owner
						REASON = death_disappearance
					}
				}
				else = {
					unknown_murder_effect = {
						VICTIM = scope:target
						MURDERER = scope:owner
						REASON = death_mysterious
					}
				}
			}
		}
	}
}


murder_failure_effect = {
 	
 	#Add Watchful Modifier to the target
	scope:target = {
		show_as_tooltip = {
			add_character_modifier = {
				modifier = watchful_modifier
				days = watchful_modifier_duration
			}
		}
	}

	if = {
		limit = {
			exists = scope:murder_saved
		}
		scope:target = {
			trigger_event = {
				on_action = murder_save_response
			}
		}
	}
	else_if = {
		limit = {
			exists = scope:scheme_discovered
		}
		scope:owner = {
			save_scope_as = owner_to_reveal
			add_dread = minor_dread_gain
		}
		show_as_tooltip = {
			attempted_murder_opinion_effect = {
				VICTIM = scope:target
				MURDERER = scope:owner
			}
		}
		scope:target = {
			trigger_event = murder_outcome.5002
		}
	}
	#Add a murder attempt secret
	else = {
		scope:owner = {
			add_secret = {
				type = secret_murder_attempt
				target = scope:target
			}
		}
		scope:target = {
			trigger_event = murder_outcome.5002
		}
	}
}


murdered_rival_effect = {
	custom_description_no_bullet = { text = murder_outcome_murdered_rival_tt }
	add_prestige = medium_prestige_gain
	stress_impact = {
		base = major_stress_loss
	}
}


# Warcraft
dread_from_discovered_murder_effect = {
	if = {
		limit = {
			OR = {
				#is_spouse_of = $VICTIM$
				is_close_family_of = $VICTIM$
				$VICTIM$ = { tier_or_related_liege_tier_greater_or_equal_trigger = { TIER = tier_kingdom } } #Kingdom & empire
			}
		}
		add_dread = major_dread_gain
	}
	else_if = {
		limit = {
			OR = {
				$VICTIM$ = { tier_or_related_liege_tier_equal_trigger = { TIER = tier_duchy } }
				$VICTIM$ = { tier_or_related_liege_tier_equal_trigger = { TIER = tier_county } }
			}
		}
		add_dread = medium_dread_gain
	}
	else = {
		add_dread = minor_dread_gain
	}
}


successful_murder_outcome_event_option_effect = {
	#show_as_tooltip = { #The scheme should end in the immediate effect to not cause weird problems in MP
		#scope:scheme = {
		#	end_scheme = yes
		#}
	#}
	
	if = { # Dread for successfully murdering someone and getting discovered
		limit = {
			exists = scope:scheme_discovered
		}
		
		# Warcraft
		dread_from_discovered_murder_effect = { VICTIM = scope:target }
	}
	
	hidden_effect = { #TODO_CD: for debugging reasons. Did this stop the errors in the murder scheme success effect?
		trigger_event = {
			id = murder_outcome.9999
			days = 1
		}
	}
	
	if = {
		limit = {
			exists = scope:murdered_rival
		}
		murdered_rival_effect = yes
	}

	if = {
		limit = {
			faith = {
				has_doctrine_parameter = piety_gain_from_successful_intrigue_schemes
			}	
		}
		add_piety = minor_piety_gain
	}
}