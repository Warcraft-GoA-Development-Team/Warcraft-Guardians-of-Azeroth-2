
# Note: this is scripted, not sent from code, so must be manually added to new faction demand events. We fire this at the top of the relevant effect block, so it happens _before_ the rest of the calculations.
## Root is the faction target.
## Scope:faction is the attacking faction.
## Scope:faction_leader is the leader of the attacking faction.
on_faction_demand_accepted = {
	effect = {
		if = {
			limit = {
				scope:faction ?= {
					faction_is_type = nation_fracturing_faction
				}
			}
			if = {
				limit = {
					NOT = {
						has_global_variable = dissolution_faction_accepted_var
					}
				}
				set_global_variable = {
					name = dissolution_faction_accepted_var
					value = 1
				}
			}
			else = {
				change_global_variable = {
					name = dissolution_faction_accepted_var
					add = 1
				}
			}
		}
		
		if = {
			limit = {
				scope:faction ?= {
					faction_is_type = claimant_faction
				}
			}
			if = {
				limit = {
					NOT = {
						has_global_variable = claimant_faction_accepted_var
					}
				}
				set_global_variable = {
					name = claimant_faction_accepted_var
					value = 1
				}
			}
			else = {
				change_global_variable = {
					name = claimant_faction_accepted_var
					add = 1
				}
			}
		}
		#Warcraft
		# # Struggle Catalysts.
		# ## Caliph accepts a revolt.
		# if = {
		# 	limit = { fp3_struggle_scoped_is_the_arabian_caliph_trigger = yes }
		# 	struggle:persian_struggle ?= {
		# 		if = {
		# 			limit = { phase_has_catalyst = catalyst_caliph_or_emperor_accepts_faction_demands }
		# 			activate_struggle_catalyst = {
		# 				catalyst = catalyst_caliph_or_emperor_accepts_faction_demands
		# 				character = root
		# 			}
		# 			log_debug_variable_for_persian_struggle_effect = { VAR = concession_catalyst_caliph_or_emperor_accepts_faction_demands }
		# 		}
		# 	}
		# }
		# Complete a task contract
		if = {
			limit = {
				scope:faction ?= {
					any_faction_member = {
						is_landless_adventurer = yes
						any_character_active_contract = {
							has_task_contract_type = laamp_join_faction_contract
							var:task_contract_faction = scope:faction
						}
					}
				}
			}
			scope:faction = {
				every_faction_member = {
					every_character_active_contract = {
						limit = {
							has_task_contract_type = laamp_join_faction_contract
							var:task_contract_faction = scope:faction
						}
						complete_task_contract = success_standard
					}
				}
			}
		}
	}
}

# Note: this is scripted, not sent from code, so must be manually added to new faction demand events. We fire this at the top of the relevant effect block, so it happens _before_ the rest of the calculations.
## Root is the faction target.
## Scope:faction is the attacking faction.
## Scope:faction_leader is the leader of the attacking faction.
on_faction_demand_rejected = {}
