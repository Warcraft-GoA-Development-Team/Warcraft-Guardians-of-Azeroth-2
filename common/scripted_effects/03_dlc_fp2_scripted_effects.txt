##################################################
# Decisions
##################################################

##### Struggle Ending #####

### Common

# Add all Involved cultures with counties to a list
fp2_struggle_ending_culture_list_effect = {
	
}

# Add all Involved independent rulers to a list
fp2_stuggle_ending_involved_list_effect = {
	
}

### Hostility

# Add all Involved faiths with counties to a list
fp2_struggle_ending_faith_list_effect = {
	
}

# Set cultural acceptance between all Involved cultures
fp2_struggle_hostility_cultural_acceptance_effect = {
	
}

# Set cultural acceptance between all Involved cultures
fp2_struggle_hostility_cultural_acceptance_large_effect = {
	
}


### Compromise

# Creates a new de jure kingdom from a duchy
fp2_struggle_compromise_create_new_kingdom_effect = {
	
}

# Create new de jure kingdoms from relevant duchies
fp2_struggle_compromise_duchies_to_kingdoms_effect = {
	
}

# Moves duchies to another kingdom
fp2_struggle_compromise_transfer_duchies_effect = {
	
}

# Creates a new de jure empire from a kingdom
fp2_struggle_compromise_create_new_empire_effect = {
	
}

# Create new de jure empires from relevant kingdoms
fp2_struggle_compromise_kingdoms_to_empires_effect = {
	
}

# Distribute remaining Kingdoms to neighboring empires
fp2_struggle_compromise_distribute_kingdoms_to_neighbouring_empires_effect = {
	
}

fp2_struggle_compromise_distribute_the_actual_titles = {
	
}

# Add house modifiers to Involved rulers; Didn't rename the key for localization cost reasons
fp2_struggle_compromise_modifier_rewards_effect = {
	
}

# Add house modifiers to a single character (used in tooltips);
fp2_struggle_compromise_modifier_rewards_personal_house_effect = {
	
}

# Add county modifiers to a single character (used in tooltips)
fp2_struggle_compromise_modifier_rewards_personal_county_effect = {
	
}

# Add truces between all Involved rulers
fp2_struggle_compromise_truce_effect = {
	
}

### Conciliation

# Add House modifiers to all Involved rulers
fp2_struggle_conciliation_modifier_rewards_effect = {
	
}

# Add House modifier to a single character (used in tooltips)
fp2_struggle_conciliation_modifier_rewards_personal_effect = {
	
}

# Add cultural acceptance between Involved cultures
fp2_struggle_conciliation_cultural_acceptance_effect = {
	
}

##################################################
# Interactions
##################################################

synergise_friendship_interaction_bonus_individual_effect = {
	$SENIOR_CHARACTER$ = {
		# Diplomacy education.
		if = {
			limit = { has_trait = education_diplomacy }
			add_character_modifier = fp2_single_synergy_diplomacy_modifier
			$JUNIOR_CHARACTER$ = { add_character_modifier = fp2_single_synergy_diplomacy_modifier }
		}
		# Martial education.
		if = {
			limit = { has_trait = education_martial }
			add_character_modifier = fp2_single_synergy_martial_modifier
			$JUNIOR_CHARACTER$ = { add_character_modifier = fp2_single_synergy_martial_modifier }
		}
		# Stewardship education.
		if = {
			limit = { has_trait = education_stewardship }
			add_character_modifier = fp2_single_synergy_stewardship_modifier
			$JUNIOR_CHARACTER$ = { add_character_modifier = fp2_single_synergy_stewardship_modifier }
		}
		# Intrigue education.
		if = {
			limit = { has_trait = education_intrigue }
			add_character_modifier = fp2_single_synergy_intrigue_modifier
			$JUNIOR_CHARACTER$ = { add_character_modifier = fp2_single_synergy_intrigue_modifier }
		}
		# Learning education.
		if = {
			limit = { has_trait = education_learning }
			add_character_modifier = fp2_single_synergy_learning_modifier
			$JUNIOR_CHARACTER$ = { add_character_modifier = fp2_single_synergy_learning_modifier }
		}
	}
}

# Being $SENIOR_CHARACTER$ doesn't actually do anything in this variant, just maintaining term parity with the other synergy effect.
synergise_friendship_interaction_bonus_combined_effect = {
	$SENIOR_CHARACTER$ = {
		# Diplomacy combi-synergies.
		if = {
			limit = { has_trait = education_diplomacy }
			# Diplomacy-Diplomacy
			if = {
				limit = {
					$JUNIOR_CHARACTER$ = { has_trait = education_diplomacy }
				}
				add_character_modifier = fp2_double_synergy_diplomacy_diplomacy_modifier
				$JUNIOR_CHARACTER$ = { add_character_modifier = fp2_double_synergy_diplomacy_diplomacy_modifier }
			}
			# Diplomacy-Martial
			if = {
				limit = {
					$JUNIOR_CHARACTER$ = { has_trait = education_martial }
				}
				add_character_modifier = fp2_double_synergy_diplomacy_martial_modifier
				$JUNIOR_CHARACTER$ = { add_character_modifier = fp2_double_synergy_diplomacy_martial_modifier }
			}
			# Diplomacy-Stewardship
			if = {
				limit = {
					$JUNIOR_CHARACTER$ = { has_trait = education_stewardship }
				}
				add_character_modifier = fp2_double_synergy_diplomacy_stewardship_modifier
				$JUNIOR_CHARACTER$ = { add_character_modifier = fp2_double_synergy_diplomacy_stewardship_modifier }
			}
			# Diplomacy-Intrigue
			if = {
				limit = {
					$JUNIOR_CHARACTER$ = { has_trait = education_intrigue }
				}
				add_character_modifier = fp2_double_synergy_diplomacy_intrigue_modifier
				$JUNIOR_CHARACTER$ = { add_character_modifier = fp2_double_synergy_diplomacy_intrigue_modifier }
			}
			# Diplomacy-Learning
			if = {
				limit = {
					$JUNIOR_CHARACTER$ = { has_trait = education_learning }
				}
				add_character_modifier = fp2_double_synergy_diplomacy_learning_modifier
				$JUNIOR_CHARACTER$ = { add_character_modifier = fp2_double_synergy_diplomacy_learning_modifier }
			}
		}
		# Martial combi-synergies.
		if = {
			limit = { has_trait = education_martial }
			# Martial-Diplomacy
			if = {
				limit = {
					$JUNIOR_CHARACTER$ = { has_trait = education_diplomacy }
				}
				add_character_modifier = fp2_double_synergy_martial_diplomacy_modifier
				$JUNIOR_CHARACTER$ = { add_character_modifier = fp2_double_synergy_martial_diplomacy_modifier }
			}
			# Martial-Martial
			if = {
				limit = {
					$JUNIOR_CHARACTER$ = { has_trait = education_martial }
				}
				add_character_modifier = fp2_double_synergy_martial_martial_modifier
				$JUNIOR_CHARACTER$ = { add_character_modifier = fp2_double_synergy_martial_martial_modifier }
			}
			# Martial-Stewardship
			if = {
				limit = {
					$JUNIOR_CHARACTER$ = { has_trait = education_stewardship }
				}
				add_character_modifier = fp2_double_synergy_martial_stewardship_modifier
				$JUNIOR_CHARACTER$ = { add_character_modifier = fp2_double_synergy_martial_stewardship_modifier }
			}
			# Martial-Intrigue
			if = {
				limit = {
					$JUNIOR_CHARACTER$ = { has_trait = education_intrigue }
				}
				add_character_modifier = fp2_double_synergy_martial_intrigue_modifier
				$JUNIOR_CHARACTER$ = { add_character_modifier = fp2_double_synergy_martial_intrigue_modifier }
			}
			# Martial-Learning
			if = {
				limit = {
					$JUNIOR_CHARACTER$ = { has_trait = education_learning }
				}
				add_character_modifier = fp2_double_synergy_martial_learning_modifier
				$JUNIOR_CHARACTER$ = { add_character_modifier = fp2_double_synergy_martial_learning_modifier }
			}
		}
		# Stewardship combi-synergies.
		if = {
			limit = { has_trait = education_stewardship }
			# Stewardship-Diplomacy
			if = {
				limit = {
					$JUNIOR_CHARACTER$ = { has_trait = education_diplomacy }
				}
				add_character_modifier = fp2_double_synergy_stewardship_diplomacy_modifier
				$JUNIOR_CHARACTER$ = { add_character_modifier = fp2_double_synergy_stewardship_diplomacy_modifier }
			}
			# Stewardship-Martial
			if = {
				limit = {
					$JUNIOR_CHARACTER$ = { has_trait = education_martial }
				}
				add_character_modifier = fp2_double_synergy_stewardship_martial_modifier
				$JUNIOR_CHARACTER$ = { add_character_modifier = fp2_double_synergy_stewardship_martial_modifier }
			}
			# Stewardship-Stewardship
			if = {
				limit = {
					$JUNIOR_CHARACTER$ = { has_trait = education_stewardship }
				}
				add_character_modifier = fp2_double_synergy_stewardship_stewardship_modifier
				$JUNIOR_CHARACTER$ = { add_character_modifier = fp2_double_synergy_stewardship_stewardship_modifier }
			}
			# Stewardship-Intrigue
			if = {
				limit = {
					$JUNIOR_CHARACTER$ = { has_trait = education_intrigue }
				}
				add_character_modifier = fp2_double_synergy_stewardship_intrigue_modifier
				$JUNIOR_CHARACTER$ = { add_character_modifier = fp2_double_synergy_stewardship_intrigue_modifier }
			}
			# Stewardship-Learning
			if = {
				limit = {
					$JUNIOR_CHARACTER$ = { has_trait = education_learning }
				}
				add_character_modifier = fp2_double_synergy_stewardship_learning_modifier
				$JUNIOR_CHARACTER$ = { add_character_modifier = fp2_double_synergy_stewardship_learning_modifier }
			}
		}
		# Intrigue combi-synergies.
		if = {
			limit = { has_trait = education_intrigue }
			# Intrigue-Diplomacy
			if = {
				limit = {
					$JUNIOR_CHARACTER$ = { has_trait = education_diplomacy }
				}
				add_character_modifier = fp2_double_synergy_intrigue_diplomacy_modifier
				$JUNIOR_CHARACTER$ = { add_character_modifier = fp2_double_synergy_intrigue_diplomacy_modifier }
			}
			# Intrigue-Martial
			if = {
				limit = {
					$JUNIOR_CHARACTER$ = { has_trait = education_martial }
				}
				add_character_modifier = fp2_double_synergy_intrigue_martial_modifier
				$JUNIOR_CHARACTER$ = { add_character_modifier = fp2_double_synergy_intrigue_martial_modifier }
			}
			# Intrigue-Stewardship
			if = {
				limit = {
					$JUNIOR_CHARACTER$ = { has_trait = education_stewardship }
				}
				add_character_modifier = fp2_double_synergy_intrigue_stewardship_modifier
				$JUNIOR_CHARACTER$ = { add_character_modifier = fp2_double_synergy_intrigue_stewardship_modifier }
			}
			# Intrigue-Intrigue
			if = {
				limit = {
					$JUNIOR_CHARACTER$ = { has_trait = education_intrigue }
				}
				add_character_modifier = fp2_double_synergy_intrigue_intrigue_modifier
				$JUNIOR_CHARACTER$ = { add_character_modifier = fp2_double_synergy_intrigue_intrigue_modifier }
			}
			# Intrigue-Learning
			if = {
				limit = {
					$JUNIOR_CHARACTER$ = { has_trait = education_learning }
				}
				add_character_modifier = fp2_double_synergy_intrigue_learning_modifier
				$JUNIOR_CHARACTER$ = { add_character_modifier = fp2_double_synergy_intrigue_learning_modifier }
			}
		}
		# Learning combi-synergies.
		if = {
			limit = { has_trait = education_learning }
			# Learning-Diplomacy
			if = {
				limit = {
					$JUNIOR_CHARACTER$ = { has_trait = education_diplomacy }
				}
				add_character_modifier = fp2_double_synergy_learning_diplomacy_modifier
				$JUNIOR_CHARACTER$ = { add_character_modifier = fp2_double_synergy_learning_diplomacy_modifier }
			}
			# Learning-Martial
			if = {
				limit = {
					$JUNIOR_CHARACTER$ = { has_trait = education_martial }
				}
				add_character_modifier = fp2_double_synergy_learning_martial_modifier
				$JUNIOR_CHARACTER$ = { add_character_modifier = fp2_double_synergy_learning_martial_modifier }
			}
			# Learning-Stewardship
			if = {
				limit = {
					$JUNIOR_CHARACTER$ = { has_trait = education_stewardship }
				}
				add_character_modifier = fp2_double_synergy_learning_stewardship_modifier
				$JUNIOR_CHARACTER$ = { add_character_modifier = fp2_double_synergy_learning_stewardship_modifier }
			}
			# Learning-Intrigue
			if = {
				limit = {
					$JUNIOR_CHARACTER$ = { has_trait = education_intrigue }
				}
				add_character_modifier = fp2_double_synergy_learning_intrigue_modifier
				$JUNIOR_CHARACTER$ = { add_character_modifier = fp2_double_synergy_learning_intrigue_modifier }
			}
			# Learning-Learning
			if = {
				limit = {
					$JUNIOR_CHARACTER$ = { has_trait = education_learning }
				}
				add_character_modifier = fp2_double_synergy_learning_learning_modifier
				$JUNIOR_CHARACTER$ = { add_character_modifier = fp2_double_synergy_learning_learning_modifier }
			}
		}
	}
}

synergise_friendship_interaction_actual_effect = {
	if = {
		limit = { always = scope:synergy_bonus_actor }
		synergise_friendship_interaction_bonus_individual_effect = {
			SENIOR_CHARACTER = scope:actor
			JUNIOR_CHARACTER = scope:recipient
		}
	}
	if = {
		limit = { always = scope:synergy_bonus_recipient }
		synergise_friendship_interaction_bonus_individual_effect = {
			SENIOR_CHARACTER = scope:recipient
			JUNIOR_CHARACTER = scope:actor
		}
	}
	if = {
		limit = { always = scope:synergy_bonus_mixed }
		synergise_friendship_interaction_bonus_combined_effect = {
			SENIOR_CHARACTER = scope:actor
			JUNIOR_CHARACTER = scope:recipient
		}
	}
}

remove_every_best_friend_synergy_bonus_modifier_effect = {
	if = {
		limit = { has_character_modifier = fp2_single_synergy_diplomacy_modifier }
		remove_character_modifier = fp2_single_synergy_diplomacy_modifier
	}
	if = {
		limit = { has_character_modifier = fp2_single_synergy_martial_modifier }
		remove_character_modifier = fp2_single_synergy_martial_modifier
	}
	if = {
		limit = { has_character_modifier = fp2_single_synergy_stewardship_modifier }
		remove_character_modifier = fp2_single_synergy_stewardship_modifier
	}
	if = {
		limit = { has_character_modifier = fp2_single_synergy_intrigue_modifier }
		remove_character_modifier = fp2_single_synergy_intrigue_modifier
	}
	if = {
		limit = { has_character_modifier = fp2_single_synergy_learning_modifier }
		remove_character_modifier = fp2_single_synergy_learning_modifier
	}
	if = {
		limit = { has_character_modifier = fp2_double_synergy_diplomacy_diplomacy_modifier }
		remove_character_modifier = fp2_double_synergy_diplomacy_diplomacy_modifier
	}
	if = {
		limit = { has_character_modifier = fp2_double_synergy_diplomacy_martial_modifier }
		remove_character_modifier = fp2_double_synergy_diplomacy_martial_modifier
	}
	if = {
		limit = { has_character_modifier = fp2_double_synergy_diplomacy_stewardship_modifier }
		remove_character_modifier = fp2_double_synergy_diplomacy_stewardship_modifier
	}
	if = {
		limit = { has_character_modifier = fp2_double_synergy_diplomacy_intrigue_modifier }
		remove_character_modifier = fp2_double_synergy_diplomacy_intrigue_modifier
	}
	if = {
		limit = { has_character_modifier = fp2_double_synergy_diplomacy_learning_modifier }
		remove_character_modifier = fp2_double_synergy_diplomacy_learning_modifier
	}
	if = {
		limit = { has_character_modifier = fp2_double_synergy_martial_diplomacy_modifier }
		remove_character_modifier = fp2_double_synergy_martial_diplomacy_modifier
	}
	if = {
		limit = { has_character_modifier = fp2_double_synergy_martial_martial_modifier }
		remove_character_modifier = fp2_double_synergy_martial_martial_modifier
	}
	if = {
		limit = { has_character_modifier = fp2_double_synergy_martial_stewardship_modifier }
		remove_character_modifier = fp2_double_synergy_martial_stewardship_modifier
	}
	if = {
		limit = { has_character_modifier = fp2_double_synergy_martial_intrigue_modifier }
		remove_character_modifier = fp2_double_synergy_martial_intrigue_modifier
	}
	if = {
		limit = { has_character_modifier = fp2_double_synergy_martial_learning_modifier }
		remove_character_modifier = fp2_double_synergy_martial_learning_modifier
	}
	if = {
		limit = { has_character_modifier = fp2_double_synergy_stewardship_diplomacy_modifier }
		remove_character_modifier = fp2_double_synergy_stewardship_diplomacy_modifier
	}
	if = {
		limit = { has_character_modifier = fp2_double_synergy_stewardship_martial_modifier }
		remove_character_modifier = fp2_double_synergy_stewardship_martial_modifier
	}
	if = {
		limit = { has_character_modifier = fp2_double_synergy_stewardship_stewardship_modifier }
		remove_character_modifier = fp2_double_synergy_stewardship_stewardship_modifier
	}
	if = {
		limit = { has_character_modifier = fp2_double_synergy_stewardship_intrigue_modifier }
		remove_character_modifier = fp2_double_synergy_stewardship_intrigue_modifier
	}
	if = {
		limit = { has_character_modifier = fp2_double_synergy_stewardship_learning_modifier }
		remove_character_modifier = fp2_double_synergy_stewardship_learning_modifier
	}
	if = {
		limit = { has_character_modifier = fp2_double_synergy_intrigue_diplomacy_modifier }
		remove_character_modifier = fp2_double_synergy_intrigue_diplomacy_modifier
	}
	if = {
		limit = { has_character_modifier = fp2_double_synergy_intrigue_martial_modifier }
		remove_character_modifier = fp2_double_synergy_intrigue_martial_modifier
	}
	if = {
		limit = { has_character_modifier = fp2_double_synergy_intrigue_stewardship_modifier }
		remove_character_modifier = fp2_double_synergy_intrigue_stewardship_modifier
	}
	if = {
		limit = { has_character_modifier = fp2_double_synergy_intrigue_intrigue_modifier }
		remove_character_modifier = fp2_double_synergy_intrigue_intrigue_modifier
	}
	if = {
		limit = { has_character_modifier = fp2_double_synergy_intrigue_learning_modifier }
		remove_character_modifier = fp2_double_synergy_intrigue_learning_modifier
	}
	if = {
		limit = { has_character_modifier = fp2_double_synergy_learning_diplomacy_modifier }
		remove_character_modifier = fp2_double_synergy_learning_diplomacy_modifier
	}
	if = {
		limit = { has_character_modifier = fp2_double_synergy_learning_martial_modifier }
		remove_character_modifier = fp2_double_synergy_learning_martial_modifier
	}
	if = {
		limit = { has_character_modifier = fp2_double_synergy_learning_stewardship_modifier }
		remove_character_modifier = fp2_double_synergy_learning_stewardship_modifier
	}
	if = {
		limit = { has_character_modifier = fp2_double_synergy_learning_intrigue_modifier }
		remove_character_modifier = fp2_double_synergy_learning_intrigue_modifier
	}
	if = {
		limit = { has_character_modifier = fp2_double_synergy_learning_learning_modifier }
		remove_character_modifier = fp2_double_synergy_learning_learning_modifier
	}
}

purchase_truce_interaction_work_out_truce_days_effect = {
	if = {
		limit = { always = scope:pt_sum_small }
		add_truce_both_ways = {
			character = $TARGET$
			days = purchase_truce_interaction_truce_days_small_value
			name = TRUCE_PURCHASED
		}
	}
	else_if = {
		limit = { always = scope:pt_sum_large }
		add_truce_both_ways = {
			character = $TARGET$
			days = purchase_truce_interaction_truce_days_large_value
			name = TRUCE_PURCHASED
		}
	}
	else = {
		add_truce_both_ways = {
			character = $TARGET$
			days = purchase_truce_interaction_truce_days_medium_value
			name = TRUCE_PURCHASED
		}
	}
}

purchase_truce_interaction_work_out_purchase_cost_effect = {
	scope:actor = {
		# Small cost.
		if = {
			limit = { always = scope:pt_sum_small }
			pay_short_term_gold = {
				target = scope:recipient
				gold = {
					value = 0
					add = {
						# If scope:actor makes more money, we use them as a base.
						if = {
							limit = { scope:actor.yearly_character_income > scope:recipient.yearly_character_income }
							add = scope:actor.purchase_truce_interaction_small_sum
						}
						# Otherwise, we take scope:recipient.
						else = { add = scope:recipient.purchase_truce_interaction_small_sum }
					}
				}
			}
		}
		# Large cost.
		else_if = {
			limit = { always = scope:pt_sum_large }
			pay_short_term_gold = {
				target = scope:recipient
				gold = {
					value = 0
					# If scope:actor makes more money, we use them as a base.
					if = {
						limit = { scope:actor.yearly_character_income > scope:recipient.yearly_character_income }
						add = scope:actor.purchase_truce_interaction_major_sum
					}
					# Otherwise, we take scope:recipient.
					else = { add = scope:recipient.purchase_truce_interaction_major_sum }
				}
			}
		}
		# Medium cost; we do this last as a fallback.
		else = {
			pay_short_term_gold = {
				target = scope:recipient
				gold = {
					value = 0
					# If scope:actor makes more money, we use them as a base.
					if = {
						limit = { scope:actor.yearly_character_income > scope:recipient.yearly_character_income }
						add = scope:actor.purchase_truce_interaction_medium_sum
					}
					# Otherwise, we take scope:recipient.
					else = { add = scope:recipient.purchase_truce_interaction_medium_sum }
				}
			}
		}
	}
}

purchase_truce_interaction_activate_catalyst_effect = {
}

clean_revolt_county_modifiers_from_faction_members_effect = {
	every_faction_county_member = {
		if = {
			if = {
				limit = { has_county_modifier = small_investment_in_revolt_modifier	}
				remove_county_modifier = small_investment_in_revolt_modifier
			}
			else_if = {
				limit = { has_county_modifier = medium_investment_in_revolt_modifier	}
				remove_county_modifier = medium_investment_in_revolt_modifier
			}
			else_if = {
				limit = { has_county_modifier = high_investment_in_revolt_modifier	}
				remove_county_modifier = high_investment_in_revolt_modifier
			}
		}
	}
}

generate_troops_from_revolt_county_modifiers_effect = {
	if = {
		limit = {
			scope:attacker = {
				joined_faction = {
					any_faction_county_member = {
						OR = {
							has_county_modifier = small_investment_in_revolt_modifier
							has_county_modifier = medium_investment_in_revolt_modifier
							has_county_modifier = high_investment_in_revolt_modifier
						}
					}
				}
			}
		}
		scope:attacker = {
			joined_faction = {
				every_faction_county_member = {
					limit = {
						OR = {
							has_county_modifier = small_investment_in_revolt_modifier
							has_county_modifier = medium_investment_in_revolt_modifier
							has_county_modifier = high_investment_in_revolt_modifier
						}
					}

					random_county_province = {
						save_scope_as = chosen_location
					}
					scope:attacker = {

						set_variable = {
							name = number_rebel_reinforcements
							value = {
								add = {
									if = {
										limit = { prev = { has_county_modifier = small_investment_in_revolt_modifier } }
										add = 250
									}
									if = {
										limit = { prev = {  has_county_modifier = medium_investment_in_revolt_modifier	} }
										add = 750
									}
									if = {
										limit = { prev = {  has_county_modifier = high_investment_in_revolt_modifier	} }
										add = 2000
									}
								}
							}
						}

						spawn_army = {
							name = event_troop_default_name
							levies = var:number_rebel_reinforcements
							location = scope:chosen_location
							war = scope:war
						}
					}
				}

		clean_revolt_county_modifiers_from_faction_members_effect = yes

			}
		}

	}
}

fp2_contract_assistance_war_pay_effect = {
	if = {
		limit = {
			has_fp2_dlc_trigger = yes
			any_war_participant = {
				has_variable = owed_contract_assistance_war
				var:owed_contract_assistance_war = scope:war
			}
		}
		every_war_participant = {
			limit = {
				has_variable = owed_contract_assistance_war
				var:owed_contract_assistance_war = scope:war
			}
			remove_variable = owed_contract_assistance_war
			save_scope_as = contract_assistance_helper
			if = {
				limit = { is_attacker_in_war = scope:war }
				scope:war.primary_attacker = { save_scope_as = contract_assistance_hirer }
			}
			else = {
				scope:war.primary_defender = { save_scope_as = contract_assistance_hirer }
			}
			if = {
				limit = {
					scope:war = {
						war_contribution = {
							target = scope:contract_assistance_helper
							value >= scope:contract_assistance_helper.var:owed_contract_assistance_contribution
						}
					}
				}
				scope:contract_assistance_hirer = {
					send_interface_message = {
						type = msg_contract_assistance_bad
						title = contract_assistance_war_msg_title
						left_icon = scope:contract_assistance_helper
						custom_tooltip = contract_assistance_war_msg_hirer_paid_desc
						pay_short_term_gold = {
							target = scope:contract_assistance_helper
							gold = scope:contract_assistance_helper.var:owed_contract_assistance_gold
						}
					}
				}
				scope:contract_assistance_helper = {
					send_interface_message = {
						type = msg_contract_assistance_good
						title = contract_assistance_war_msg_title
						left_icon = scope:contract_assistance_hirer
						custom_tooltip = contract_assistance_war_msg_helper_paid_desc
						show_as_tooltip = {
							scope:contract_assistance_hirer = {
								pay_short_term_gold = {
									target = scope:contract_assistance_helper
									gold = scope:contract_assistance_helper.var:owed_contract_assistance_gold
								}
							}
						}
					}
				}
			}
			else = {
				scope:contract_assistance_hirer = {
					send_interface_message = {
						type = msg_contract_assistance_good
						title = contract_assistance_war_msg_title
						left_icon = scope:contract_assistance_helper
						custom_tooltip = contract_assistance_war_msg_hirer_kept_desc
					}
				}
				scope:contract_assistance_helper = {
					add_character_flag = {
						flag = fp2_contract_assistance_failure
						years = 10
					}
					send_interface_message = {
						type = msg_contract_assistance_bad
						title = contract_assistance_war_msg_title
						left_icon = scope:contract_assistance_hirer
						custom_tooltip = contract_assistance_war_msg_helper_kept_desc
					}
				}
			}
			remove_variable = owed_contract_assistance_contribution
			remove_variable = owed_contract_assistance_gold
		}
	}
}

fp2_contract_assistance_invalidated_effect = {
	if = {
		limit = {
			has_fp2_dlc_trigger = yes
			any_war_participant = {
				has_variable = owed_contract_assistance_war
				var:owed_contract_assistance_war = scope:war
			}
		}
		every_war_participant = {
			limit = {
				has_variable = owed_contract_assistance_war
				var:owed_contract_assistance_war = scope:war
			}
			remove_variable = owed_contract_assistance_war
			remove_variable = owed_contract_assistance_contribution
			remove_variable = owed_contract_assistance_gold
			save_scope_as = contract_assistance_helper
			if = {
				limit = { is_attacker_in_war = scope:war }
				scope:war.primary_attacker = { save_scope_as = contract_assistance_hirer }
			}
			else = {
				scope:war.primary_defender = { save_scope_as = contract_assistance_hirer }
			}
			scope:contract_assistance_hirer = {
				send_interface_message = {
					type = msg_contract_assistance_good
					title = contract_assistance_war_msg_title
					left_icon = scope:contract_assistance_helper
					custom_tooltip = contract_assistance_war_msg_hirer_invalidated_desc
				}
			}
			scope:contract_assistance_helper = {
				send_interface_message = {
					type = msg_contract_assistance_bad
					title = contract_assistance_war_msg_title					
					left_icon = scope:contract_assistance_hirer
					custom_tooltip = contract_assistance_war_msg_helper_invalidated_desc
				}
			}
		}
	}
}
		
invite_special_guest_to_activity_effect = {
	if = {
		limit = {
			exists = var:special_guest
		}

		var:special_guest = {
			save_scope_as = the_special_guest
		}

		save_scope_as = sender

		scope:the_special_guest = {
			add_to_activity = scope:activity

			set_variable = {
				name = booked_for_a_party
				value = scope:sender
				days = 20
			}
		}
		
		remove_variable = special_guest
	}
}

##################################################
# Struggle
##################################################

fp2_struggle_apply_ai_agenda_effect = {
	
}

gifting_leads_towards_friendship_effect = {
	
}

##################################################
# CBs
##################################################



##################################################
# Yearlies
##################################################

fp2_lyonese_monk_return_territories_effect = {
}

fp2_lyonese_monk_cancel_chain_effect = {
}

##################################################
# Legacies
##################################################



##################################################
# Governments
##################################################



##################################################
# Casus Belli
##################################################

fp2_border_raid_damage_effect = {
	change_county_control = fp2_border_raid_control_change_value
	change_development_level = fp2_border_raid_development_change_value
	if = {
		limit = { exists = scope:raid_province }
		show_as_tooltip = { destroy_random_building_effect = yes }
	}
	scope:attacker = { add_gold = fp2_border_raid_gold_change_value }
}

##################################################
# Historical Artefacts
##################################################

create_artifact_goblet_chalice_of_dona_urraca = {
	$OWNER$ = { save_scope_as = owner }
}

create_artifact_various_aquamanile_santiago = {
	$OWNER$ = { save_scope_as = owner }
}

create_artifact_various_bells_santiago = {
	$OWNER$ = { save_scope_as = owner }
	set_artifact_rarity_illustrious = yes
	scope:owner = {
		create_artifact = {
			name = fp2_santiago_bells
			description = fp2_santiago_bells_desc
			template = fp2_santiago_bells_template
			type = miscellaneous_when_not_court
			visuals = fp2_santiago_bells
			wealth = scope:wealth
			quality = scope:quality
			modifier = bells_of_santiago_modifier
			decaying = no
			save_scope_as = newly_created_artifact
		}
	}
	scope:newly_created_artifact = {
		set_variable = {
			name = dlc_potential_court_artefact
			value = yes
		}
		set_variable = {
			name = historical_unique_artifact
			value = yes
		}
		#
	}
}

create_artifact_fp2_votive_crowns_effect = {
	$OWNER$ = { save_scope_as = owner }
	set_artifact_rarity_famed = yes
	scope:owner = {
		create_artifact = {
			name = fp2_votive_crowns
			description = fp2_votive_crowns_desc
			template = crown_christian_relic_template
			type = regalia
			visuals = fp2_votive_crowns
			wealth = scope:wealth
			quality = scope:quality
			modifier = votive_crown_modifier
			save_scope_as = newly_created_artifact
		}
	}
	scope:newly_created_artifact = {
		set_variable = {
			name = dlc_potential_court_artefact
			value = yes
		}
	}
}

##################################################
# Other Artefacts
##################################################

create_artifact_fp2_armillary_sphere_core_effect = {
	create_artifact = {	
		name = fp2_armillary_sphere
		# Description will be regenerated in the post-creation effects, since we need to nab materials.
		description = placeholder 
		creator = scope:maker
		type = $TYPE$
		visuals = fp2_armillary_sphere
		wealth = scope:wealth
		quality = scope:quality
		modifier = artifact_placeholder_modifier
		save_scope_as = newly_created_artifact
	}
}

create_artifact_fp2_armillary_sphere_effect = {
	# Set up general scopes.
	$OWNER$ = { save_scope_as = owner }
	$MAKER$ = { save_scope_as = maker }
	# Begin creating.
	hidden_effect_new_object = {
		# Get artifact quality, wealth, and materials.
		get_artifact_quality_effect = yes
		get_artifact_wealth_effect = yes
		# Create the artifact.
		scope:owner = {
			if = {
				limit = { has_royal_court = yes }
				create_artifact_fp2_armillary_sphere_core_effect = { TYPE = scientific_apparatus }
			}
			else = {
				create_artifact_fp2_armillary_sphere_core_effect = { TYPE = miscellaneous_when_not_court }
			}
		}
		scope:newly_created_artifact = {
			# Flag this as something that can be reforged for free, if relevant.
			if = {
				limit = {
					$OWNER$ = { has_royal_court = no }
				}
				set_variable = {
					name = dlc_potential_court_artefact
					value = yes
				}
			}
			set_artifact_feature_group = generic_material_wood
			set_artifact_feature_group = decoration_material_inlay
			set_artifact_description = fp2_armillary_sphere_desc
			# Let's add modifiers!
			add_scaled_artifact_modifier_learning_lifestyle_xp_effect = yes
			if = {
				limit = {
					OR = {
						rarity = famed
						rarity = illustrious
					}
				}
				add_artifact_modifier = artifact_learning_per_prestige_level_modifier
			}
			add_scaled_artifact_modifier_grandeur_big_effect = yes
			# Remove the placeholder.
			remove_artifact_modifier = artifact_placeholder_modifier
		}
	}
}

create_artifact_fp2_2p_chess_board_effect = {
	$OWNER$ = { save_scope_as = owner }
	set_artifact_rarity_common = yes
	create_artifact = {
		name = fp2_2p_chess_board
		description = fp2_2p_chess_board_desc
		type = miscellaneous_when_not_court
		visuals = fp2_2p_chess_board
		wealth = scope:wealth
		quality = scope:quality
		modifier = artifact_stress_gain_2_modifier
		save_scope_as = newly_created_artifact
	}
	scope:newly_created_artifact = {
		# Flag this as something that can be reforged for free.
		set_variable = {
			name = dlc_potential_court_artefact
			value = yes
		}
		# And used in board games.
		set_variable = {
			name = can_be_used_for_board_games
			value = yes
		}
		hidden_effect = { add_artifact_modifier = artifact_befriend_scheme_power_add_2_modifier }
	}
}

create_artifact_fp2_4p_chess_board_effect = {
	$OWNER$ = { save_scope_as = owner }
	set_artifact_rarity_masterwork = yes
	create_artifact = {
		name = fp2_4p_chess_board
		description = fp2_4p_chess_board_desc
		type = miscellaneous_when_not_court
		visuals = fp2_4p_chess_board
		wealth = scope:wealth
		quality = scope:quality
		modifier = artifact_stress_gain_4_modifier
		save_scope_as = newly_created_artifact
	}
	scope:newly_created_artifact = {
		# Flag this as something that can be reforged for free.
		set_variable = {
			name = dlc_potential_court_artefact
			value = yes
		}
		# And used in board games.
		set_variable = {
			name = can_be_used_for_board_games
			value = yes
		}
		hidden_effect = { add_artifact_modifier = artifact_befriend_scheme_power_add_4_modifier }
	}
}

create_artifact_fp2_andalusian_aquamanile_core_effect = {
	create_artifact = {
		name = fp2_andalusian_aquamanile
		# Description will be regenerated in the post-creation effects, since we need to nab materials.
		description = placeholder 
		type = $TYPE$
		visuals = fp2_andalusian_aquamanile
		wealth = scope:wealth
		quality = scope:quality
		modifier = artifact_negate_health_penalty_add_2_modifier
		save_scope_as = newly_created_artifact
	}
}

create_artifact_fp2_andalusian_aquamanile_effect = {
	# Set up general scopes.
	$OWNER$ = { save_scope_as = owner }
	$SMITH$ = { save_scope_as = maker }
	# Begin creating.
}

fp2_enforce_truce_opinion_effect = {
}

##############################################################
# Generic Scripted Effect: Get Lowest/Highest Player Skill
# By Hugo Cortell
################################ 

# (simplified for readability)

get_lowest_player_skill_effect = {
	save_scope_value_as = {
		name = lowest_player_skill
		value = flag:diplomacy
	}
	save_scope_value_as = {
		name = lowest_player_skill_value
		value = diplomacy
	}
	if = {
		limit = { martial < scope:lowest_player_skill_value }
		save_scope_value_as = {
			name = lowest_player_skill
			value = flag:martial
		}
		save_scope_value_as = {
			name = lowest_player_skill_value
			value = martial
		}
	}
	if = {
		limit = { stewardship < scope:lowest_player_skill_value }
		save_scope_value_as = {
			name = lowest_player_skill
			value = flag:stewardship
		}
		save_scope_value_as = {
			name = lowest_player_skill_value
			value = stewardship
		}
	}
	if = {
		limit = { intrigue < scope:lowest_player_skill_value }
		save_scope_value_as = {
			name = lowest_player_skill
			value = flag:intrigue
		}
		save_scope_value_as = {
			name = lowest_player_skill_value
			value = intrigue
		}
	}
	if = {
		limit = { learning < scope:lowest_player_skill_value }
		save_scope_value_as = {
			name = lowest_player_skill
			value = flag:learning
		}
		save_scope_value_as = {
			name = lowest_player_skill_value
			value = learning
		}
	}
}

get_highest_player_skill_effect = {
	save_scope_value_as = {
		name = highest_player_skill
		value = flag:diplomacy
	}
	save_scope_value_as = {
		name = highest_player_skill_value
		value = diplomacy
	}
	if = {
		limit = { martial > scope:highest_player_skill_value }
		save_scope_value_as = {
			name = highest_player_skill
			value = flag:martial
		}
		save_scope_value_as = {
			name = highest_player_skill_value
			value = martial
		}
	}
	if = {
		limit = { stewardship > scope:highest_player_skill_value }
		save_scope_value_as = {
			name = highest_player_skill
			value = flag:stewardship
		}
		save_scope_value_as = {
			name = highest_player_skill_value
			value = stewardship
		}
	}
	if = {
		limit = { intrigue > scope:highest_player_skill_value }
		save_scope_value_as = {
			name = highest_player_skill
			value = flag:intrigue
		}
		save_scope_value_as = {
			name = highest_player_skill_value
			value = intrigue
		}
	}
	if = {
		limit = { learning > scope:highest_player_skill_value }
		save_scope_value_as = {
			name = highest_player_skill
			value = flag:learning
		}
		save_scope_value_as = {
			name = highest_player_skill_value
			value = learning
		}
	}
}

fp2_struggle_found_kingdom_toledo_empire_effect = {
	
}

fp2_struggle_hostility_ender_effect = {
	give_nickname = nick_the_conquistador
}

fp2_struggle_compromise_ender_effect = {
}

fp2_struggle_compromise_tooltip_effect = {
	
}

fp2_struggle_conciliation_ender_effect = {
}

fp2_struggle_conciliation_tooltip_effect = {
	
}
