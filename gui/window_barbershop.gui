template Barbershop_Font_Size_Huge {
	fontsize = 33
	size = { 0 43 }
}

types BarbershopTypes {
	type barbershop_color_picker = colorpicker
	{
		datacontext = "[BarbershopWindow.GetColorPickerHandler]"
		size = { 400 270 }

		vbox = {
			name = "colorpicker_window"

			# even though it's hidden it's required or will crash
			widget = {
				name = "preview_icon"
				visible = no
				size = { 298 50 }

				icon = {
					name = "colorpicker_button"
					visible = no
					size = { 298 50 }
					shaderfile = "gfx/FX/pdxgui_colorpicker.shader"
					effectname = "PdxGuiColorButton"
					texture = "gfx/editor_gui/editor_transparent.dds"
					alwaystransparent = no
					spriteType = corneredtiled
				}

				button_standard_clean = {
					name = "palette_border"
					parentanchor = center
					alwaystransparent = yes
					size = { 302 54 }
				}
			}

			hbox = {
				spacing = 10

				widget = {
					name = "palette_icon"
					size = { 256 256 }

					icon = {
						name = "color_area"
						size = { 256 256 }
						shaderfile = "gfx/FX/pdxgui_colorpicker.shader"
						effectname = "PdxGuiColorArea"
						texture = "gfx/editor_gui/editor_transparent.dds"
						alwaystransparent = no
						spriteType = corneredtiled

						icon = {
							name = "color_area_picker"
							position = { 0 0 }
							widgetanchor = center|center
							alwaystransparent = yes
							size = { 15 15 }
							texture = "gfx/interface/icons/color_picker.dds"
							spriteType = corneredstretched
						}
					}

					button_standard_clean = {
						name = "palette_border"
						parentanchor = center
						alwaystransparent = yes
						size = { 260 260 }
					}
				}

				vbox = {
					vbox = {
						button_clear = {
							name = "revert_to_default"
							size = { 36 36 }
							onclick = "[BarbershopColorPickerHandler.ResetColorToNatural]"

							tooltip = "BARBERSHOP_RESET_NATURAL_COLORS_TT"
							using = tooltip_ne
						}
					}

					widget = {
						name = "spectrum_icon"
						size = { 32 220 }

						icon = {
							name = "color_slider"
							size = { 32 220 }
							shaderfile = "gfx/FX/pdxgui_colorpicker.shader"
							effectname = "PdxGuiColorSlider"
							texture = "gfx/editor_gui/editor_transparent.dds"
							alwaystransparent = no
							spriteType = corneredtiled

							icon = {
								name = "color_slider_picker"
								position = { 0 40 }
								alwaystransparent = yes
								size = { 32 2 }
								texture = "gfx/interface/icons/color_picker_line.dds"
								spriteType = corneredtiled
								spriteborder = { 1 1 }
							}
						}

						button_standard_clean = {
							name = "spectrum_border"
							parentanchor = center
							alwaystransparent = yes
							size = { 36 224 }
						}
					}
				}
			}
		}

		using = dummy_color_picker_buttons
	}
	type barbershop_button_rotate_left = button {
		texture = "gfx/interface/buttons/button_standard.dds"
        spriteType = Corneredtiled
        spriteborder = { 4 4 }
        framesize = { 252 80 }

		button_icon = {
            using = ButtonStandardIconProperties
            size = { 20 20 }

			texture = "gfx/interface/icons/flat_icons/window_back.dds"
		}
		using = tooltip_ne
    }
	type barbershop_button_rotate_right = button {
		texture = "gfx/interface/buttons/button_standard.dds"
        spriteType = Corneredtiled
        spriteborder = { 4 4 }
        framesize = { 252 80 }

		button_icon = {
            using = ButtonStandardIconProperties
            size = { 20 20 }

            mirror = horizontal
			texture = "gfx/interface/icons/flat_icons/window_back.dds"
		}
		using = tooltip_ne
    }
	type barbershop_button_zoom_in = button_standard {
        text = ""
		using = tooltip_ne

		button_icon = {
            using = ButtonStandardIconProperties
            size = { 20 20 }

			texture = "gfx/interface/icons/flat_icons/plus.dds"
		}
    }
	type barbershop_button_zoom_out = button_standard {
        text = ""
		using = tooltip_ne

		button_icon = {
            using = ButtonStandardIconProperties
            size = { 20 20 }

			texture = "gfx/interface/icons/flat_icons/minus.dds"
		}
    }
    type barbershop_visibility_toggle = checkbutton {
		name = "button_checkbox"
		texture = "gfx/interface/icons/flat_icons/observer.dds"
		size = { 30 30 }
		using = Master_Button_Modify_Texture
	}
	type barbershop_coa_realm = hbox {
		vbox = {
			coa_realm_huge_crown = {
				blockoverride "coa_button" {
					alwaystransparent = yes
				}
			}
		}
		vbox = {
			layoutpolicy_vertical = expanding
			hbox = {
				layoutpolicy_horizontal = expanding
				expand = {}
				button_close = {
					name = "button_close_coa_realm"
					visible = "[BarbershopCoAHandler.IsTitleWindowHovered]"
					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
					onclick = "[BarbershopCoAHandler.ToggleTitle]"
				}
			}
			expand = {}
			text_label_left = {
				visible = "[BarbershopCoAHandler.IsTitleTextVisible]"
				using = Barbershop_Font_Size_Huge
				text = "[Character.GetPrimaryTitle.GetNameNoTooltip|U]"
			}
			hbox = {
				layoutpolicy_horizontal = expanding
				button_checkbox_label = {
					name = "checkbox_coa_show_text"
		            visible = "[BarbershopCoAHandler.IsTitleWindowHovered]"
					onclick = "[BarbershopCoAHandler.ToggleTitleText]"

					blockoverride "checkbox"
					{
						checked = "[BarbershopCoAHandler.IsTitleTextVisible]"
					}
					blockoverride "text"
					{
						text = "[Character.GetPrimaryTitle.GetNameNoTooltip|U]"
					}
					background = {
						using = Background_Area_Dark
					}
					tooltip = "BARBERSHOP_COA_TOGGLE_TEXT_TT"
				}
				expand = {}
			}
			expand = {}
		}
	}
	type barbershop_coa_house = hbox {
		vbox = {
			coa_house_huge = {
				blockoverride "coa_button" {
					alwaystransparent = yes
				}
			}
		}
		vbox = {
			layoutpolicy_vertical = expanding
			hbox = {
				layoutpolicy_horizontal = expanding
				expand = {}
				button_close = {
					name = "button_close_coa_realm"
					visible = "[BarbershopCoAHandler.IsHouseWindowHovered]"
					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
					onclick = "[BarbershopCoAHandler.ToggleHouse]"
				}
			}
			expand = {}
			text_label_left = {
				visible = "[BarbershopCoAHandler.IsHouseTextVisible]"
				using = Barbershop_Font_Size_Huge
				text = "HOUSE_VIEW_NAME_WITH_HOUSE"
			}
			hbox = {
				layoutpolicy_horizontal = expanding
				button_checkbox_label = {
					name = "checkbox_coa_show_text"
		            visible = "[BarbershopCoAHandler.IsHouseWindowHovered]"
					onclick = "[BarbershopCoAHandler.ToggleHouseText]"

					blockoverride "checkbox"
					{
						checked = "[BarbershopCoAHandler.IsHouseTextVisible]"
					}
					blockoverride "text"
					{
						text = "HOUSE_VIEW_NAME_WITH_HOUSE"
					}
					background = {
						using = Background_Area_Dark
					}
					tooltip = "BARBERSHOP_COA_TOGGLE_TEXT_TT"
				}
				expand = {}
			}
			expand = {}
		}
	}
	type barbershop_coa_dynasty = hbox {
		vbox = {
			coa_dynasty_huge = {
				blockoverride "coa_button" {
					alwaystransparent = yes
				}
			}
		}
		vbox = {
			layoutpolicy_vertical = expanding
			hbox = {
				layoutpolicy_horizontal = expanding
				expand = {}
				button_close = {
					name = "button_close_coa_realm"
					visible = "[BarbershopCoAHandler.IsDynastyWindowHovered]"
					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
					onclick = "[BarbershopCoAHandler.ToggleDynasty]"
				}
			}
			expand = {}
			text_label_left = {
				visible = "[BarbershopCoAHandler.IsDynastyTextVisible]"
				using = Barbershop_Font_Size_Huge
				text = "HOUSE_VIEW_PART_OF_DYNASTY"
			}
			hbox = {
				layoutpolicy_horizontal = expanding
				button_checkbox_label = {
					name = "checkbox_coa_show_text"
		            visible = "[BarbershopCoAHandler.IsDynastyWindowHovered]"
					onclick = "[BarbershopCoAHandler.ToggleDynastyText]"

					blockoverride "checkbox"
					{
						checked = "[BarbershopCoAHandler.IsDynastyTextVisible]"
					}
					blockoverride "text"
					{
						text = "HOUSE_VIEW_PART_OF_DYNASTY"
					}
					background = {
						using = Background_Area_Dark
					}
					tooltip = "BARBERSHOP_COA_TOGGLE_TEXT_TT"
				}
				expand = {}
			}
			expand = {}
		}
	}
	type barbershop_coa_window = window {
		name = "coa_window"
		movable = yes
		layer = middle
		allow_outside = yes
		size = { 500 200 }

		background = {
			block "coa_window_frame" {
				visible = no
			}
			using = Background_Area_ExtraDark
			alpha = 0.8
		}

		background = {
			block "coa_window_frame" {
				visible = no
			}
			using = Background_Frame
			color = { 0.9 0.9 0.9 0.25 }
			margin = { -4 -4 }
		}

		state = {
			name = _show
			on_start = "[PdxGuiWidget.StackTop]"
		}
	}
	type barbershop_name_window = window {
		name = "character_name_window"
		datacontext = "[BarbershopCharacter.GetCharacter]"
		datacontext = "[BarbershopCharacter.GetPortrait]"
		visible = "[And( BarbershopCharacter.IsCharacterVisible, And( BarbershopCharacter.IsNameVisible, BarbershopWindow.IsTabSceneVisible )))]"
		position = "[BarbershopPortrait.GetPortraitPosition]"
		size = { 500 50 }
		movable = yes
		layer = middle
		allow_outside = yes

		text_label_center = {
			layoutpolicy_horizontal = expanding
			using = Font_Size_Big
			text = "[Character.GetUINameNotMeNoTooltip]"
		}
	}
	type barbershop_portrait = portrait_button {
		using = portrait_base
		size = { 1920 1400 }
		alwaystransparent = yes

		blockoverride "grayscale" {}
		blockoverride "portrait_button_template_onmouseenter" {}
		blockoverride "portrait_button_template_onmouseleave" {}
		blockoverride "portrait_button_template_onclick" {}
		blockoverride "portrait_button_template_onrightclick" {}
		blockoverride "portrait_button_template_tooltip" {}
	}
	type barbershop_portrait_window = window {
		name = "portrait_window"
		datacontext = "[BarbershopCharacter.GetPortrait]"
		datacontext = "[BarbershopCharacter.GetCameraSettings]"
		visible = "[BarbershopCharacter.IsCharacterVisible]"

		size = { 8% 70% }
		movable = yes
		layer = middle
		allow_outside = yes

		onmousehierarchyenter = "[BarbershopPortrait.SetBeingHovered('(bool)yes')]"
		onmousehierarchyleave = "[BarbershopPortrait.SetBeingHovered('(bool)no')]"

		state = {
			name = _show
			next = reset_position
		}
		state = {
			name = reset_position
			position = "[BarbershopPortrait.GetPortraitPosition]"
			trigger_when = "[BarbershopPortrait.ShouldResetPosition]"
			next = reset_stack
		}
		state = {
			name = reset_stack
			on_start = "[BarbershopPortrait.StackWindowOnTop( PdxGuiWidget.AccessSelf )]"
			trigger_when = "[BarbershopPortrait.ShouldStackTop]"
		}

		position = "[BarbershopPortrait.GetPortraitPosition]"

		icon = {
			name = "portrait_glow"
			visible = "[And( Not( BarbershopPortrait.IsBaby ), BarbershopPortrait.IsBeingHovered )]"
			parentanchor = bottom|hcenter
			position = { 0 -40 }
			size = "[BarbershopCharacter.GetGlowSize]"
			color = { 0.9 0.8 0.6 0.6 }

			using = Background_Portrait_Glow

			state = {
				name = _show
				duration = 0.1
				using = Animation_Curve_Default
				alpha = 1
			}

			state = {
				name = _hide
				duration = 0.3
				using = Animation_Curve_Default
				alpha = 0
				delay = 0.05
			}
		}

		icon = {
			name = "portrait_glow_baby"
			visible = "[And( BarbershopPortrait.IsBaby, BarbershopPortrait.IsBeingHovered )]"
			parentanchor = bottom|hcenter
			position = { 0 80 }
			size = "[BarbershopCharacter.GetGlowSize]"
			color = { 0.9 0.8 0.6 0.6 }

			using = Background_Portrait_Glow

			state = {
				name = _show
				duration = 0.1
				using = Animation_Curve_Default
				alpha = 1
			}

			state = {
				name = _hide
				duration = 0.3
				using = Animation_Curve_Default
				alpha = 0
				delay = 0.05
			}
		}

		icon = {
			name = "portrait_shadow_adult"
			visible = "[And( BarbershopWindow.HasPortraitShadow, Not(BarbershopPortrait.IsBaby) )]"
			parentanchor = center
			position = { 0 341 }
			scale = "[BarbershopWindow.GetPortraitShadowScale]"
			texture = "gfx/interface/frontend/portrait_main_menu_shadow.dds"
		}

		icon = {
			name = "portrait_shadow_toddler"
			visible = "[And( BarbershopWindow.HasPortraitShadow, BarbershopPortrait.IsBaby )]"
			parentanchor = center
			position = { -10 357 }
			scale = 0.35
			texture = "gfx/interface/frontend/portrait_main_menu_shadow.dds"
		}

		barbershop_portrait = {
			name = "portrait"
			parentanchor = center
			position = { 0 0 }
			scale = "[ScaleToFitElementInside('(int32)1920', '(int32)1080')]"
			portrait_texture = "[BarbershopCharacter.GetTexture(PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
			mask = "gfx/portraits/portrait_mask_solid.dds"
		}

		vbox = {
			margin_top = 600
			hbox = {
				name = "portrait_control_panel"
				visible = "[BarbershopPortrait.IsBeingHovered]"
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding
				maximumsize = { 120 30 }

				barbershop_button_rotate_left = {
					name = "rotate_left"
					onclick = "[BarbershopCameraSettings.DecrementRotation]"
					size = { 30 30 }

					tooltip = "BARBERSHOP_ROTATE_LEFT_TT"
				}

				expand = {}

				barbershop_button_rotate_right = {
					name = "rotate_right"
					onclick = "[BarbershopCameraSettings.IncrementRotation]"
					size = { 30 30 }

					tooltip = "BARBERSHOP_ROTATE_RIGHT_TT"
				}
			}
		}
	}
	type barbershop_character_list_item = hbox {
		datacontext = "[BarbershopCharacter.GetCharacter]"
		datacontext = "[BarbershopCharacter.GetPortrait]"
		datacontext = "[BarbershopCharacter.GetPoseSettings]"
		layoutpolicy_horizontal = expanding
		margin = { 0 5 }

		minimumsize = { 0 102 }

		vbox = {
			name = "portrait_area"
			layoutpolicy_vertical = expanding
			alpha = "[Select_float( BarbershopCharacter.IsCharacterVisible, '(float)1.0', '(float)0.6' )]"

			portrait_head_small = {}
			expand = {}
		}

		vbox = {
			name = "main_content"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin_left = 20

			# Content top row
			hbox = {
				name = "heading"
				layoutpolicy_horizontal = expanding

				# Toggle name
				button_checkbox_label = {
					name = "toggle_name_checkbox"

					onclick = "[BarbershopCharacter.ToggleName]"
					enabled = "[BarbershopCharacter.IsCharacterVisible]"

					blockoverride "checkbox"
					{
						checked = "[BarbershopCharacter.IsNameVisible]"
					}
					blockoverride "text"
					{
						maximumsize = { 260 30 }
						text = "[Character.GetUINameNoTooltip|U]"
					}
					background = {
						using = Background_Area_Dark
					}
					tooltip = "BARBERSHOP_TOGGLE_NAME_TT"
				}

				expand = {}

				# Edit appearance
				button_barbershop = {
					name = "edit_appearance"
					visible = "[Character.CanCustomizePortrait]"
					size = { 30 30 }
					enabled = "[BarbershopCharacter.IsCharacterVisible]"
					onclick = "[BarbershopCharacter.SetAsEditCharacter]"
					tooltip = "BARBERSHOP_TAB_APPEARANCE_TT"
				}

				# Visibility toggle
				barbershop_visibility_toggle = {
					onclick = "[BarbershopCharacter.TogglePortrait]"
					checked = "[BarbershopCharacter.IsCharacterVisible]"
					tooltip = "BARBERSHOP_TOGGLE_CHARACTER_TT"

					icon = {
						visible = "[Not(BarbershopCharacter.IsCharacterVisible)]"
						size = { 30 30 }
						using = Master_Button_Modify_Texture
						texture = "gfx/interface/icons/flat_icons/window_close.dds"
					}
				}
			}

			# Pose drop-down
			vbox = {
				datacontext = "[BarbershopWindow.GetPoseDropDown]"
				visible = "[BarbershopCharacter.IsCharacterVisible]"
				layoutpolicy_vertical = expanding

				hbox = {
					spacing = 5
					button_search = {
						size = { 30 30 }
						onclick = "[BarbershopPoseSettings.ToggleTextSearch]"

						tooltip = "BARBERSHOP_FUZZY_SEARCH_TT"
						using = tooltip_ne
					}

					dropdown_menu_standard =
					{
						blockoverride "dropdown_properties"
						{
							datamodel = "[BarbershopPoseDropDown.GetItems]"
							onselectionchanged = "[BarbershopPoseSettings.OnSelect]"
							selectedindex = "[BarbershopPoseSettings.GetHoveredIndex]"
						}

						blockoverride "dropdown_size"
						{
							size = { 300 32 }
						}

						blockoverride "dropdown_list_maxsize"
						{
							maximumsize = { 291 320 }
						}

						blockoverride "dropdown_active_item_properties"
						{
							text = "[BarbershopPoseItem.GetName]"
						}

						blockoverride "dropdown_item_properties"
						{
							onmousehierarchyenter = "[BarbershopPoseSettings.SetHoveredPose( BarbershopPoseItem.GetIndex )]"
							text = "[BarbershopPoseItem.GetName]"
						}

						blockoverride "dropdown_list_properties"
						{
							onmousehierarchyenter = "[BarbershopPoseSettings.HideTextSearch]"
							onmousehierarchyleave = "[BarbershopPoseSettings.ResetHoveredPose]"
						}
					}
				}

				editbox_standard = {
					visible = "[BarbershopPoseSettings.IsTextSearchVisible]"
					layoutpolicy_horizontal = expanding

					blockoverride "editbox_properties"
					{
						name = "input"
						text = "[BarbershopPoseSettings.GetSearchFilter]"
						focus_on_visible = yes
						onreturnpressed = "[BarbershopPoseSettings.OnDone]"
						ontextedited = "[BarbershopPoseSettings.OnEdit]"
					}
				}

				scrollbox = {
					name = "filtered_list"
					visible = "[BarbershopPoseSettings.HasItemsFiltered]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					size = { 120 204 }

					blockoverride "scrollbox_content"
					{
						vbox = {
							datamodel = "[BarbershopPoseDropDown.GetItemsFiltered]"

							layoutpolicy_horizontal = expanding
							spacing = 3

							item = {
								button_standard = {
									name = "fuzzy_item_button"
									layoutpolicy_horizontal = expanding
									size = { 0 24 }

									onclick = "[BarbershopPoseSettings.OnSelectFiltered( PdxGuiWidget.GetIndexInDataModel )]"
									onmousehierarchyenter = "[BarbershopPoseSettings.SetHoveredPose( BarbershopPoseItem.GetIndex )]"
									onmousehierarchyleave = "[BarbershopPoseSettings.ResetHoveredPose]"

									button_ignore = none
									text_single = {
										text = "[BarbershopPoseItem.GetName]"
										parentanchor = vcenter|left
										position = { 8 0 }
										align = nobaseline
										default_format = "high"
									}
								}
							}
						}
					}
				}
				expand = {}
			}
			expand = {}
		}
		expand = {}
	}
}

window = {
	name = "window_barbershop"
	datacontext = "[BarbershopWindow.GetScreenshotHandler]"
	datacontext = "[BarbershopWindow.GetMainCharacter]"
	datacontext = "[GetIllustration( 'character_view_bg' )]"
	size = { 100% 100% }
	movable = no
	layer = middle

	state = {
		name = _show
		using = Animation_FadeIn_Standard
		using = Sound_WindowShow_Standard
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Standard
		using = Sound_WindowHide_Standard
	}

	### HIDE ALL UI FULLSCREEN ###
	button_normal = {
        visible = "[And( Not(BarbershopScreenshotHandler.IsScreenshotButtonVisible), Not(BarbershopScreenshotHandler.IsScreenshotBeingTaken) )]"
        size = { 100% 100% }
        shortcut = "close_window"
        onclick = "[BarbershopScreenshotHandler.ToggleScreenshotButtons]"
    }

	### ALL CHARACTER PORTRAITS ###
	widget = {
		name = "portrait_scene"
		size = { 1920 1080 }
		scale = "[ScaleToFitElementInside('(int32)1920', '(int32)1080')]"

		icon = {
			parentanchor = center
			size = { 100% 100% }
			texture = "[BarbershopWindow.GetCurrentBackground]"

			modify_texture = {
				name = "fade"
				texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
				blend_mode = alphamultiply
				translate_uv = { 1 0 }
				alpha = 0
			}
		}

		datamodel = "[BarbershopWindow.GetBarbershopCharacters]"
		item = {
			barbershop_portrait_window = {}
		}

		### MOVABLE COAT OF ARMS ###
		datacontext = "[BarbershopWindow.GetCoAHandler]"
		barbershop_coa_window = {
			visible = "[And( BarbershopWindow.IsTabSceneVisible, BarbershopCoAHandler.IsTitleVisible )]"
			position = { 520 80 }

			onmousehierarchyenter = "[BarbershopCoAHandler.SetHoverTitleWindow('(bool)yes')]"
			onmousehierarchyleave = "[BarbershopCoAHandler.SetHoverTitleWindow('(bool)no')]"

			blockoverride "coa_window_frame"
			{
				visible = "[BarbershopCoAHandler.IsTitleWindowHovered]"
			}
			hbox = {
				barbershop_coa_realm = {
					datacontext = "[BarbershopWindow.GetMainCharacter.GetPrimaryTitle]"
				}
			}
		}
		barbershop_coa_window = {
			visible = "[And( BarbershopWindow.IsTabSceneVisible, BarbershopCoAHandler.IsHouseVisible )]"
			position = { 520 260 }

			onmousehierarchyenter = "[BarbershopCoAHandler.SetHoverHouseWindow('(bool)yes')]"
			onmousehierarchyleave = "[BarbershopCoAHandler.SetHoverHouseWindow('(bool)no')]"

			blockoverride "coa_window_frame"
			{
				visible = "[BarbershopCoAHandler.IsHouseWindowHovered]"
			}
			hbox = {
				barbershop_coa_house = {
					datacontext = "[BarbershopWindow.GetMainCharacter.GetHouse]"
				}
			}
		}
		barbershop_coa_window = {
			visible = "[And( BarbershopWindow.IsTabSceneVisible, BarbershopCoAHandler.IsDynastyVisible )]"
			position = { 520 430 }

			onmousehierarchyenter = "[BarbershopCoAHandler.SetHoverDynastyWindow('(bool)yes')]"
			onmousehierarchyleave = "[BarbershopCoAHandler.SetHoverDynastyWindow('(bool)no')]"

			blockoverride "coa_window_frame"
			{
				visible = "[BarbershopCoAHandler.IsDynastyWindowHovered]"
			}
			hbox = {
				barbershop_coa_dynasty = {
					datacontext = "[BarbershopWindow.GetMainCharacter.GetDynasty]"
				}
			}
		}
	}

    widget = {
		size = { 1920 1080 }
		scale = "[ScaleToFitElementInside('(int32)1920', '(int32)1080')]"
		datamodel = "[BarbershopWindow.GetBarbershopCharacters]"
		item = {
			barbershop_name_window = {}
		}
    }

	### SCENE TAB - Screenshot notification ###
	container = {
		name = "screenshot_notification"
		visible = "[BarbershopScreenshotHandler.IsScreenshotNotificationVisible]"
		layer = confirmation
		parentanchor = center

		state = {
			name = _show
			next = pending
			using = Animation_FadeIn_Standard
		}

		state = {
			name = pending
			next = hide
			duration = 1
			on_finish = "[BarbershopScreenshotHandler.OnFinishedScreenshotNotification]"
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Quick
		}

		text_label_center = {
			name = "screenshot_text"
			text = "SCREENSHOT_TAKEN"
			position = { 0 -20 }
		}
	}

	### SCENE TAB - Hide UI notification ###
	container = {
		name = "hide_ui_notification"
		visible = "[BarbershopScreenshotHandler.IsShowHideUINotificationVisible]"
		layer = confirmation
		parentanchor = center

		state = {
			name = _show
			next = pending
			using = Animation_FadeIn_Standard
		}

		state = {
			name = pending
			next = hide
			duration = 2
			on_finish = "[BarbershopScreenshotHandler.OnFinishedShowHideUINotification]"
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Quick
		}

		text_label_center = {
			name = "hide_ui_text"
			text = "ROYAL_COURT_SCREENSHOT_HIDE_UI_NOTIFICATION"
			position = { 0 -20 }
		}
	}

	### SCENE TAB - Screenshot button ###
	vbox = {
		expand = {}

		name = "screenshot_box"
		datacontext = "[BarbershopWindow.GetScreenshotHandler]"
		visible = "[And( BarbershopScreenshotHandler.IsScreenshotButtonVisible, BarbershopWindow.IsTabSceneVisible )]"
		margin_bottom = 30

		hbox = {
			min_width = 362
			spacing = 22

			button_standard = {
				name = "hide_ui_button"
				visible = "[Not(BarbershopScreenshotHandler.IsScreenshotModeActive)]"
				text = "ROYAL_COURT_SCREENSHOT_HIDE_UI"
				onclick = "[BarbershopScreenshotHandler.ToggleScreenshotButtons]"
				tooltip = "ROYAL_COURT_SCREENSHOT_HIDE_UI_TOOLTIP"
				using = tooltip_ne
			}

			button_standard = {
				name = "screenshot_button"
				visible = "[BarbershopScreenshotHandler.IsScreenshotButtonVisible]"
				button_capture = {
					size = { 36 36 }
					position = { 2 -2 }
				}
				text = "BARBERSHOP_SCREENSHOT"
				onclick = "[BarbershopScreenshotHandler.TakeScreenshot]"
				onmousehierarchyenter = "[BarbershopScreenshotHandler.EnterScreenshotMode]"
				onmousehierarchyleave = "[BarbershopScreenshotHandler.ExitScreenshotMode]"
				tooltip = "BARBERSHOP_SCREENSHOT_TT"
				using = tooltip_ne
			}
		}
	}


	vbox = {
		layoutpolicy_vertical = expanding
		layoutpolicy_horizontal = expanding

		margin_top = 8

		#### WINDOW HEADER ####
		header_standard = {
			datacontext = "[BarbershopWindow.GetScreenshotHandler]"
			visible = "[BarbershopScreenshotHandler.AreTabsVisible]"
			layoutpolicy_horizontal = expanding

	        state = {
	            name = _show
	            using = Animation_FadeIn_Quick
	        }

			state = {
	            name = _hide
	            using = Animation_FadeOut_Quick
	        }

			blockoverride "header_text"
			{
				text = "BARBERSHOP_TITLE"
			}

			blockoverride "button_close"
			{
				onclick = "[BarbershopWindow.CloseWithoutSave]"
			}

		    background = {
		        texture = "gfx/interface/component_tiles/tile_window_background_no_edge.dds"
		        spriteType = Corneredtiled
		        spriteborder = { 18 0 }
		        texture_density = 2

		        modify_texture = {
		            texture = "gfx/interface/component_overlay/overlay_effect.dds"
		            blend_mode = overlay
		        }

		        block "bg_margins"
		        {
		            margin = { 20 8 }
		        }
		    }
		}

		#### UI ELEMENTS FLOW LAYOUT BEGINS HERE ####
		hbox = {
			datacontext = "[BarbershopWindow.GetScreenshotHandler]"
			visible = "[BarbershopScreenshotHandler.AreTabsVisible]"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin_top = 6

	        state = {
	            name = _show
	            using = Animation_FadeIn_Quick
	        }

			state = {
	            name = _hide
	            using = Animation_FadeOut_Quick
	        }

			vbox = {
				name = "left_panel"
				layoutpolicy_vertical = expanding

				minimumsize = { 500 0 }

				margin_right = 15
				margin_bottom = 25
				spacing = -11

				using = Window_Background_Sidebar_Multiplayer_Left

				background = {
					using = Background_Area_Dark
					margin_right = 5

					modify_texture = {
						blend_mode = alphamultiply
						alpha = 0.8
						mirror = vertical
						texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
					}
				}

				#### TABS HEADER ####
				hbox = {
					name = "tabs"
					layoutpolicy_horizontal = expanding

					button_tab = {
						layoutpolicy_horizontal = expanding
						onclick = "[BarbershopWindow.SetTabAppearanceVisible]"
						down = "[BarbershopWindow.IsTabAppearanceVisible]"
						text = "BARBERSHOP_TAB_APPEARANCE"
						tooltip = "BARBERSHOP_TAB_APPEARANCE_TT"
						using = tooltip_ne
						default_format = "#low"
					}

					button_tab = {
						layoutpolicy_horizontal = expanding
						onclick = "[BarbershopWindow.SetTabSceneVisible]"
						down = "[BarbershopWindow.IsTabSceneVisible]"
						text = "BARBERSHOP_TAB_SCENE"
						tooltip = "BARBERSHOP_TAB_SCENE_TT"
						using = tooltip_ne
						default_format = "#low"
					}
				}

				### APPEARANCE TAB - Accessories ###
				vbox = {
					name = "appearance_tab"
					visible = "[BarbershopWindow.IsTabAppearanceVisible]"

					datamodel = "[BarbershopWindow.GetAccessoryCategories]"
					margin = { 20 10 }
					spacing = -2
					# Warcraft

					item = {
						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 10
							vbox = {
								spacing = 2

								hbox = {
									layoutpolicy_horizontal = expanding

									text_label_left = {
										text = "[BarbershopAccessoryCategory.GetName]"
									}

									expand = {}
								}

								hbox = {
									spacing = 5
									button_search = {
										size = { 30 30 }
										onclick = "[BarbershopWindow.ShowSearchFilter( PdxGuiWidget.GetIndexInDataModel )]"

										tooltip = "BARBERSHOP_FUZZY_SEARCH_TT"
										using = tooltip_ne
									}

									dropdown_menu_standard = {
										blockoverride "dropdown_properties"
										{
											datamodel = "[BarbershopAccessoryCategory.GetItems]"
											onselectionchanged = "[BarbershopAccessoryCategory.OnSelect]"
											selectedindex = "[BarbershopAccessoryCategory.GetHoveredIndex]"
										}

										blockoverride "dropdown_size"
										{
											size = { 300 32 }
										}

										blockoverride "dropdown_list_maxsize"
										{
											maximumsize = { 291 550 }
										}

										blockoverride "dropdown_active_item_properties"
										{
											text = "[BarbershopAccessoryItem.GetName]"
										}

										blockoverride "dropdown_item_properties"
										{
											onmousehierarchyenter = "[BarbershopAccessoryItem.OnHover]"
											text = "[BarbershopAccessoryItem.GetName]"
										}

										blockoverride "dropdown_list_properties"
										{
											onmousehierarchyenter = "[BarbershopAccessoryCategory.SetShowTextSearch('(bool)no')]"
											onmousehierarchyleave = "[BarbershopWindow.RestorePreviousPortraitModifierIndex]"
										}
									}
								}

								editbox_standard = {
									visible = "[BarbershopAccessoryCategory.IsTextSearchVisible]"
									layoutpolicy_horizontal = expanding

									blockoverride "editbox_properties"
									{
										name = "input"
										text = "[BarbershopAccessoryCategory.GetSearchFilter]"
										focus_on_visible = yes
										onreturnpressed = "[BarbershopAccessoryCategory.OnDone]"
										ontextedited = "[BarbershopAccessoryCategory.OnEdit]"
									}
								}

								scrollbox = {
									name = "filtered_list"
									visible = "[BarbershopAccessoryCategory.HasItemsFiltered]"
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									size = { 100 204 }

									blockoverride "scrollbox_content"
									{
										vbox = {
											datamodel = "[BarbershopAccessoryCategory.GetItemsFiltered]"
											layoutpolicy_horizontal = expanding
											spacing = 3

											item = {
												button_standard = {
													name = "fuzzy_item_button"
													layoutpolicy_horizontal = expanding
													size = { 0 24 }

													onclick = "[BarbershopAccessoryCategory.OnSelectFiltered( PdxGuiWidget.GetIndexInDataModel )]"
													onmousehierarchyenter = "[BarbershopAccessoryItem.OnHover]"
													onmousehierarchyleave = "[BarbershopWindow.RestorePreviousPortraitModifierIndex]"

													button_ignore = none
													text_single = {
														text = "[BarbershopAccessoryItem.GetName]"
														parentanchor = vcenter|left
														position = { 8 0 }
														align = nobaseline
														default_format = "high"
													}
												}
											}
										}
									}
								}
							}

							vbox = {
								visible = "[BarbershopAccessoryCategory.CanEditColor]"
								background = {
									using = Background_Area_Dark
								}
								button_standard_clean = {
									name = "color_button"
									size = { 50 50 }
									onclick = "[BarbershopAccessoryCategory.SelectColorPicker]"
									down = "[BarbershopAccessoryCategory.IsActiveColorPicker]"

									icon = {
										parentanchor = center
										size = { 42 42 }

										texture = "gfx/interface/colors/white.dds"
										tintcolor = "[BarbershopAccessoryCategory.GetCurrentColor]"
										using = Mask_Rough_Edges

										tooltip = "BARBERSHOP_SELECT_COLOR_PICKER_TT"
										using = tooltip_ne
									}
								}
							}
							expand = {}
						}
					}
				}

				### APPEARANCE TAB - Color picker ###
				vbox = {
					name = "color_picker"
					visible = "[BarbershopWindow.IsTabAppearanceVisible]"

					hbox = {
						text_label_center = {
							text = "COA_DESIGNER_COLOR_PICKER_EXPAND_HEADER"
						}
					}
					hbox = {
						datacontext = "[BarbershopWindow.GetColorPickerHandler]"
						visible = "[BarbershopColorPickerHandler.HasMultipleColorChannels]"

						dropdown_menu_standard =
						{
							blockoverride "dropdown_properties"
							{
								datamodel = "[BarbershopColorPickerHandler.GetColorChannels]"
								onselectionchanged = "[BarbershopColorPickerHandler.SetColorChannel]"
								selectedindex = "[BarbershopColorPickerHandler.GetHoveredIndex]"
							}

							blockoverride "dropdown_size"
							{
								size = { 300 32 }
							}

							blockoverride "dropdown_list_maxsize"
							{
								maximumsize = { 291 350 }
							}

							blockoverride "dropdown_active_item_properties"
							{
								text = "[BarbershopItem.GetName]"
							}

							blockoverride "dropdown_item_properties"
							{
								text = "[BarbershopItem.GetName]"
							}
						}
					}
					barbershop_color_picker = {
						visible = yes
						color = "[BarbershopColorPickerHandler.GetColor]"
						oncoloredited = "[BarbershopColorPickerHandler.PickColor]"
					}
				}

				### SCENE TAB ###
				vbox = {
					name = "scene_tab"
					visible = "[BarbershopWindow.IsTabSceneVisible]"
					layoutpolicy_vertical = expanding

					hbox = {
						layoutpolicy_horizontal = expanding
						hbox = {
							vbox = {
								name = "backgrounds"
								datacontext = "[BarbershopWindow.GetBackgroundCategory]"
								margin = { 20 0 }
								margin_top = 20
								spacing = 10

								hbox = {
									layoutpolicy_horizontal = expanding

									text_label_left = {
										text = "BARBERSHOP_BACKGROUND"
									}

									expand = {}
								}

								hbox = {
									spacing = 5
									button_search = {
										size = { 30 30 }
										onclick = "[BarbershopBackgroundCategory.ToggleTextSearch]"

										tooltip = "BARBERSHOP_FUZZY_SEARCH_TT"
										using = tooltip_ne
									}

									dropdown_menu_standard =
									{
										blockoverride "dropdown_properties"
										{
											datamodel = "[BarbershopBackgroundCategory.GetItems]"
											onselectionchanged = "[BarbershopBackgroundCategory.OnSelect]"
											selectedindex = "[BarbershopBackgroundCategory.GetHoveredIndex]"
										}

										blockoverride "dropdown_size"
										{
											size = { 250 32 }
										}

										blockoverride "dropdown_list_maxsize"
										{
											maximumsize = { 241 800 }
										}

										blockoverride "dropdown_active_item_properties"
										{
											text = "[BarbershopBackgroundItem.GetName|U]"
										}

										blockoverride "dropdown_item_properties"
										{
											onmousehierarchyenter = "[BarbershopBackgroundItem.OnHover]"
											text = "[BarbershopBackgroundItem.GetName|U]"
										}

										blockoverride "dropdown_list_properties"
										{
											onmousehierarchyenter = "[BarbershopBackgroundCategory.SetShowTextSearch('(bool)no')]"
											onmousehierarchyleave = "[BarbershopBackgroundCategory.ResetBackground]"
										}
									}
								}

								editbox_standard = {
									visible = "[BarbershopBackgroundCategory.IsTextSearchVisible]"
									layoutpolicy_horizontal = expanding

									blockoverride "editbox_properties"
									{
										name = "input"
										text = "[BarbershopBackgroundCategory.GetSearchFilter]"
										focus_on_visible = yes
										onreturnpressed = "[BarbershopBackgroundCategory.OnDone]"
										ontextedited = "[BarbershopBackgroundCategory.OnEdit]"
									}
								}

								scrollbox = {
									name = "filtered_list"
									visible = "[BarbershopBackgroundCategory.HasItemsFiltered]"
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									size = { 100 204 }

									blockoverride "scrollbox_content"
									{
										vbox = {
											datamodel = "[BarbershopBackgroundCategory.GetItemsFiltered]"
											layoutpolicy_horizontal = expanding
											spacing = 3

											item = {
												button_standard = {
													name = "fuzzy_item_button"
													layoutpolicy_horizontal = expanding
													size = { 0 24 }

													onclick = "[BarbershopBackgroundCategory.OnSelectFiltered( PdxGuiWidget.GetIndexInDataModel )]"
													onmousehierarchyenter = "[BarbershopBackgroundItem.OnHover]"
													onmousehierarchyleave = "[BarbershopBackgroundCategory.ResetBackground]"

													button_ignore = none
													text_single = {
														text = "[BarbershopBackgroundItem.GetName]"
														parentanchor = vcenter|left
														position = { 8 0 }
														align = nobaseline
														default_format = "high"
													}
												}
											}
										}
									}
								}
							}
						}

						divider_light = {
							layoutpolicy_vertical = expanding
						}

						expand = {}
						hbox = {
							vbox = {
								name = "zoom"
								datacontext = "[BarbershopWindow.GetBackgroundCategory]"
								margin_top = 20
								spacing = 10

								hbox = {
									layoutpolicy_horizontal = expanding

									text_label_left = {
										text = "BARBERSHOP_ZOOM"
									}

									expand = {}
								}

								hbox = {
									name = "zoom_buttons"
									layoutpolicy_horizontal = expanding

									barbershop_button_zoom_in = {
										name = "zoom_in"
										size = { 30 30 }
										onclick = "[BarbershopWindow.ZoomIn]"

										using = tooltip_se
										tooltip = "BARBERSHOP_ZOOM_IN_TT"
									}
									expand = {}

									barbershop_button_zoom_out = {
										name = "zoom_out"
										size = { 30 30 }
										onclick = "[BarbershopWindow.ZoomOut]"

										using = tooltip_se
										tooltip = "BARBERSHOP_ZOOM_OUT_TT"
									}
								}
							}
						}
						expand = {}
					}

					vbox = {
						name = "photo_preset_options"
						layoutpolicy_horizontal = expanding
						margin = { 20 0 }
						margin_top = 15
						spacing = 10

						hbox = {
							layoutpolicy_horizontal = expanding

							text_label_left = {
								text = "BARBERSHOP_PRESETS"
							}

							expand = {}
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							margin = { 0 10 }

							background = {
								margin = { 20 0 }
								using = Background_Area_Dark
							}

							onmousehierarchyenter = "[BarbershopWindow.ResetPortraitPositions('(bool)no')]"

							datamodel = "[BarbershopWindow.GetPhotoPresets]"

							item = {
								hbox = {
									button_radio_label = {
										name = "photo_preset"
										onclick = "[BarbershopWindow.SetPhotoPreset( BarbershopPhotoPreset.GetType )]"

										blockoverride "radio"
										{
											frame = "[BoolTo1And2( BarbershopWindow.IsPhotoPresetSelected( BarbershopPhotoPreset.GetType ) )]"
										}
										blockoverride "text"
										{
											text = "[BarbershopPhotoPreset.GetName]"
										}
										tooltip = "[BarbershopPhotoPreset.GetTooltip]"
									}

									expand = {}
								}
							}
						}
					}

					vbox = {
						name = "barbershop_characters"
						layoutpolicy_horizontal = expanding
						margin_top = 1

						scrollbox = {
							layoutpolicy_horizontal = expanding
							size = { 480 520 }

							blockoverride "scrollbox_content" {
								vbox = {
									layoutpolicy_horizontal = expanding

									datamodel = "[BarbershopWindow.GetBarbershopCharacters]"
									item = {
										barbershop_character_list_item = {
											layoutpolicy_horizontal = expanding

										}
									}
								}
							}
						}
					}

					vbox = {
						name = "coat_of_arms"
						datacontext = "[BarbershopWindow.GetCoAHandler]"
						datacontext = "[BarbershopWindow.GetMainCharacter.GetPrimaryTitle]"
						datacontext = "[BarbershopWindow.GetMainCharacter.GetHouse]"
						datacontext = "[BarbershopWindow.GetMainCharacter.GetDynasty]"
						visible = "[Or( BarbershopWindow.HasPrimaryTitle, Or( DynastyHouse.IsValid, Dynasty.IsValid) )]"
						layoutpolicy_horizontal = expanding
						margin = { 20 0 }
						margin_top = 15

						hbox = {
							layoutpolicy_horizontal = expanding
							text_label_left = {
								text = "COA_DESIGNER_HEADER"
							}
							expand = {}
						}
						hbox = {
							layoutpolicy_horizontal = expanding
							vbox = {
								visible = "[BarbershopWindow.HasPrimaryTitle]"
								margin_top = -17
								coa_realm_small_crown = {
									blockoverride "coa_hover_glow_visible" {
										visible = no
									}
									blockoverride "coa_realm_mouse_entry" {}
									blockoverride "coa_tooltip" {}
									blockoverride "coa_button" {
										onclick = "[BarbershopCoAHandler.ToggleTitle]"
									}
								}
								tooltip = "BARBERSHOP_COA_TOGGLE_TT"
								using = tooltip_se
							}
							vbox = {
								visible = "[DynastyHouse.IsValid]"
								coa_house_small = {
									blockoverride "coa_tooltip" {}
									blockoverride "coa_button" {
										onclick = "[BarbershopCoAHandler.ToggleHouse]"
									}
								}
								tooltip = "BARBERSHOP_COA_TOGGLE_TT"
								using = tooltip_se
							}
	                        vbox = {
								visible = "[Dynasty.IsValid]"
	                        	coa_dynasty_small = {
									blockoverride "coa_tooltip" {}
									blockoverride "coa_button" {
										onclick = "[BarbershopCoAHandler.ToggleDynasty]"
									}
								}
								tooltip = "BARBERSHOP_COA_TOGGLE_TT"
								using = tooltip_se
		                    }
							expand = {}
						}
					}
					expand = {}
				}

				expand = {}

				### Apply and Reset buttons ###
				vbox = {
					name = "apply_box"
					margin_top = 26

					hbox = {
						spacing = 22
						button_standard = {
							name = "reset_button_appearance"
							visible = "[BarbershopWindow.IsTabAppearanceVisible]"

							text = "BARBERSHOP_RESET_APPEARANCE"
							size = { 155 33 }
							onclick = "[BarbershopWindow.ResetAppearanceTab]"
							onmousehierarchyenter = "[BarbershopWindow.ResetPortraitPositions('(bool)no')]"
							tooltip = "BARBERSHOP_RESET_CHANGES_APPEARANCE_TT"
							using = tooltip_ne
						}
						button_standard = {
							name = "reset_button_scene"
							visible = "[BarbershopWindow.IsTabSceneVisible]"

							text = "BARBERSHOP_RESET_SCENE"
							size = { 155 33 }
							onclick = "[BarbershopWindow.ResetSceneTab]"
							onmousehierarchyenter = "[BarbershopWindow.ResetPortraitPositions('(bool)no')]"
							tooltip = "BARBERSHOP_RESET_CHANGES_SCENE_TT"
							using = tooltip_ne
						}
						button_primary = {
							name = "apply_button"
							visible = "[BarbershopWindow.IsTabAppearanceVisible]"

							text = "BARBERSHOP_APPLY"
							size = { 155 33 }
							onclick = "[BarbershopWindow.ApplyAndClose]"
							tooltip = "BARBERSHOP_APPLY_CHANGES_TT"
							using = tooltip_ne
						}
					}
				}
			}
			expand = {}
		}
		expand = {}
	}
}
