liege_modify_vassal_contract_interaction = {
	special_interaction = modify_vassal_contract
	interface = modify_vassal_contract
	category = interaction_category_vassal
	common_interaction = yes
	icon = icon_contract_modification_single

	send_name = "modify_vassal_contract_interaction_SEND"
	desc = liege_modify_vassal_contract_interaction_desc

	force_notification = yes
	notification_text = MODIFY_VASSAL_CONTRACT_NOTIFICATION_TO_VASSAL

	is_shown = {
		scope:recipient = {
			NOT = { this = scope:actor }
			exists = liege
			liege = scope:actor
			is_ruler = yes
			vassal_contract_has_modifiable_obligations = yes
		}
	}

	is_valid_showing_failures_only = {
		scope:recipient = {
			is_busy_in_events_localised = yes
		}
		scope:actor = { NOT = { is_isolated_from_trigger = { target = scope:recipient } } }	# Warcraft
		NOT = { scope:actor = { is_at_war_with = scope:recipient } }
	}

	can_send = {
		trigger_if = { #If they're blocked we don't want to show anything else
			limit = {
				scope:recipient = {
					vassal_contract_is_blocked_from_modification = yes
				}
			}
			scope:recipient = {
				vassal_contract_is_blocked_from_modification = no
			}
		}
		trigger_else = {
			scope:actor = {
				has_changed_contract_obligation_trigger = yes

				custom_description = {
					text = "liege_modify_vassal_contract_cannot_exceed_tyranny_cap"
					object = scope:actor
					NOT = {
						vassal_obligation_increase_tyranny_gain_multiplier > 1
					}
				}

				# Cannot change more than three things at once
				custom_description = {
					text = "vassal_modify_vassal_contract_obligation_change_limit"
					value = list_size:changed_obligations
					list_size:changed_obligations <= max_contract_changes
				}

				# If the trade without the hook usage is already in the vassal's favour or fair then don't waste your hook
				save_temporary_scope_value_as = {
					name = obligations_favoring_vassal
					value = scope:recipient.count_obligation_improvements_for_vassal
				}
				trigger_if = {
					limit = { scope:obligations_favoring_vassal > 0 }
					custom_description = {
						text = "vassal_modify_vassal_contract_unnecessary_hook_usage_vassal_favor"
						object = scope:recipient
						value = scope:obligations_favoring_vassal
						NOT = { always = scope:hook }
					}
				}
				trigger_else_if = {
					limit = { scope:obligations_favoring_vassal = 0 }
					custom_description = {
						text = "vassal_modify_vassal_contract_unnecessary_hook_usage_equal"
						object = scope:recipient
						NOT = { always = scope:hook }
					}
				}
				trigger_else = {} # Otherwise we're fine!
			}
		}
	}

	auto_accept = yes
	on_accept = {
		# Enact changes.
		scope:actor = {
			send_interface_message = {
				type = msg_vassal_contract_change
				title = modify_vassal_contract_interaction_notification
				right_icon = scope:recipient
				# Add tyranny for each level increased. Can spend one hook to avoid one level of tyranny hit.
				add_tyranny = vassal_obligation_increase_tyranny_gain
				if = {
					limit = { vassal_obligation_increase_tyranny_gain != 0 }
					stress_impact = {
						just = medium_stress_impact_gain
						generous = medium_stress_impact_gain
					}
				}
				if = {
					limit = {
						always = scope:hook
					}
					use_hook = scope:recipient
					# Warcraft
					# add_achievement_flag_effect = { FLAG = achievement_fine_print_flag }
				}

				scope:recipient = {
					hidden_effect = { set_vassal_contract_modification_blocked = yes }
				}

				every_in_list = {
					list = changed_obligations

					save_scope_as = obligation

					scope:recipient = {
						vassal_contract_set_obligation_level = {
							type = scope:obligation.vassal_contract_type
							level = scope:obligation
						}
					}

				}
			}
		}
		# If there's a diarch involved, and they called in their change, that gets flagged.
		diarch_changed_own_contract_effect = yes
	}

	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = hook
		localization = SCHEME_HOOK
	}
	send_option = {
		is_shown = {
			scope:recipient = {
				diarch ?= scope:actor
				has_diarchy_active_parameter = diarch_gets_a_free_change_on_vassal_contract
			}
		}
		is_valid = {
			scope:recipient = {
				trigger_if = {
					limit = { has_variable_list = diarch_contract_rights_used_list }
					NOT = {
						is_target_in_variable_list = {
							name = diarch_contract_rights_used_list
							target = scope:actor
						}
					}
				}
			}
		}
		flag = diarch
		localization = CALL_IN_DIARCH_RIGHTS
	}
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"

	send_options_exclusive = no
}

vassal_modify_vassal_contract_interaction = {
	special_interaction = modify_vassal_contract
	interface = modify_vassal_contract
	category = interaction_category_vassal
	common_interaction = yes
	icon = icon_contract_modification_single

	send_name = "modify_vassal_contract_interaction_SEND"
	desc = vassal_modify_vassal_contract_interaction_desc

	force_notification = yes
	notification_text = MODIFY_VASSAL_CONTRACT_NOTIFICATION_TO_LIEGE

	redirect = {
		# need to reverse the role for the UI to work properly
		scope:recipient = {
			save_scope_as = secondary_recipient
		}
		scope:actor = {
			save_scope_as = recipient
		}

		scope:secondary_recipient = {
			save_scope_as = actor
		}
	}

	is_shown = {
		scope:recipient = {
			is_independent_ruler = no
			NOT = { this = scope:actor }
			liege = scope:actor
			vassal_contract_has_modifiable_obligations = yes
		}
	}

	is_valid_showing_failures_only = {
		scope:actor = { is_busy_in_events_localised = yes }
		scope:actor = { NOT = { is_isolated_from_trigger = { target = scope:recipient } } }	# Warcraft
		NOT = { scope:recipient = { is_at_war_with = scope:actor } }
	}

	can_send = {
		trigger_if = { #If you're blocked we don't want to show anything else
			limit = {
				scope:recipient = {
					vassal_contract_is_blocked_from_modification = yes
				}
			}
			scope:recipient = {
				vassal_contract_is_blocked_from_modification = no
			}
		}
		trigger_else = {
			scope:actor = {
				has_changed_contract_obligation_trigger = yes
			}

			scope:recipient = {
				# Must be an even trade overall
				custom_description = {
					text = "vassal_modify_vassal_contract_cannot_increase_obligation_level"
					object = scope:actor
					value = count_obligation_improvements_for_vassal_include_hook
					count_obligation_improvements_for_vassal_include_hook = 0
				}

				# Cannot change more than three things at once
				custom_description = {
					text = "vassal_modify_vassal_contract_obligation_change_limit"
					value = list_size:changed_obligations
					list_size:changed_obligations <= max_contract_changes
				}
			}
		}
	}

	auto_accept = yes

	on_accept = {
		# Enact changes.
		scope:recipient = {
			send_interface_message = {
				type = msg_vassal_contract_change
				title = modify_vassal_contract_interaction_notification
				right_icon = scope:actor
				if = {
					limit = { always = scope:hook }
					use_hook = scope:recipient
					# Warcraft
					# add_achievement_flag_effect = { FLAG = achievement_fine_print_flag }
				}

				hidden_effect = { set_vassal_contract_modification_blocked = yes }

				every_in_list = {
					list = changed_obligations

					save_scope_as = obligation

					scope:recipient = {
						vassal_contract_set_obligation_level = {
							type = scope:obligation.vassal_contract_type
							level = scope:obligation
						}
					}
				}
			}
		}
		# If there's a diarch involved, and they called in their change, that gets flagged.
		diarch_changed_own_contract_effect = yes
	}

	send_option = {
		is_valid = {
			scope:recipient = {
				has_usable_hook = scope:actor
			}
		}
		flag = hook
		localization = SCHEME_HOOK
	}
	send_option = {
		is_shown = {
			scope:recipient = { is_diarch_of_target = scope:actor }
		}
		is_valid = {
			scope:recipient = {
				trigger_if = {
					limit = { has_variable_list = diarch_contract_rights_used_list }
					NOT = {
						is_target_in_variable_list = {
							name = diarch_contract_rights_used_list
							target = scope:actor
						}
					}
				}
			}
		}
		flag = diarch
		localization = CALL_IN_DIARCH_RIGHTS
	}
	should_use_extra_icon = {
		scope:recipient = { has_usable_hook = scope:actor }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"
	send_options_exclusive = no
}

ai_only_liege_modify_vassal_contract_interaction = {
	category = interaction_category_vassal
	send_name = "modify_vassal_contract_interaction_SEND"
	desc = liege_modify_vassal_contract_interaction_desc

	auto_accept = yes

	is_shown = {
		scope:actor = {
			is_ai = yes
			has_usable_hook = scope:recipient
		}
		scope:recipient = {
			NOT = { this = scope:actor }
			NOT = {
				has_strong_hook = scope:actor
			}
			exists = liege
			liege = scope:actor
			is_ruler = yes
			vassal_contract_can_be_modified_trigger = yes
			does_ai_liege_in_vassal_contract_desire_obligation_change = yes
		}
		scope:recipient = { is_busy_in_events_localised = yes }
		NOT = { scope:actor = { is_at_war_with = scope:recipient } }
	}

	on_accept = {
		scope:actor = {
			stress_impact = {
				generous = minor_stress_impact_gain
			}
		}

		scope:recipient = {
			set_vassal_contract_modification_blocked = yes
			trigger_event = char_interaction.0250
		}
	}

	ai_potential = {
		is_at_war = no
	}

	ai_targets = {
		ai_recipients = vassals
	}
	ai_frequency = 24

	ai_will_do = {
		base = 100

		modifier = {
			factor = 0
			scope:recipient = {
				OR = {
					AND = {
						scope:actor = {
							ai_greed <= high_positive_ai_value
						}
						has_relation_friend = scope:actor
					}
					has_relation_best_friend = scope:actor
					has_relation_soulmate = scope:actor
				}
			}
		}
	}

}

ai_only_vassal_modify_vassal_contract_interaction = {
	category = interaction_category_vassal
	send_name = "modify_vassal_contract_interaction_SEND"
	desc = vassal_modify_vassal_contract_interaction_desc

	auto_accept = yes

	is_shown = {
		scope:actor = {
			is_ai = yes
			is_independent_ruler = no
			has_usable_hook = scope:recipient
			vassal_contract_can_be_modified_trigger = yes
			does_ai_vassal_in_vassal_contract_desire_obligation_change = yes
		}
		scope:recipient = {
			NOT = { this = scope:actor }
			is_ruler = yes
			NOT = {
				has_strong_hook = scope:actor
			}
		}
		scope:recipient = { is_busy_in_events_localised = yes }
		NOT = { scope:actor = { is_at_war_with = scope:recipient } }
	}

	on_accept = {
		scope:recipient = {
			trigger_event = char_interaction.0251
		}
	}

	ai_potential = {
		always = yes
	}

	ai_targets = {
		ai_recipients = liege
	}
	ai_frequency = 24

	ai_will_do = {
		base = 100

		modifier = {
			factor = 0
			scope:recipient = {
				OR = {
					AND = {
						scope:actor = {
							ai_greed <= high_positive_ai_value
						}
						has_relation_friend = scope:actor
					}
					has_relation_best_friend = scope:actor
					has_relation_soulmate = scope:actor
				}
			}
		}
	}
}
