#Effects used in parent events


#####################################################################
# EFFECT LIST
#####################################################################
# !!! Remember to add all new effects with a short description here !!!
#

#assign_quirk_effect
#get_quirk_character_effect 			= Used to make sure that a character used for a quirk has one, and utilises assign_quirk_effect if they're missing one.
#set_signature_weapon_effect
#pick_servant_romance_target_effect
#set_favorite_treat_effect
#set_favorite_toy_effect

######################################################################
# EFFECTS
######################################################################


#Used to find a permanent quirk for a character
# Use get_quirk_character_effect for better performence as it also checks if root in an event is an AI!
assign_quirk_effect = {
	if = {
		limit = {
			exists = var:my_quirk
			var:my_quirk = flag:fallback
		}
		remove_variable = my_quirk #to give character's that were assigned the fallback a chance for better things
	}
	if = {
		limit = {
			NOT = { exists = var:my_quirk }
		}
		hidden_effect = {
			random_list = {
				1 = {
					trigger = {
						OR = {
							has_trait = shy
							has_trait = pensive
						}
					}
					set_variable = {
						name = my_quirk
						value = flag:shy
					}
				}
				1 = {
					trigger = { has_trait = arrogant }
					set_variable = {
						name = my_quirk
						value = flag:arrogant
					}
				}
				1 = {
					trigger = { has_trait = impatient }
					set_variable = {
						name = my_quirk
						value = flag:impatient
					}
				}
				1 = {
					trigger = { has_trait = lustful }
					set_variable = {
						name = my_quirk
						value = flag:lustful
					}
				}
				1 = {
					trigger = { has_trait = chaste }
					set_variable = {
						name = my_quirk
						value = flag:chaste
					}
				}
				1 = {
					trigger = { has_trait = temperate }
					set_variable = {
						name = my_quirk
						value = flag:temperate
					}
				}
				1 = {
					trigger = { has_trait = gluttonous }
					set_variable = {
						name = my_quirk
						value = flag:gluttonous
					}
				}
				1 = {
					trigger = { has_trait = greedy }
					set_variable = {
						name = my_quirk
						value = flag:greedy
					}
				}
				1 = {
					trigger = {
						OR = {
							has_trait = diligent
							has_trait = bossy
							has_trait = curious
						}
					}
					set_variable = {
						name = my_quirk
						value = flag:diligent
					}
				}
				1 = {
					trigger = { has_trait = lazy }
					set_variable = {
						name = my_quirk
						value = flag:lazy
					}
				}
				1 = {
					trigger = { has_trait = wrathful }
					set_variable = {
						name = my_quirk
						value = flag:wrathful
					}
				}
				1 = {
					trigger = {
						OR = {
							has_trait = calm
							has_trait = pensive
						}
					}
					set_variable = {
						name = my_quirk
						value = flag:calm
					}
				}
				1 = {
					trigger = { has_trait = impatient }
					set_variable = {
						name = my_quirk
						value = flag:impatient
					}
				}
				1 = {
					trigger = { has_trait = humble }
					set_variable = {
						name = my_quirk
						value = flag:humble
					}
				}
				1 = {
					trigger = {
						OR = {
							has_trait = deceitful
							has_trait = charming
						}
					}
					set_variable = {
						name = my_quirk
						value = flag:deceitful
					}
				}
				1 = {
					trigger = { has_trait = honest }
					set_variable = {
						name = my_quirk
						value = flag:honest
					}
				}
				1 = {
					trigger = { has_trait = generous }
					set_variable = {
						name = my_quirk
						value = flag:generous
					}
				}
				1 = {
					trigger = { has_trait = craven }
					set_variable = {
						name = my_quirk
						value = flag:craven
					}
				}
				1 = {
					trigger = {
						OR = {
							has_trait = brave
							has_trait = rowdy
						}
					}
					set_variable = {
						name = my_quirk
						value = flag:brave
					}
				}
				1 = {
					trigger = {
						OR = {
							has_trait = gregarious
							has_trait = charming
							has_trait = curious
						}
					}
					set_variable = {
						name = my_quirk
						value = flag:gregarious
					}
				}
				1 = {
					trigger = { has_trait = ambitious }
					set_variable = {
						name = my_quirk
						value = flag:ambitious
					}
				}
				1 = {
					trigger = { has_trait = arbitrary }
					set_variable = {
						name = my_quirk
						value = flag:arbitrary
					}
				}
				1 = {
					trigger = { has_trait = just }
					set_variable = {
						name = my_quirk
						value = flag:just
					}
				}
				1 = {
					trigger = { has_trait = cynical }
					set_variable = {
						name = my_quirk
						value = flag:cynical
					}
				}
				1 = {
					trigger = { has_trait = zealous }
					set_variable = {
						name = my_quirk
						value = flag:zealous
					}
				}
				1 = {
					trigger = { has_trait = paranoid }
					set_variable = {
						name = my_quirk
						value = flag:paranoid
					}
				}
				1 = {
					trigger = { has_trait = trusting }
					set_variable = {
						name = my_quirk
						value = flag:trusting
					}
				}
				1 = {
					trigger = { has_trait = compassionate }
					set_variable = {
						name = my_quirk
						value = flag:compassionate
					}
				}
				1 = {
					trigger = { has_trait = sadistic }
					set_variable = {
						name = my_quirk
						value = flag:sadistic
					}
				}
				1 = {
					trigger = { has_trait = vengeful }
					set_variable = {
						name = my_quirk
						value = flag:vengeful
					}
				}
				1 = {
					trigger = { has_trait = forgiving }
					set_variable = {
						name = my_quirk
						value = flag:forgiving
					}
				}
				1 = {
					trigger = { has_trait = lunatic }
					set_variable = {
						name = my_quirk
						value = flag:lunatic
					}
				}
				1 = {
					trigger = { has_trait = leper }
					set_variable = {
						name = my_quirk
						value = flag:leper
					}
				}
				1 = {
					trigger = { has_trait = gout_ridden }
					set_variable = {
						name = my_quirk
						value = flag:gout_ridden
					}
				}
				1 = {
					trigger = { has_trait = consumption }
					set_variable = {
						name = my_quirk
						value = flag:consumption
					}
				}
				1 = {
					trigger = { number_of_personality_traits = 0 } #fallback for kids etc.
					set_variable = {
						name = my_quirk
						value = flag:fallback
					}
				}
			}
		}
	}
}


#Used to make sure that a character used for a quirk has one
#Utilises assign_quirk_effect, and must always be placed in the same file, after that one.
get_quirk_character_effect = {
	if = {
		limit = {
			root = { is_ai = no }
		}
		if = {
			limit = {
				has_variable = my_quirk
			}
			save_scope_as = quirk_character
		}
		else = {
			assign_quirk_effect = yes
			save_scope_as = quirk_character
		}
	}
}


#Sets a character's signature weapon effect, if they do not already have one.
set_signature_weapon_effect = {
	save_temporary_scope_as = this_character
	# If we're wielding an artifact weapon, override our signature weapon type with what we have equipped.
	if = {
		limit = {
			NOT = { has_variable = temporary_signature_weapon }
			any_equipped_character_artifact = {
				artifact_slot_type = primary_armament
				OR = {
					artifact_type = axe
					artifact_type = hammer
					artifact_type = spear
					artifact_type = mace
					artifact_type = dagger
					artifact_type = sword
				}
			}
		}
		random_equipped_character_artifact = {
			limit = {
				artifact_slot_type = primary_armament
				OR = {
					artifact_type = axe
					artifact_type = hammer
					artifact_type = spear
					artifact_type = mace
					artifact_type = dagger
					artifact_type = sword
				}
			}
			save_scope_as = equipped_signature_weapon
			scope:this_character = {
				set_variable = {
					name = signature_weapon_scope
					value = scope:equipped_signature_weapon
				}
				if = {
					limit = { scope:equipped_signature_weapon = { artifact_type = axe } }
					set_variable = {
						name = signature_weapon
						value = flag:axe
					}
				}
				if = {
					limit = { scope:equipped_signature_weapon = { artifact_type = hammer } }
					set_variable = {
						name = signature_weapon
						value = flag:hammer
					}
				}
				if = {
					limit = { scope:equipped_signature_weapon = { artifact_type = spear } }
					set_variable = {
						name = signature_weapon
						value = flag:spear
					}
				}
				if = {
					limit = { scope:equipped_signature_weapon = { artifact_type = mace } }
					set_variable = {
						name = signature_weapon
						value = flag:mace
					}
				}
				if = {
					limit = { scope:equipped_signature_weapon = { artifact_type = dagger } }
					set_variable = {
						name = signature_weapon
						value = flag:dagger
					}
				}
				if = {
					limit = { scope:equipped_signature_weapon = { artifact_type = sword } }
					set_variable = {
						name = signature_weapon
						value = flag:sword
					}
				}
			}
			clear_saved_scope = equipped_signature_weapon # Clear the saved scope so we don't clone artifacts when this effect is run multiple times in sucession.
		}
	}
	# Otherwise, if we do not have an equipped artifact AND we do not yet have a signature weapon type, pick one at random.
	else_if = {
		limit = {
			NOR = {
				has_variable = signature_weapon
				has_variable = temporary_signature_weapon
			}
		}
		hidden_effect = {
			random_list = {
				30 = {
					set_variable = {
						name = signature_weapon
						value = flag:sword
					}
				}
				10 = {
					set_variable = {
						name = signature_weapon
						value = flag:mace
					}
				}
				10 = {
					set_variable = {
						name = signature_weapon
						value = flag:axe
					}

					# Warcraft
					# # Weight up the axe-bearing foreigners chance of bearing axes.
					# modifier = {
						# add = 150
						# has_trait = varangian
					# }

					modifier = {
						add = 50
						# Warcraft
						prefers_axe_trigger = yes
					}
				}
				5 = {
					set_variable = {
						name = signature_weapon
						value = flag:hammer
					}
				}
				5 = {
					set_variable = {
						name = signature_weapon
						value = flag:spear
					}
				}
				5 = {
					trigger = {
						intrigue > 12
					}
					set_variable = {
						name = signature_weapon
						value = flag:dagger
					}
				}
			}
		}

		# If we had previously saved an equipped artifact scope, but no longer have that artifact equipped, remove the saved scope variable.
		if = {
			limit = { exists = var:signature_weapon_scope }
			remove_variable = signature_weapon_scope
		}
	}
}

#Sets a temporary signature weapon for a single duel. You have to assign WEAPON_TYPE parameter with a weapon type you want to use.
# Available weapon types: axe, hammer, spear, mace, dagger, sword, wooden_sword.
#Effect is removed by single_combat_clean_temp_weapon_effect triggered in combat conclusion events: single_combat.0031 and single_combat.0041
set_temporary_signature_weapon = {
	save_temporary_scope_as = wielding_character
	scope:wielding_character = {
		set_variable = { #save passed down weapon type to be the temp weapon for this battle
			name = temporary_signature_weapon
			value = flag:$WEAPON_TYPE$
		}
	}
	if = {
		limit = {
			scope:wielding_character = {
				has_variable = signature_weapon
				has_variable = temporary_signature_weapon
			}
		}
		scope:wielding_character = {
			set_variable = { #save the original signature_weapon if this character had one
				name = og_signature_weapon
				value = var:signature_weapon
			}
			switch = { #set the temporary weapon as a signature_weapon
				trigger = var:temporary_signature_weapon
				flag:axe = {
					set_variable = {
						name = signature_weapon
						value = flag:axe
					}
				}
				flag:hammer = {
					set_variable = {
						name = signature_weapon
						value = flag:hammer
					}
				}
				flag:spear = {
					set_variable = {
						name = signature_weapon
						value = flag:spear
					}
				}
				flag:mace = {
					set_variable = {
						name = signature_weapon
						value = flag:mace
					}
				}
				flag:dagger = {
					set_variable = {
						name = signature_weapon
						value = flag:dagger
					}
				}
				flag:sword = {
					set_variable = {
						name = signature_weapon
						value = flag:sword
					}
				}
				flag:wooden_sword = {
					set_variable = {
						name = signature_weapon
						value = flag:wooden_sword
					}
				}
			}
		}
	}
	else_if = {
		limit = { 
			scope:wielding_character = {
				has_variable = temporary_signature_weapon
			}
		}
		scope:wielding_character = {
			set_variable = { #remember that there were no original signature_weapon
				name = og_signature_weapon
				value = flag:no_signature_weapon_yet
			}
			switch = { #set the temporary weapon as a signature_weapon
				trigger = var:temporary_signature_weapon
				flag:axe = {
					set_variable = {
						name = signature_weapon
						value = flag:axe
					}
				}
				flag:hammer = {
					set_variable = {
						name = signature_weapon
						value = flag:hammer
					}
				}
				flag:spear = {
					set_variable = {
						name = signature_weapon
						value = flag:spear
					}
				}
				flag:mace = {
					set_variable = {
						name = signature_weapon
						value = flag:mace
					}
				}
				flag:dagger = {
					set_variable = {
						name = signature_weapon
						value = flag:dagger
					}
				}
				flag:sword = {
					set_variable = {
						name = signature_weapon
						value = flag:sword
					}
				}
				flag:wooden_sword = {
					set_variable = {
						name = signature_weapon
						value = flag:wooden_sword
					}
				}
			}
		}
	}
}

#Pick out "who" among the commoners a given character has a dalliance with
pick_servant_romance_target_effect = {
	if = {
		limit = { NOT = { has_variable = servant_romance_target } }
		hidden_effect = {
			random_list = {
				1 = {
					trigger = {
						is_attracted_to_men = yes
					}
					set_variable = {
						name = servant_romance_target
						value = flag:stable_boy
					}
				}
				1 = {
					trigger = {
						is_attracted_to_men = yes
					}
					set_variable = {
						name = servant_romance_target
						value = flag:page
					}
				}
				1 = {
					trigger = {
						is_attracted_to_women = yes
					}
					set_variable = {
						name = servant_romance_target
						value = flag:scullery_maid
					}
				}
				1 = {
					set_variable = {
						name = servant_romance_target
						value = flag:chandler
					}
				}
				1 = {
					trigger = {
						is_attracted_to_women = yes
					}
					set_variable = {
						name = servant_romance_target
						value = flag:launderer
					}
				}
				1 = {
					set_variable = {
						name = servant_romance_target
						value = flag:naperer
					}
				}
				1 = {
					set_variable = {
						name = servant_romance_target
						value = flag:scalder
					}
				}
				1 = {
					set_variable = {
						name = servant_romance_target
						value = flag:saucerer
					}
				}
			}
		}
	}
}

set_favorite_treat_effect = {
	if = {
		limit = { NOT = { has_variable = favorite_treat } }
		hidden_effect = {
			random_list = {
				10 = {
					trigger = {
						trigger_if = {
							limit = {
								exists = capital_province
								is_travelling = no #Let's pick something from our location instead.
							}
							capital_province = {
								# Warcraft
								comfit_region_trigger = yes
							}
						}
						trigger_else_if = {
							limit = {
								exists = liege.capital_province
								is_travelling = no #Let's pick something from our location instead.
							}
							liege.capital_province = {
								# Warcraft
								comfit_region_trigger = yes
							}
						}
						trigger_else_if = {
							limit = {
								exists = location
							}
							location = {
								# Warcraft
								comfit_region_trigger = yes
							}
						}
						trigger_else = {
							always = no
						}
					}
					set_variable = {
						name = favorite_treat
						value = flag:comfit #famous in sicily
					}
				}
				10 = {
					set_variable = {
						name = favorite_treat
						value = flag:roasted_almonds
					}
				}
				10 = {
					trigger = {
						trigger_if = {
							limit = {
								exists = capital_province
								is_travelling = no #Let's pick something from our location instead.
							}
							capital_province = {
								# Warcraft
								nougat_region_trigger = yes
							}
						}
						trigger_else_if = {
							limit = {
								exists = liege.capital_province
								is_travelling = no #Let's pick something from our location instead.
							}
							liege.capital_province = {
								# Warcraft
								nougat_region_trigger = yes
							}
						}
						trigger_else_if = {
							limit = {
								exists = location
							}
							location = {
								# Warcraft
								nougat_region_trigger = yes
							}
						}
						trigger_else = {
							always = no
						}
					}
					set_variable = {
						name = favorite_treat
						value = flag:nougat
					}
				}
				10 = {
					trigger = {
						trigger_if = {
							limit = {
								exists = capital_province
								is_travelling = no #Let's pick something from our location instead.
							}
							capital_province = {
								# Warcraft
								marzipan_region_trigger = yes
							}
						}
						trigger_else_if = {
							limit = {
								exists = liege.capital_province
								is_travelling = no #Let's pick something from our location instead.
							}
							liege.capital_province = {
								# Warcraft
								marzipan_region_trigger = yes
							}
						}
						trigger_else_if = {
							limit = {
								exists = location
							}
							location = {
								# Warcraft
								marzipan_region_trigger = yes
							}
						}
						trigger_else = {
							always = no
						}
					}
					set_variable = {
						name = favorite_treat
						value = flag:marzipan #europeans & arabs, possibly eastern asaia
					}
				}
				2 = {
					set_variable = {
						name = favorite_treat
						value = flag:sweetroll #A northern delicacy
					}
				}
				10 = {
					set_variable = {
						name = favorite_treat
						value = flag:poached_pear
					}
				}
				10 = {
					set_variable = {
						name = favorite_treat
						value = flag:pudding
					}
				}
				10 = {
					set_variable = {
						name = favorite_treat
						value = flag:apple_tart
					}
				}
				10 = {
					set_variable = {
						name = favorite_treat
						value = flag:strawberry_compote
					}
				}
				10 = {
					trigger = {
						trigger_if = {
							limit = {
								exists = capital_province
								is_travelling = no #Let's pick something from our location instead.
							}
							capital_province = {
								# Warcraft
								gingerbread_region_trigger = yes
							}
						}
						trigger_else_if = {
							limit = {
								exists = liege.capital_province
								is_travelling = no #Let's pick something from our location instead.
							}
							liege.capital_province = {
								# Warcraft
								gingerbread_region_trigger = yes
							}
						}
						trigger_else_if = {
							limit = {
								exists = location
							}
							location = {
								# Warcraft
								gingerbread_region_trigger = yes
							}
						}
						trigger_else = {
							always = no
						}
					}
					set_variable = {
						name = favorite_treat
						value = flag:gingerbread #europe, armenia
					}
				}
				5 = {
					trigger = {
						trigger_if = {
							limit = {
								exists = capital_province
								is_travelling = no #Let's pick something from our location instead.
							}
							capital_province = {
								# Warcraft
								frytour_blaunched_region_trigger = yes
							}
						}
						trigger_else_if = {
							limit = {
								exists = liege.capital_province
								is_travelling = no #Let's pick something from our location instead.
							}
							liege.capital_province = {
								# Warcraft
								frytour_blaunched_region_trigger = yes
							}
						}
						trigger_else_if = {
							limit = {
								exists = location
							}
							location = {
								# Warcraft
								frytour_blaunched_region_trigger = yes
							}
						}
						trigger_else = {
							always = no
						}
					}
					set_variable = {
						name = favorite_treat
						value = flag:frytour_blaunched #western europe
					}
				}
				10 = {
					trigger = {
						trigger_if = {
							limit = {
								exists = capital_province
								is_travelling = no #Let's pick something from our location instead.
							}
							capital_province = {
								# Warcraft
								fig_pie_region_trigger = yes
							}
						}
						trigger_else_if = {
							limit = {
								exists = liege.capital_province
								is_travelling = no #Let's pick something from our location instead.
							}
							liege.capital_province = {
								# Warcraft
								fig_pie_region_trigger = yes
							}
						}
						trigger_else_if = {
							limit = {
								exists = location
							}
							location = {
								# Warcraft
								fig_pie_region_trigger = yes
							}
						}
						trigger_else = {
							always = no
						}
					}
					set_variable = {
						name = favorite_treat
						value = flag:fig_pie
					}
				}
				5 = {
					trigger = {
						trigger_if = {
							limit = {
								exists = capital_province
								is_travelling = no #Let's pick something from our location instead.
							}
							capital_province = {
								# Warcraft
								pokerounce_region_trigger = yes
							}
						}
						trigger_else_if = {
							limit = {
								exists = liege.capital_province
								is_travelling = no #Let's pick something from our location instead.
							}
							liege.capital_province = {
								# Warcraft
								pokerounce_region_trigger = yes
							}
						}
						trigger_else_if = {
							limit = {
								exists = location
							}
							location = {
								# Warcraft
								pokerounce_region_trigger = yes
							}
						}
						trigger_else = {
							always = no
						}
					}
					set_variable = {
						name = favorite_treat
						value = flag:pokerounce #england
					}
				}
				5 = {
					trigger = {
						trigger_if = {
							limit = {
								exists = capital_province
								is_travelling = no #Let's pick something from our location instead.
							}
							capital_province = {
								# Warcraft
								sambocade_region_trigger = yes
							}
						}
						trigger_else_if = {
							limit = {
								exists = liege.capital_province
								is_travelling = no #Let's pick something from our location instead.
							}
							liege.capital_province = {
								# Warcraft
								sambocade_region_trigger = yes
							}
						}
						trigger_else_if = {
							limit = {
								exists = location
							}
							location = {
								# Warcraft
								sambocade_region_trigger = yes
							}
						}
						trigger_else = {
							always = no
						}
					}
					set_variable = {
						name = favorite_treat
						value = flag:sambocade #western europe
					}
				}
				5 = {
					trigger = {
						trigger_if = {
							limit = {
								exists = capital_province
								is_travelling = no #Let's pick something from our location instead.
							}
							capital_province = {
								# Warcraft
								sesame_cake_region_trigger = yes
							}
						}
						trigger_else_if = {
							limit = {
								exists = liege.capital_province
								is_travelling = no #Let's pick something from our location instead.
							}
							liege.capital_province = {
								# Warcraft
								sesame_cake_region_trigger = yes
							}
						}
						trigger_else_if = {
							limit = {
								exists = location
							}
							location = {
								# Warcraft
								sesame_cake_region_trigger = yes
							}
						}
						trigger_else = {
							always = no
						}
					}
					set_variable = {
						name = favorite_treat
						value = flag:sesame_cake #africa, middle east
					}
				}
				2 = {
					trigger = {
						trigger_if = {
							limit = {
								exists = capital_province
								is_travelling = no #Let's pick something from our location instead.
							}
							capital_province = {
								# Warcraft
								baked_banana_region_trigger = yes
							}
						}
						trigger_else_if = {
							limit = {
								exists = liege.capital_province
								is_travelling = no #Let's pick something from our location instead.
							}
							liege.capital_province = {
								# Warcraft
								baked_banana_region_trigger = yes
							}
						}
						trigger_else_if = {
							limit = {
								exists = location
							}
							location = {
								# Warcraft
								baked_banana_region_trigger = yes
							}
						}
						trigger_else = {
							always = no
						}
					}
					set_variable = {
						name = favorite_treat
						value = flag:baked_banana #africa
					}
				}
			}
		}
	}
}

set_favorite_toy_effect = {
	if = {
		limit = {
			NOT = { has_variable = child_toy_variable }
		}
		hidden_effect = {
			random_list = {
				10 = {
					modifier = {
						has_trait = rowdy
						factor = 5
					}
					set_variable = {
						name = child_toy_variable
						value = flag:wooden_knight
					}
				}
				10 = {
					set_variable = {
						name = child_toy_variable
						value = flag:toy_boat
					}
				}
				10 = {
					modifier = {
						has_trait = rowdy
						factor = 5
					}
					set_variable = {
						name = child_toy_variable
						value = flag:wooden_sword
					}
				}
				10 = {
					modifier = {
						has_trait = curious
						factor = 5
					}
					modifier = {
						has_trait = charming
						factor = 5
					}
					set_variable = {
						name = child_toy_variable
						value = flag:ragdoll
					}
				}
				10 = {
					modifier = {
						has_trait = pensive
						factor = 5
					}
					set_variable = {
						name = child_toy_variable
						value = flag:spinning_top
					}
				}
				10 = {
					set_variable = {
						name = child_toy_variable
						value = flag:rolling_hoop
					}
				}
				10 = {
					set_variable = {
						name = child_toy_variable
						value = flag:scopperel
					}
				}
				10 = {
					set_variable = {
						name = child_toy_variable
						value = flag:wooden_horse
					}
				}
				10 = {
					modifier = {
						has_trait = curious
						factor = 5
					}
					modifier = {
						has_trait = charming
						factor = 5
					}
					set_variable = {
						name = child_toy_variable
						value = flag:doll
					}
				}
				10 = {
					set_variable = {
						name = child_toy_variable
						value = flag:stick_horse
					}
				}
			}
		}
	}
}

#To get a creepy pet in prison
set_prison_pet_effect = {
	if = {
		limit = {
			NOT = { exists = var:prison_pet_variable }
		}
		hidden_effect = {
			random_list = {
				10 = {
					set_variable = {
						name = prison_pet_variable
						value = flag:rat
					}
				}
				10 = {
					set_variable = {
						name = prison_pet_variable
						value = flag:stone
					}
				}
				10 = {
					set_variable = {
						name = prison_pet_variable
						value = flag:spoon
					}
				}
				10 = {
					set_variable = {
						name = prison_pet_variable
						value = flag:cockroach
					}
				}
			}
		}
	}
}
