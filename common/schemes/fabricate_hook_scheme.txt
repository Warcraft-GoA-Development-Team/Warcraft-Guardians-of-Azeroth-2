fabricate_hook = {
	
	skill = intrigue
	desc = fabricate_hook_desc_general
	hostile = yes
	uses_agents = no
	icon = icon_scheme_hostile
	
	allow = {
		OR = {
			has_perk = truth_is_relative_perk # Scheme unlocked by Perk
			AND = {
				scope:owner = { 
					has_trait = vengeful 
					has_relation_rival = scope:target 
				}
			}
			#AND = {
			#	any_character_struggle = {
			#		involvement = involved
			#		has_struggle_phase_parameter = unlocks_fabricate_hooks_for_all
			#		is_secondary_character_involvement_either_trigger = {
			#			CHAR = scope:target
			#		}
			#	}
			#}
		}
		
		is_adult = yes
		is_landed = yes
		is_imprisoned = no
	}
	
	valid = {
		# Warcraft
		NOT = { is_isolated_from_trigger = { target = scope:target } }
		
		trigger_if = {
			limit = { exists = scope:target.court_owner }
			custom_description = {
				text = was_discovered_fabricating_hooks_already
				NOT = {
					scope:target.court_owner = {
						has_opinion_modifier = {
							target = scope:owner
							modifier = fabricated_hook_against_court_opinion
						}
					}
				}
			}
		}
		trigger_else = {
			custom_description = {
				text = can_not_fabricate_hooks_on_wanderers
				always = no
			}
		}
		scope:target = {
			is_adult = yes
			is_imprisoned = no
			NOT = { is_incapable_trigger = yes }
			#exists = location
			in_diplomatic_range = scope:owner
		}

		#Temporary fix to communicate to players that the scheme is unavailabe. 
		#A character should always have a location but some characters are lost in the pool ATM
		#This custom description should be removed once the pool is fixed, and the line from the previous block should be uncommented. 
		custom_description = {
			text = in_diplomatic_range
			scope:target = {
				exists = location
			}
		}

		custom_description = {
			text = already_has_hook_on_ruler_target
			NOT = { scope:owner = { has_hook = scope:target } }
			object = scope:target
		}
		custom_description = {
			text = already_has_strong_hook_on_target
			NOT = { scope:owner = { has_strong_hook = scope:target } }
			object = scope:target
		}
		custom_description = {
			text = already_knows_secret_about_ruler_target
			NOT = {
				scope:target = {
					is_ruler = yes
					any_secret = {
						is_known_by = scope:owner
						is_blackmailable_secret_trigger = { BLACKMAILER = scope:owner PARTICIPANT = scope:target }
					}
				}	
			}
		}
		custom_description = {
			text = already_knows_criminal_secret_about_target
			NOT = {
				scope:target = {
					any_secret = {
						is_criminal_for = scope:target
						is_known_by = scope:owner
						is_blackmailable_secret_trigger = { BLACKMAILER = scope:owner PARTICIPANT = scope:target }
					}
				}
			}
		}
		# Special AI exceptions
		NOT = {
			scope:owner = {
				is_ai = yes
				has_opinion_modifier = {
					target = scope:target
					modifier = repentant_opinion
				}
			}
		}
	}
		
	base_success_chance = {
		base = 40

		hostile_scheme_base_chance_modifier = yes

		modifier = {
			add = 20
			desc = FABRICATE_HOOK_DECEITFUL
			scope:owner = {
				has_trait = deceitful
			}
		}

		modifier = {
			add = -20
			desc = FABRICATE_HOOK_HONEST
			scope:owner = {
				has_trait = honest
			}
		}

		modifier = {
			add = 10
			desc = FABRICATE_HOOK_TARGET_TRUSTING
			scope:target = {
				has_trait = trusting
			}
		}

		modifier = {
			add = 10
			desc = FABRICATE_HOOK_TARGET_INTELLECT_BAD_1
			scope:target = {
				has_trait = intellect_bad_1
			}
		}

		modifier = {
			add = 20
			desc = FABRICATE_HOOK_TARGET_INTELLECT_BAD_2
			scope:target = {
				has_trait = intellect_bad_2
			}
		}

		modifier = {
			add = 30
			desc = FABRICATE_HOOK_TARGET_INTELLECT_BAD_3
			scope:target = {
				has_trait = intellect_bad_3
			}
		}

		modifier = {
			add = -10
			desc = FABRICATE_HOOK_TARGET_INTELLECT_GOOD_1
			scope:target = {
				has_trait = intellect_good_1
			}
		}

		modifier = {
			add = -20
			desc = FABRICATE_HOOK_TARGET_INTELLECT_GOOD_2
			scope:target = {
				has_trait = intellect_good_2
			}
		}

		modifier = {
			add = -30
			desc = FABRICATE_HOOK_TARGET_INTELLECT_GOOD_3
			scope:target = {
				has_trait = intellect_good_3
			}
		}

		modifier = {
			add = -20
			desc = FABRICATE_HOOK_TARGET_SCHEMER
			scope:target = {
				has_trait = schemer
			}
		}

		modifier = {
			add = -20
			desc = FABRICATE_HOOK_TARGET_PARANOID
			scope:target = {
				has_trait = paranoid
			}
		}

		modifier = {
			add = -10
			desc = FABRICATE_HOOK_TARGET_FICKLE
			scope:target = {
				has_trait = fickle
			}
		}

		modifier = {
			add = 10
			desc = FABRICATE_HOOK_TARGET_ARROGANT
			scope:target = {
				has_trait = arrogant
			}
		}

		modifier = {
			add = 20
			desc = FABRICATE_HOOK_TARGET_GREEDY
			scope:target = {
				has_trait = greedy
			}
		}

		modifier = {
			add = 10
			desc = FABRICATE_HOOK_TARGET_CRAVEN
			scope:target = {
				has_trait = craven
			}
		}

		compare_modifier = {
			value = scope:owner.cp:councillor_spymaster.intrigue
			multiplier = 2
			desc = FABRICATE_HOOK_SPYMASTER_INTRIGUE
			trigger = {
				exists = scope:owner.cp:councillor_spymaster
				NOT = { scope:owner.cp:councillor_spymaster = scope:target }
			}
		}
		
		modifier = {
			add = -50
			desc = FABRICATE_HOOK_TARGETING_SPYMASTER
			scope:target = {
				has_council_position = councillor_spymaster
			}
		}
		
		# Spiritual Head of Faith
		modifier = {
			add = -50
			desc = "SCHEME_VS_SPIRITUAL_HOF"
			scope:target = {
				faith = scope:owner.faith
				faith = {
					has_doctrine = doctrine_spiritual_head
				}
				faith = {
					exists = religious_head
					religious_head = {
			 			this = scope:target
			 		}
				}
			}
		}
	}
		
	cooldown = { years = 2 }
	is_secret = yes
	base_secrecy = 10

	on_ready = {
		# Do the Success Roll
		random = {
			chance = scheme_success_chance
			save_scope_value_as = {
				name = scheme_succeeded
				value = yes
			}
		}
		# Do the Secrecy Roll
		save_scope_value_as = {
			name = discovery_chance
			value = {
				value = 100
				subtract = scheme_secrecy
			}
		}
		random = {
			chance = scope:discovery_chance
			save_scope_value_as = {
				name = scheme_discovered
				value = yes
			}
		}

		# On Success: Check for viable Secret
		if = {
			limit = { exists = scope:scheme_succeeded }
			scheme_target = {
				if = {
					limit = { is_ruler = yes }
					# Check for secrets that can be revealed
					if = {
						limit = {
							any_secret = {
								NOT = { is_known_by = scope:owner }
							}
						}
						random_secret = {
							limit = {
								NOT = { is_known_by = scope:owner }
							}
							weight = {
								base = 1
								modifier = { # It's more fun to Discover a Criminal Secret
									add = 5
									is_criminal_for = scope:target
								}
							}
							save_scope_as = secret_to_reveal
						}
					}
					else_if = { # Others require Criminal Secrets
						limit = {
							any_secret = {
								NOT = { is_known_by = scope:owner }
								is_criminal_for = scope:target
							}
						}
						random = {
							chance = 20
							random_secret = {
								limit = {
									NOT = { is_known_by = scope:owner }
									is_criminal_for = scope:target	
								}
								save_scope_as = secret_to_reveal
							}
						}
					}
				}
				else = {
					if = {
						limit = {
							any_secret = {
								NOT = { is_known_by = scope:owner }
								is_criminal_for = scope:target
							}
						}
						random_secret = {
							limit = {
								NOT = { is_known_by = scope:owner }
								is_criminal_for = scope:target
							}
							save_scope_as = secret_to_reveal
						}
					}
				}
			}

			if = {
				limit = { exists = scope:secret_to_reveal }
				scheme_owner = {
					trigger_event = fabricate_hook_outcome.0001 # Secret discovery handling
				}
			}
			else = {
				if = {
					limit = { scope:target = { is_ruler = yes } }
					# Strong Hook against Ruler roll
					random = {
						chance = 20
						save_scope_value_as = {
							name = strong_hook_against_ruler
							value = yes
						}
					}
				}
				scheme_owner = {
					trigger_event = {
						on_action = fabricate_hook_method_success_outcome
					}
				}
			}
		}

		else = {
			if = {
				limit = { exists = scope:scheme_discovered }
				scheme_owner = {
					trigger_event = fabricate_hook_outcome.3001
				}
			}
			else = {
				scheme_owner = {
					send_interface_message = {
						type = fabricate_hook_bad_message
						title = fabricate_hook_failed_reset_message
						
						custom_tooltip = restart_scheme_tt
						hidden_effect = {
							scope:scheme = {
								add_scheme_progress = -10
							}
						}
					}
				}
			}
		}
	}

	on_monthly = {
		hostile_scheme_discovery_chance_effect = yes
		if = {
			limit = {
				NOT = { exists = scope:discovery_event_happening }
			}
			scheme_owner = {
				trigger_event = {
					on_action = fabricate_hook_ongoing
					days = { 1 30 }
				}
			}
		}
	}

	
	on_invalidated = {
		scheme_target = {
			save_scope_as = target
		}
		scheme_owner = {
			save_scope_as = owner
		}
		if = {
			limit = {
				scope:target = { is_alive = no }
			}
			scope:owner = {
				send_interface_toast = {
					title = fabricate_hook_scheme_invalidated_title
					left_icon = scope:target
					custom_description_no_bullet = {
						object = scope:target
						text = scheme_target_died
					}
				}
			}
		}
		else_if = {
			limit = {
				scope:target = {
					is_imprisoned = yes
				}
			}
			scope:target.imprisoner = { save_scope_as = other_imprisoner }
			scope:owner = {
				send_interface_toast = {
					title = fabricate_hook_scheme_invalidated_title
					left_icon = scope:target
					custom_description_no_bullet = {
						subject = scope:other_imprisoner
						object = scope:target
						text = scheme_target_imprisoned_by_other
					}
				}
			}
		}
		else_if = {
			limit = {
				scope:target = {
					is_incapable_trigger = yes
				}
			}
			scope:owner = {
				send_interface_toast = {
					title = fabricate_hook_scheme_invalidated_title
					left_icon = scope:target
					custom_tooltip = scheme_target_is_incapable
				}
			}
		}
		else_if = {
			limit = {
				scope:owner = {
					has_hook = scope:target
				}
			}
			scope:owner = {
				send_interface_toast = {
					title = fabricate_hook_scheme_invalidated_title
					left_icon = scope:target
					custom_tooltip = fabricate_hook_has_gained_hook
				}
			}
		}
		else_if = {
			limit = {
				scope:target = { 
					NOT = { in_diplomatic_range = scope:owner } 
				}
			}
			scope:owner = {
				send_interface_toast = {
					title = fabricate_hook_scheme_invalidated_title
					left_icon = scope:target
					custom_description_no_bullet = {
						object = scope:target
						text = scheme_target_not_in_diplomatic_range
					}
				}
			}
		}
	}
	
	
	power_per_skill_point = 3
	resistance_per_skill_point = 2
	power_per_agent_skill_point = 1
	spymaster_power_per_skill_point = 2
	spymaster_resistance_per_skill_point = 1
	tier_resistance = 1
	
	minimum_progress_chance = 20
	maximum_progress_chance = 80
	minimum_success = 5
	maximum_secrecy = 95
	maximum_success = 90
	
	success_desc = "FABRICATE_HOOK_SUCCESS_DESC"
	discovery_desc = "FABRICATE_HOOK_DISCOVERY_DESC"
}
