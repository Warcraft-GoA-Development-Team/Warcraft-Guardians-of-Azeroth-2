#Change hunt score
change_hunt_success_chance = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	common_interaction = yes
	icon = activity_hunt
	is_shown = {
		debug_only = yes
		scope:actor.involved_activity ?= {
			has_activity_type = activity_hunt
			exists = var:hunt_success_chance
		}
	}
	
	send_option = {
		flag = score_massive
		localization = score_massive
	}

	send_option = {
		flag = score_major
		localization = score_major
	}
	
	send_option = {
		flag = score_medium
		localization = score_medium
	}
	
	send_option = {
		flag = score_minor
		localization = score_minor
	}

	send_option = {
		flag = decrease_score_minor
		localization = decrease_score_minor
	}

	send_option = {
		flag = decrease_score_medium
		localization = decrease_score_medium
	}
	
	send_option = {
		flag = decrease_score_major
		localization = decrease_score_major
	}

	send_option = {
		flag = decrease_score_massive
		localization = decrease_score_massive
	}

	on_accept = {
		scope:actor.involved_activity = {
			if = {
				limit = {
					NOT = { exists = var:hunt_success_chance_event }
				}
				set_variable = { name = hunt_success_chance_event value = 0 }
			}
			switch = {
				trigger = yes
				scope:score_massive = {
					change_variable = { name = hunt_success_chance_event add = hunt_activity_success_increase_massive_value }
				}
				scope:score_major = {
					change_variable = { name = hunt_success_chance_event add = hunt_activity_success_increase_major_value }
				}
				scope:score_medium = {
					change_variable = { name = hunt_success_chance_event add = hunt_activity_success_increase_medium_value }
				}
				scope:score_minor = {
					change_variable = { name = hunt_success_chance_event add = hunt_activity_success_increase_minor_value }
				}
				scope:decrease_score_massive = {
					change_variable = { name = hunt_success_chance_event add = hunt_activity_success_decrease_massive_value }
				}
				scope:decrease_score_major = {
					change_variable = { name = hunt_success_chance_event add = hunt_activity_success_decrease_major_value }
				}
				scope:decrease_score_medium = {
					change_variable = { name = hunt_success_chance_event add = hunt_activity_success_decrease_medium_value }
				}
				scope:decrease_score_minor = {
					change_variable = { name = hunt_success_chance_event add = hunt_activity_success_decrease_minor_value }
				}
			}
			set_variable = {
				name = hunt_success_chance
				value = {
					value = hunt_success_chance_value
					add = var:hunt_success_chance_event
				}
			}
		}
	}
	
	auto_accept = yes
}

debug_give_animal_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = dog_positive
	is_shown = {
		debug_only = yes
		scope:recipient = {
			NAND = {
				any_owned_story = { story_type = story_cycle_pet_cat }
				any_owned_story = { story_type = story_cycle_pet_dog }
			}
		}
	}
	
	send_option = {
		is_valid = {
			NOT = {
				scope:recipient = { any_owned_story = { story_type = story_cycle_pet_dog } }
			}
		}
		flag = story_cycle_pet_dog
		localization = story_cycle_pet_dog
	}
	
	send_option = {
		is_valid = {
			NOT = {
				scope:recipient = { any_owned_story = { story_type = story_cycle_pet_cat } }
			}
		}
		flag = story_cycle_pet_cat
		localization = story_cycle_pet_cat
	}
	
	on_accept = {
		scope:recipient = {
			switch = {
				trigger = yes
				scope:story_cycle_pet_dog = {
					start_dog_story_cycle_effect = yes
				}
				scope:story_cycle_pet_cat = {
					start_cat_story_cycle_effect = yes
				}
			}
		}
	}
	
	auto_accept = yes
}

#Change tournament score
change_tournament_score = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	common_interaction = yes
	icon = activity_tournament
	is_shown = {
		debug_only = yes
		scope:recipient = {
			exists = involved_activity
			involved_activity = {
				has_activity_type = activity_tournament
			}
			activity_is_competing_trigger = yes
		}
	}
	
	send_option = {
		flag = score_massive
		localization = score_massive
	}

	send_option = {
		flag = score_major
		localization = score_major
	}
	
	send_option = {
		flag = score_medium
		localization = score_medium
	}
	
	send_option = {
		flag = score_minor
		localization = score_minor
	}

	send_option = {
		flag = decrease_score_minor
		localization = decrease_score_minor
	}

	send_option = {
		flag = decrease_score_medium
		localization = decrease_score_medium
	}
	
	send_option = {
		flag = decrease_score_major
		localization = decrease_score_major
	}

	send_option = {
		flag = decrease_score_massive
		localization = decrease_score_massive
	}

	on_accept = {
		scope:recipient = {
			if = {
				limit = { scope:score_massive = yes }
				activity_tournament_change_contestant_score_effect = { SCORE = increase_massive }
			}
			else_if = {
				limit = { scope:score_major = yes }
				activity_tournament_change_contestant_score_effect = { SCORE = increase_major }
			}
			else_if = {
				limit = { scope:score_medium = yes }
				activity_tournament_change_contestant_score_effect = { SCORE = increase_medium }
			}
			else_if = {
				limit = { scope:score_minor = yes }
				activity_tournament_change_contestant_score_effect = { SCORE = increase_minor }
			}
			else_if = {
				limit = { scope:decrease_score_massive = yes }
				activity_tournament_change_contestant_score_effect = { SCORE = decrease_massive }
			}
			else_if = {
				limit = { scope:decrease_score_major = yes }
				activity_tournament_change_contestant_score_effect = { SCORE = decrease_major }
			}
			else_if = {
				limit = { scope:decrease_score_medium = yes }
				activity_tournament_change_contestant_score_effect = { SCORE = decrease_medium }
			}
			else_if = {
				limit = { scope:decrease_score_minor = yes }
				activity_tournament_change_contestant_score_effect = { SCORE = decrease_minor }
			}
		}
	}
	
	auto_accept = yes
}

#Bring a character to your court
add_to_court_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = guest
	is_shown = {
		debug_only = yes
		NOT = { scope:recipient = scope:actor }
		scope:recipient = {
			is_landed = no
			NOT = { is_courtier_of = scope:actor }
		}
	}
	
	on_accept = {
		scope:actor = { add_courtier = scope:recipient }
	}
	
	auto_accept = yes
}

give_secrets_to_court_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	common_interaction = yes
	icon = debug_secret
	interface_priority = -2
	
	is_shown = {
		debug_only = yes
	}
	on_accept = {
		scope:recipient = {
			random_list = {
				30 = {
					give_deviant_secret_or_trait_effect = yes
				}
				30 = {
					give_homosexual_secret_or_nothing_effect = yes
				}
			}
			hidden_effect = {
				every_courtier = {	
					give_random_likely_secret_effect = yes
				}
			}
		}
	}
	
	auto_accept = yes
}

set_up_secrets_in_realm_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = debug_secret

	is_shown = {
		debug_only = yes
	}
	on_accept = {
		scope:recipient.top_liege = {
			hidden_effect = {
				# Start by adding all realm characters and neighbouring realm characters to a list
				add_to_list = secret_setup
				every_vassal_or_below = {
					add_to_list = secret_setup
					every_courtier_or_guest = {
						add_to_list = secret_setup
					}
				}
				every_neighboring_top_liege_realm_owner = {
					add_to_list = secret_setup
					every_vassal_or_below = {
						add_to_list = secret_setup
						every_courtier_or_guest = {
							add_to_list = secret_setup
						}
					}
				}
				every_in_list = { # Give everyone in the list a 50% chance of getting a secret
					list = secret_setup
					random_list = {
						60 = { give_random_likely_secret_effect = yes }
						60 = { }
					}
				}
				random_in_list = { # Reveal one secret to the character the decision is used on, from the same realm
					list = secret_setup
					limit = {
						top_liege = scope:recipient.top_liege
						any_secret = {
							NOT = { is_known_by = scope:recipient }
						}
					}
					random_secret = {
						limit = {
							NOT = { is_known_by = scope:recipient }
						}
						reveal_to = scope:recipient
					}
				}
				random_in_list = { # Reveal one secret to the character the decision is used on, NOT from the same realm
					list = secret_setup
					limit = {
						NOT = { top_liege = scope:recipient.top_liege }
						any_secret = {
							NOT = { is_known_by = scope:recipient }
						}
					}
					random_secret = {
						limit = {
							NOT = { is_known_by = scope:recipient }
						}
						reveal_to = scope:recipient
					}
				}
				every_in_list = { # Everyone in the list has a chance to get to know of a secret anyone else has in the list
					list = secret_setup
					save_scope_as = reveal_to_me
					random = {
						chance = 75
						random_in_list = {
							list = secret_setup
							limit = {
								any_secret = {
									NOT = { is_known_by = scope:reveal_to_me }
								}
							}
							random_secret = {
								limit = {
									NOT = { is_known_by = scope:reveal_to_me }
								}
								reveal_to = scope:reveal_to_me
							}
						}
					}
				}
				random_in_list = { # Imprison someone with a secret you know about
					list = secret_setup
					limit = {
						any_secret = {
							is_known_by = scope:recipient
						}
						NOT =  { this = scope:recipient }
						is_foreign_court_guest = no
					}
					save_scope_as = prisoner_secret
					scope:recipient = {
						imprison = {
							target = scope:prisoner_secret
							type = dungeon
						}
					}
				}
				random_in_list = { # Imprison someone who has a secret you don't know about
					list = secret_setup
					limit = {
						any_secret = {
							NOT = { is_known_by = scope:recipient }
						}
						NOT =  { this = scope:recipient }
						is_foreign_court_guest = no
					}
					save_scope_as = prisoner_secret
					scope:recipient = {
						imprison = {
							target = scope:prisoner_secret
							type = dungeon
						}
					}
				}
			}
		}
	}
	
	auto_accept = yes
}

add_hook_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	common_interaction = yes
	interface_priority = -1
	icon = hook_icon

	is_shown = {
		debug_only = yes
		NOT = { scope:recipient = scope:actor }
	}

	send_option = {
		flag = weak_hook
		localization = add_weak_hook_interaction
	}
	send_option = {
		flag = strong_hook
		localization = add_strong_hook_interaction
	}
	send_option = {
		flag = perpetual_hook
		localization = add_perpetual_hook_interaction
	}
	auto_accept = yes
	on_accept = {
		scope:actor = {
			switch = {
				trigger = yes
				scope:weak_hook = {
					add_hook = {
						target = scope:recipient
						type = favor_hook
					}
				}
				scope:strong_hook = {
					add_hook = {
						target = scope:recipient
						type = strong_test_hook
					}
				}
				scope:perpetual_hook = {
					add_hook = {
						target = scope:recipient
						type = perpetual_test_hook
					}
				}
			}
		}
	}
}

set_relation_debug = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	common_interaction = yes
	icon = debug_chars
	is_shown = {
		debug_only = yes
		NOT = {
			scope:recipient = scope:actor
		}
	}
	
	send_option = {
		is_valid = {
			scope:actor = {
				NOR = {
					has_relation_potential_friend = scope:recipient
					has_relation_friend = scope:recipient
					has_relation_best_friend = scope:recipient
				}
			}
		}
		flag = potential_friend
		localization = set_relation_debug_potential_friend
	}
	send_option = {
		is_valid = {
			scope:actor = {
				NOR = {
					has_relation_potential_rival = scope:recipient
					has_relation_rival = scope:recipient
					has_relation_nemesis = scope:recipient
				}
			}
		}
		flag = potential_rival
		localization = set_relation_debug_potential_rival
	}
	send_option = {
		is_valid = {
			scope:actor = {
				NOR = {
					has_relation_potential_lover = scope:recipient
					has_relation_lover = scope:recipient
					has_relation_soulmate = scope:recipient
				}
			}
		}
		flag = potential_lover
		localization = set_relation_debug_potential_lover
	}
	send_option = {
		is_valid = {
			scope:actor = {
				NOR = {
					has_relation_friend = scope:recipient
					has_relation_best_friend = scope:recipient
				}
			}
		}
		flag = friend
		localization = set_relation_debug_friend
	}
	send_option = {
		is_valid = {
			scope:actor = {
				NOR = {
					has_relation_rival = scope:recipient
					has_relation_nemesis = scope:recipient
				}
			}
		}
		flag = rival
		localization = set_relation_debug_rival
	}
	send_option = {
		is_valid = {
			scope:actor = {
				NOR = {
					has_relation_lover = scope:recipient
					has_relation_soulmate = scope:recipient
				}
			}
		}
		flag = lover
		localization = set_relation_debug_lover
	}
	send_option = {
		is_valid = {
			scope:actor = {
				NOR = {
					any_secret ={
						secret_type = secret_lover
						secret_target = scope:recipient
					}
					has_relation_lover = scope:recipient
					has_relation_soulmate = scope:recipient
				}
			}
		}
		flag = lover_secret
		localization = set_relation_debug_lover_secret
	}
	send_option = {
		is_valid = {
			scope:actor = {
				NOT = {
					has_relation_best_friend = scope:recipient
				}
			}
		}
		flag = best_friend
		localization = set_relation_debug_best_friend
	}
	send_option = {
		is_valid = {
			scope:actor = {
				NOT = {
					has_relation_nemesis = scope:recipient
				}
			}
		}
		flag = nemesis
		localization = set_relation_debug_nemesis
	}
	send_option = {
		is_valid = {
			scope:actor = {
				NOT = {
					has_relation_soulmate = scope:recipient
				}
			}
		}
		flag = soulmate
		localization = set_relation_debug_soulmate
	}
	send_option = {
		is_valid = {
			scope:actor = {
				NOT = {
					has_relation_bully = scope:recipient
				}
			}
		}
		flag = bully
		localization = set_relation_debug_bully
	}
	send_option = {
		is_valid = {
			scope:actor = {
				NOT = {
					has_relation_victim = scope:recipient
				}
			}
		}
		flag = victim
		localization = set_relation_debug_victim
	}
	send_option = {
		is_valid = {
			scope:actor = {
				NOT = {
					has_relation_crush = scope:recipient
				}
			}
		}
		flag = crush
		localization = set_relation_debug_crush
	}
	send_option = {
		is_valid = {
			scope:recipient = {
				NOT = {
					has_relation_crush = scope:actor
				}
			}
		}
		flag = crush_on_me
		localization = set_relation_debug_crush_on_me
	}
	
	on_accept = {
		scope:recipient = {
			hidden_effect = {
				if = {
					limit = { scope:potential_friend = yes }
					set_relation_potential_friend = scope:actor
				}
				else_if = {
					limit = { scope:potential_rival = yes }
					set_relation_potential_rival = scope:actor
				}
				else_if = {
					limit = { scope:potential_lover = yes }
					set_relation_potential_lover = scope:actor
				}
				else_if = {
					limit = { scope:friend = yes }
					set_relation_friend = { reason = test_friend_desc target = scope:actor }
				}
				else_if = {
					limit = { scope:rival = yes }
					set_relation_rival = { reason = test_rival_desc target = scope:actor }
				}
				else_if = {
					limit = { scope:lover = yes }
					#set_relation_lover = { reason = test_lover_desc target = scope:actor }
					random_independent_ruler = {
						save_scope_as = test_2
					}
					set_relation_lover = { reason = lover_hunters_tumble target = scope:actor involved_character = scope:test_2 province = scope:test_2.capital_province }
				}
				else_if = {
					limit = { scope:lover_secret = yes }
					add_secret = {
						target = scope:actor
						type = secret_lover
					}
					scope:actor = {
						add_secret = {
							target = scope:recipient
							type = secret_lover
						}
					}
				}
				else_if = {
					limit = { scope:best_friend = yes }
					set_relation_best_friend = { reason = best_friend_poetry copy_reason = friend target = scope:actor }
				}
				else_if = {
					limit = { scope:nemesis = yes }
					set_relation_nemesis = { reason = test_nemesis_desc copy_reason = rival target = scope:actor }
				}
				else_if = {
					limit = { scope:soulmate = yes }
					set_relation_soulmate = { reason = test_soulmate_desc copy_reason = lover target = scope:actor }
				}
				else_if = {
					limit = { scope:crush = yes }
					scope:actor = { set_relation_crush = prev } #You crush on the recipient
				}
				else_if = {
					limit = { scope:crush_on_me = yes }
					set_relation_crush = scope:actor
				}
				else_if = {
					limit = { scope:bully = yes }
					set_relation_bully = scope:actor
				}
				else_if = {
					limit = { scope:victim = yes }
					set_relation_victim = scope:actor
				}
			}
		}
	}
	auto_accept = yes
}

change_character_weight_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = activity_feast

	is_shown = { debug_only = yes }

	send_option = {
		flag = gain_weight
		localization = add_character_weight_interaction
	}
	send_option = {
		flag = lose_weight
		localization = remove_character_weight_interaction
	}

	on_accept = {
		scope:recipient = {
			switch = {
				trigger = yes
				scope:gain_weight = { change_current_weight = 25 }
				scope:lose_weight = { change_current_weight = -25 }
			}
		}
	}
	auto_accept = yes
}

slay_character_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	common_interaction = yes
	icon = icon_dead
	
	interface_priority = -1

	is_shown = { debug_only = yes }

	send_option = {
		flag = random_slayer
		localization = random_slay_character_interaction
	}
	send_option = {
		flag = no_slayer
		localization = null_slay_character_interaction
	}
	send_option = {
		is_valid = {
			NOT = { scope:recipient = scope:actor }
		}
		flag = actor_slayer
		localization = actor_slay_character_interaction
	}
	send_option = {
		flag = bubonic_plague_slayer
		localization = give_bubonic_plague_interaction
	}
	
	on_accept = {
		scope:recipient = {
			switch = {
				trigger = yes
				scope:random_slayer = {
					random_independent_ruler = {
						limit = {
							NOT = { this = scope:recipient }
						}
						save_scope_as = rando
					}
					hidden_effect = {
						death = {
							death_reason = death_duel
							killer = scope:rando
						}
					}
				}
				scope:no_slayer = {
					death = { death_reason = death_natural_causes }
				}
				scope:actor_slayer = {
					death = {
						death_reason = death_duel
						killer = scope:actor
					}
				}
				scope:bubonic_plague_slayer = {
					add_trait = bubonic_plague
				}
			}
		}
	}
	auto_accept = yes
}

change_cultural_acceptance_debug_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = icon_culture

	is_shown = {
		debug_only = yes
		NOT = { scope:actor.culture = scope:recipient.culture }
	}

	send_option = {
		flag = increase_cultural_acceptance
		localization = increase_cultural_acceptance_debug_interaction
	}
	send_option = {
		flag = decrease_cultural_acceptance
		localization = decrease_cultural_acceptance_debug_interaction
	}

	on_accept = {
		scope:recipient.culture = {
			switch = {
				trigger = yes
				scope:increase_cultural_acceptance = {
					change_cultural_acceptance = {
						target = scope:actor.culture
						value = 25
						desc = debug
					}
				}
				scope:decrease_cultural_acceptance = {
					change_cultural_acceptance = {
						target = scope:actor.culture
						value = -25
						desc = debug
					}
				}
			}		
		}
	}
	auto_accept = yes
}

learn_language_debug_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = icon_scheme_learn_language
	
	interface_priority = -1

	is_shown = {
		debug_only = yes
		NOT = {
			scope:actor = { knows_language_of_culture = scope:recipient.culture }
		}
	}

	on_accept = {
		scope:actor = {
			learn_language_of_culture = scope:recipient.culture
		}
	}
	auto_accept = yes
}

#Start a duel or board game against another character
start_bout_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = icon_combat
	is_shown = {
		debug_only = yes
		NOT = { scope:recipient = scope:actor }
	}
	
	on_accept = {
		# Duels.
		if = {
			limit = { scope:single_combat = yes }
			scope:actor = { trigger_event = single_combat.1004 }
		}
		# Board Games.
		if = {
			limit = {
				OR = {
					scope:board_game_chess = yes
					scope:board_game_pachisi = yes
					scope:board_game_tabula = yes
					scope:board_game_hnefatafl = yes
					scope:board_game_go = yes
					scope:board_game_fidchell = yes
				}
			}
			scope:actor = { trigger_event = board_games.0102 }
		}
	}

	send_option = {
		flag = single_combat
		localization = start_bout_interaction_single_combat
	}
	
	send_option = {
		flag = board_game_chess
		localization = start_bout_interaction_board_game_chess
	}

	send_option = {
		flag = board_game_pachisi
		localization = start_bout_interaction_board_game_pachisi
	}

	send_option = {
		flag = board_game_tabula
		localization = start_bout_interaction_board_game_tabula
	}

	send_option = {
		flag = board_game_hnefatafl
		localization = start_bout_interaction_board_game_hnefatafl
	}

	send_option = {
		flag = board_game_go
		localization = start_bout_interaction_board_game_go
	}

	send_option = {
		flag = board_game_fidchell
		localization = start_bout_interaction_board_game_fidchell
	}

	auto_accept = yes
}

#add_artifact_interaction = {

take_artifact_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = icon_scheme_steal_back_artifact

	target_type = artifact
	target_filter = recipient_artifacts

	is_shown = {
		debug_only = yes
		scope:recipient = {
			any_character_artifact = { exists = this }
		}
	}

	send_option = {
		is_valid = {
			NOT = { scope:recipient = scope:actor }
		}
		flag = player
		localization = take_artifact_player
	}
	send_option = {
		is_valid = {
			scope:recipient = {
				any_neighboring_top_liege_realm_owner = {
					NOR = {
						this = scope:recipient
						this = scope:actor
					}
				}
			}
		}
		flag = random_neighbor
		localization = give_away_random_artifact_interaction
	}
	
	is_highlighted = { always = yes }

	on_accept = {
		scope:recipient = {
			switch = {
				trigger = yes
				scope:random_neighbor = {
					random_neighboring_top_liege_realm_owner = {
						limit = {
							NOR = {
								this = scope:recipient
								this = scope:actor
							}
						}
						save_scope_as = new_owner
					}
				}
				scope:player = {
					scope:actor = { save_scope_as = new_owner }
				}
			}
		}
		scope:target = { set_owner = scope:new_owner }
	}

	auto_accept = yes
	
	ai_accept = {
		base = 100
	}
	
	auto_accept = yes
}

add_artifact_claim_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = icon_scheme_steal_back_artifact

	target_type = artifact
	target_filter = recipient_artifacts

	is_shown = {
		scope:recipient = {
			any_character_artifact = { exists = this }
		}
		NOT = { scope:recipient = scope:actor }
		debug_only = yes
	}

	send_option = {
		flag = personal
		localization = add_claim_on_artifact_interaction
	}
	send_option = {
		flag = house
		localization = add_house_claim_on_artifact_interaction
	}
	on_accept = {
		scope:actor = {
			switch = {
				trigger = yes
				scope:personal = { add_personal_artifact_claim = scope:target }
				scope:house = {
					house = { add_house_artifact_claim = scope:target }
				}
			}
		}
	}
	auto_accept = yes
}

debug_destroy_artifact_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = artifact

	target_type = artifact
	target_filter = recipient_artifacts

	is_shown = {
		debug_only = yes
		scope:recipient = {
			any_character_artifact = { exists = this }
		}
	}
	
	on_accept = { destroy_artifact = scope:target }
	
	auto_accept = yes
}

inspire_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = inspiration

	is_shown = {
		debug_only = yes
		scope:recipient = {
			NOT = { exists = inspiration }
			has_completed_inspiration = no
			is_ruler = no
			is_landed = no
		}
	}

	send_option = {
		flag = weapon_inspiration
		localization = debug_inspiration_weapon
	}
	send_option = {
		flag = armor_inspiration
		localization = debug_inspiration_armor
	}
	send_option = {
		flag = book_inspiration
		localization = debug_inspiration_book
	}
	send_option = {
		flag = weaver_inspiration
		localization = debug_inspiration_weaver
	}
	send_option = {
		flag = adventure_inspiration
		localization = debug_inspiration_adventure
	}
	send_option = {
		flag = artisan_inspiration
		localization = debug_inspiration_artisan
	}
	send_option = {
		flag = smith_inspiration
		localization = debug_inspiration_smith
	}
	send_option = {
		flag = alchemy_inspiration
		localization = debug_inspiration_alchemy
	}
	
	on_accept = {
		scope:recipient = {
			if = {
				limit = {
					always = scope:book_inspiration
				}
				create_inspiration = book_inspiration
				custom_tooltip = inspire_interaction_book
			}
			else_if = {
				limit = {
					always = scope:weaver_inspiration
				}
				create_inspiration = weaver_inspiration
				custom_tooltip = inspire_interaction_weaver
			}
			else_if = {
				limit = {
					always = scope:adventure_inspiration
				}
				create_inspiration = adventure_inspiration
				custom_tooltip = inspire_interaction_adventure
			}
			else_if = {
				limit = {
					always = scope:artisan_inspiration
				}
				create_inspiration = artisan_inspiration
				custom_tooltip = inspire_interaction_artisan
			}
			else_if = {
				limit = {
					always = scope:smith_inspiration
				}
				create_inspiration = smith_inspiration
				custom_tooltip = inspire_interaction_smith
			}
			else_if = {
				limit = {
					always = scope:alchemy_inspiration
				}
				create_inspiration = alchemy_inspiration
				custom_tooltip = inspire_interaction_alchemy
			}
			else_if = {
				limit = {
					always = scope:armor_inspiration
				}
				create_inspiration = armor_inspiration
				custom_tooltip = inspire_interaction_armor
			}
			else = {
				create_inspiration = weapon_inspiration
				custom_tooltip = inspire_interaction_weapon
			}
		}
	}
	
	auto_accept = yes
}

sponsor_inspiration_debug = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	auto_accept = yes

	is_shown = {
		debug_only = yes
		exists = scope:recipient.inspiration
	}
	
	is_valid_showing_failures_only = {
		scope:actor = {
			can_sponsor_inspiration = scope:recipient.inspiration
		}
		scope:actor = { NOT = { is_isolated_from_trigger = { target = scope:recipient } } }	# Warcraft
	}
	
	is_valid = {
		scope:actor = {
			can_sponsor_inspiration = scope:recipient.inspiration
		}
	}

	on_accept = {
		scope:actor = {
			sponsor_inspiration = scope:recipient.inspiration
		}
	}
}

test_effect_localization_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no

	is_shown = {
		debug_only = yes
		scope:actor = { is_ai = no }
		NOT = { scope:actor = scope:recipient }
		always = no # Comment out this line to see this interaction
	}
	on_accept = {
		# Effects are shown under the actor and recipient entries
		scope:actor = { add_prestige = 50 }
		scope:recipient = { add_prestige = 50 }

		# Effects on the same things are collected together into their existing actor and recipient block
		scope:actor = { add_piety = 50 }
		scope:recipient = { add_piety = 50 }

		# Effects in a self contained list are shown in the general text output and will explicitly name the involved characters, including the actor and recipient, with respect to first person pronouns if the player
		scope:actor = {
			random = {
				chance = 30
				scope:actor = {
					add_gold = 200 
					random_courtier = { remove_short_term_gold = 50 }
				}
				scope:recipient = { add_piety = 200 }
			}
			random_list = {
				50 = {
					scope:actor = { 
						add_gold = 50 
						random_courtier = { add_gold = 10 }
					}
					scope:recipient = { add_piety = 50 }
				}
				50 = {
					scope:actor = { 
						remove_short_term_gold = 50 
						random_courtier = { remove_short_term_gold = 10 }
					}
					scope:recipient = { add_piety = -50 }
				}
			}
			# Single Skill Duel
			duel = {
				skill = diplomacy
				target = scope:recipient
				50 = {
					compare_modifier = {
						value = scope:duel_value
						multiplier = 3.5
						min = -49
					}
					scope:actor = {
						add_gold = 50
						random_courtier = { add_gold = 10 }
					}
					scope:recipient = { add_piety = 50 }
				}
				50 = {
					compare_modifier = {
						value = scope:duel_value
						multiplier = -3.5
						min = -49
					}
					scope:actor = {
						remove_short_term_gold = 50
						random_courtier = { remove_short_term_gold = 10 }
					}
					scope:recipient = { add_piety = -50 }
				}
			}
			# Multi-skill duel
			duel = {
				skills = { prowess martial diplomacy }
				target = scope:recipient
				50 = {
					compare_modifier = {
						value = scope:duel_value
						multiplier = 3.5
						min = -49
					}
					scope:actor = {
						add_gold = 50
						random_courtier = { add_gold = 10 }
					}
					scope:recipient = { add_piety = 50 }
				}
				50 = {
					compare_modifier = {
						value = scope:duel_value
						multiplier = -3.5
						min = -49
					}
					scope:actor = {
						remove_short_term_gold = 50
						random_courtier = { remove_short_term_gold = 10 }
					}
					scope:recipient = { add_piety = -50 }
				}
			}
		}

		# Effects on non core targets get their own separate entries
		scope:actor = {
			every_courtier = {
				add_gold = 10
			}
		}
		# And multiple effects on the same objects are collected into their existing entries
		scope:actor = {
			every_courtier = {
				add_piety = 10
			}
		}
	}

	auto_accept = yes
}

#Give the character a criminal trait that allows actor to imprison them
give_criminal_trait_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = prison

	is_shown = {
		debug_only = yes
		NOT = {
			scope:actor = {
				has_imprisonment_reason = scope:recipient
			}
		}
	}

	on_accept = {
		custom_tooltip = give_criminal_trait_interaction_tt
		hidden_effect = {
			scope:recipient = {
				make_criminal_effect = yes

				#If they're still not a criminal we have them murder someone close to you
				if = {
					limit = {
						NOT = {
							scope:actor = {
								has_imprisonment_reason = scope:recipient
							}
						}
						any_close_family_member = {
							NOT = { this = scope:recipient }
						}
					}
					random_close_family_member = {
						limit = {
							NOT = { this = scope:recipient }
						}
						save_scope_as = family
						known_murder_effect = {
							VICTIM = scope:family
							MURDERER = scope:recipient
							EXPOSER = scope:recipient
						}
					}
				}
			}
		}
	}
	
	auto_accept = yes
}

generate_artifact_with_history_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = artifact

	is_shown = {
		debug_only = yes
		NOT = { scope:recipient = scope:actor }
	}
	
	on_accept = {
		scope:actor = { trigger_event = debug.400 }
	}
	
	auto_accept = yes
	
}

# Have (or trigger the aftermath of) sex with the target character
debug_sex_interaction = { # Sleep With Character
	icon = seducer
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	is_shown = {
		debug_only = yes
		NOT = { scope:recipient = scope:actor }
	}
	
	on_accept = { scope:actor = { trigger_event = debug.410 } }
	auto_accept = yes
}

debug_change_every_county = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = alliance
	
	is_shown = { debug_only = yes }
	send_option = { # Set Control to Max (100)
		flag = debug_change_every_county_max_control
		localization = debug_change_every_county.a
	}
	send_option = { # Set Control to Lowest (0) (-500)
		flag = debug_change_every_county_lowest_control
		localization = gain_county_corruption.message.low_control
	}
	send_option = { # Set Opinion to Max
		flag = debug_change_every_county_highest_opinion
		localization = debug_change_every_county.b.a
	}
	send_option = { # Set Opinion to Min
		flag = debug_change_every_county_lowest_opinion
		localization = debug_change_every_county.b.b
	}
	send_option = { # Here goes anything else you may want to do in the future, just add another send_option and then an if on the accept
		flag = debug_change_every_county_convert_to_fatih
		localization = FAITH_CONVERSION_CONVERT
	}
	# send_option = { # Here goes anything else you may want to do in the future, just add another send_option and then an if on the accept
	# 	flag = auto_formatter_complains_if_I_do_not_do_this
	# 	localization = debug_start_era_of_crusades_interaction
	# }

	on_accept = { # In retrospect, this is pretty sloppy script, but it makes sense considering how old it is -h
		if = { # Set Control to Max (100)
			limit = { scope:debug_change_every_county_max_control = yes }
			scope:recipient = { every_held_county = { change_county_control = 100 } }
		}
		else_if = {
			limit = { scope:debug_change_every_county_lowest_control = yes }
			scope:recipient = { every_held_county = { change_county_control = -500 } }
		}
		else_if = {
			limit = { scope:debug_change_every_county_highest_opinion = yes }
			scope:recipient = { every_held_county = { add_county_modifier = debug_max_popular_opinion_modifier } } # Please ignore this violation of basic scripting decency, I do it for compactness
		}
		else_if = {
			limit = { scope:debug_change_every_county_lowest_opinion = yes }
			scope:recipient = { every_held_county = { add_county_modifier = debug_min_popular_opinion_modifier } }
		}
		else_if = {
			limit = { scope:debug_change_every_county_convert_to_fatih = yes }
			scope:recipient = { every_held_county = { set_county_faith = scope:actor.faith } }
		}
	}
	
	auto_accept = yes
	ai_accept = {
		base = 100
	}
}

# Embezzle from 'em
do_a_crime_embezzle_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = icon_gold
	is_shown = {
		debug_only = yes
		NOT = { scope:recipient = scope:actor }
	}
	
	on_accept = {
		scope:actor = {
			# Steal a coin.
			if = {
				limit = { scope:steal_x1 = yes }
				give_or_update_embezzler_secret_effect = {
					TARGET = scope:recipient
					STAKE = 1
				}
				scope:recipient = {
					pay_short_term_gold = {
						target = scope:actor
						gold = 1
					}
				}
			}
			# Steal many coins.
			else_if = {
				limit = { scope:steal_x100 = yes }
				give_or_update_embezzler_secret_effect = {
					TARGET = scope:recipient
					STAKE = 100
				}
				scope:recipient = {
					pay_short_term_gold = {
						target = scope:actor
						gold = 100
					}
				}
			}
			# Steal the maniest coins.
			else_if = {
				limit = { scope:steal_x1000 = yes }
				give_or_update_embezzler_secret_effect = {
					TARGET = scope:recipient
					STAKE = 1000
				}
				scope:recipient = {
					pay_short_term_gold = {
						target = scope:actor
						gold = 1000
					}
				}
			}
		}
	}

	send_option = {
		flag = steal_x1
		localization = do_a_crime_embezzle_interaction_steal_x1
	}
	
	send_option = {
		flag = steal_x100
		localization = do_a_crime_embezzle_interaction_steal_x100
	}

	send_option = {
		flag = steal_x1000
		localization = do_a_crime_embezzle_interaction_steal_x1000
	}

	auto_accept = yes
}

add_glory_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = icon_combat
	
	interface_priority = -1

	is_shown = {
		debug_only = yes
	}

	send_option = {
		flag = high_glory
		localization = add_glory_debug_high_tt
	}
	send_option = {
		flag = low_glory
		localization = add_glory_debug_low_tt
	}
	send_option = {
		flag = delete_glory
		localization = add_glory_debug_delete_tt
	}

	on_accept = {
		scope:recipient = {
			hidden_effect = {
				if = {
					limit = {
						scope:high_glory = yes
						scope:recipient = {
							is_acclaimed = yes
						}
					}
					scope:recipient = {
						accolade = {
							add_glory = 2500
						}
					}
				}
				else_if = {
					limit = {
						scope:low_glory = yes
						scope:recipient = {
							is_acclaimed = yes
						}
					}
					scope:recipient = {
						accolade = {
							add_glory = 250
						}
					}
				}
				else_if = {
					limit = {
						scope:delete_glory = yes
						scope:recipient = {
							is_acclaimed = yes
						}
					}
					scope:recipient = {
						accolade = {
							add_glory = -5000
						}
					}
				}
			}
		}
	}
	auto_accept = yes
}

debug_progress_all_active_schemes_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = debug_secret
	is_shown = { debug_only = yes }
	on_accept = { scope:recipient = { every_scheme = { add_scheme_progress = 100 } } }
	auto_accept = yes
}

debug_travel_to_ruler_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = icon_travel
	is_shown = {
		debug_only = yes
		NOT = { scope:recipient = scope:actor }
	}

	on_accept = {
		scope:actor = {
			random_courtier_or_guest = {
				limit = {
					is_available = yes
				}
				save_scope_as = companion1
			}
			random_courtier_or_guest = {
				limit = {
					NOT = {
						this = scope:companion1
					}
					is_available = yes
				}
				save_scope_as = companion2
			}
			random_courtier_or_guest = {
				limit = {
					NOR = {
						this = scope:companion1
						this = scope:companion2
					}
					is_available = yes
				}
				save_scope_as = companion3
			}
			start_travel_plan = {
				destination = scope:recipient.capital_province
				companion = scope:companion1
				companion = scope:companion2
				companion = scope:companion3
				on_arrival_event = travel_completion_event.1000
				on_arrival_destinations = all_but_last
			}
		}
	}

	auto_accept = yes
}

debug_add_truce_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = icon_retreat
	is_shown = {
		debug_only = yes
		NOT = { scope:recipient = scope:actor }
	}

	send_option = {
		flag = one_way_receive
		localization = truce_one_way_receive
	}

	send_option = {
		flag = one_way_give
		localization = truce_one_way_give
	}

	send_option = {
		flag = two_way
		localization = truce_two_way
	}

	on_accept = {
		scope:actor = {
			switch = {
				trigger = yes
				scope:one_way_receive = {
					scope:recipient = {
						add_truce_one_way = {
							character = scope:actor
							years = 5
							name = TRUCE_DEBUG
						}
					}
				}
				scope:one_way_give = {
					add_truce_one_way = {
						character = scope:recipient
						years = 5
						name = TRUCE_DEBUG
					}
				}
				scope:two_way = {
					add_truce_both_ways = {
						character = scope:recipient
						years = 5
						name = TRUCE_DEBUG
					}
				}	
			}
		}
	}

	auto_accept = yes
}

spawn_epidemic_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = icon_dead
	
	interface_priority = -1

	is_shown = {
		debug_only = yes
	}

	send_option = {
		flag = measles
		localization = spawn_epidemic_interaction_measles
	}
	send_option = {
		flag = consumption
		localization = spawn_epidemic_interaction_consumption
	}
	send_option = {
		flag = smallpox
		localization = spawn_epidemic_interaction_smallpox
	}
	send_option = {
		flag = ergotism
		localization = spawn_epidemic_interaction_ergotism
	}
	send_option = {
		flag = bubonic_plague
		localization = spawn_epidemic_interaction_bubonic_plague
	}
	send_option = {
		flag = typhus
		localization = spawn_epidemic_interaction_typhus
	}
	send_option = {
		flag = dysentery
		localization = spawn_epidemic_interaction_dysentery
	}

	on_accept = {
		scope:recipient = {
			hidden_effect = {
				if = {
					limit = {
						scope:measles = yes
					}
					scope:recipient.capital_province = {
						create_epidemic_outbreak = {
							type = measles
							intensity = minor
						}
					}
				}
				else_if = {
					limit = {
						scope:consumption = yes
					}
					scope:recipient.capital_province = {
						create_epidemic_outbreak = {
							type = consumption
							intensity = minor
						}
					}
				}
				else_if = {
					limit = {
						scope:smallpox = yes
					}
					scope:recipient.capital_province = {
						create_epidemic_outbreak = {
							type = smallpox
							intensity = minor
						}
					}
				}
				else_if = {
					limit = {
						scope:dysentery = yes
					}
					scope:recipient.capital_province = {
						create_epidemic_outbreak = {
							type = dysentery
							intensity = minor
						}
					}
				}
				else_if = {
					limit = {
						scope:bubonic_plague = yes
					}
					scope:recipient.capital_province = {
						create_epidemic_outbreak = {
							type = bubonic_plague
							intensity = minor
						}
					}
				}
				else_if = {
					limit = {
						scope:ergotism = yes
					}
					scope:recipient.capital_province = {
						create_epidemic_outbreak = {
							type = ergotism
							intensity = minor
						}
					}
				}
				else_if = {
					limit = {
						scope:typhus = yes
					}
					scope:recipient.capital_province = {
						create_epidemic_outbreak = {
							type = typhus
							intensity = minor
						}
					}
				}
			}
		}
	}
	auto_accept = yes
}

spawn_major_epidemic_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = icon_dead
	
	interface_priority = -1

	is_shown = {
		debug_only = yes
	}

	send_option = {
		flag = measles
		localization = spawn_epidemic_interaction_measles
	}
	send_option = {
		flag = consumption
		localization = spawn_epidemic_interaction_consumption
	}
	send_option = {
		flag = smallpox
		localization = spawn_epidemic_interaction_smallpox
	}
	send_option = {
		flag = ergotism
		localization = spawn_epidemic_interaction_ergotism
	}
	send_option = {
		flag = bubonic_plague
		localization = spawn_epidemic_interaction_bubonic_plague
	}
	send_option = {
		flag = typhus
		localization = spawn_epidemic_interaction_typhus
	}
	send_option = {
		flag = dysentery
		localization = spawn_epidemic_interaction_dysentery
	}

	on_accept = {
		scope:recipient = {
			hidden_effect = {
				if = {
					limit = {
						scope:measles = yes
					}
					scope:recipient.capital_province = {
						create_epidemic_outbreak = {
							type = measles
							intensity = major
						}
					}
				}
				else_if = {
					limit = {
						scope:consumption = yes
					}
					scope:recipient.capital_province = {
						create_epidemic_outbreak = {
							type = consumption
							intensity = major
						}
					}
				}
				else_if = {
					limit = {
						scope:smallpox = yes
					}
					scope:recipient.capital_province = {
						create_epidemic_outbreak = {
							type = smallpox
							intensity = major
						}
					}
				}
				else_if = {
					limit = {
						scope:dysentery = yes
					}
					scope:recipient.capital_province = {
						create_epidemic_outbreak = {
							type = dysentery
							intensity = major
						}
					}
				}
				else_if = {
					limit = {
						scope:bubonic_plague = yes
					}
					scope:recipient.capital_province = {
						create_epidemic_outbreak = {
							type = bubonic_plague
							intensity = major
						}
					}
				}
				else_if = {
					limit = {
						scope:ergotism = yes
					}
					scope:recipient.capital_province = {
						create_epidemic_outbreak = {
							type = ergotism
							intensity = major
						}
					}
				}
				else_if = {
					limit = {
						scope:typhus = yes
					}
					scope:recipient.capital_province = {
						create_epidemic_outbreak = {
							type = typhus
							intensity = major
						}
					}
				}
			}
		}
	}
	auto_accept = yes
}

spawn_apocalyptic_epidemic_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = icon_dead
	
	interface_priority = -1

	is_shown = {
		debug_only = yes
	}

	send_option = {
		flag = measles
		localization = spawn_epidemic_interaction_measles
	}
	send_option = {
		flag = consumption
		localization = spawn_epidemic_interaction_consumption
	}
	send_option = {
		flag = smallpox
		localization = spawn_epidemic_interaction_smallpox
	}
	send_option = {
		flag = ergotism
		localization = spawn_epidemic_interaction_ergotism
	}
	send_option = {
		flag = bubonic_plague
		localization = spawn_epidemic_interaction_bubonic_plague
	}
	send_option = {
		flag = typhus
		localization = spawn_epidemic_interaction_typhus
	}
	send_option = {
		flag = dysentery
		localization = spawn_epidemic_interaction_dysentery
	}

	on_accept = {
		scope:recipient = {
			hidden_effect = {
				if = {
					limit = {
						scope:measles = yes
					}
					scope:recipient.capital_province = {
						create_epidemic_outbreak = {
							type = measles
							intensity = apocalyptic
						}
					}
				}
				else_if = {
					limit = {
						scope:consumption = yes
					}
					scope:recipient.capital_province = {
						create_epidemic_outbreak = {
							type = consumption
							intensity = apocalyptic
						}
					}
				}
				else_if = {
					limit = {
						scope:smallpox = yes
					}
					scope:recipient.capital_province = {
						create_epidemic_outbreak = {
							type = smallpox
							intensity = apocalyptic
						}
					}
				}
				else_if = {
					limit = {
						scope:dysentery = yes
					}
					scope:recipient.capital_province = {
						create_epidemic_outbreak = {
							type = dysentery
							intensity = apocalyptic
						}
					}
				}
				else_if = {
					limit = {
						scope:bubonic_plague = yes
					}
					scope:recipient.capital_province = {
						create_epidemic_outbreak = {
							type = bubonic_plague
							intensity = apocalyptic
						}
					}
				}
				else_if = {
					limit = {
						scope:ergotism = yes
					}
					scope:recipient.capital_province = {
						create_epidemic_outbreak = {
							type = ergotism
							intensity = apocalyptic
						}
					}
				}
				else_if = {
					limit = {
						scope:typhus = yes
					}
					scope:recipient.capital_province = {
						create_epidemic_outbreak = {
							type = typhus
							intensity = apocalyptic
						}
					}
				}
			}
		}
	}
	auto_accept = yes
}

# Get legend seeds
spawn_legend_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = legend_positive
	
	interface_priority = -1
	
	is_shown = {
		debug_only = yes
	}
	
	on_accept = {
		scope:actor = {
			create_legend_seed = {
				type = heroic
				quality = famed
				chronicle = debug_legend
				properties = {
					beast = flag:bear
					location = scope:actor.location
					ancestor = character:1005 # "Thoradin"
					ancestor_flag = flag:ramses
					culture = scope:actor.culture
					title = scope:actor.primary_title
					god = flag:germanic_high_god_name
					original_region = geographical_region:world_middle_east_jerusalem
					antagonist = flag:vercingetorix
				}
			}
			create_legend_seed = {
				type = holy
				quality = famed
				chronicle = debug_legend
				properties = {
					beast = flag:bear
					location = scope:actor.location
					ancestor = character:1005 # "Thoradin"
					ancestor_flag = flag:ramses
					culture = scope:actor.culture
					title = scope:actor.primary_title
					god = flag:germanic_high_god_name
					original_region = geographical_region:world_middle_east_jerusalem
					antagonist = flag:vercingetorix
				}
			}
			create_legend_seed = {
				type = legitimizing
				quality = famed
				chronicle = debug_legend
				properties = {
					beast = flag:bear
					location = scope:actor.location
					ancestor = character:1005 # "Thoradin"
					ancestor_flag = flag:ramses
					culture = scope:actor.culture
					title = scope:actor.primary_title
					god = flag:germanic_high_god_name
					original_region = geographical_region:world_middle_east_jerusalem
					antagonist = flag:vercingetorix
				}
			}
		}
	}	
	auto_accept = yes
}
