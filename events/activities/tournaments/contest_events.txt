namespace = contest_events

scripted_effect contest_winner_dedicate_victory_effect = {
	add_activity_log_entry = {
		key = tournament_dedicated_victory_log
		tags = { neutral favor intent }
		score = 10
		character = scope:contest_winner
		target = scope:contest_winner.intent_target

		# Effects
		scope:contest_winner = {
			reverse_add_opinion = {
				target = intent_target
				modifier = woo_attendee_contest_opinion
				opinion = 10
			}
			if = {
				limit = { exists = intent_target.primary_spouse }
				reverse_add_opinion = {
					target = intent_target.primary_spouse
					modifier = woo_attendee_spouse_contest_opinion
					opinion = -15
				}
			}
		}
		stress_impact = {
			shy = medium_stress_impact_gain
		}
	}
}

scripted_trigger pivotal_success_trigger = {
	exists = scope:pivotal_contestant
	scope:pivotal_contestant = { has_character_flag = success_pivotal_flag }
	OR = {
		this = scope:pivotal_contestant
		# Not happy about someone you don't like doing well
		has_any_good_relationship_with_character_trigger = { CHARACTER = scope:pivotal_contestant }
	}
}

scripted_trigger pivotal_neutral_trigger = {
	exists = scope:pivotal_contestant
	scope:pivotal_contestant = { has_character_flag = neutral_pivotal_flag }
}

scripted_trigger pivotal_failure_trigger = {
	exists = scope:pivotal_contestant
	scope:pivotal_contestant = { has_character_flag = failure_pivotal_flag }
	OR = {
		this = scope:pivotal_contestant
		# Not sad about someone you don't like doing poorly
		has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:pivotal_contestant }
	}
}

scripted_trigger contest_outcome_winner_trigger = {
	scope:contest_complete = flag:$CONTEST$
	scope:activity = {
		any_guest_subset = {
			name = winner
			phase = tournament_phase_$CONTEST$
			this = root
		}
	}
}

scripted_trigger contest_outcome_second_trigger = {
	scope:contest_complete = flag:$CONTEST$
	scope:activity = {
		any_guest_subset = {
			name = second_place
			phase = tournament_phase_$CONTEST$
			this = root
		}
	}
}

scripted_trigger contest_outcome_qualified_trigger = {
	scope:contest_complete = flag:$CONTEST$
	scope:activity = {
		any_guest_subset = {
			name = qualified
			phase = tournament_phase_$CONTEST$
			this = root
		}
	}
}

# Winner
scripted_trigger contest_outcome_transition_success_trigger = {
	scope:contest_complete = flag:$CONTEST$
	scope:activity ?= {
		trigger_if = { # You won
			limit = {
				any_guest_subset = {
					name = qualified
					phase = tournament_phase_$CONTEST$
					root = this
				}
			}
			any_guest_subset = {
				name = winner
				phase = tournament_phase_$CONTEST$
				root = this
			}
		}
		trigger_else = { # Champion or wager won
			OR = {
				any_guest_subset = {
					name = winner
					phase = tournament_phase_$CONTEST$
					root.court_position:champion_court_position ?= this
				}
				any_guest_subset = {
					name = winner
					phase = tournament_phase_$CONTEST$
					root.var:tournament_wager_target ?= this
				}
			}
		}
	}
}

# Spectator
scripted_trigger contest_outcome_transition_neutral_trigger = {
	scope:contest_complete = flag:$CONTEST$
	scope:activity ?= {
		NOR = {
			any_guest_subset = {
				name = qualified
				phase = tournament_phase_$CONTEST$
				root = this 
			}
			any_guest_subset = {
				name = qualified
				phase = tournament_phase_$CONTEST$
				root.court_position:champion_court_position ?= this
			}
			any_guest_subset = {
				name = qualified
				phase = tournament_phase_$CONTEST$
				root.var:tournament_wager_target ?= this
			}
		}
	}
}

# Loser
scripted_trigger contest_outcome_transition_failure_trigger = {
	scope:contest_complete = flag:$CONTEST$
	scope:activity ?= {
		trigger_if = { # You lost
			limit = {
				any_guest_subset = {
					name = qualified
					phase = tournament_phase_$CONTEST$
					root = this 
				}
			}
			NOT = {
				any_guest_subset = {
					name = winner
					phase = tournament_phase_$CONTEST$
					root = this 
				}
			}
		}
		trigger_else = { # Champion and wager lost
			OR = {
				exists = root.court_position:champion_court_position
				exists = root.var:tournament_wager_target
			}
			NOR = {
				any_guest_subset = {
					name = winner
					phase = tournament_phase_$CONTEST$
					root.court_position:champion_court_position ?= this 
				}
				any_guest_subset = {
					name = winner
					phase = tournament_phase_$CONTEST$
					root.var:tournament_wager_target ?= this 
				}
			}
		}
	}
}

#################################
#################################
### RACE - SHARED - 0500-0599 ###
#################################
#################################

scripted_effect contest_qualification_tooltip_effect = {
	if = {
		limit = {
			# Versus have their own tooltips - versus_next_pair_summary_effect
			NOT = {
				scope:activity = {
					OR = {
						has_current_phase = tournament_phase_duel
						has_current_phase = tournament_phase_wrestling
						has_current_phase = tournament_phase_joust
						has_current_phase = tournament_phase_board_game
					}
				}
			}
			is_in_guest_subset = { name = qualified }
		}
		custom_tooltip = tournament_qualify_desc
	}
	else_if = {
		limit = {
			# Versus have their own tooltips - versus_next_pair_summary_effect
			NOT = {
				scope:activity = {
					OR = {
						has_current_phase = tournament_phase_duel
						has_current_phase = tournament_phase_wrestling
						has_current_phase = tournament_phase_joust
						has_current_phase = tournament_phase_board_game
					}
				}
			}
			is_in_guest_subset = { name = contestant }
		}
		custom_tooltip = tournament_qualify_fail_desc
	}
	if = {
		limit = {
			scope:contest_champion ?= {
				is_in_guest_subset = { name = qualified }
			}
		}
		custom_tooltip = tournament_champion_qualify_desc
	}
	else_if = {
		limit = {
			scope:contest_champion ?= {
				is_in_guest_subset = { name = contestant }
			}
		}
		custom_tooltip = tournament_champion_qualify_fail_desc
	}
}

contest_events.0500 = { # Start
	type = activity_event
	title = contest_events.0500.t
	desc = {
		# Type
		first_valid = {
			triggered_desc = {
				trigger = { scope:activity = { has_current_phase = tournament_phase_horse_race } }
				desc = contest_events.0500.horse_race
			}
		}
		# Mysterious stranger flavor
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = scope:mysterious_stranger
					scope:activity = { has_current_phase = tournament_phase_horse_race }
				}
				desc = mysterious_stranger_horse_race
			}
		}
		# Prize flavor
		triggered_desc = {
			trigger = { exists = scope:marriage_prize }
			desc = contest_events_marriage_prize_desc
		}
		# Participation flavor
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:activity = {
						any_guest_subset = {
							name = qualified
							this = root
						}
						has_current_phase = tournament_phase_horse_race
					}
				}
				desc = contest_events.0500.contestant_horse
			}
			desc = contest_events.0500.closing
		}
		# Intent flavor
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = var:contest_aptitude
					has_activity_intent = murder_attendee_intent
					exists = scope:intent_scope.var:contest_aptitude
					scope:activity = { has_current_phase = tournament_phase_horse_race }
				}
				desc = contest_events_opening_intent_contestant_horse_race
			}
			triggered_desc = {
				trigger = {
					has_activity_intent = murder_attendee_intent
					exists = scope:intent_scope
					NOT = { exists = scope:intent_scope.var:contest_aptitude }
				}
				desc = contest_events_opening_intent_spectator
			}
		}
	}
	window = widget_activity_locale_fullscreen_event
	theme = tournament_contest
	left_portrait = {
		character = root
	}
	lower_right_portrait = {
		character = scope:contest_champion
		trigger = {
			NOT = { scope:contest_champion = scope:portrait_scope }
		}
	}
	lower_left_portrait = {
		trigger = { exists = scope:portrait_scope }
		character = scope:portrait_scope
	}
	artifact = {
		target = scope:newly_created_artifact 
		position = lower_center_portrait
	}

	cooldown = { months = 1 }

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes
		
		#Standard checks.
		is_ai = no
	}

	immediate = {
		tournament_contest_start_portrait_effect = yes
		if = {
			limit = {
				is_ai = no
				exists = var:contest_aptitude
			}
			tournament_horse_race_fetch_horse_effect = yes
		}
		# For replacing a contestant options
		tournament_replace_qualifier_scope_effect = yes
		contest_qualification_tooltip_effect = yes
		if = {
			limit = {
				scope:activity = {
					any_guest_subset = {
						name = qualified
						this = root
					}
				}		
				NOT = {
					has_trait = tourney_participant
				}
			}
			add_trait = tourney_participant
		}
		play_sound_effect = "event:/DLC/EP2/SFX/Events/Grand_Activities/Tournaments/ep2_event_grand_tournament_start_horsing"
	}

	option = { # Let's go
		name = {
			trigger = { exists = var:contest_aptitude }
			text = contest_events.0500.a.contestant
		}
		name = {
			trigger = {
				NOT = { exists = var:contest_aptitude }
			}
			text = contest_events.0500.a
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = -0.5
				ai_greed = -1
				ai_rationality = 0.5
			}
		}
	}

	option = { # Wager
		name = contest_events.0500.b
		tournament_contest_maysir_tooltip_effect = yes
		custom_tooltip = contest_events_place_wager_tt
		trigger_event = {
			id = tournament_events.1000
			days = 3
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = 0.5
				ai_greed = 1
				ai_rationality = -0.5
			}
			modifier = {
				has_trait = profligate
				add = 50
			}
			modifier = {
				has_trait = improvident
				add = 50
			}
		}
	}

	option = { # Tyrannically replace contestant as host
		name = contest_events.0500.c
		trigger = {
			is_ai = no
			this = scope:host
			NOT = { exists = var:contest_aptitude }
			exists = scope:replaced_contestant
			trigger_if = {
				limit = { exists = scope:rival_contestant }
				NOT = { scope:rival_contestant = scope:replaced_contestant }
			}
			activity_is_valid_tournament_contestant = yes
		}
		add_tyranny = minor_tyranny_gain
		reverse_add_opinion = {
			target = scope:replaced_contestant
			modifier = tournament_bribed_replacement_opinion
			opinion = -10
		}
		scope:activity = {
			tournament_contest_replace_qualifier_effect = {
				NEW_CONTESTANT = root
				OLD_CONTESTANT = scope:replaced_contestant
				CONTEST = horse_race
			}
		}
		stress_impact = {
			just = minor_stress_impact_gain
			greedy = minor_stress_impact_gain
			content = minor_stress_impact_gain
			lazy = minor_stress_impact_gain
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = 1
				ai_honor = -1
				ai_energy = 1
			}
			modifier = {
				has_trait = tourney_participant
				add = 25
			}
			modifier = {
				has_activity_intent = win_contest_intent
				add = 50
			}
		}
	}

	option = { # Replace rival with self or another
		name = contest_events.0500.d
		trigger = {
			is_ai = no
			this = scope:host
			exists = scope:rival_contestant
			exists = scope:new_contestant
		}
		reverse_add_opinion = {
			target = scope:rival_contestant
			modifier = tournament_bribed_replacement_opinion
			opinion = -20
		}
		if = {
			limit = {
				NOT = { this = scope:new_contestant }
			}
			reverse_add_opinion = {
				target = scope:new_contestant
				modifier = tournament_bribed_replacement_opinion
				opinion = 10
			}
		}
		scope:activity = {
			tournament_contest_replace_qualifier_effect = {
				NEW_CONTESTANT = scope:new_contestant
				OLD_CONTESTANT = scope:rival_contestant
				CONTEST = horse_race
			}
		}
		stress_impact = {
			base = medium_stress_impact_loss
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = 1
				ai_honor = -1
				ai_energy = 1
			}
			modifier = {
				has_trait = tourney_participant
				add = 25
			}
			modifier = {
				has_activity_intent = win_contest_intent
				add = 50
			}
		}
	}

	option = { # Replace another contestant with a bribe
		name = contest_events.0500.e
		trigger = {
			is_ai = no
			NOT = { this = scope:host }
			NOT = { exists = var:contest_aptitude }
			exists = scope:replaced_contestant
			gold >= minor_gold_value
			activity_is_valid_tournament_contestant = yes
		}
		show_as_unavailable = {
			is_ai = no
			NOT = { this = scope:host }
			NOT = { exists = var:contest_aptitude }
			exists = scope:replaced_contestant
			gold < minor_gold_value
			activity_is_valid_tournament_contestant = yes
		}
		flavor = contest_events.0800.e.flavor
		remove_short_term_gold = minor_gold_value
		reverse_add_opinion = {
			target = scope:replaced_contestant
			modifier = tournament_bribed_replacement_opinion
			opinion = -10
		}
		scope:activity = {
			tournament_contest_replace_qualifier_effect = {
				NEW_CONTESTANT = root
				OLD_CONTESTANT = scope:replaced_contestant
				CONTEST = horse_race
			}
		}
		stress_impact = {
			just = minor_stress_impact_gain
			greedy = minor_stress_impact_gain
			content = minor_stress_impact_gain
			lazy = minor_stress_impact_gain
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = 1
				ai_honor = -1
				ai_energy = 1
				ai_greed = -0.5
			}
			modifier = {
				has_trait = tourney_participant
				add = 25
			}
			modifier = {
				has_activity_intent = win_contest_intent
				add = 50
			}
		}
	}

	after = {
		trigger_event = contest_events.0520
		trigger_event = {
			on_action = tournament_intent_setup_events
			days = { tournament_intent_delay_min tournament_intent_delay_max }
		}
	}
}

contest_events.0505 = { # End
	type = activity_event
	title = {
		desc = {
			first_valid = {
				triggered_desc = {
					trigger = { scope:contest_complete = flag:horse_race }
					desc = contest_events.0505.t.horse_race
				}
				desc = contest_events.0505.t
			}
		}
	}
	desc = {
		desc = contest_events.0505.horse_race
		first_valid = { # Root involvement
			triggered_desc = {
				trigger = {
					scope:activity = {
						has_current_phase = tournament_phase_horse_race
						var:contest_horse_race_variant = flag:maydan
					}
					this = scope:contest_winner
				}
				desc = contest_events.0505.first_maydan
			}
			triggered_desc = {
				trigger = {
					scope:activity = { has_current_phase = tournament_phase_horse_race }
					this = scope:contest_winner
				}
				desc = contest_events.0505.first_horse
			}
			triggered_desc = {
				trigger = {
					scope:activity = {
						has_current_phase = tournament_phase_horse_race
						var:contest_horse_race_variant = flag:maydan
					}
					exists = scope:second_place
					this = scope:second_place
				}
				desc = contest_events.0505.second_maydan
			}
			triggered_desc = {
				trigger = {
					scope:activity = {
						has_current_phase = tournament_phase_horse_race
						var:contest_horse_race_variant = flag:maydan
					}
					exists = scope:second_place
					this = scope:second_place
				}
				desc = contest_events.0505.second_horse
			}
			triggered_desc = {
				trigger = {
					scope:activity = {
						has_current_phase = tournament_phase_horse_race
						var:contest_horse_race_variant = flag:maydan
					}
					exists = scope:third_place
					this = scope:third_place
				}
				desc = contest_events.0505.third_maydan
			}
			triggered_desc = {
				trigger = {
					exists = scope:third_place
					this = scope:third_place
				}
				desc = contest_events.0505.third_horse
			}
			triggered_desc = {
				trigger = {
					scope:activity = {
						any_guest_subset = {
							name = qualified
							this = root
							phase = tournament_phase_horse_race
						}
					}
				}
				desc = contest_events.0505.contestant_horse
			}
			desc = contest_events.0505.spectator
		}
		first_valid = { # Wagering outcomes
			triggered_desc = {
				trigger = {
					exists = var:tournament_wager_target
					exists = var:tournament_wager_payout
					var:tournament_wager_target = scope:contest_winner
				}
				desc = contest_events.wager_win_horse
			}
			triggered_desc = {
				trigger = {
					exists = var:tournament_wager_target
					exists = var:tournament_wager_payout
				}
				desc = contest_events.wager_loss_horse
			}
			triggered_desc = {
				trigger = {
					exists = var:tournament_wager_target
					exists = var:tournament_wager_payout
					var:tournament_wager_target = scope:contest_winner
				}
				desc = contest_events.wager_win
			}
			triggered_desc = {
				trigger = {
					exists = var:tournament_wager_target
					exists = var:tournament_wager_payout
				}
				desc = contest_events.wager_loss
			}
		}
		first_valid = { # Intent outcomes
			triggered_desc = {
				trigger = {
					has_activity_intent = win_contest_intent
					this = scope:contest_winner
				}
				desc = contest_events_closing_win_winner
			}
			triggered_desc = {
				trigger = {
					has_activity_intent = win_contest_intent
					is_in_guest_subset = {
						name = qualified
					}
					NOT = { this = scope:contest_winner }
				}
				desc = contest_events_closing_win_contestant
			}
		}
	}
	window = tournament_fullscreen_pivotal_event_widget
	theme = tournament_contest
	left_portrait = {
		character = root
		triggered_animation = {
			trigger = {
				activity_has_reason_to_cheer_character_trigger = { CHAR = scope:contest_winner }
			}
			animation = throne_room_cheer_1
		}
		triggered_animation = {
			trigger = {
				activity_has_reason_to_anger_character_trigger = { CHAR = scope:contest_winner }
			}
			animation = anger
		}
		triggered_animation = {
			trigger = {
				NOT = { this = scope:contest_winner }
				contest_outcome_qualified_trigger = { CONTEST = horse_race }
			}
			animation = stress
		}
		triggered_animation = {
			trigger = {
				NOT = {
					contest_outcome_qualified_trigger = { CONTEST = horse_race }
				}
			}
			animation = throne_room_applaud_1
		}
	}
	right_portrait = {
		trigger = {
			NOT = { root = scope:contest_winner }
		}
		character = scope:contest_winner
		animation = throne_room_cheer_1
	}
	lower_center_portrait = {
		trigger = {
			exists = scope:second_place
			NOT = { root = scope:second_place }
		}
		character = scope:second_place
	}
	override_transition = {
		trigger = { contest_outcome_transition_success_trigger = { CONTEST = horse_race } }
		reference = pivotal_horse_racing_success
	} 
	override_transition = {
		trigger = { contest_outcome_transition_neutral_trigger = { CONTEST = horse_race } }
		reference = pivotal_horse_racing_neutral
	}
	override_transition = {
		trigger = { contest_outcome_transition_failure_trigger = { CONTEST = horse_race } }
		reference = pivotal_horse_racing_fail
	}

	cooldown = { months = 1 }

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes
		
		#Standard checks.
	}

	immediate = {
		# Fallback to ensure horse names are present
		scope:contest_winner = { tournament_horse_race_fetch_horse_effect = yes }
		scope:second_place ?= { tournament_horse_race_fetch_horse_effect = yes }
		scope:third_place ?= { tournament_horse_race_fetch_horse_effect = yes }
		tournament_contest_wager_effect = yes
		tournament_contest_end_portrait_effect = yes
		tournament_display_rewards_effect = yes
		court_position:champion_court_position ?= {
			if = {
				limit = { is_in_list = contest_losers }
				add_to_list = my_losers
			}
		}
		every_knight = {
			limit = { is_in_list = contest_losers }
			add_to_list = my_losers
		}
		if = {
			limit = {
				OR = {
					this = scope:contest_winner
					AND = {
						NOT = { is_in_list = contest_losers }
						scope:contest_winner = {
							OR = {
								is_knight_of = root
								root.court_position:champion_court_position ?= this
							}
						}
					}
				}
			}
			play_sound_effect = "event:/DLC/EP2/SFX/Events/Grand_Activities/Tournaments/ep2_event_grand_tournament_win"
		}
		else = { play_sound_effect = "event:/DLC/EP2/SFX/Events/Grand_Activities/Tournaments/ep2_event_grand_tournament_lose" }
	}

	option = { # Ok
		name = {
			text = contest_events.0505.d.winner
			trigger = { this = scope:contest_winner }
		}
		name = {
			text = contest_events.0505.d.second
			trigger = { this = scope:second_place }
		}
		name = {
			text = contest_events.0505.d.loser
			trigger = {
				NOT = { this = scope:second_place }
				is_in_list = contest_losers
			}
		}
		name = {
			text = contest_events.0505.d
			trigger = {
				NOR = {
					this = scope:contest_winner
					is_in_list = contest_losers
				}
			}
		}
		ai_chance = {
			base = 50
		}
	}

	after = {
		if = {
			limit = {
				any_in_list = { list = my_losers }
			}
			custom_description_no_bullet = { text = qualifying_knight_rewards_tt }
			every_in_list = {
				list = my_losers
				custom_tooltip = knight_name_tt
			}
		}
		if = {
			limit = { this = scope:host }
			scope:activity = {
				every_attending_character = {
					limit = {
						NOT = { this = scope:host }
						is_ai = no
					}
					trigger_event = contest_events.0505
				}
			}
		}
	}
}

contest_events.0510 = { # Race Pivotal Moment
	type = activity_event
	title = contest_events.0510.t
	desc = {
		# Random event flavor
		desc = contest_events.0510.desc
		first_valid = {
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_horse_race_flavor ?= 4500 }
				desc = contest_events.0510.flavor_1
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_horse_race_flavor ?= 4600 }
				desc = contest_events.0510.flavor_2
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_horse_race_flavor ?= 1 }
				desc = contest_events.0510.flavor_3
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_horse_race_flavor ?= 10 }
				desc = contest_events.0510.flavor_4
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_horse_race_flavor ?= 2 }
				desc = contest_events.0510.flavor_5
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_horse_race_flavor ?= 3000 }
				desc = contest_events.0510.flavor_6
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_horse_race_flavor ?= 3010 }
				desc = contest_events.0510.flavor_7
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_horse_race_flavor ?= 3020 }
				desc = contest_events.0510.flavor_8
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_horse_race_flavor ?= 3030 }
				desc = contest_events.0510.flavor_9
			}
		}
		desc = contest_events.0510.flavor_fallback
	}
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = scope:pivotal_contestant
		animation = throne_room_cheer_1
	}
	right_portrait = {
		character = scope:jockey
		animation = jockey_gallop
		trigger = { is_alive = yes }
	}
	cooldown = { months = 1 }

	trigger = {
		#Standard checks.
		is_ai = no
	}

	immediate = { 
		# If competing yourself, it is from your perspective, otherwise find someone relevant
		tournament_pivotal_contestant_scope_effect = yes
		# Determine position of PtV scale
		tournament_pivotal_ptv_value_effect = yes
		if = {
			limit = {
				var:horse_race_jockey ?= { is_alive = yes }
			}
			var:horse_race_jockey = { save_scope_as = jockey }
		}
		else = { save_scope_as = jockey }
	}

	option = { # Urge them on
		name = contest_events.0510.a
		trigger = { scope:pivotal_contestant ?= this }
		show_as_tooltip = {
			tournament_pivotal_duel_effect = {
				DUELIST = scope:jockey
				SKILL_1 = martial
				SKILL_2 = stewardship
				NO_CHANGE_CHANCE = yes
				INCREASE = major
				DECREASE = major
			}
		}
		add_character_flag = martial_stewardship_pivotal_duel
	}

	option = { # Get them to punch another rider
		name = contest_events.0510.b
		trigger = { scope:pivotal_contestant ?= this }
		show_as_tooltip = {
			tournament_pivotal_duel_effect = {
				DUELIST = scope:jockey
				SKILL_1 = martial
				SKILL_2 = prowess
				NO_CHANGE_CHANCE = yes
				INCREASE = major
				DECREASE = major
			}
		}
		add_character_flag = martial_prowess_pivotal_duel
	}

	option = { # Have them grab at the reins of another rider
		name = contest_events.0510.c
		trigger = { scope:pivotal_contestant ?= this }
		show_as_tooltip = {
			tournament_pivotal_duel_effect = {
				DUELIST = scope:jockey
				SKILL_1 = martial
				SKILL_2 = intrigue
				NO_CHANGE_CHANCE = yes
				INCREASE = major
				DECREASE = major
			}
		}
		add_character_flag = martial_intrigue_pivotal_duel
	}

	option = {
		name = contest_events.0510.d
		trigger = { scope:pivotal_contestant ?= this }
		show_as_tooltip = {
			tournament_pivotal_duel_single_skill_effect = {
				DUELIST = scope:jockey
				SKILL_1 = martial
				NO_CHANGE_CHANCE = yes
				INCREASE = minor
				DECREASE = minor
			}
		}
		add_character_flag = martial_pivotal_duel
	}
}

contest_events.0520 = { # Enter War Horse
	type = activity_event
	title = contest_events.0520.t
	desc = contest_events.0520.desc
	window = widget_activity_locale_fullscreen_event
	theme = tournament_contest
	left_portrait = {
		character = root
		animation = worry
	}
	cooldown = { months = 1 }

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes
		
		#Standard checks.
		any_owned_story = {
			story_type = story_cycle_martial_lifestyle_warhorse
			exists = var:story_cycle_horse_name
		}
	}

	immediate = {
		random_owned_story = {
			limit = {			
				story_type = story_cycle_martial_lifestyle_warhorse
				exists = var:story_cycle_horse_name
			}
			var:story_cycle_horse_name = { save_scope_as = horse_name }
			var:horse_gender = { save_scope_as = horse_gender }
		}
	}

	option = { # Enter pony
		name = contest_events.0520.a
		remove_variable = contest_horse_race_name
		remove_variable = contest_horse_race_gender
		set_variable = {
			name = contest_horse_race_name
			value = scope:horse_name
		}
		set_variable = {
			name = contest_horse_race_gender
			value = scope:horse_gender
		}
		add_character_flag = contest_horse_race_war_horse
		custom_tooltip = contest_horse_race_enter_war_horse_tt
		ai_chance = {
			base = 20
			modifier = {
				factor = 10
				OR = {
					has_character_modifier = horse_agility_agility_modifier
					has_character_modifier = horse_endurance_agility_modifier
					has_character_modifier = horse_endurance_endurance_modifier
				}
			}
			modifier = {
				factor = 2
				OR = {
					has_character_modifier = horse_agility_modifier
					has_character_modifier = horse_endurance_modifier
					has_character_modifier = horse_agility_strength_modifier
					has_character_modifier = horse_fierceness_agility_modifier
					has_character_modifier = horse_fierceness_endurance_modifier
					has_character_modifier = horse_endurance_strength_modifier
				}
			}
		}
	}

	option = { # Don't enter pony
		name = contest_events.0520.b
		ai_chance = {
			base = 10
			modifier = {
				factor = 0
				OR = {
					has_character_modifier = horse_agility_modifier
					has_character_modifier = horse_endurance_modifier
					has_character_modifier = horse_agility_strength_modifier
					has_character_modifier = horse_fierceness_agility_modifier
					has_character_modifier = horse_fierceness_endurance_modifier
					has_character_modifier = horse_endurance_strength_modifier
				}
			}
		}
	}
}

contest_events.0530 = { # Race Outcome
	type = activity_event
	title = contest_events.0530.t
	desc = {
		first_valid = {
			# Not a lot in it - range between best and worst is very small
			triggered_desc = {
				trigger = {
					has_character_flag = success_pivotal_flag
				}
				desc = contest_events.0530.pivotal_success
			}
			triggered_desc = {
				trigger = { has_character_flag = neutral_pivotal_flag }
				desc = contest_events.0530.pivotal_neutral
			}
			# Close to or in fact top score
			triggered_desc = {
				trigger = {
					has_character_flag = failure_pivotal_flag
				}
				desc = contest_events.0530.pivotal_failure
			}
		}
		# PtV status flavor
		first_valid = {
			# Not a lot in it - range between best and worst is very small
			triggered_desc = {
				trigger = {
					this = scope:pivotal_contestant
					scope:best_worst_diff <= 20
				}
				desc = contest_events.0530.ptv_close
			}
			triggered_desc = {
				trigger = { scope:best_worst_diff <= 20 }
				desc = contest_events.0530.ptv_close # Re-use above
			}
			# Close to or in fact top score
			triggered_desc = {
				trigger = {
					this = scope:pivotal_contestant
					scope:pivotal_best_diff <= 10
				}
				desc = contest_events.0530.ptv_top
			}
			triggered_desc = {
				trigger = { scope:pivotal_best_diff <= 10 }
				desc = contest_events.0530.ptv_top_spectator
			}
			# Close to or in fact bottom score
			triggered_desc = {
				trigger = {
					this = scope:pivotal_contestant
					scope:pivotal_worst_diff <= 10
				}
				desc = contest_events.0530.ptv_bottom
			}
			triggered_desc = {
				trigger = { scope:pivotal_worst_diff <= 10 }
				desc = contest_events.0530.ptv_bottom_spectator
			}
			# In top half of all contestants
			triggered_desc = {
				trigger = {
					this = scope:pivotal_contestant
					scope:pivotal_contestant.var:progress_to_victory >= scope:ptv_half_way
				}
				desc = contest_events.0530.ptv_top_half
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:progress_to_victory >= scope:ptv_half_way }
				desc = contest_events.0530.ptv_top_half_spectator
			}
			# In bottom half of all contestants
			triggered_desc = {
				trigger = {
					this = scope:pivotal_contestant
					scope:pivotal_contestant.var:progress_to_victory < scope:ptv_half_way
				}
				desc = contest_events.0530.ptv_bottom_half
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:progress_to_victory < scope:ptv_half_way }
				desc = contest_events.0530.ptv_bottom_half_spectator
			}
			desc = contest_events.0530.ptv_fallback
		}
		triggered_desc = {
			trigger = {
				scope:activity = {
					any_guest_subset_current_phase = {
						name = spectator
						this = root
					}
				}
			}
			desc = contest_events.0530.spectator
		}
		desc = contest_events.0530.final
	}
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = scope:pivotal_contestant
		animation = shock
	}
	right_portrait = {
		character = scope:jockey
		animation = jockey_gallop
	}
	cooldown = { months = 1 }

	immediate = { 
		var:horse_race_jockey ?= { save_scope_as = jockey }
		scope:pivotal_contestant = {
			switch = {
				trigger = has_character_flag
				martial_stewardship_pivotal_duel = {
					tournament_pivotal_duel_effect = {
						DUELIST = scope:jockey
						SKILL_1 = martial
						SKILL_2 = stewardship
						NO_CHANGE_CHANCE = yes
						INCREASE = major
						DECREASE = major
					}
					remove_character_flag = martial_stewardship_pivotal_duel
				}
				martial_prowess_pivotal_duel = {
					tournament_pivotal_duel_effect = {
						DUELIST = scope:jockey
						SKILL_1 = martial
						SKILL_2 = prowess
						NO_CHANGE_CHANCE = yes
						INCREASE = major
						DECREASE = major
					}
					remove_character_flag = martial_prowess_pivotal_duel
				}
				martial_intrigue_pivotal_duel = {
					tournament_pivotal_duel_effect = {
						DUELIST = scope:jockey
						SKILL_1 = martial
						SKILL_2 = intrigue
						NO_CHANGE_CHANCE = yes
						INCREASE = major
						DECREASE = major
					}
					remove_character_flag = martial_intrigue_pivotal_duel
				}
				martial_pivotal_duel = {
					tournament_pivotal_duel_single_skill_effect = {
						DUELIST = scope:jockey
						SKILL_1 = martial
						NO_CHANGE_CHANCE = yes
						INCREASE = minor
						DECREASE = minor
					}
					remove_character_flag = martial_pivotal_duel
				}
			}
		}
		# Determine position of PtV scale
		tournament_pivotal_ptv_value_effect = yes
		if = {
			limit = { pivotal_success_trigger = yes }
			play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_positive_reaction"
		}
		else_if = {
			limit = { pivotal_failure_trigger = yes }
			play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_negative_reaction"
		}
		else = {
			play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_surprise_reaction"
		}
		if = {
			limit = { pivotal_success_trigger = yes }
			scope:pivotal_contestant = {
				if = {
					limit = { this = root }
					accolade_medium_glory_gain_with_checks_effect = yes
				}
				else = {
					show_as_tooltip = { accolade_medium_glory_gain_with_checks_effect = yes }
				}
			}
		}
	}

	option = { # Contestant
		name = contest_events.0530.a
		trigger = { scope:pivotal_contestant ?= this }
	}

	option = { # Spectator
		name = contest_events.0530.b
		trigger = {
			NOT = { scope:pivotal_contestant ?= this  }
		}
	}
}

#################################
#################################
### TEAM - SHARED - 0600-0699 ###
#################################
#################################

contest_events.0600 = { # Start
	type = activity_event
	title = contest_events.0600.t
	desc = {
		# Type
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:activity = { has_current_phase = tournament_phase_melee }
				}
				desc = contest_events.0600.melee
			}
		}
		# Participation	
		first_valid = {
			triggered_desc = {
				trigger = {
					is_in_guest_subset = { name = qualified }
					scope:contest_champion ?= {
						is_in_guest_subset = { name = qualified }
					}
				}
				desc = contest_events.0600.champion_self
			}
			triggered_desc = {
				trigger = {
					scope:contest_champion ?= {
						is_in_guest_subset = { name = qualified }
					}
				}
				desc = contest_events.0600.champion
			}
			triggered_desc = {
				trigger = {
					is_in_guest_subset = { name = qualified }
				}
				desc = contest_events.0600.contestant
			}
			triggered_desc = {
				trigger = {
					activity_is_valid_tournament_contestant = yes
					NOT = {
						is_in_guest_subset = { name = qualified }
					}
					scope:contest_champion ?= {
						activity_is_valid_tournament_contestant = yes
						NOT = {
							is_in_guest_subset = { name = qualified }
						}
					}
				}
				desc = contest_events.0600.neither_qualify
			}
			triggered_desc = {
				trigger = {
					scope:contest_champion ?= {
						activity_is_valid_tournament_contestant = yes
						NOT = {
							is_in_guest_subset = { name = qualified }
						}
					}
				}
				desc = contest_events.0600.champion_qualify
			}
			triggered_desc = {
				trigger = {
					activity_is_valid_tournament_contestant = yes
					NOT = {
						is_in_guest_subset = { name = qualified }
					}
				}
				desc = contest_events.0600.self_qualify
			}
			desc = contest_events.0600.closing
		}
		# Intent
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = var:contest_aptitude
					has_activity_intent = murder_attendee_intent
					exists = scope:intent_scope.var:contest_aptitude
					activity_tournament_same_team_trigger = { FIRST = root SECOND = scope:intent_scope }
				}
				desc = contest_events_opening_intent_contestant_team
			}
			triggered_desc = {
				trigger = {
					exists = var:contest_aptitude
					has_activity_intent = murder_attendee_intent
					exists = scope:intent_scope.var:contest_aptitude
				}
				desc = contest_events_opening_intent_contestant_opposing
			}
			triggered_desc = {
				trigger = {
					has_activity_intent = murder_attendee_intent
					exists = scope:intent_scope
					NOT = { exists = scope:intent_scope.var:contest_aptitude }
				}
				desc = contest_events_opening_intent_spectator
			}
		}
	}
	window = widget_activity_locale_fullscreen_event
	theme = tournament_contest
	left_portrait = {
		character = root
		triggered_animation = {
			trigger = {
				is_in_guest_subset = { name = qualified }
			}
			animation = marshal
		}
	}
	right_portrait = {
		character = scope:other_team_captain
		animation = war_over_win
	}
	lower_left_portrait = {
		trigger = {
			exists = scope:portrait_scope
			NOR = {
				scope:portrait_scope = scope:other_team_captain
				scope:portrait_scope = scope:other_team_interest
			}
		}	
		character = scope:portrait_scope
	}
	lower_right_portrait = {
		character = scope:other_team_interest
		animation = throne_room_one_handed_passive_1
	}

	cooldown = { months = 1 }

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes
		
		#Standard checks.
		is_ai = no
	}

	immediate = { 
		if = {
			limit = {
				is_in_guest_subset = { name = team_alpha }
			}
			scope:alpha_captain = { save_scope_as = my_team_captain }
			scope:beta_captain = { save_scope_as = other_team_captain }
			scope:activity = {
				random_guest_subset = {
					name = team_beta
					limit = {
						NOT = { this = scope:beta_captain }
					}
					weight = {
						is_of_minor_interest_to_weight_up_modifier = { CHARACTER = root }
						is_of_major_interest_to_weight_up_modifier = { CHARACTER = root }
					}
					save_scope_as = other_team_interest
				}
			}
		}
		else_if = {
			limit = {
				is_in_guest_subset = { name = team_beta }
			}
			scope:beta_captain = { save_scope_as = my_team_captain }
			scope:alpha_captain = { save_scope_as = other_team_captain }
			scope:activity = {
				random_guest_subset = {
					name = team_alpha
					limit = {
						NOT = { this = scope:alpha_captain }
					}
					weight = {
						is_of_minor_interest_to_weight_up_modifier = { CHARACTER = root }
						is_of_major_interest_to_weight_up_modifier = { CHARACTER = root }
					}
					save_scope_as = other_team_interest
				}
			}
		}
		else = {
			scope:alpha_captain = { save_scope_as = other_team_captain }
			scope:beta_captain = { save_scope_as = other_team_interest }
		}
		tournament_contest_start_portrait_effect = yes 
		contest_qualification_tooltip_effect = yes
		if = {
			limit = {
				scope:activity = {
					any_guest_subset = {
						name = qualified
						this = root
					}		
				}
				NOT = {
					has_trait = tourney_participant
				}
			}
			add_trait = tourney_participant
		}
		play_sound_effect = "event:/DLC/EP2/SFX/Events/Grand_Activities/Tournaments/ep2_event_grand_tournament_start_brawl"
	} 

	option = { # Let's go
		name = {
			trigger = { exists = var:contest_aptitude }
			text = contest_events.0600.a.contestant
		}
		name = {
			trigger = {
				NOT = { exists = var:contest_aptitude }
			}
			text = contest_events.0600.a
		}
	}

	after = {
		if = {
			limit = {
				exists = scope:my_team_captain
				exists = scope:other_team_captain
			}
			custom_tooltip = contest_events.0600.captains_tt
			if = {
				limit = {
					NOT = { this = scope:my_team_captain }
				}
				custom_tooltip = contest_events.0600.team_tt
			}
		}
		trigger_event = {
			on_action = tournament_intent_setup_events
			days = { tournament_intent_delay_min tournament_intent_delay_max }
		}
	}
}

contest_events.0605 = { # End
	type = activity_event
	title = {
		desc = {
			first_valid = {
				triggered_desc = {
					trigger = { scope:contest_complete = flag:melee }
					desc = contest_events.0605.t.melee
				}
				desc = contest_events.0605.t
			}
		}
	}
	desc = {
		desc = contest_events.0605.desc
		first_valid = { # Root involvement
			triggered_desc = {
				trigger = {
					exists = scope:contest_winner
					this = scope:contest_winner
				}
				desc = contest_events.0605.desc.winner
			}
			triggered_desc = {
				trigger = {
					exists = scope:second_place
					this = scope:second_place
				}
				desc = contest_events.0605.desc.loser
			}
			triggered_desc = {
				trigger = {
					is_in_guest_subset = {
						name = winner
						phase = tournament_phase_melee # this won't work if we add more team contests
					}
				}
				desc = contest_events.0605.desc.team_winner
			}
			triggered_desc = {
				trigger = {
					is_in_guest_subset = {
						name = second_place
						phase = tournament_phase_melee # this won't work if we add more team contests
					}
				}
				desc = contest_events.0605.desc.team_loser
			}
			desc = contest_events.0605.desc.spectator
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					has_activity_intent = win_contest_intent
					this = scope:contest_winner
				}
				desc = contest_events_closing_win_winner
			}
			triggered_desc = {
				trigger = {
					has_activity_intent = win_contest_intent
					is_in_guest_subset = {
						name = qualified
					}
					NOT = { this = scope:contest_winner }
				}
				desc = contest_events_closing_win_contestant
			}
		}
	}
	window = tournament_fullscreen_pivotal_event_widget
	theme = tournament_contest
	left_portrait = {
		character = root
		triggered_animation = {
			trigger = { # this won't work if we add more team contests
				contest_outcome_winner_trigger = { CONTEST = melee }
			}
			animation = wrestling_victory
		}
		triggered_animation = {
			trigger = { # this won't work if we add more team contests
				contest_outcome_second_trigger = { CONTEST = melee }
			}
			animation = loss_1
		}
		triggered_animation = {
			trigger = {
				activity_has_reason_to_cheer_character_trigger = { CHAR = scope:contest_winner }
			}
			animation = throne_room_cheer_1
		}
		triggered_animation = {
			trigger = {
				activity_has_reason_to_anger_character_trigger = { CHAR = scope:contest_winner }
			}
			animation = anger
		}
		triggered_animation = {
			trigger = {
				NOT = {
					contest_outcome_qualified_trigger = { CONTEST = melee }
				}
			}
			animation = throne_room_applaud_1
		}
	}
	right_portrait = {
		trigger = {
			NOT = { scope:contest_portrait ?= root }
		}
		triggered_animation = {
			trigger = { 
				scope:contest_portrait = scope:contest_winner
			}
			animation = wrestling_victory
		}
		triggered_animation = {
			trigger = { scope:contest_portrait = scope:second_place }
			animation = loss_1
		}
		character = scope:contest_portrait
	}
	lower_center_portrait = {
		character = scope:contest_winner
		trigger = {
			NOR = {
				root = scope:contest_winner
				AND = {
					exists = scope:contest_portrait
					scope:contest_portrait = scope:contest_winner
				}
			}
		}
	}
	lower_right_portrait = {
		character = scope:second_place
		trigger = {
			NOR ={
				this = scope:second_place
				AND = {
					exists = scope:contest_portrait
					scope:contest_portrait = scope:second_place
				}
			}
		}
	}
	override_transition = {
		trigger = { contest_outcome_transition_success_trigger = { CONTEST = melee } }
		reference = pivotal_melee_success 
	}
	override_transition = { 
		trigger = { contest_outcome_transition_neutral_trigger = { CONTEST = melee } } 
		reference = pivotal_melee_neutral
	}
	override_transition = { 
		trigger = { contest_outcome_transition_failure_trigger = { CONTEST = melee } }
		reference = pivotal_melee_fail
	}	
	cooldown = { months = 1 }

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes
		
		#Standard checks.
	}

	immediate = {
		tournament_contest_end_portrait_effect = yes
		tournament_display_rewards_effect = yes
		court_position:champion_court_position ?= {
			if = {
				limit = { is_in_list = contest_winners }
				add_to_list = my_winners
			}
			else_if = {
				limit = { is_in_list = contest_losers }
				add_to_list = my_losers
			}
		}
		every_knight = {
			limit = { is_in_list = contest_winners }
			add_to_list = my_winners
		}
		every_knight = {
			limit = { is_in_list = contest_losers }
			add_to_list = my_losers
		}
		if = {
			limit = {
				OR = {
					this = scope:contest_winner
					AND = {	
						NOT = { is_in_list = contest_losers }
						scope:contest_winner = {
							OR = {
								is_knight_of = root
								root.court_position:champion_court_position ?= this
							}
						}
					}
				}
			}
			play_sound_effect = "event:/DLC/EP2/SFX/Events/Grand_Activities/Tournaments/ep2_event_grand_tournament_win"
		}
		else = { play_sound_effect = "event:/DLC/EP2/SFX/Events/Grand_Activities/Tournaments/ep2_event_grand_tournament_lose" }
	}

	option = { # Ok
		name = {
			trigger = {
				this = scope:host
				scope:activity = {
					any_guest_subset = {
						name = winner
						phase = tournament_phase_melee # This will need to be changed if more team contests are added
						this = scope:host
					}
				}
			}
			text = contest_events.0605.a.host_winner
		}
		name = {
			trigger = {
				this = scope:host
				scope:activity = {
					any_guest_subset = {
						name = second_place
						phase = tournament_phase_melee # This will need to be changed if more team contests are added
						this = scope:host
					}
				}
			}
			text = contest_events.0605.a.host_loser
		}
		name = {
			trigger = {
				scope:activity = {
					any_guest_subset = {
						name = winner
						phase = tournament_phase_melee # This will need to be changed if more team contests are added
						this = root
					}
				}
			}
			text = contest_events.0605.a.winner
		}
		name = {
			trigger = {
				scope:activity = {
					any_guest_subset = {
						name = second_place
						phase = tournament_phase_melee # This will need to be changed if more team contests are added
						this = scope:host
					}
				}
			}
			text = contest_events.0605.a.loser
		}
		name = {
			trigger = {
				NOT = { this = scope:contest_winner }
			}
			text = contest_events.0605.a
		}
	}

	after = {
		if = {
			limit = {
				OR = {
					any_in_list = { list = my_winners }
					any_in_list = { list = my_losers }
				}
			}
			custom_description_no_bullet = { text = qualifying_knight_rewards_tt }
			if = {
				limit = {
					any_in_list = { list = my_winners }
				}
				every_in_list = {
					list = my_winners
					custom_tooltip = knight_name_tt
				}
			}
			if = {
				limit = {
					any_in_list = { list = my_losers }
				}
				every_in_list = {
					list = my_losers
					custom_tooltip = knight_name_tt
				}
			}
		}
		if = {
			limit = { this = scope:host }
			scope:activity = {
				every_attending_character = {
					limit = {
						NOT = { this = scope:host }
						is_ai = no
					}
					trigger_event = contest_events.0605
				}
			}
		}
	}
}

contest_events.0610 = { # Melee Pivotal Moment
	type = activity_event
	title = contest_events.0610.t
	desc = {
		# Random event flavor
		desc = contest_events.0610.desc
		random_valid = {
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_melee_flavor ?= 1001 }
				desc = contest_events.0610.flavor_1
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_melee_flavor ?= 1003 }
				desc = contest_events.0610.flavor_2
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_melee_flavor ?= 1004 }
				desc = contest_events.0610.flavor_3
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_melee_flavor ?= 1005 }
				desc = contest_events.0610.flavor_4
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_melee_flavor ?= 1006 }
				desc = contest_events.0610.flavor_5
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_melee_flavor ?= 1007 }
				desc = contest_events.0610.flavor_6
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_melee_flavor ?= 1011 }
				desc = contest_events.0610.flavor_7
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_melee_flavor ?= 1012 }
				desc = contest_events.0610.flavor_8
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_melee_flavor ?= 1013 }
				desc = contest_events.0610.flavor_9
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_melee_flavor ?= 1015 }
				desc = contest_events.0610.flavor_10
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_melee_flavor ?= 1017 }
				desc = contest_events.0610.flavor_11
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_melee_flavor ?= 1018 }
				desc = contest_events.0610.flavor_12
			}
		}
		desc = contest_events.0610.flavor_fallback
	}
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = scope:pivotal_contestant
		animation = marshal
	}
	cooldown = { months = 1 }

	trigger = {
		#DLC check.
		has_ep2_dlc_trigger = yes
		
		#Standard checks.
		is_ai = no
	}

	immediate = { 
        # If competing yourself, it is from your perspective, otherwise find someone relevant
        tournament_pivotal_contestant_scope_effect = yes
		# Determine position of PtV scale
		tournament_pivotal_ptv_value_effect = yes
	}

	option = { # Strategize?
		name = contest_events.0610.a
		trigger = { scope:pivotal_contestant ?= this }
		show_as_tooltip = {
			tournament_pivotal_duel_effect = {
				DUELIST = root
				SKILL_1 = martial
				SKILL_2 = prowess
				NO_CHANGE_CHANCE = yes
				INCREASE = major
				DECREASE = major
			}
		}
		add_character_flag = martial_prowess_pivotal_duel
	}

	option = { # Speech?
		name = contest_events.0610.b
		trigger = { scope:pivotal_contestant ?= this }
		show_as_tooltip = {
			tournament_pivotal_duel_effect = {
				DUELIST = root
				SKILL_1 = martial
				SKILL_2 = diplomacy
				NO_CHANGE_CHANCE = yes
				INCREASE = major
				DECREASE = major
			}
		}
		add_character_flag = martial_diplomacy_pivotal_duel
	}

	option = { # Feint?
		name = contest_events.0610.c
		trigger = { scope:pivotal_contestant ?= this }
		show_as_tooltip = {
			tournament_pivotal_duel_effect = {
				DUELIST = root
				SKILL_1 = martial
				SKILL_2 = intrigue
				NO_CHANGE_CHANCE = yes
				INCREASE = major
				DECREASE = major
			}
		}
		add_character_flag = martial_intrigue_pivotal_duel
	}

	option = { # Don't risk it
		name = contest_events.0610.d
		trigger = { scope:pivotal_contestant ?= this }
		flavor = contest_events.0610.d.tt
		show_as_tooltip = {
			tournament_pivotal_duel_single_skill_effect = {
				DUELIST = root
				SKILL_1 = martial
				NO_CHANGE_CHANCE = yes
				INCREASE = minor
				DECREASE = minor
			}
		}
		add_character_flag = martial_pivotal_duel
	}
}

contest_events.0620 = { # Melee Outcome
	type = activity_event
	title = contest_events.0620.t
	desc = {
		# PtV status flavor
		first_valid = {
			# Not a lot in it - range between best and worst is very small
			triggered_desc = {
				trigger = {
					has_character_flag = success_pivotal_flag
				}
				desc = contest_events.0620.pivotal_success
			}
			triggered_desc = {
				trigger = { has_character_flag = neutral_pivotal_flag }
				desc = contest_events.0620.pivotal_neutral
			}
			# Close to or in fact top score
			triggered_desc = {
				trigger = {
					has_character_flag = failure_pivotal_flag
				}
				desc = contest_events.0620.pivotal_failure
			}
		}
		first_valid = {
			# Not a lot in it - range between best and worst is very small
			triggered_desc = {
				trigger = {
					this = scope:pivotal_contestant
					scope:best_worst_diff <= 20
				}
				desc = contest_events.0620.ptv_close
			}
			triggered_desc = {
				trigger = { scope:best_worst_diff <= 20 }
				desc = contest_events.0620.ptv_close_spectator
			}
			# Close to or in fact top score
			triggered_desc = {
				trigger = {
					this = scope:pivotal_contestant
					scope:pivotal_best_diff <= 10
				}
				desc = contest_events.0620.ptv_top
			}
			triggered_desc = {
				trigger = { scope:pivotal_best_diff <= 10 }
				desc = contest_events.0620.ptv_top_spectator
			}
			# Close to or in fact bottom score
			triggered_desc = {
				trigger = {
					this = scope:pivotal_contestant
					scope:pivotal_worst_diff <= 10
				}
				desc = contest_events.0620.ptv_bottom
			}
			triggered_desc = {
				trigger = { scope:pivotal_worst_diff <= 10 }
				desc = contest_events.0620.ptv_bottom_spectator
			}
			# In top half of all contestants
			triggered_desc = {
				trigger = {
					this = scope:pivotal_contestant
					scope:pivotal_contestant.var:progress_to_victory >= scope:ptv_half_way
				}
				desc = contest_events.0620.ptv_top_half
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:progress_to_victory >= scope:ptv_half_way }
				desc = contest_events.0620.ptv_top_half_spectator
			}
			# In bottom half of all contestants
			triggered_desc = {
				trigger = {
					this = scope:pivotal_contestant
					scope:pivotal_contestant.var:progress_to_victory < scope:ptv_half_way
				}
				desc = contest_events.0620.ptv_bottom_half
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:progress_to_victory < scope:ptv_half_way }
				desc = contest_events.0620.ptv_bottom_half_spectator
			}
			desc = contest_events.0620.ptv_fallback
		}
		triggered_desc = { #If you're a spectator, bulk out the desc a bit
			trigger = {
				scope:activity = {
					any_guest_subset_current_phase = {
						name = spectator
						this = root
					}
				}
			}
			desc = contest_events.0620.spectator
		}
		desc = contest_events.0620.final
	}
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = scope:pivotal_contestant
		scripted_animation = duel_wield_weapon
	}
	right_portrait = {
		character = scope:team_opponent
		scripted_animation = duel_wield_weapon
	}
	cooldown = { months = 1 }

	immediate = { 
		# If competing yourself, it is from your perspective, otherwise find someone relevant
		tournament_pivotal_contestant_scope_effect = yes
		scope:pivotal_contestant = {
			switch = {
				trigger = has_character_flag
				martial_prowess_pivotal_duel = {
					tournament_pivotal_duel_effect = {
						DUELIST = scope:pivotal_contestant
						SKILL_1 = martial
						SKILL_2 = prowess
						NO_CHANGE_CHANCE = yes
						INCREASE = major
						DECREASE = major
					}
					remove_character_flag = martial_prowess_pivotal_duel
				}
				martial_diplomacy_pivotal_duel = {
					tournament_pivotal_duel_effect = {
						DUELIST = scope:pivotal_contestant
						SKILL_1 = martial
						SKILL_2 = diplomacy
						NO_CHANGE_CHANCE = yes
						INCREASE = major
						DECREASE = major
					}
					remove_character_flag = martial_diplomacy_pivotal_duel
				}
				martial_intrigue_pivotal_duel = {
					tournament_pivotal_duel_effect = {
						DUELIST = scope:pivotal_contestant
						SKILL_1 = martial
						SKILL_2 = intrigue
						NO_CHANGE_CHANCE = yes
						INCREASE = major
						DECREASE = major
					}
					remove_character_flag = martial_intrigue_pivotal_duel
				}
				martial_pivotal_duel = {
					tournament_pivotal_duel_single_skill_effect = {
						DUELIST = scope:pivotal_contestant
						SKILL_1 = martial
						NO_CHANGE_CHANCE = yes
						INCREASE = minor
						DECREASE = minor
					}
					remove_character_flag = martial_pivotal_duel
				}
			}
		}
		# Determine position of PtV scale
		tournament_pivotal_ptv_value_effect = yes

		if = {
			limit = { pivotal_success_trigger = yes }
			play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_positive_reaction"
		}
		else_if = {
			limit = { pivotal_failure_trigger = yes }
			play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_negative_reaction"
		}
		else = {
			play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_surprise_reaction"
		}
		if = {
			limit = { pivotal_success_trigger = yes }
			scope:pivotal_contestant = {
				if = {
					limit = { this = root }
					every_active_accolade = {
						custom = custom.every_acclaimed_knight
						add_glory = medium_glory_gain
					}
				}
				else = {
					show_as_tooltip = {
						every_active_accolade = {
							custom = custom.every_acclaimed_knight
							add_glory = medium_glory_gain
						}
					}
				}
			}
		}
	}

	option = { # Contestant
		name = contest_events.0620.a
		trigger = { scope:pivotal_contestant ?= this }
	}

	option = { # Spectator
		name = contest_events.0620.b
		trigger = {
			NOT = { scope:pivotal_contestant ?= this  }
		}
	}
}

#################################
#################################
### TURN - SHARED - 0700-0799 ###
#################################
#################################

contest_events.0700 = { # Start
	type = activity_event
	title = contest_events.0700.t
	desc = {
		# Type
		first_valid = {
			triggered_desc = {
				trigger = { scope:activity = { has_current_phase = tournament_phase_archery } }
				desc = contest_events.0700.archery
			}
			triggered_desc = {
				trigger = { scope:activity = { has_current_phase = tournament_phase_recital } }
				desc = contest_events.0700.recital
			}
		}
		# Mysterious stranger flavor
		triggered_desc = {
			trigger = { exists = scope:mysterious_stranger }
			desc = {
				first_valid = {
					triggered_desc = {
						trigger = { scope:activity = { has_current_phase = tournament_phase_archery } }
						desc = mysterious_stranger_archery
					}
					triggered_desc = {
						trigger = { scope:activity = { has_current_phase = tournament_phase_recital } }
						desc = mysterious_stranger_recital
					}
				}
			}
		}
		# Prize flavor
		triggered_desc = {
			trigger = { exists = scope:marriage_prize }
			desc = contest_events_marriage_prize_desc
		}
		# Participation flavor
		first_valid = {
			triggered_desc = {
				trigger = {
					is_in_guest_subset = { name = qualified }
					scope:contest_champion ?= {
						is_in_guest_subset = { name = qualified }
					}
				}
				desc = contest_events.0600.champion_self
			}
			triggered_desc = {
				trigger = {
					scope:contest_champion ?= {
						is_in_guest_subset = { name = qualified }
					}
				}
				desc = contest_events.0700.champion
			}
			triggered_desc = {
				trigger = {
					is_in_guest_subset = { name = qualified }
				}
				desc = contest_events.0700.contestant
			}
			triggered_desc = {
				trigger = {
					activity_is_valid_tournament_contestant = yes
					NOT = {
						is_in_guest_subset = { name = qualified }
					}
					scope:contest_champion ?= {
						activity_is_valid_tournament_contestant = yes
						NOT = {
							is_in_guest_subset = { name = qualified }
						}
					}
				}
				desc = contest_events.0600.neither_qualify
			}
			triggered_desc = {
				trigger = {
					scope:contest_champion ?= {
						activity_is_valid_tournament_contestant = yes
						NOT = {
							is_in_guest_subset = { name = qualified }
						}
					}
				}
				desc = contest_events.0600.champion_qualify
			}
			triggered_desc = {
				trigger = {
					activity_is_valid_tournament_contestant = yes
					NOT = {
						is_in_guest_subset = { name = qualified }
					}
				}
				desc = contest_events.0600.self_qualify
			}
			desc = contest_events.0700.closing
		}
		# Intent flavor
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = var:contest_aptitude
					has_activity_intent = murder_attendee_intent
					exists = scope:intent_scope.var:contest_aptitude
				}
				desc = contest_events_opening_intent_contestant
			}
			triggered_desc = {
				trigger = {
					has_activity_intent = murder_attendee_intent
					exists = scope:intent_scope
					NOT = { exists = scope:intent_scope.var:contest_aptitude }
				}
				desc = contest_events_opening_intent_spectator
			}
		}
	}
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = root
	}
	right_portrait = {
		trigger = { exists = scope:intent_scope }
		character = scope:intent_scope
	}
	lower_right_portrait = {
		trigger = {
			exists = scope:contest_champion
			NAND = {
				exists = scope:portrait_scope
				scope:contest_champion = scope:portrait_scope
			}
		}
		character = scope:contest_champion
	}
	lower_left_portrait = {
		trigger = { exists = scope:portrait_scope }
		character = scope:portrait_scope
	}
	artifact = {
		target = scope:newly_created_artifact 
		position = lower_center_portrait
	}
	cooldown = { months = 1 }

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes
		
		#Standard checks.
		is_ai = no
	}

	immediate = { 
		tournament_contest_start_portrait_effect = yes
		# For replacing a contestant options
		tournament_replace_qualifier_scope_effect = yes
		contest_qualification_tooltip_effect = yes
		if = {
			limit = {
				scope:activity = {
					any_guest_subset = {
						name = qualified
						this = root
					}
				}
				NOT = {
					has_trait = tourney_participant
				}
			}
			add_trait = tourney_participant
		}
		if = {
			limit = {
				scope:activity = { has_current_phase = tournament_phase_archery }
			}
			play_sound_effect = "event:/DLC/EP2/SFX/Events/Grand_Activities/Tournaments/ep2_event_grand_tournament_start_brawl"
		}
		else = { play_sound_effect = "event:/DLC/EP2/SFX/Events/Grand_Activities/Tournaments/ep2_event_grand_tournament_start_poetry" }
	}

	option = { # Let's go
		name = {
			trigger = {
				is_in_guest_subset = { name = qualified }
			}
			text = contest_events.0700.a.contestant
		}
		name = {
			trigger = {
				NOT = {
					is_in_guest_subset = { name = qualified }
				}
			}
			text = contest_events.0700.a
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = -0.5
				ai_greed = -1
				ai_rationality = 0.5
			}
		}
	}

	option = { # Wager
		name = contest_events.0700.b
		tournament_contest_maysir_tooltip_effect = yes
		custom_tooltip = contest_events_place_wager_tt
		trigger_event = {
			id = tournament_events.1000
			days = 3
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = 0.5
				ai_greed = 1
				ai_rationality = -0.5
			}
			modifier = {
				has_trait = profligate
				add = 50
			}
			modifier = {
				has_trait = improvident
				add = 50
			}
		}
	}

	option = { # Tyrannically replace contestant as host
		name = contest_events.0700.c
		trigger = {
			is_ai = no
			this = scope:host
			NOT = { exists = var:contest_aptitude }
			exists = scope:replaced_contestant
			trigger_if = {
				limit = { exists = scope:rival_contestant }
				NOT = { scope:rival_contestant = scope:replaced_contestant }
			}
			activity_is_valid_tournament_contestant = yes
		}
		add_tyranny = minor_tyranny_gain
		reverse_add_opinion = {
			target = scope:replaced_contestant
			modifier = tournament_bribed_replacement_opinion
			opinion = -10
		}
		scope:activity = {
			switch = {
				trigger = has_current_phase
				tournament_phase_archery = {
					tournament_contest_replace_qualifier_effect = {
						NEW_CONTESTANT = root
						OLD_CONTESTANT = scope:replaced_contestant
						CONTEST = archery
					}
				}
				tournament_phase_recital = {
					tournament_contest_replace_qualifier_effect = {
						NEW_CONTESTANT = root
						OLD_CONTESTANT = scope:replaced_contestant
						CONTEST = recital
					}
				}
			}
		}
		stress_impact = {
			just = minor_stress_impact_gain
			greedy = minor_stress_impact_gain
			content = minor_stress_impact_gain
			lazy = minor_stress_impact_gain
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = 1
				ai_honor = -1
				ai_energy = 1
			}
			modifier = {
				has_trait = tourney_participant
				add = 25
			}
			modifier = {
				has_activity_intent = win_contest_intent
				add = 50
			}
		}
	}

	option = { # Replace rival with self or another
		name = contest_events.0700.d
		trigger = {
			is_ai = no
			this = scope:host
			exists = scope:rival_contestant
			exists = scope:new_contestant
		}
		reverse_add_opinion = {
			target = scope:rival_contestant
			modifier = tournament_bribed_replacement_opinion
			opinion = -20
		}
		if = {
			limit = {
				NOT = { this = scope:new_contestant }
			}
			reverse_add_opinion = {
				target = scope:new_contestant
				modifier = tournament_bribed_replacement_opinion
				opinion = 10
			}
		}
		scope:activity = {
			switch = {
				trigger = has_current_phase
				tournament_phase_archery = {
					tournament_contest_replace_qualifier_effect = {
						NEW_CONTESTANT = root
						OLD_CONTESTANT = scope:replaced_contestant
						CONTEST = archery
					}
				}
				tournament_phase_recital = {
					tournament_contest_replace_qualifier_effect = {
						NEW_CONTESTANT = root
						OLD_CONTESTANT = scope:replaced_contestant
						CONTEST = recital
					}
				}
			}
		}
		stress_impact = {
			base = medium_stress_impact_loss
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = 1
				ai_honor = -1
				ai_energy = 1
			}
			modifier = {
				has_trait = tourney_participant
				add = 25
			}
			modifier = {
				has_activity_intent = win_contest_intent
				add = 50
			}
		}
	}

	option = { # Replace another contestant with a bribe
		name = contest_events.0700.e
		trigger = {
			is_ai = no
			NOT = { this = scope:host }
			NOT = { exists = var:contest_aptitude }
			exists = scope:replaced_contestant
			gold >= minor_gold_value
			activity_is_valid_tournament_contestant = yes
		}
		show_as_unavailable = {
			is_ai = no
			NOT = { this = scope:host }
			NOT = { exists = var:contest_aptitude }
			exists = scope:replaced_contestant
			gold < minor_gold_value
			activity_is_valid_tournament_contestant = yes
		}
		flavor = contest_events.0800.e.flavor
		remove_short_term_gold = minor_gold_value
		reverse_add_opinion = {
			target = scope:replaced_contestant
			modifier = tournament_bribed_replacement_opinion
			opinion = -10
		}
		scope:activity = {
			switch = {
				trigger = has_current_phase
				tournament_phase_archery = {
					tournament_contest_replace_qualifier_effect = {
						NEW_CONTESTANT = root
						OLD_CONTESTANT = scope:replaced_contestant
						CONTEST = archery
					}
				}
				tournament_phase_recital = {
					tournament_contest_replace_qualifier_effect = {
						NEW_CONTESTANT = root
						OLD_CONTESTANT = scope:replaced_contestant
						CONTEST = recital
					}
				}
			}
		}
		stress_impact = {
			just = minor_stress_impact_gain
			greedy = minor_stress_impact_gain
			content = minor_stress_impact_gain
			lazy = minor_stress_impact_gain
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = 1
				ai_honor = -1
				ai_energy = 1
				ai_greed = -0.5
			}
			modifier = {
				has_trait = tourney_participant
				add = 25
			}
			modifier = {
				has_activity_intent = win_contest_intent
				add = 50
			}
		}
	}

	after = {
		trigger_event = {
			on_action = tournament_intent_setup_events
			days = { tournament_intent_delay_min tournament_intent_delay_max }
		}
	}
}

contest_events.0705 = { # End
	type = activity_event
	title = {
		desc = {
			first_valid = {
				triggered_desc = {
					trigger = { scope:contest_complete = flag:archery }
					desc = contest_events.0705.t.archery
				}
				triggered_desc = {
					trigger = { scope:contest_complete = flag:recital }
					desc = contest_events.0705.t.recital
				}
				desc = contest_events.0505.t
			}
		}
	}
	desc = {
		desc = contest_events.0705.desc
		first_valid = { # Root involvement
			triggered_desc = {
				trigger = { this = scope:contest_winner }
				desc = contest_events.0705.first
			}
			triggered_desc = {
				trigger = {
					exists = scope:second_place
					this = scope:second_place
				}
				desc = contest_events.0705.second
			}
			triggered_desc = {
				trigger = {
					exists = scope:third_place
					this = scope:third_place
				}
				desc = contest_events.0705.third
			}
			triggered_desc = {
				trigger = {
					scope:activity = {
						any_guest_subset = {
							name = qualified
							this = root
							phase = tournament_phase_archery
						}
					}
				}
				desc = contest_events.0705.contestant
			}
			desc = contest_events.0705.spectator
		}
		first_valid = { # Champion involvement
			triggered_desc = {
				trigger = {
					exists = scope:contest_champion
					scope:contest_champion = scope:contest_winner
				}
				desc = contest_events.0705.first_champion
			}
			triggered_desc = {
				trigger = {
					exists = scope:contest_champion
					exists = scope:second_place
					scope:contest_champion = scope:second_place
				}
				desc = contest_events.0705.second_champion
			}
			triggered_desc = {
				trigger = {
					exists = scope:contest_champion
					exists = scope:third_place
					scope:contest_champion = scope:third_place
				}
				desc = contest_events.0705.third_champion
			}
			triggered_desc = {
				trigger = {
					exists = scope:contest_champion
					scope:activity = {
						any_guest_subset = {
							name = qualified
							this = scope:contest_champion
							phase = tournament_phase_archery
						}
					}
				}
				desc = contest_events.0705.contestant_champion
			}
			triggered_desc = {
				trigger = { exists = scope:contest_champion }
				desc = contest_events.0705.spectator_champion
			}
		}
		first_valid = { # Wagering outcomes
			triggered_desc = {
				trigger = {
					exists = var:tournament_wager_target
					exists = var:tournament_wager_payout
					var:tournament_wager_target = scope:contest_winner
				}
				desc = contest_events.wager_win
			}
			triggered_desc = {
				trigger = {
					exists = var:tournament_wager_target
					exists = var:tournament_wager_payout
				}
				desc = contest_events.wager_loss
			}
		}
		first_valid = { # Intent outcomes
			triggered_desc = {
				trigger = {
					has_activity_intent = win_contest_intent
					this = scope:contest_winner
				}
				desc = contest_events_closing_win_winner
			}
			triggered_desc = {
				trigger = {
					has_activity_intent = win_contest_intent
					is_in_guest_subset = {
						name = qualified
					}
					NOT = { this = scope:contest_winner }
				}
				desc = contest_events_closing_win_contestant
			}
		}
	}
	theme = tournament_contest
	window = tournament_fullscreen_pivotal_event_widget
	left_portrait = {
		character = root
		triggered_animation = {
			trigger = {
				activity_has_reason_to_cheer_character_trigger = { CHAR = scope:contest_winner }
			}
			animation = wrestling_victory
		}
		triggered_animation = {
			trigger = {
				activity_has_reason_to_anger_character_trigger = { CHAR = scope:contest_winner }
			}
			animation = anger
		}
		triggered_animation = {
			trigger = { is_in_list = contest_losers }
			animation = stress
		}
		triggered_animation = {
			trigger = {
				NOT = { is_in_list = contest_losers }
			}
			animation = throne_room_applaud_1
		}
	}
	right_portrait = {
		trigger = {
			NOT = { root = scope:contest_winner }
		}
		character = scope:contest_winner
		animation = wrestling_victory
	}
	lower_center_portrait = {
		trigger = {
			exists = scope:second_place
			NOT = { root = scope:second_place }
		}
		character = scope:second_place
	}
	lower_left_portrait = {
		trigger = {
			exists = scope:third_place
			NOT = { root = scope:third_place }
		}
		character = scope:third_place
	}
	override_transition = {
		trigger = { contest_outcome_transition_success_trigger = { CONTEST = archery } }
		reference = pivotal_archery_success 
	} 
	override_transition = { 
		trigger = { contest_outcome_transition_neutral_trigger = { CONTEST = archery } }
		reference = pivotal_archery_neutral
	}
	override_transition = { 
		trigger = { contest_outcome_transition_failure_trigger = { CONTEST = archery } }
		reference = pivotal_archery_fail 
	}
	override_transition = {
		trigger = { contest_outcome_transition_success_trigger = { CONTEST = recital } }
		reference = pivotal_recital_success 
	} 
	override_transition = { 
		trigger = { contest_outcome_transition_neutral_trigger = { CONTEST = recital } }
		reference = pivotal_recital_neutral
	}
	override_transition = { 
		trigger = { contest_outcome_transition_failure_trigger = { CONTEST = recital } }
		reference = pivotal_recital_fail 
	}
	cooldown = { months = 1 }

	trigger = {
		#DLC check.
		has_ep2_dlc_trigger = yes
		
		#Standard checks.
	}

	immediate = {
		tournament_contest_wager_effect = yes
		tournament_contest_end_portrait_effect = yes
		tournament_display_rewards_effect = yes
		court_position:champion_court_position ?= {
			if = {
				limit = { is_in_list = contest_losers }
				add_to_list = my_losers
			}
		}
		every_knight = {
			limit = { is_in_list = contest_losers }
			add_to_list = my_losers
		}
		if = {
			limit = {
				OR = {
					this = scope:contest_winner
					AND = {	
						NOT = { is_in_list = contest_losers }
						scope:contest_winner = {
							OR = {
								is_knight_of = root
								root.court_position:champion_court_position ?= this
							}
						}
					}
				}
			}
			play_sound_effect = "event:/DLC/EP2/SFX/Events/Grand_Activities/Tournaments/ep2_event_grand_tournament_win"
		}
		else = { play_sound_effect = "event:/DLC/EP2/SFX/Events/Grand_Activities/Tournaments/ep2_event_grand_tournament_lose" }
	}

	option = { # Dedicate victory
		name = contest_events.0705.b
		trigger = {
			this = scope:contest_winner
			has_activity_intent = woo_attendee_intent
			exists = intent_target
			intent_target = { is_participant_in_activity = scope:activity }
		}
		custom_tooltip = available_because_intent_tt
		contest_winner_dedicate_victory_effect = yes
		ai_chance = {
			base = 100
			modifier = {
				factor = 0.5
				exists = intent_target.primary_spouse
				has_dread_level_towards = {
					target = intent_target.primary_spouse
					level >= 1
				}
			}
			modifier = {
				factor = 0.25
				exists = intent_target.primary_spouse
				has_dread_level_towards = {
					target = intent_target.primary_spouse
					level >= 2
				}
			}
		}
	}

	option = { # Ok
		name = {
			text = contest_events.0705.d.winner
			trigger = { this = scope:contest_winner }
		}
		name = {
			text = contest_events.0705.d.second
			trigger = { this = scope:second_place }
		}
		name = {
			text = contest_events.0705.d.loser
			trigger = {
				NOT = {	this = scope:second_place }
				is_in_list = contest_losers
			}
		}
		name = {
			text = contest_events.0705.d
			trigger = {
				NOR = {
					this = scope:contest_winner
					is_in_list = contest_losers
				}
			}
		}
		ai_chance = {
			base = 50
		}
	}

	after = {
		if = {
			limit = {
				any_in_list = { list = my_losers }
			}
			custom_description_no_bullet = { text = qualifying_knight_rewards_tt }
			every_in_list = {
				list = my_losers
				custom_tooltip = knight_name_tt
			}
		}
		if = {
			limit = { this = scope:host }
			scope:activity = {
				every_attending_character = {
					limit = {
						NOT = { this = scope:host }
						is_ai = no
					}
					trigger_event = contest_events.0705
				}
			}
		}
	}
}

contest_events.0710 = { # Archery Pivotal Moment
	type = activity_event
	title = contest_events.0710.t
	desc = {
		# Random event flavor
		desc = contest_events.0710.desc
		random_valid = {
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_archery_flavor ?= 1501 }
				desc = contest_events.0710.flavor_1
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_archery_flavor ?= 1520 }
				desc = contest_events.0710.flavor_2
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_archery_flavor ?= 1530 }
				desc = contest_events.0710.flavor_3
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_archery_flavor ?= 1540 }
				desc = contest_events.0710.flavor_4
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_archery_flavor ?= 1550 }
				desc = contest_events.0710.flavor_5
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_archery_flavor ?= 1502 }
				desc = contest_events.0710.flavor_6
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_archery_flavor ?= 1503 }
				desc = contest_events.0710.flavor_7
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_archery_flavor ?= 6501 }
				desc = contest_events.0710.flavor_8
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_archery_flavor ?= 6503 }
				desc = contest_events.0710.flavor_9
			}
		}
		desc = contest_events.0710.flavor_fallback
	}
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = scope:pivotal_contestant
		scripted_animation = bow_drawn
	}
	cooldown = { months = 1 }

	trigger = {
		#DLC check.
		has_ep2_dlc_trigger = yes
		
		#Standard checks.
		is_ai = no
	}

	immediate = {
		tournament_pivotal_contestant_scope_effect = yes
		# Determine position of PtV scale
		tournament_pivotal_ptv_value_effect = yes
	}

	option = { # Become one with the bow?
		name = contest_events.0710.a
		trigger = { scope:pivotal_contestant ?= this }
		show_as_tooltip = {
			tournament_pivotal_duel_effect = {
				DUELIST = root
				SKILL_1 = prowess
				SKILL_2 = martial
				NO_CHANGE_CHANCE = yes
				INCREASE = medium
				DECREASE = medium
			}
		}
		add_character_flag = prowess_martial_pivotal_duel
	}

	option = { # Steal a nicer arrow
		name = contest_events.0710.b
		trigger = { scope:pivotal_contestant ?= this }
		show_as_tooltip = {
			tournament_pivotal_duel_effect = {
				DUELIST = root
				SKILL_1 = prowess
				SKILL_2 = intrigue
				NO_CHANGE_CHANCE = yes
				INCREASE = medium
				DECREASE = medium
			}
		}
		add_character_flag = prowess_intrigue_pivotal_duel
	}

	option = { # Work out the trajectory
		name = contest_events.0710.c
		trigger = { scope:pivotal_contestant ?= this }
		show_as_tooltip = {
			tournament_pivotal_duel_effect = {
				DUELIST = root
				SKILL_1 = prowess
				SKILL_2 = learning
				NO_CHANGE_CHANCE = yes
				INCREASE = medium
				DECREASE = medium
			}
		}
		add_character_flag = prowess_learning_pivotal_duel
	}

	option = { # Opt-out
		name = contest_events.0710.d
		trigger = { scope:pivotal_contestant ?= this }
		show_as_tooltip = {
			tournament_pivotal_duel_single_skill_effect = {
				DUELIST = root
				SKILL_1 = prowess
				NO_CHANGE_CHANCE = yes
				INCREASE = minor
				DECREASE = minor
			}
		}
		add_character_flag = prowess_pivotal_duel
	}
}

contest_events.0711 = { # Recital Pivotal Moment
	type = activity_event
	title = contest_events.0711.t
	desc = {
		desc = contest_events.0711.desc
		# Random event flavor
		first_valid = {
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_recital_flavor ?= 5501 }
				desc = contest_events.0711.flavor_1
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_recital_flavor ?= 5502 }
				desc = contest_events.0711.flavor_2
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_recital_flavor ?= 5503 }
				desc = contest_events.0711.flavor_3
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_recital_flavor ?= 5504 }
				desc = contest_events.0711.flavor_4
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_recital_flavor ?= 5500 }
				desc = contest_events.0711.flavor_5
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_recital_flavor ?= 5010 }
				desc = contest_events.0711.flavor_6
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_recital_flavor ?= 5020 }
				desc = contest_events.0711.flavor_7
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_recital_flavor ?= 5030 }
				desc = contest_events.0711.flavor_8
			}
		}
		desc = contest_events.0711.flavor_fallback
	}
	window = widget_activity_locale_fullscreen_event
	theme = tournament_contest
	left_portrait = {
		character = scope:pivotal_contestant
		animation = throne_room_conversation_2
	}
	cooldown = { months = 1 }

	trigger = {
		#DLC check.
		has_ep2_dlc_trigger = yes
		
		#Standard checks.
		is_ai = no
	}

	immediate = {
		tournament_pivotal_contestant_scope_effect = yes
		# Determine position of PtV scale
		tournament_pivotal_ptv_value_effect = yes
	}

	option = { # Get money
		name = contest_events.0711.a
		trigger = { scope:pivotal_contestant ?= this }
		show_as_tooltip = {
			tournament_pivotal_duel_effect = {
				DUELIST = root
				SKILL_1 = diplomacy
				SKILL_2 = stewardship
				NO_CHANGE_CHANCE = yes
				INCREASE = medium
				DECREASE = medium
			}
		}	
		add_character_flag = diplomacy_stewardship_pivotal_duel
	}

	option = { # War stories
		name = contest_events.0711.b
		trigger = { scope:pivotal_contestant ?= this }
		show_as_tooltip = {
			tournament_pivotal_duel_effect = {
				DUELIST = root
				SKILL_1 = diplomacy
				SKILL_2 = martial
				NO_CHANGE_CHANCE = yes
				INCREASE = medium
				DECREASE = medium
			}
		}
		add_character_flag = diplomacy_martial_pivotal_duel
	}

	option = { # Appeal to a higher power
		name = contest_events.0711.c
		trigger = { scope:pivotal_contestant ?= this }
		show_as_tooltip = {
			tournament_pivotal_duel_effect = {
				DUELIST = root
				SKILL_1 = diplomacy
				SKILL_2 = learning
				NO_CHANGE_CHANCE = yes
				INCREASE = medium
				DECREASE = medium
			}
		}
		add_character_flag = diplomacy_learning_pivotal_duel
	}

	option = { # Get-out
		name = contest_events.0711.d
		trigger = { scope:pivotal_contestant ?= this }
		show_as_tooltip = {
			tournament_pivotal_duel_single_skill_effect = {
				DUELIST = root
				SKILL_1 = diplomacy
				NO_CHANGE_CHANCE = yes
				INCREASE = minor
				DECREASE = minor
			}
		}
		add_character_flag = diplomacy_pivotal_duel
	}
}

contest_events.0720 = { # Archery Outcome
	type = activity_event
	title = contest_events.0720.t
	desc = {
		# PtV status flavor
		first_valid = {
			# Not a lot in it - range between best and worst is very small
			triggered_desc = {
				trigger = {
					has_character_flag = success_pivotal_flag
				}
				desc = contest_events.0720.pivotal_success
			}
			triggered_desc = {
				trigger = { has_character_flag = neutral_pivotal_flag }
				desc = contest_events.0720.pivotal_neutral
			}
			# Close to or in fact top score
			triggered_desc = {
				trigger = {
					has_character_flag = failure_pivotal_flag
				}
				desc = contest_events.0720.pivotal_failure
			}
		}
		first_valid = {
			# Not a lot in it - range between best and worst is very small
			triggered_desc = {
				trigger = {
					this = scope:pivotal_contestant
					scope:best_worst_diff <= 20
				}
				desc = contest_events.0720.ptv_close
			}
			triggered_desc = {
				trigger = { scope:best_worst_diff <= 20 }
				desc = contest_events.0720.ptv_close_spectator
			}
			# Close to or in fact top score
			triggered_desc = {
				trigger = {
					this = scope:pivotal_contestant
					scope:pivotal_best_diff <= 10
				}
				desc = contest_events.0720.ptv_top
			}
			triggered_desc = {
				trigger = { scope:pivotal_best_diff <= 10 }
				desc = contest_events.0720.ptv_top_spectator
			}
			# Close to or in fact bottom score
			triggered_desc = {
				trigger = {
					this = scope:pivotal_contestant
					scope:pivotal_worst_diff <= 10
				}
				desc = contest_events.0720.ptv_bottom
			}
			triggered_desc = {
				trigger = { scope:pivotal_worst_diff <= 10 }
				desc = contest_events.0720.ptv_bottom_spectator
			}
			# In top half of all contestants
			triggered_desc = {
				trigger = {
					this = scope:pivotal_contestant
					scope:pivotal_contestant.var:progress_to_victory >= scope:ptv_half_way
				}
				desc = contest_events.0720.ptv_top_half
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:progress_to_victory >= scope:ptv_half_way }
				desc = contest_events.0720.ptv_top_half_spectator
			}
			# In bottom half of all contestants
			triggered_desc = {
				trigger = {
					this = scope:pivotal_contestant
					scope:pivotal_contestant.var:progress_to_victory < scope:ptv_half_way
				}
				desc = contest_events.0720.ptv_bottom_half
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:progress_to_victory < scope:ptv_half_way }
				desc = contest_events.0720.ptv_bottom_half_spectator
			}
			desc = contest_events.0720.ptv_fallback
		}
		triggered_desc = {
			trigger = {
				scope:activity = {
					any_guest_subset_current_phase = {
						name = spectator
						this = root
					}
				}
			}
			desc = contest_events.0720.spectator
		}
		desc = contest_events.0720.final
	}
	window = widget_activity_locale_fullscreen_event
	theme = tournament_contest
	left_portrait = {
		character = scope:pivotal_contestant
		scripted_animation = bow_closed
	}
	cooldown = { months = 1 }

	immediate = {
		scope:pivotal_contestant = {
            switch = {
                trigger = has_character_flag
                prowess_martial_pivotal_duel = {
                    tournament_pivotal_duel_effect = {
                        DUELIST = scope:pivotal_contestant
                        SKILL_1 = prowess
                        SKILL_2 = martial
                        NO_CHANGE_CHANCE = yes
                        INCREASE = major
                        DECREASE = major
                    }
                    remove_character_flag = prowess_martial_pivotal_duel
                }
                prowess_intrigue_pivotal_duel = {
                    tournament_pivotal_duel_effect = {
                        DUELIST = scope:pivotal_contestant
                        SKILL_1 = prowess
                        SKILL_2 = intrigue
                        NO_CHANGE_CHANCE = yes
                        INCREASE = major
                        DECREASE = major
                    }
                    remove_character_flag = prowess_intrigue_pivotal_duel
                }
                prowess_learning_pivotal_duel = {
                    tournament_pivotal_duel_effect = {
                        DUELIST = scope:pivotal_contestant
                        SKILL_1 = prowess
                        SKILL_2 = learning
                        NO_CHANGE_CHANCE = yes
                        INCREASE = major
                        DECREASE = major
                    }
                    remove_character_flag = prowess_learning_pivotal_duel
                }
                prowess_pivotal_duel = {
                    tournament_pivotal_duel_single_skill_effect = {
                        DUELIST = scope:pivotal_contestant
                        SKILL_1 = prowess
                        NO_CHANGE_CHANCE = yes
                        INCREASE = minor
                        DECREASE = minor
                    }
                    remove_character_flag = prowess_pivotal_duel
                }
            }
        }
		# Determine position of PtV scale
		tournament_pivotal_ptv_value_effect = yes
		if = {
			limit = { pivotal_success_trigger = yes }
			play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_positive_reaction"
		}
		else_if = {
			limit = { pivotal_failure_trigger = yes }
			play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_negative_reaction"
		}
		else = {
			play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_surprise_reaction"
		}
		if = {
			limit = { pivotal_success_trigger = yes }
			scope:pivotal_contestant = {
				if = {
					limit = { this = root }
					accolade_medium_glory_gain_with_checks_effect = yes
				}
				else = {
					show_as_tooltip = { accolade_medium_glory_gain_with_checks_effect = yes }
				}
			}
		}
	}

	option = { # Contestant
		name = contest_events.0720.a
		trigger = { scope:pivotal_contestant ?= this }
	}

	option = { # Spectator
		name = contest_events.0720.b
		trigger = {
			NOT = { scope:pivotal_contestant ?= this  }
		}
	}
}

contest_events.0721 = { # Recital Outcome
	type = activity_event
	title = contest_events.0721.t
	desc = {
		# PtV status flavor
		first_valid = {
			# Not a lot in it - range between best and worst is very small
			triggered_desc = {
				trigger = {
					has_character_flag = success_pivotal_flag
				}
				desc = contest_events.0721.pivotal_success
			}
			triggered_desc = {
				trigger = { has_character_flag = neutral_pivotal_flag }
				desc = contest_events.0721.pivotal_neutral
			}
			# Close to or in fact top score
			triggered_desc = {
				trigger = {
					has_character_flag = failure_pivotal_flag
				}
				desc = contest_events.0721.pivotal_failure
			}
		}
		first_valid = {
			# Not a lot in it - range between best and worst is very small
			triggered_desc = {
				trigger = {
					this = scope:pivotal_contestant
					scope:best_worst_diff <= 20
				}
				desc = contest_events.0720.ptv_close #Re-use Archery loc as it's similar
			}
			triggered_desc = {
				trigger = { scope:best_worst_diff <= 20 }
				desc = contest_events.0720.ptv_close_spectator
			}
			# Close to or in fact top score
			triggered_desc = {
				trigger = {
					this = scope:pivotal_contestant
					scope:pivotal_best_diff <= 10
				}
				desc = contest_events.0720.ptv_top
			}
			triggered_desc = {
				trigger = { scope:pivotal_best_diff <= 10 }
				desc = contest_events.0720.ptv_top_spectator
			}
			# Close to or in fact bottom score
			triggered_desc = {
				trigger = {
					this = scope:pivotal_contestant
					scope:pivotal_worst_diff <= 10
				}
				desc = contest_events.0720.ptv_bottom
			}
			triggered_desc = {
				trigger = { scope:pivotal_worst_diff <= 10 }
				desc = contest_events.0720.ptv_bottom_spectator
			}
			# In top half of all contestants
			triggered_desc = {
				trigger = {
					this = scope:pivotal_contestant
					scope:pivotal_contestant.var:progress_to_victory >= scope:ptv_half_way
				}
				desc = contest_events.0720.ptv_top_half
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:progress_to_victory >= scope:ptv_half_way }
				desc = contest_events.0720.ptv_top_half_spectator
			}
			# In bottom half of all contestants
			triggered_desc = {
				trigger = {
					this = scope:pivotal_contestant
					scope:pivotal_contestant.var:progress_to_victory < scope:ptv_half_way
				}
				desc = contest_events.0720.ptv_bottom_half
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:progress_to_victory < scope:ptv_half_way }
				desc = contest_events.0720.ptv_bottom_half_spectator
			}
			desc = contest_events.0721.ptv_fallback
		}
		triggered_desc = {
			trigger = {
				scope:activity = {
					any_guest_subset_current_phase = {
						name = spectator
						this = root
					}
				}
			}
			desc = contest_events.0721.spectator
		}
		desc = contest_events.0721.final
	}
	window = widget_activity_locale_fullscreen_event
	theme = tournament_contest
	left_portrait = {
		character = scope:pivotal_contestant
		animation = war_over_tie
	}
	cooldown = { months = 1 }

	immediate = {
        scope:pivotal_contestant = {
            switch = {
                trigger = has_character_flag
                diplomacy_stewardship_pivotal_duel = {
                    tournament_pivotal_duel_effect = {
                        DUELIST = scope:pivotal_contestant
                        SKILL_1 = diplomacy
                        SKILL_2 = stewardship
                        NO_CHANGE_CHANCE = yes
                        INCREASE = major
                        DECREASE = major
                    }
                    remove_character_flag = diplomacy_stewardship_pivotal_duel
                }
                diplomacy_martial_pivotal_duel = {
                    tournament_pivotal_duel_effect = {
                        DUELIST = scope:pivotal_contestant
                        SKILL_1 = diplomacy
                        SKILL_2 = martial
                        NO_CHANGE_CHANCE = yes
                        INCREASE = major
                        DECREASE = major
                    }
                    remove_character_flag = diplomacy_martial_pivotal_duel
                }
                diplomacy_learning_pivotal_duel = {
                    tournament_pivotal_duel_effect = {
                        DUELIST = scope:pivotal_contestant
                        SKILL_1 = diplomacy
                        SKILL_2 = learning
                        NO_CHANGE_CHANCE = yes
                        INCREASE = major
                        DECREASE = major
                    }
                    remove_character_flag = diplomacy_learning_pivotal_duel
                }
                diplomacy_pivotal_duel = {
                    tournament_pivotal_duel_single_skill_effect = {
                        DUELIST = scope:pivotal_contestant
                        SKILL_1 = diplomacy
                        NO_CHANGE_CHANCE = yes
                        INCREASE = minor
                        DECREASE = minor
                    }
                    remove_character_flag = diplomacy_pivotal_duel
                }
            }
        }
		# Determine position of PtV scale
		tournament_pivotal_ptv_value_effect = yes
		if = {
			limit = { pivotal_success_trigger = yes }
			play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_positive_reaction"
		}
		else_if = {
			limit = { pivotal_failure_trigger = yes }
			play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_negative_reaction"
		}
		else = {
			play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_surprise_reaction"
		}
		if = {
			limit = { pivotal_success_trigger = yes }
			scope:pivotal_contestant = {
				if = {
					limit = { this = root }
					accolade_medium_glory_gain_with_checks_effect = yes
				}
				else = {
					show_as_tooltip = { accolade_medium_glory_gain_with_checks_effect = yes }
				}
			}
		}
	}

	option = { # Contestant
		name = contest_events.0721.a
		trigger = { scope:pivotal_contestant ?= this }
	}

	option = { # Spectator
		name = contest_events.0721.b
		trigger = {
			NOT = { scope:pivotal_contestant ?= this  }
		}
	}
}

###################################
###################################
### VERSUS - SHARED - 0800-0899 ###
###################################
###################################

scripted_trigger versus_show_pair_trigger = {
	exists = scope:contest_summary_$NUM$.var:$TIME$_versus_match
	NOR = {
		scope:contest_summary_$NUM$ = root
		scope:contest_summary_$NUM$.var:$TIME$_versus_match = root
	}
}

scripted_trigger versus_show_pair_existing_trigger = {
	trigger_if = {
		limit = { exists = scope:contest_summary_$COMPARE$ }
		NOT = { scope:contest_summary_$NUM$.var:$TIME$_versus_match = scope:contest_summary_$COMPARE$ }
	}
}

scripted_effect versus_next_pair_summary_effect = {
	if = {
		limit = {
			versus_show_pair_trigger = { NUM = 1 TIME = next }
		}
		custom_description = {
			text = tournament_contest_round_next_tt
			subject = scope:contest_summary_1
			object = scope:contest_summary_1.var:next_versus_match
		}
	}
	if = {
		limit = {
			versus_show_pair_trigger = { NUM = 2 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 2 COMPARE = 1 TIME = next }
		}
		custom_description = {
			text = tournament_contest_round_next_tt
			subject = scope:contest_summary_2
			object = scope:contest_summary_2.var:next_versus_match
		}
	}
	if = {
		limit = {
			versus_show_pair_trigger = { NUM = 3 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 3 COMPARE = 1 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 3 COMPARE = 2 TIME = next }
		}
		custom_description = {
			text = tournament_contest_round_next_tt
			subject = scope:contest_summary_3
			object = scope:contest_summary_3.var:next_versus_match
		}
	}
	if = {
		limit = {
			versus_show_pair_trigger = { NUM = 4 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 4 COMPARE = 1 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 4 COMPARE = 2 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 4 COMPARE = 3 TIME = next }
		}
		custom_description = {
			text = tournament_contest_round_next_tt
			subject = scope:contest_summary_4
			object = scope:contest_summary_4.var:next_versus_match
		}
	}
	if = {
		limit = {
			versus_show_pair_trigger = { NUM = 5 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 5 COMPARE = 1 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 5 COMPARE = 2 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 5 COMPARE = 3 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 5 COMPARE = 4 TIME = next }	
		}
		custom_description = {
			text = tournament_contest_round_next_tt
			subject = scope:contest_summary_5
			object = scope:contest_summary_5.var:next_versus_match
		}
	}
	if = {
		limit = {
			versus_show_pair_trigger = { NUM = 6 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 6 COMPARE = 1 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 6 COMPARE = 2 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 6 COMPARE = 3 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 6 COMPARE = 4 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 6 COMPARE = 5 TIME = next }
		}
		custom_description = {
			text = tournament_contest_round_next_tt
			subject = scope:contest_summary_6
			object = scope:contest_summary_6.var:next_versus_match
		}
	}
	if = {
		limit = {
			versus_show_pair_trigger = { NUM = 7 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 7 COMPARE = 1 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 7 COMPARE = 2 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 7 COMPARE = 3 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 7 COMPARE = 4 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 7 COMPARE = 5 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 7 COMPARE = 6 TIME = next }
		}
		custom_description = {
			text = tournament_contest_round_next_tt
			subject = scope:contest_summary_7
			object = scope:contest_summary_7.var:next_versus_match
		}
	}
}

scripted_effect versus_last_pair_summary_effect = {
	if = {
		limit = {
			versus_show_pair_trigger = { NUM = 1 TIME = last }
		}
		custom_description = {
			text = tournament_contest_round_tt
			subject = scope:contest_summary_1
			object = scope:contest_summary_1.var:last_versus_match
		}
	}
	if = {
		limit = {
			versus_show_pair_trigger = { NUM = 2 TIME = last }
			versus_show_pair_existing_trigger = { NUM = 2 COMPARE = 1 TIME = last }
		}
		custom_description = {
			text = tournament_contest_round_tt
			subject = scope:contest_summary_2
			object = scope:contest_summary_2.var:last_versus_match
		}
	}
	if = {
		limit = {
			versus_show_pair_trigger = { NUM = 3 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 3 COMPARE = 1 TIME = last }
			versus_show_pair_existing_trigger = { NUM = 3 COMPARE = 2 TIME = last }
		}
		custom_description = {
			text = tournament_contest_round_tt
			subject = scope:contest_summary_3
			object = scope:contest_summary_3.var:last_versus_match
		}
	}
	if = {
		limit = {
			versus_show_pair_trigger = { NUM = 4 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 4 COMPARE = 1 TIME = last }
			versus_show_pair_existing_trigger = { NUM = 4 COMPARE = 2 TIME = last }
			versus_show_pair_existing_trigger = { NUM = 4 COMPARE = 3 TIME = last }
		}
		custom_description = {
			text = tournament_contest_round_tt
			subject = scope:contest_summary_4
			object = scope:contest_summary_4.var:last_versus_match
		}
	}
	if = {
		limit = {
			versus_show_pair_trigger = { NUM = 5 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 5 COMPARE = 1 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 5 COMPARE = 2 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 5 COMPARE = 3 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 5 COMPARE = 4 TIME = next }	
		}
		custom_description = {
			text = tournament_contest_round_tt
			subject = scope:contest_summary_5
			object = scope:contest_summary_5.var:last_versus_match
		}
	}
	if = {
		limit = {
			versus_show_pair_trigger = { NUM = 6 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 6 COMPARE = 1 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 6 COMPARE = 2 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 6 COMPARE = 3 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 6 COMPARE = 4 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 6 COMPARE = 5 TIME = next }
		}
		custom_description = {
			text = tournament_contest_round_tt
			subject = scope:contest_summary_6
			object = scope:contest_summary_6.var:last_versus_match
		}
	}
	if = {
		limit = {
			versus_show_pair_trigger = { NUM = 7 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 7 COMPARE = 1 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 7 COMPARE = 2 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 7 COMPARE = 3 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 7 COMPARE = 4 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 7 COMPARE = 5 TIME = next }
			versus_show_pair_existing_trigger = { NUM = 7 COMPARE = 6 TIME = next }
		}
		custom_description = {
			text = tournament_contest_round_tt
			subject = scope:contest_summary_7
			object = scope:contest_summary_7.var:last_versus_match
		}
	}
}

contest_events.0800 = { # Start 
	type = activity_event
	title = contest_events.0800.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:activity = { has_current_phase = tournament_phase_joust } }
				desc = contest_events.0800.joust
			}
			triggered_desc = {
				trigger = { scope:activity = { has_current_phase = tournament_phase_wrestling } }
				desc = contest_events.0800.wrestling
			}
			triggered_desc = {
				trigger = { scope:activity = { has_current_phase = tournament_phase_duel } }
				desc = contest_events.0800.duel
			}
			triggered_desc = {
				trigger = { scope:activity = { has_current_phase = tournament_phase_board_game } }
				desc = contest_events.0800.board_game
			}
		}
		desc = contest_events.0820.qualify
		desc = contest_events.0800.desc
		# Prize flavor
		triggered_desc = {
			trigger = { exists = scope:marriage_prize }
			desc = contest_events_marriage_prize_desc
		}
		# Mysterious Stranger flavor
		triggered_desc = {
			trigger = { exists = scope:mysterious_stranger }
			desc = {
				first_valid = {
					triggered_desc = {
						trigger = { scope:activity = { has_current_phase = tournament_phase_joust } }
						desc = mysterious_stranger_joust
					}
					triggered_desc = {
						trigger = { scope:activity = { has_current_phase = tournament_phase_wrestling } }
						desc = mysterious_stranger_wrestling
					}
					triggered_desc = {
						trigger = { scope:activity = { has_current_phase = tournament_phase_duel } }
						desc = mysterious_stranger_duel
					}
					triggered_desc = {
						trigger = { scope:activity = { has_current_phase = tournament_phase_board_game } }
						desc = mysterious_stranger_board_game
					}
				}
			}
		}
		# Participation flavor
		first_valid = {
			triggered_desc = {
				trigger = {
					is_in_guest_subset = { name = qualified }
					scope:contest_champion ?= {
						is_in_guest_subset = { name = qualified }
					}
				}
				desc = contest_events.0600.champion_self
			}
			triggered_desc = {
				trigger = {
					scope:contest_champion ?= {
						is_in_guest_subset = { name = qualified }
					}
				}
				desc = contest_events.0700.champion
			}
			triggered_desc = {
				trigger = {
					is_in_guest_subset = { name = qualified }
				}
				desc = contest_events.0800.vs
			}
			triggered_desc = {
				trigger = {
					activity_is_valid_tournament_contestant = yes
					NOT = {
						is_in_guest_subset = { name = qualified }
					}
					scope:contest_champion ?= {
						activity_is_valid_tournament_contestant = yes
						NOT = {
							is_in_guest_subset = { name = qualified }
						}
					}
				}
				desc = contest_events.0600.neither_qualify
			}
			triggered_desc = {
				trigger = {
					scope:contest_champion ?= {
						activity_is_valid_tournament_contestant = yes
						NOT = {
							is_in_guest_subset = { name = qualified }
						}
					}
				}
				desc = contest_events.0600.champion_qualify
			}
			triggered_desc = {
				trigger = {
					activity_is_valid_tournament_contestant = yes
					NOT = {
						is_in_guest_subset = { name = qualified }
					}
				}
				desc = contest_events.0600.self_qualify
			}
			desc = contest_events.0700.closing
		}
		# Intent flavor
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = var:contest_aptitude
					has_activity_intent = murder_attendee_intent
					exists = scope:intent_scope.var:contest_aptitude
					trigger_if = {
						limit = { exists = scope:versus_contestant }
						NOT = { scope:intent_scope = scope:versus_contestant }
					}
				}
				desc = contest_events_opening_intent_contestant
			}
			triggered_desc = {
				trigger = {
					has_activity_intent = murder_attendee_intent
					exists = scope:intent_scope
					NOT = { exists = scope:intent_scope.var:contest_aptitude }
				}
				desc = contest_events_opening_intent_spectator
			}
		}
	}
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = root
	}
	right_portrait = {
		character = scope:versus_contestant
	}
	lower_left_portrait = {
		trigger = { exists = scope:portrait_scope }
		character = scope:portrait_scope
	}
	lower_right_portrait = {
		trigger = {
			exists = scope:contest_champion
			NAND = {
				exists = scope:portrait_scope
				scope:contest_champion = scope:portrait_scope
			}
		}
		character = scope:contest_champion
	}
	cooldown = { months = 1 }

	trigger = {
		#DLC check.
		has_ep2_dlc_trigger = yes
		
		#Standard checks.
		is_ai = no
	}

	immediate = {
		tournament_contest_start_portrait_effect = yes
		# For replacing a contestant options
		tournament_replace_qualifier_scope_effect = yes
		contest_qualification_tooltip_effect = yes
		versus_next_pair_summary_effect = yes
		if = {
			limit = {
				scope:activity = {
					any_guest_subset = {
						name = qualified
						this = root
					}
				}
				NOT = {
					has_trait = tourney_participant
				}
			}
			add_trait = tourney_participant
		}
		if = {
			limit = {
				scope:activity = {
					OR = {
						has_current_phase = tournament_phase_wrestling
						has_current_phase = tournament_phase_duel
					}
				}
			}
			play_sound_effect = "event:/DLC/EP2/SFX/Events/Grand_Activities/Tournaments/ep2_event_grand_tournament_start_brawl"
		}
		else_if = {
			limit = {
				scope:activity = { has_current_phase = tournament_phase_joust }
			}
			play_sound_effect = "event:/DLC/EP2/SFX/Events/Grand_Activities/Tournaments/ep2_event_grand_tournament_start_horsing"
		}
		else = { play_sound_effect = "event:/DLC/EP2/SFX/Events/Grand_Activities/Tournaments/ep2_event_grand_tournament_start_poetry" }
	}

	option = { # Ok
		name = {
			trigger = {
				is_in_guest_subset = { name = qualified }
			}
			text = contest_events.0800.a.contestant
		}
		name = {
			trigger = {
				NOT = {
					is_in_guest_subset = { name = qualified }
				}
				scope:contest_champion ?= {
					is_in_guest_subset = { name = qualified }
				}
			}
			text = contest_events.0800.a.champion
		}
		name = {
			trigger = {
				NOR = {
					is_in_guest_subset = { name = qualified }
					scope:contest_champion ?= {
						is_in_guest_subset = { name = qualified }
					}
				}
			}
			text = contest_events.0800.a
		}
		if = {
			limit = { exists = scope:versus_contestant }
			custom_description = {
				text = tournament_contest_round_next_tt
				subject = root
				object = scope:versus_contestant
			}
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = -0.5
				ai_greed = -1
				ai_rationality = 0.5
			}
		}
	}

	option = { # Wager
		name = contest_events.0800.b
		tournament_contest_maysir_tooltip_effect = yes
		custom_tooltip = contest_events_place_wager_tt
		if = {
			limit = { exists = scope:versus_contestant }
			custom_description = {
				text = tournament_contest_round_next_tt
				subject = root
				object = scope:versus_contestant
			}
		}
		trigger_event = {
			id = tournament_events.1000
			days = 1
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = 0.5
				ai_greed = 1
				ai_rationality = -0.5
			}
			modifier = {
				has_trait = profligate
				add = 50
			}
			modifier = {
				has_trait = improvident
				add = 50
			}
		}
	}

	option = { # Tyrannically replace contestant as host
		name = contest_events.0800.c
		trigger = {
			is_ai = no
			this = scope:host
			NOT = { exists = var:contest_aptitude }
			exists = scope:replaced_contestant
			trigger_if = {
				limit = { exists = scope:rival_contestant }
				NOT = { scope:rival_contestant = scope:replaced_contestant }
			}
			activity_is_valid_tournament_contestant = yes
		}
		add_tyranny = minor_tyranny_gain
		reverse_add_opinion = {
			target = scope:replaced_contestant
			modifier = tournament_bribed_replacement_opinion
			opinion = -10
		}
		scope:activity = {
			switch = {
				trigger = has_current_phase
				tournament_phase_joust = {
					tournament_contest_versus_replace_qualifier_effect = {
						NEW_CONTESTANT = root
						OLD_CONTESTANT = scope:replaced_contestant
						CONTEST = joust
					}
				}
				tournament_phase_duel = {
					tournament_contest_versus_replace_qualifier_effect = {
						NEW_CONTESTANT = root
						OLD_CONTESTANT = scope:replaced_contestant
						CONTEST = duel
					}
				}
				tournament_phase_wrestling = {
					tournament_contest_versus_replace_qualifier_effect = {
						NEW_CONTESTANT = root
						OLD_CONTESTANT = scope:replaced_contestant
						CONTEST = wrestling
					}
				}
				tournament_phase_board_game = {
					tournament_contest_versus_replace_qualifier_effect = {
						NEW_CONTESTANT = root
						OLD_CONTESTANT = scope:replaced_contestant
						CONTEST = board_game
					}
				}
			}
		}
		stress_impact = {
			just = minor_stress_impact_gain
			greedy = minor_stress_impact_gain
			content = minor_stress_impact_gain
			lazy = minor_stress_impact_gain
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = 1
				ai_honor = -1
				ai_energy = 1
			}
			modifier = {
				has_trait = tourney_participant
				add = 25
			}
			modifier = {
				has_activity_intent = win_contest_intent
				add = 50
			}
		}
	}

	option = { # Replace rival with self or another
		name = contest_events.0800.d
		trigger = {
			is_ai = no
			this = scope:host
			exists = scope:rival_contestant
			exists = scope:new_contestant
		}
		reverse_add_opinion = {
			target = scope:rival_contestant
			modifier = tournament_bribed_replacement_opinion
			opinion = -20
		}
		if = {
			limit = {
				NOT = { this = scope:new_contestant }
			}
			reverse_add_opinion = {
				target = scope:new_contestant
				modifier = tournament_bribed_replacement_opinion
				opinion = 10
			}
		}
		scope:activity = {
			switch = {
				trigger = has_current_phase
				tournament_phase_joust = {
					tournament_contest_versus_replace_qualifier_effect = {
						NEW_CONTESTANT = scope:new_contestant
						OLD_CONTESTANT = scope:rival_contestant
						CONTEST = joust
					}
				}
				tournament_phase_duel = {
					tournament_contest_versus_replace_qualifier_effect = {
						NEW_CONTESTANT = scope:new_contestant
						OLD_CONTESTANT = scope:rival_contestant
						CONTEST = duel
					}
				}
				tournament_phase_wrestling = {
					tournament_contest_versus_replace_qualifier_effect = {
						NEW_CONTESTANT = scope:new_contestant
						OLD_CONTESTANT = scope:rival_contestant
						CONTEST = wrestling
					}
				}
				tournament_phase_board_game = {
					tournament_contest_versus_replace_qualifier_effect = {
						NEW_CONTESTANT = scope:new_contestant
						OLD_CONTESTANT = scope:rival_contestant
						CONTEST = board_game
					}
				}
			}
		}
		stress_impact = {
			base = medium_stress_impact_loss
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = 1
				ai_honor = -1
				ai_energy = 1
			}
			modifier = {
				has_trait = tourney_participant
				add = 25
			}
			modifier = {
				has_activity_intent = win_contest_intent
				add = 50
			}
		}
	}

	option = { # Replace another contestant with a bribe
		name = contest_events.0800.e
		trigger = {
			is_ai = no
			NOT = { this = scope:host }
			NOT = { exists = var:contest_aptitude }
			exists = scope:replaced_contestant
			gold >= minor_gold_value
			activity_is_valid_tournament_contestant = yes
		}
		show_as_unavailable = {
			NOT = { exists = var:contest_aptitude }
			NOT = { this = scope:host }
			exists = scope:replaced_contestant
			gold < minor_gold_value
			activity_is_valid_tournament_contestant = yes
		}
		flavor = contest_events.0800.e.flavor
		remove_short_term_gold = minor_gold_value
		reverse_add_opinion = {
			target = scope:replaced_contestant
			modifier = tournament_bribed_replacement_opinion
			opinion = -10
		}
		scope:activity = {
			switch = {
				trigger = has_current_phase
				tournament_phase_joust = {
					tournament_contest_versus_replace_qualifier_effect = {
						NEW_CONTESTANT = root
						OLD_CONTESTANT = scope:replaced_contestant
						CONTEST = joust
					}
				}
				tournament_phase_duel = {
					tournament_contest_versus_replace_qualifier_effect = {
						NEW_CONTESTANT = root
						OLD_CONTESTANT = scope:replaced_contestant
						CONTEST = duel
					}
				}
				tournament_phase_wrestling = {
					tournament_contest_versus_replace_qualifier_effect = {
						NEW_CONTESTANT = root
						OLD_CONTESTANT = scope:replaced_contestant
						CONTEST = wrestling
					}
				}
				tournament_phase_board_game = {
					tournament_contest_versus_replace_qualifier_effect = {
						NEW_CONTESTANT = root
						OLD_CONTESTANT = scope:replaced_contestant
						CONTEST = board_game
					}
				}
			}
		}
		stress_impact = {
			just = minor_stress_impact_gain
			greedy = minor_stress_impact_gain
			content = minor_stress_impact_gain
			lazy = minor_stress_impact_gain
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = 1
				ai_honor = -1
				ai_energy = 1
				ai_greed = -0.5
			}
			modifier = {
				has_trait = tourney_participant
				add = 25
			}
			modifier = {
				has_activity_intent = win_contest_intent
				add = 50
			}
		}
	}

	option = { # Force concession
		name = contest_events.0800.f
		trigger = {
			is_ai = no
			scope:versus_contestant.liege ?= root
			NOT = { has_relation_rival = scope:versus_contestant }
		}
		flavor = contest_events.0800.f.flavor
		versus_force_concession_effect = yes
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = 0.5
				ai_honor = -0.5
				ai_energy = 0.5
			}
			modifier = {
				has_activity_intent = win_contest_intent
				add = 50
			}
		}
	}
}

contest_events.0801 = {
	scope = activity
	hidden = yes

	trigger = {
		trigger_if = {
			limit = { var:contest_versus_progress = 1 }
			any_guest_subset_current_phase = {
				name = semi_finalist
				count = 4
			}
		}
		trigger_else_if = {
			limit = { var:contest_versus_progress = 2 }
			any_guest_subset_current_phase = {
				name = finalist
				count = 2
			}
		}
		trigger_else = { always = yes }
	}

	immediate = {
		switch = {
			trigger = has_current_phase
			tournament_phase_joust = {
				tournament_contest_versus_pulse_effect = { CONTEST = joust }
			}
			tournament_phase_duel = {
				tournament_contest_versus_pulse_effect = { CONTEST = duel }
			}
			tournament_phase_wrestling = {
				tournament_contest_versus_pulse_effect = { CONTEST = wrestling }
			}
			tournament_phase_board_game = {
				tournament_contest_versus_pulse_effect = { CONTEST = board_game }
			}
		}
	}
}

contest_events.0802 = {
	type = character_event
	hidden = yes

	immediate = {
		scope:activity = {
			switch = {
				trigger = has_current_phase
				tournament_phase_joust = {
					root = {
						tournament_contest_versus_battle_effect = {
							CONTEST = joust
							CHOOSE_WINNER = yes
							INJURY_CHANCE = yes
						}
					}
				}
				tournament_phase_duel = {
					root = {
						tournament_contest_versus_battle_effect = {
							CONTEST = duel
							CHOOSE_WINNER = yes
							INJURY_CHANCE = yes
						}
					}
				}
				tournament_phase_wrestling = {
					root = {
						tournament_contest_versus_battle_effect = {
							CONTEST = wrestling
							CHOOSE_WINNER = yes
							INJURY_CHANCE = yes
						}
					}
				}
				tournament_phase_board_game = {
					root = {
						tournament_contest_versus_battle_effect = {
							CONTEST = board_game
							CHOOSE_WINNER = yes
							INJURY_CHANCE = no
						}
					}
				}
			}
		}
	}
}

contest_events.0805 = { # End
	type = activity_event
	title = {
		desc = {
			first_valid = {
				triggered_desc = {
					trigger = { scope:contest_complete = flag:board_game }
					desc = contest_events.0805.t.board_game
				}
				triggered_desc = {
					trigger = { scope:contest_complete = flag:duel }
					desc = contest_events.0805.t.duel
				}
				triggered_desc = {
					trigger = { scope:contest_complete = flag:wrestling }
					desc = contest_events.0805.t.wrestling
				}
				triggered_desc = {
					trigger = { scope:contest_complete = flag:joust }
					desc = contest_events.0805.t.joust
				}
				desc = contest_events.0505.t
			}
		}
	}
	desc = {
		desc = contest_events.0805.desc
		first_valid = { # Root involvement
			triggered_desc = {
				trigger = { this = scope:contest_winner }
				desc = contest_events.0805.first
			}
			triggered_desc = {
				trigger = {
					exists = scope:second_place
					this = scope:second_place
				}
				desc = contest_events.0805.second
			}
			triggered_desc = {
				trigger = { is_in_list = contest_losers }
				desc = contest_events.0805.contestant
			}
			desc = contest_events.0805.spectator
		}
		first_valid = { # Champion involvement
			triggered_desc = {
				trigger = {
					exists = scope:contest_champion
					scope:contest_champion = scope:contest_winner
				}
				desc = contest_events.0805.first_champion
			}
			triggered_desc = {
				trigger = {
					exists = scope:contest_champion
					exists = scope:second_place
					scope:contest_champion = scope:second_place
				}
				desc = contest_events.0805.second_champion
			}
			triggered_desc = {
				trigger = {
					exists = scope:contest_champion
					scope:contest_champion = { is_in_list = contest_losers }
				}
				desc = contest_events.0805.contestant_champion
			}
			triggered_desc = {
				trigger = { exists = scope:contest_champion }
				desc = contest_events.0805.spectator_champion
			}
		}
		first_valid = { # Wagering outcomes
			triggered_desc = {
				trigger = {
					exists = var:tournament_wager_target
					exists = var:tournament_wager_payout
					var:tournament_wager_target = scope:contest_winner
				}
				desc = contest_events.wager_win
			}
			triggered_desc = {
				trigger = {
					exists = var:tournament_wager_target
					exists = var:tournament_wager_payout
				}
				desc = contest_events.wager_loss
			}
		}
		first_valid = { # Intent outcomes
			triggered_desc = {
				trigger = {
					has_activity_intent = win_contest_intent
					this = scope:contest_winner
				}
				desc = contest_events_closing_win_winner
			}
			triggered_desc = {
				trigger = {
					has_activity_intent = win_contest_intent
					is_in_guest_subset = {
						name = qualified
					}
					NOT = { this = scope:contest_winner }
				}
				desc = contest_events_closing_win_contestant
			}
		}
	}
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = root
		triggered_animation = {
			trigger = { this = scope:contest_winner }
			animation = wrestling_victory
		}
		triggered_animation = {
			trigger = {
				activity_has_reason_to_cheer_character_trigger = { CHAR = scope:contest_winner }
			}
			animation = throne_room_cheer_1
		}
		triggered_animation = {
			trigger = {
				activity_has_reason_to_anger_character_trigger = { CHAR = scope:contest_winner }
			}
			animation = anger
		}
		triggered_animation = {
			trigger = { is_in_list = contest_losers }
			animation = war_over_tie
		}
		triggered_animation = {
			trigger = {
				NOR = {
					this = scope:contest_winner
					is_in_list = contest_losers
				}
			}
			animation = throne_room_applaud_1
		}
	}
	right_portrait = {
		trigger = {
			NOT = { root = scope:contest_winner }
		}
		character = scope:contest_winner
		animation = wrestling_victory
	}
	lower_right_portrait = {
		trigger = {
			exists = scope:marriage_prize
			NOT = { root = scope:marriage_prize }
		}
		character = scope:marriage_prize
	}
	lower_left_portrait = {
		trigger = {
			exists = scope:contest_champion
			NOR = {
				this = scope:contest_winner
				this = scope:second_place
			}
		}
		character = scope:contest_champion
	}
	cooldown = { months = 1 }

	trigger = {
		#DLC check.
		has_ep2_dlc_trigger = yes
	}

	immediate = {
		tournament_contest_wager_effect = yes
		tournament_contest_end_portrait_effect = yes
		tournament_display_rewards_effect = yes
		court_position:champion_court_position ?= {
			if = {
				limit = { is_in_list = contest_losers }
				add_to_list = my_losers
			}
		}
		every_knight = {
			limit = { is_in_list = contest_losers }
			add_to_list = my_losers
		}
		if = {
			limit = {
				OR = {
					this = scope:contest_winner
					AND = {	
						NOT = { is_in_list = contest_losers }
						scope:contest_winner = {
							OR = {
								is_knight_of = root
								root.court_position:champion_court_position ?= this
							}
						}
					}
				}
			}
			play_sound_effect = "event:/DLC/EP2/SFX/Events/Grand_Activities/Tournaments/ep2_event_grand_tournament_win"
		}
		else = { play_sound_effect = "event:/DLC/EP2/SFX/Events/Grand_Activities/Tournaments/ep2_event_grand_tournament_lose" }
	}

	option = { # Dedicate victory
		name = contest_events.0805.b
		trigger = {
			scope:contest_winner ?= this
			has_activity_intent = woo_attendee_intent
			exists = intent_target
			intent_target = { is_participant_in_activity = scope:activity }
		}
		custom_tooltip = available_because_intent_tt
		contest_winner_dedicate_victory_effect = yes
		ai_chance = {
			base = 100
			modifier = {
				factor = 0.5
				exists = intent_target.primary_spouse
				has_dread_level_towards = {
					target = intent_target.primary_spouse
					level >= 1
				}
			}
			modifier = {
				factor = 0.25
				exists = intent_target.primary_spouse
				has_dread_level_towards = {
					target = intent_target.primary_spouse
					level >= 2
				}
			}
		}
	}

	option = { # Ok
		name = {
			text = contest_events.0805.d.winner
			trigger = { this = scope:contest_winner }
		}
		name = {
			text = contest_events.0805.d.second
			trigger = { this = scope:second_place }
		}
		name = {
			text = contest_events.0805.d.loser
			trigger = {
				NOT = {	this = scope:second_place }
				is_in_list = contest_losers
			}
		}
		name = {
			text = contest_events.0805.d
			trigger = {
				NOR = {
					this = scope:contest_winner
					is_in_list = contest_losers
				}
			}
		}
		ai_chance = {
			base = 50
		}
	}

	after = {
		if = {
			limit = {
				any_in_list = { list = my_losers }
			}
			custom_description_no_bullet = { text = qualifying_knight_rewards_tt }
			every_in_list = {
				list = my_losers
				custom_tooltip = knight_name_tt
			}
		}
		if = {
			limit = { this = scope:host }
			scope:activity = {
				every_attending_character = {
					limit = {
						NOT = { this = scope:host }
						is_ai = no
					}
					trigger_event = contest_events.0805
				}
			}
		}
	}
}

contest_events.0810 = { # Bout Ping
	type = activity_event
	title = contest_events.0810.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					OR = {
						any_relation = { this = scope:contest_winner }
						is_close_family_of = scope:contest_winner
						is_consort_of = scope:contest_winner
					}
					OR = {
						any_relation = { this = scope:contest_loser }
						is_close_family_of = scope:contest_loser
						is_consort_of = scope:contest_loser
					}
				}
				desc = contest_events.0810.both_relation
			}
			triggered_desc = {
				trigger = {
					OR = {
						any_relation = { this = scope:contest_winner }
						is_close_family_of = scope:contest_winner
						is_consort_of = scope:contest_winner
					}
				}
				desc = contest_events.0810.winner_relation
			}
			triggered_desc = {
				trigger = {
					OR = {
						any_relation = { this = scope:contest_loser }
						is_close_family_of = scope:contest_loser
						is_consort_of = scope:contest_loser
					}
				}
				desc = contest_events.0810.loser_relation
			}
			desc = contest_events.0810.desc
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = var:contest_murder_attempt
					var:contest_murder_attempt = scope:contest_loser
					scope:contest_loser = { is_alive = no }
				}
				desc = contest_events.0810.murder_success
			}
			triggered_desc = {
				trigger = {
					exists = var:contest_murder_attempt
					var:contest_murder_attempt = scope:contest_loser
				}
				desc = contest_events.0810.murder_fail_lose
			}
			triggered_desc = {
				trigger = {
					exists = var:contest_murder_attempt
					var:contest_murder_attempt = scope:contest_winner
				}
				desc = contest_events.0810.murder_fail_win
			}
			triggered_desc = {
				trigger = {
					exists = scope:score_difference
					scope:score_difference < 10
				}
				desc = contest_events.0810.close
			}
			triggered_desc = {
				trigger = {
					exists = scope:score_difference
					scope:score_difference >= 10
					scope:score_difference < 20
				}
				desc = contest_events.0810.average
			}
			desc = contest_events.0810.far
		}
		triggered_desc = {
			trigger = {
				scope:contest_loser = {
					has_trait_rank = {
						trait = wounded
						rank > 1
					}
				}
			}
			desc = contest_events.0810.wound
		}
		triggered_desc = {
			trigger = {
				scope:contest_loser = { is_alive = no }
			}
			desc = contest_events.0810.death
		}
		first_valid = {
			triggered_desc = {
				trigger = { scope:activity.var:contest_versus_progress = 0 }
				desc = contest_events.0810.qualify
			}
			triggered_desc = {
				trigger = { scope:activity.var:contest_versus_progress = 1 }
				desc = contest_events.0810.semi
			}
			triggered_desc = {
				trigger = { scope:activity.var:contest_versus_progress = 2 }
				desc = contest_events.0810.final
			}
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:contest_winner = {
						liege = root
						OR = {
							this = scope:activity.special_guest:special_guest_champion
							has_court_position = champion_court_position
						}
					}
				}
				desc = contest_events.0810.champion_won
			}
			triggered_desc = {
				trigger = {
					scope:contest_loser = {
						liege = root
						OR = {
							this = scope:activity.special_guest:special_guest_champion
							has_court_position = champion_court_position
						}
					}
				}
				desc = contest_events.0810.champion_lost
			}
		}
	}
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = scope:contest_winner
		triggered_animation = {
			trigger = {
				scope:contest_loser = { is_alive = no }
				scope:activity = { has_current_phase = tournament_phase_joust }
			}
			animation = jockey_idle
		}
		triggered_animation = {
			trigger = {
				scope:contest_loser = { is_alive = no }
				scope:activity = {
					NOT = { has_current_phase = tournament_phase_joust }
				}
			}
			animation = shock
		}
		triggered_animation = {
			trigger = {
				scope:contest_loser = { is_alive = yes }
				scope:activity = { has_current_phase = tournament_phase_joust }
			}
			animation = jockey_victory
		}
		triggered_animation = {
			trigger = {
				scope:contest_loser = { is_alive = yes }
				scope:activity = { has_current_phase = tournament_phase_wrestling }
			}
			animation = wrestling_victory
		}
		triggered_animation = {
			trigger = {
				scope:contest_loser = { is_alive = yes }
				scope:activity = { has_current_phase = tournament_phase_duel }
			}
			animation = sword_coup_degrace
		}
		triggered_animation = {
			trigger = {
				scope:contest_loser = { is_alive = yes }
				scope:activity = { has_current_phase = tournament_phase_board_game }
			}
			animation = schadenfreude
		}
	}
	right_portrait = {
		character = scope:contest_loser
		triggered_animation = {
			trigger = {
				scope:contest_loser = { is_alive = yes }
				scope:activity = { has_current_phase = tournament_phase_joust }
			}
			animation = jockey_loss
		}
		triggered_animation = {
			trigger = {
				scope:contest_loser = { is_alive = yes }
				scope:activity = { has_current_phase = tournament_phase_duel }
			}
			animation = sword_yield_start
		}
		triggered_animation = {
			trigger = {
				scope:contest_loser = { is_alive = yes }
				scope:activity = { has_current_phase = tournament_phase_wrestling }
			}
			animation = wrestling_yield_start
		}
		triggered_animation = {
			trigger = {
				scope:contest_loser = { is_alive = yes }
				scope:activity = { has_current_phase = tournament_phase_board_game }
			}
			animation = stress
		}
	}

	trigger = {
		#DLC check.
		has_ep2_dlc_trigger = yes
	}

	immediate = {
		tournament_contest_wager_info_effect = yes
		show_as_tooltip = { tournament_wounded_or_dead_contest_effect = yes }
		versus_contest_round_outcome_tooltip_effect = {
			WINNER = scope:contest_winner
			LOSER = scope:contest_loser
		}
		if = {
			limit = {
				exists = var:contest_murder_attempt
				var:contest_murder_attempt = scope:contest_loser
			}
			var:contest_murder_attempt = {
				save_scope_as = murder_target
				if = {
					limit = { is_alive = no }
					root = {
						add_secret = {
							type = secret_murder
							target = var:contest_murder_attempt
						}
					}
				}
				else = {
					root = {
						add_secret = {
							type = secret_murder_attempt
							target = var:contest_murder_attempt
						}
					}
				}
			}
		}
		show_as_tooltip = {
			if = {
				limit = {
					OR = {
						exists = scope:sabotage_murder_wound
						exists = scope:sabotage_murder_death
					}
				}
				switch = {
					trigger = exists
					scope:sabotage_murder_wound = {
						attempted_murder_opinion_effect = { VICTIM = scope:contest_loser MURDERER = scope:contest_winner }
					}
					scope:sabotage_murder_death = {
						murder_opinion_effect = { VICTIM = scope:contest_loser MURDERER = scope:contest_winner }
					}
				}
				if = {
					limit = {
						scope:contest_loser = { is_imprisoned = yes }
					}
					rightfully_imprison_character_effect = {
						TARGET = scope:contest_winner
						IMPRISONER = scope:host
					}
				}
			}
		}
	}

	option = {
		name = {
			text = contest_events.0810.a.death
			trigger = {
				scope:contest_loser = { is_alive = no }
			}
		}
		name = {
			text = contest_events.0810.a.murder_success
			trigger = {
				var:contest_murder_attempt ?= scope:contest_loser
				scope:contest_loser = { is_alive = no }
			}
		}
		name = {
			text = contest_events.0810.a.murder_fail_lose
			trigger = { var:contest_murder_attempt ?= scope:contest_loser }
		}
		name = {
			text = contest_events.0810.a.murder_fail_win
			trigger = { var:contest_murder_attempt ?= scope:contest_winner }
		}
		name = {
			text = contest_events.0810.a.bad_win
			trigger = {
				has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:contest_winner }
			}
		}
		name = {
			text = contest_events.0810.a.bad_lose
			trigger = {
				has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:contest_loser }
			}
		}
		name = {
			text = contest_events.0810.a.good_win
			trigger = {
				has_any_good_relationship_with_character_trigger = { CHARACTER = scope:contest_winner }
			}
		}
		name = {
			text = contest_events.0810.a.good_lose
			trigger = {
				has_any_good_relationship_with_character_trigger = { CHARACTER = scope:contest_loser }
			}
		}
		name = {
			text = contest_events.0810.a.wager_win
			trigger = { var:tournament_wager_target ?= scope:contest_winner }
		}
		name = {
			text = contest_events.0810.a.wager_loss
			trigger = { var:tournament_wager_target ?= scope:contest_loser }
		}
		name = {
			text = contest_events.0810.a.consorts
			trigger = {
				scope:contest_winner = { is_consort_of = root }
				scope:contest_loser = { is_consort_of = root }
			}
		}
		name = {
			text = contest_events.0810.a.consort_winner
			trigger = {
				scope:contest_winner = { is_consort_of = root }
				NOT = {
					scope:contest_loser = { is_consort_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a.consort_loser
			trigger = {
				scope:contest_loser = { is_consort_of = root }
				NOT = {
					scope:contest_winner = { is_consort_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a.children
			trigger = {
				scope:contest_winner = { is_child_of = root }
				scope:contest_loser = { is_child_of = root }
			}
		}
		name = {
			text = contest_events.0810.a.child_win
			trigger = {
				scope:contest_winner = { is_child_of = root }
				NOT = {
					scope:contest_loser = { is_child_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a.child_lose
			trigger = {
				scope:contest_loser = { is_child_of = root }
				NOT = {
					scope:contest_winner = { is_child_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a.champion_win
			trigger = {
				scope:contest_winner = {
					has_court_position = champion_court_position
					liege = root
				}
			}
		}
		name = {
			text = contest_events.0810.a.champion_lose
			trigger = {
				scope:contest_loser = {
					has_court_position = champion_court_position
					liege = root
				}
			}
		}
		name = {
			text = contest_events.0810.a.close_family
			trigger = {
				scope:contest_winner = { is_close_family_of = root }
				scope:contest_loser = { is_close_family_of = root }
			}
		}
		name = {
			text = contest_events.0810.a.close_family_win
			trigger = {
				scope:contest_winner = { is_close_family_of = root }
				NOT = {
					scope:contest_loser = { is_close_family_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a.close_family_lose
			trigger = {
				scope:contest_loser = { is_close_family_of = root }
				NOT = {
					scope:contest_winner = { is_close_family_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a.house
			trigger = {
				exists = root.house
				scope:contest_winner.house ?= root.house
				scope:contest_loser.house ?= root.house
			}
		}
		name = {
			text = contest_events.0810.a.house_won
			trigger = {
				exists = root.house
				scope:contest_winner.house ?= root.house
				NOT = { scope:contest_loser.house ?= root.house }
			}
		}
		name = {
			text = contest_events.0810.a.house_lost
			trigger = {
				exists = root.house
				scope:contest_loser.house ?= root.house
				NOT = { scope:contest_winner.house ?= root.house }
			}
		}
		name = {
			text = contest_events.0810.a.knights
			trigger = {
				scope:contest_winner = { is_knight_of = root }
				scope:contest_loser = { is_knight_of = root }
			}
		}
		name = {
			text = contest_events.0810.a.knight_win
			trigger = {
				scope:contest_winner = { is_knight_of = root }
				NOT = {
					scope:contest_loser = { is_knight_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a.knight_lose
			trigger = {
				scope:contest_loser = { is_knight_of = root }
				NOT = {
					scope:contest_winner = { is_knight_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a
			trigger = {
				NOR = {
					scope:contest_winner = { tournament_pertinent_contestant_trigger = yes }
					scope:contest_loser = { tournament_pertinent_contestant_trigger = yes }
				}
			}
		}
		trigger = {
			NOR = {
				exists = scope:sabotage_murder_wound
				exists = scope:sabotage_murder_death
			}
		}
	}

	option = {
		name = contest_events.0810.b
		trigger = {
			this = scope:host
			exists = scope:sabotage_murder_death
		}
		rightfully_imprison_character_effect = {
			TARGET = scope:contest_winner
			IMPRISONER = root
		}
	}

	option = {
		name = contest_events.0810.c
		trigger = {
			OR = {
				exists = scope:sabotage_murder_wound
				exists = scope:sabotage_murder_death
			}
		}
	}
}

scripted_effect contest_summary_intent_match_effect = {
	if = {
		limit = { exists = scope:activity.var:contest_versus_progress }
		switch = {
			trigger = scope:activity.var:contest_versus_progress
			0 = {
				var:contest_qualified_match_$CONTEST$ = { save_scope_as = intent_match }
			}
			1 = {
				var:contest_semi_finalist_match_$CONTEST$ = { save_scope_as = intent_match }
			}
			2 = {
				var:contest_finalist_match_$CONTEST$ = { save_scope_as = intent_match }
			}
		}
	}
}

scripted_trigger versus_show_past_pair_trigger = {
	exists = scope:contest_summary_$NUM$.var:contest_$CONTEST$_match_$STAGE$
}

scripted_trigger versus_show_past_pair_existing_trigger = {
	trigger_if = {
		limit = { exists = scope:contest_summary_$COMPARE$ }
		NOT = { scope:contest_summary_$NUM$.var:contest_$CONTEST$_match_$STAGE$ = scope:contest_summary_$COMPARE$ }
	}
}

contest_events.0820 = { # Round Summary
	type = activity_event
	title = contest_events.0820.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:activity.var:contest_versus_progress = 1 }
				desc = contest_events.0820.semi
			}
			triggered_desc = {
				trigger = { scope:activity.var:contest_versus_progress = 2 }
				desc = contest_events.0820.final
			}
			triggered_desc = {
				trigger = { exists = var:contest_aptitude }
				desc = contest_events.0820.contestant
			}
			desc = contest_events.0820.open
		}
		# Matched contestant flavor
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = scope:versus_contestant
					scope:versus_contestant = { has_character_flag = resigned_contest_flag }
				}
				desc = contest_events.0820.vs_resigned
			}
			triggered_desc = {
				trigger = {
					exists = scope:versus_contestant
					scope:versus_contestant = { has_character_flag = disqualified_contest_flag }
				}
				desc = contest_events.0820.vs_disqualified
			}
			triggered_desc = {
				trigger = {
					exists = scope:versus_contestant
					scope:activity.var:contest_versus_progress < 2
				}
				desc = contest_events.0820.vs
			}
			triggered_desc = {
				trigger = {
					exists = scope:versus_contestant
					scope:activity.var:contest_versus_progress = 2
				}
				desc = contest_events.0820.vs_final
			}
		}
		triggered_desc = {
			trigger = {
				exists = scope:intent_scope
				exists = scope:intent_match
			}
			desc = contest_events.0820.intent_match
		}
		triggered_desc = {
			trigger = { exists = scope:woo_target }
			desc = contest_events.0820.woo_vow
		}
	}
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = root
	}
	right_portrait = {
		trigger = { exists = scope:versus_contestant }
		animation = war_over_tie
		character = scope:versus_contestant
	}
	lower_left_portrait = scope:woo_target
	lower_right_portrait = {
		character = scope:contest_summary_1
		trigger = {
			trigger_if = {
				limit = { exists = scope:contest_summary_1 }
				NOR = {
					root = scope:contest_summary_1
					AND = {
						exists = scope:versus_contestant
						scope:versus_contestant = scope:contest_summary_1
					}
				}
			}
			NOT = { exists = scope:contest_summary_3 }
		}
	}
	cooldown = { days = 1 }

	trigger = {
		#DLC check.
		has_ep2_dlc_trigger = yes
		scope:activity = {
			exists = var:contest_versus_progress
			var:contest_versus_progress > 0
			var:contest_versus_progress < 3
		}
	}

	immediate = {
		# Save next competitor for portrait
		tournament_contest_versus_match_scope_effect = { CHAR = root }
		if = {
			limit = {
				exists = var:vowed_to_lose
				var:vowed_to_lose = {
					is_alive = yes
					is_participant_in_activity = scope:activity
				}
			}
			var:vowed_to_lose = { save_scope_as = woo_target }
			remove_variable = vowed_to_lose
		}		
		if = {
			limit = {
				exists = intent_target
				exists = scope:versus_contestant
				intent_target = {
					exists = var:contest_aptitude
					NOT = { this = scope:versus_contestant }
				}
			}
			intent_target = { save_scope_as = intent_scope }
			scope:activity = {
				switch = {
					trigger = has_current_phase
					tournament_phase_joust = {
						scope:intent_scope = { contest_summary_intent_match_effect = { CONTEST = joust } }
					}
					tournament_phase_wrestling = {
						scope:intent_scope = { contest_summary_intent_match_effect = { CONTEST = wrestling } }
					}
					tournament_phase_duel = {
						scope:intent_scope = { contest_summary_intent_match_effect = { CONTEST = duel } }
					}
					tournament_phase_board_game = {
						scope:intent_scope = { contest_summary_intent_match_effect = { CONTEST = board_game } }
					}
				}
			}
		}
		versus_last_pair_summary_effect = yes		
	}

	option = { # Continue
		name = contest_events.0820.a
		trigger = {
			scope:versus_contestant ?= {
				NOR = {
					has_character_flag = resigned_contest_flag
					has_character_flag = disqualified_contest_flag
				}
			}
		}
		custom_description = {
			text = tournament_contest_round_next_tt
			subject = root
			object = scope:versus_contestant
		}
		stress_impact = {
			craven = medium_stress_impact_gain
		}
		ai_chance = {
			base = 200
		}
	}

	option = { # Resign
		name = contest_events.0820.b
		trigger = {
			scope:versus_contestant ?= {
				NOR = {
					has_character_flag = resigned_contest_flag
					has_character_flag = disqualified_contest_flag
				}
			}
		}
		add_prestige = medium_prestige_loss
		scope:activity = {
			switch = {
				trigger = has_current_phase
				tournament_phase_joust = {
					tournament_contest_versus_resignation_effect = { RESIGNER = root CONTEST = joust SKILL = horse }
				}
				tournament_phase_wrestling = {
					tournament_contest_versus_resignation_effect = { RESIGNER = root CONTEST = wrestling SKILL = pugilism }
				}
				tournament_phase_duel = {
					tournament_contest_versus_resignation_effect = { RESIGNER = root CONTEST = duel SKILL = foot }
				}
				tournament_phase_board_game = {
					tournament_contest_versus_resignation_effect = { RESIGNER = root CONTEST = board_game SKILL = board_game }
				}
			}
		}
		if = {
			limit = { exists = scope:woo_target }
			reverse_add_opinion = {
				target = var:vowed_to_lose
				modifier = tournament_lost_for_love_opinion
				opinion = 25
			}
		}
		stress_impact = {
			brave = medium_stress_impact_gain
		}
		ai_chance = {
			base = 0
			modifier = {
				exists = var:vowed_to_lose
				add = 100
			}
			modifier = {
				has_dread_level_towards = {
					target = scope:versus_contestant
					level >= 1
				}
				add = 20
			}
			modifier = {
				has_dread_level_towards = {
					target = scope:versus_contestant
					level >= 2
				}
				add = 40
			}
			modifier = {
				has_trait = wounded
				NOT = {
					scope:activity = { has_current_phase = tournament_phase_board_game }
				}
				add = 50
			}
		}
	}

	option = { # Opponent resigned
		name = {
			trigger = {
				scope:versus_contestant = { has_character_flag = resigned_contest_flag }
			}
			text = contest_events.0820.c.resigned
		}
		name = {
			trigger = {
				scope:versus_contestant = { has_character_flag = disqualified_contest_flag }
			}
			text = contest_events.0820.c.disqualified
		}
		trigger = {
			scope:versus_contestant ?= {
				OR = {
					has_character_flag = resigned_contest_flag
					has_character_flag = disqualified_contest_flag
				}
			}
		}
		save_scope_as = contest_winner
		scope:versus_contestant ?= {
			if = {
				limit = { has_character_flag = resigned_contest_flag }
				versus_contest_resignation_tooltip_effect = {
					RESIGNER = scope:versus_contestant
					WINNER = root
				}
			}
			else_if = {
				limit = {  has_character_flag = disqualified_contest_flag }
				versus_contest_disqualification_tooltip_effect = {
					DISQUALIFIED = scope:versus_contestant
					WINNER = root
				}
			}
		}
	}

	option = { # Ok
		name = {
			text = contest_events.0820.d
			trigger = {
				NOT = {
					is_in_guest_subset = { name = qualified }
				}
			}
		}
		name = {
			text = contest_events.0820.d.contestant
			trigger = {
				is_in_guest_subset = { name = qualified }
				OR = {
					AND = {
						scope:activity.var:contest_versus_progress = 0
						is_in_guest_subset = { name = semi_finalist }
					}
					AND = {
						scope:activity.var:contest_versus_progress = 1
						is_in_guest_subset = { name = finalist }
					}
					AND = {
						scope:activity.var:contest_versus_progress = 2
						is_in_guest_subset = { name = winner }
					}
				}
			}
		}
		name = {
			text = contest_events.0820.d.loser
			trigger = {
				is_in_guest_subset = { name = qualified }
				OR = {
					AND = {
						scope:activity.var:contest_versus_progress = 0
						NOT = {
							is_in_guest_subset = { name = semi_finalist }
						}
					}
					AND = {
						scope:activity.var:contest_versus_progress = 1
						is_in_guest_subset = { name = semi_finalist }
						NOT = {
							is_in_guest_subset = { name = finalist }
						}
					}
					AND = {
						scope:activity.var:contest_versus_progress = 2
						is_in_guest_subset = { name = finalist }
						NOT = {
							is_in_guest_subset = { name = winner }
						}
					}
				}
			}
		}
		trigger = {
			NOT = { exists = scope:versus_contestant }
		}		
	}

	option = { # Force concession
		name = contest_events.0800.f
		trigger = {
			is_ai = no
			scope:versus_contestant.liege ?= root
		}
		flavor = contest_events.0800.f.flavor
		versus_force_concession_effect = yes
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = 0.5
				ai_honor = -0.5
				ai_energy = 0.5
			}
			modifier = {
				has_activity_intent = win_contest_intent
				add = 50
			}
		}
	}

	after = {
		versus_next_pair_summary_effect = yes
	}
}

contest_events.0825 = { # Resignation ping
	type = activity_event
	title = contest_events.0825.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:activity = {
						OR = {
							has_current_phase = tournament_phase_board_game
							has_current_phase = tournament_phase_recital
						}
					}
				}
				desc = contest_events.0825.safe
			}
			desc = contest_events.0825.desc
		}
		first_valid = {
			triggered_desc = {
				trigger = { scope:activity.var:contest_versus_progress = 0 }
				desc = contest_events.0825.qualify
			}
			triggered_desc = {
				trigger = { scope:activity.var:contest_versus_progress = 1 }
				desc = contest_events.0825.semi
			}
			triggered_desc = {
				trigger = { scope:activity.var:contest_versus_progress = 2 }
				desc = contest_events.0825.final
			}
		}
	}
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		animation = war_over_tie
		character = scope:resign_target
	}
	right_portrait = {
		animation = war_over_win
		character = scope:versus_contestant
	}

	trigger = {
		#DLC check.
		has_ep2_dlc_trigger = yes
	}

	immediate = {
		versus_contest_resignation_tooltip_effect = {
			RESIGNER = scope:resign_target
			WINNER = scope:versus_contestant
		}
		tournament_contest_wager_info_effect = yes
	}

	option = {
		name = contest_events.0825.a
		trigger = {
			trigger_if = {
				limit = { exists = scope:wager_target }
				NOT = { scope:wager_target = scope:resign_target }
			}
		}
	}

	option = {
		name = contest_events.0825.b
		trigger = {
			exists = scope:wager_target
			scope:wager_target = scope:resign_target
		}
	}
}

contest_events.0826 = { # Disqualification ping
	type = activity_event
	title = contest_events.0826.t
	desc = {
		desc = contest_events.0826.desc
		first_valid = {
			triggered_desc = {
				trigger = { scope:activity.var:contest_versus_progress = 0 }
				desc = contest_events.0825.qualify
			}
			triggered_desc = {
				trigger = { scope:activity.var:contest_versus_progress = 1 }
				desc = contest_events.0825.semi
			}
			triggered_desc = {
				trigger = { scope:activity.var:contest_versus_progress = 2 }
				desc = contest_events.0825.final
			}
		}
	}
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		animation = dismissal
		character = scope:disqualify_target
	}
	right_portrait = {
		animation = war_over_win
		character = scope:versus_contestant
	}

	trigger = {
		#DLC check.
		has_ep2_dlc_trigger = yes
		NOT = { this = scope:host }
	}

	immediate = {
		tournament_contest_wager_info_effect = yes
		versus_contest_disqualification_tooltip_effect = {
			DISQUALIFIED = scope:disqualify_target
			WINNER = scope:disqualify_match
		}
	}

	option = {
		name = contest_events.0826.a
		trigger = {
			trigger_if = {
				limit = { exists = scope:wager_target }
				NOT = { scope:wager_target = scope:disqualify_target }
			}
		}
	}

	option = {
		name = contest_events.0826.b
		trigger = {
			exists = scope:wager_target
			scope:wager_target = scope:disqualify_target
		}
	}
}

contest_events.0830 = { # AI Bout
	type = character_event
	hidden = yes

	trigger = {
		#DLC check.
		has_ep2_dlc_trigger = yes
		NOR = {
			has_character_flag = resigned_contest_flag
			scope:versus_matcher = { has_character_flag = resigned_contest_flag }
		}
	}

	immediate = {
		scope:versus_matcher = { save_scope_as = versus_contestant }
		scope:activity = {
			switch = {
				trigger = has_current_phase
				tournament_phase_joust = {
					root = {
						tournament_contest_versus_battle_effect = {
							CHOOSE_WINNER = yes
							INJURY_CHANCE = yes
							CONTEST = joust
						}
					}
				}
				tournament_phase_wrestling = {
					root = {
						tournament_contest_versus_battle_effect = {
							CHOOSE_WINNER = yes
							INJURY_CHANCE = yes
							CONTEST = wrestling
						}
					}
				}
				tournament_phase_duel = {
					root = {
						tournament_contest_versus_battle_effect = {
							CHOOSE_WINNER = yes
							INJURY_CHANCE = yes
							CONTEST = duel
						}
					}
				}
				tournament_phase_board_game = {
					root = {
						tournament_contest_versus_battle_effect = {
							CHOOSE_WINNER = yes
							INJURY_CHANCE = yes
							CONTEST = board_game
						}
					}
				}
			}
		}
	}
}

contest_events.0860 = { # Joust Pivotal Moment
	type = activity_event
	title = contest_events.0860.t
	desc = {
		desc = contest_events.0860.desc
		# Random event flavor
		first_valid = {
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_joust_flavor ?= 4001 }
				desc = contest_events.0860.flavor_1
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_joust_flavor ?= 4002 }
				desc = contest_events.0860.flavor_2
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_joust_flavor ?= 4003 }
				desc = contest_events.0860.flavor_3
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_joust_flavor ?= 4004 }
				desc = contest_events.0860.flavor_4
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_joust_flavor ?= 4005 }
				desc = contest_events.0860.flavor_5
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_joust_flavor ?= 4006 }
				desc = contest_events.0860.flavor_6
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_joust_flavor ?= 4007 }
				desc = contest_events.0860.flavor_7
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_joust_flavor ?= 4008 }
				desc = contest_events.0860.flavor_8
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_joust_flavor ?= 4009 }
				desc = contest_events.0860.flavor_9
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_joust_flavor ?= 6502 }
				desc = contest_events.0860.flavor_10
			}
			desc = contest_events.0860.flavor_fallback
		}
		first_valid = {
			# Not a lot in it - range between best and worst is very small
			triggered_desc = {
				trigger = {
					this = scope:pivotal_contestant
					scope:pivotal_contestant.character_chance_of_victory > 0.35
					scope:pivotal_contestant.character_chance_of_victory < 0.65
				}
				desc = contest_events.0870.ptv_close
			}
			# Close to or in fact top score
			triggered_desc = {
				trigger = {
					this = scope:pivotal_contestant
					scope:pivotal_contestant.character_chance_of_victory >= 0.65
				}
				desc = contest_events.0870.ptv_top
			}
			# Close to or in fact bottom score
			triggered_desc = {
				trigger = {
					this = scope:pivotal_contestant
					scope:pivotal_contestant.character_chance_of_victory <= 0.35
				}
				desc = contest_events.0870.ptv_bottom
			}
			desc = contest_events.0870.ptv_fallback
		}
	}
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = scope:pivotal_contestant
		animation = jockey_lance_couched_gallop
	}
	right_portrait = {
		character = scope:versus_contestant
		animation = jockey_lance_couched_gallop
	}

	trigger = {
		#DLC check.
		has_ep2_dlc_trigger = yes
		
		#Standard checks.
		is_ai = no
		NOR = {
			scope:pivotal_contestant ?= { has_character_flag = resigned_contest_flag }
			scope:versus_contestant ?= { has_character_flag = resigned_contest_flag }
		}
	}

	immediate = {
		contest_versus_player_vs_ai_scope_effect = yes
		# If competing yourself, it is from your perspective, otherwise find someone relevant
		tournament_pivotal_contestant_scope_effect = yes
		# Determine position of PtV scale
		tournament_pivotal_ptv_versus_value_effect = yes
	}

	option = { # Focus on the shield?
		name = contest_events.0860.a
		trigger = { scope:pivotal_contestant ?= this }
		tournament_pivotal_duel_effect = {
			DUELIST = root
			SKILL_1 = prowess
			SKILL_2 = martial
			NO_CHANGE_CHANCE = yes
			INCREASE = medium
			DECREASE = medium
		}
	}

	option = { # Feint?
		name = contest_events.0860.b
		trigger = { scope:pivotal_contestant ?= this }
		tournament_pivotal_duel_effect = {
			DUELIST = root
			SKILL_1 = prowess
			SKILL_2 = intrigue
			NO_CHANGE_CHANCE = yes
			INCREASE = medium
			DECREASE = medium
		}
	}

	option = { # I think I saw a tell...
		name = contest_events.0860.c
		trigger = { scope:pivotal_contestant ?= this }
		tournament_pivotal_duel_effect = {
			DUELIST = root
			SKILL_1 = diplomacy
			SKILL_2 = learning
			NO_CHANGE_CHANCE = yes
			INCREASE = medium
			DECREASE = medium
		}
	}

	option = { # Riding knowledge?
		name = contest_events.0860.d
		trigger = { scope:pivotal_contestant ?= this }
		tournament_pivotal_duel_single_skill_effect = {
			DUELIST = root
			SKILL_1 = prowess
			NO_CHANGE_CHANCE = yes
			INCREASE = minor
			DECREASE = minor
		}
	}

	after = {
		trigger_event = { id = contest_events.0802 days = 1 }
	}
}

contest_events.0861 = { # Wrestling Pivotal Moment
	type = activity_event
	title = contest_events.0861.t
	desc = {
		desc = contest_events.0861.desc
		# Random event flavor
		first_valid = {
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_wrestling_flavor ?= 0910 }
				desc = contest_events.0861.flavor_1
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_wrestling_flavor ?= 0001 }
				desc = contest_events.0861.flavor_2
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_wrestling_flavor ?= 0002 }
				desc = contest_events.0861.flavor_3
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_wrestling_flavor ?= 2001 }
				desc = contest_events.0861.flavor_4
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_wrestling_flavor ?= 2002 }
				desc = contest_events.0861.flavor_5
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_wrestling_flavor ?= 2003 }
				desc = contest_events.0861.flavor_6
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_wrestling_flavor ?= 2004 }
				desc = contest_events.0861.flavor_7
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_wrestling_flavor ?= 2005 }
				desc = contest_events.0861.flavor_8
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_wrestling_flavor ?= 2501 }
				desc = contest_events.0861.flavor_9
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_wrestling_flavor ?= 2502 }
				desc = contest_events.0861.flavor_10
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_wrestling_flavor ?= 2503 }
				desc = contest_events.0861.flavor_11
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_wrestling_flavor ?= 2504 }
				desc = contest_events.0861.flavor_12
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_wrestling_flavor ?= 2507 }
				desc = contest_events.0861.flavor_13
			}
			desc = contest_events.0861.flavor_fallback
		}
		first_valid = {
			# Not a lot in it - range between best and worst is very small
			triggered_desc = {
				trigger = {
					this = scope:pivotal_contestant
					scope:pivotal_contestant.character_chance_of_victory > 0.35
					scope:pivotal_contestant.character_chance_of_victory < 0.65
				}
				desc = contest_events.0871.ptv_close
			}
			# Close to or in fact top score
			triggered_desc = {
				trigger = {
					this = scope:pivotal_contestant
					scope:pivotal_contestant.character_chance_of_victory >= 0.65
				}
				desc = contest_events.0871.ptv_top
			}
			# Close to or in fact bottom score
			triggered_desc = {
				trigger = {
					this = scope:pivotal_contestant
					scope:pivotal_contestant.character_chance_of_victory <= 0.35
				}
				desc = contest_events.0871.ptv_bottom
			}
			desc = contest_events.0871.ptv_fallback
		}
	}
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = scope:pivotal_contestant
		animation = aggressive_unarmed
	}
	right_portrait = {
		character = scope:versus_contestant
		animation = aggressive_unarmed
	}

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes
		
		#Standard checks.
		is_ai = no
		NOR = {
			scope:pivotal_contestant ?= { has_character_flag = resigned_contest_flag }
			scope:versus_contestant ?= { has_character_flag = resigned_contest_flag }
		}
	}

	immediate = {
		contest_versus_player_vs_ai_scope_effect = yes
		# If competing yourself, it is from your perspective, otherwise find someone relevant
		tournament_pivotal_contestant_scope_effect = yes
		# Determine position of PtV scale
		tournament_pivotal_ptv_versus_value_effect = yes
	}

	option = { # Anatomical knowledge?
		name = contest_events.0861.a
		trigger = { scope:pivotal_contestant ?= this }
		tournament_pivotal_duel_effect = {
			DUELIST = root
			SKILL_1 = prowess
			SKILL_2 = martial
			NO_CHANGE_CHANCE = yes
			INCREASE = medium
			DECREASE = medium
		}
	}

	option = { # Warrior's blood
		name = contest_events.0861.b
		trigger = { scope:pivotal_contestant ?= this }
		tournament_pivotal_duel_effect = {
			DUELIST = root
			SKILL_1 = prowess
			SKILL_2 = diplomacy
			NO_CHANGE_CHANCE = yes
			INCREASE = medium
			DECREASE = medium
		}
	}

	option = { # Feint?
		name = contest_events.0861.c
		trigger = { scope:pivotal_contestant ?= this }
		tournament_pivotal_duel_effect = {
			DUELIST = root
			SKILL_1 = diplomacy
			SKILL_2 = intrigue
			NO_CHANGE_CHANCE = yes
			INCREASE = medium
			DECREASE = medium
		}
	}

	option = { # Keep it simple
		name = contest_events.0861.d
		trigger = { scope:pivotal_contestant ?= this }
		tournament_pivotal_duel_single_skill_effect = {
			DUELIST = root
			SKILL_1 = prowess
			NO_CHANGE_CHANCE = yes
			INCREASE = minor
			DECREASE = minor
		}
	}

	after = {
		trigger_event = { id = contest_events.0802 days = 1 }
	}
}

contest_events.0862 = { # Duel Pivotal Moment
	type = activity_event
	title = contest_events.0862.t
	desc = {
		desc = contest_events.0862.desc
		# Random event flavor
		first_valid = {
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_duel_flavor ?= 0001 }
				desc = contest_events.0861.flavor_1 #Re-used from earlier
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_duel_flavor ?= 0002 }
				desc = contest_events.0861.flavor_2 #Re-used from earlier
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_duel_flavor ?= 0004 }
				desc = contest_events.0862.flavor_3
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_duel_flavor ?= 0005 }
				desc = contest_events.0862.flavor_4
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_duel_flavor ?= 0006 }
				desc = contest_events.0862.flavor_5
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_duel_flavor ?= 0007 }
				desc = contest_events.0862.flavor_6
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_duel_flavor ?= 0010 }
				desc = contest_events.0862.flavor_7
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_duel_flavor ?= 0011 }
				desc = contest_events.0862.flavor_8
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_duel_flavor ?= 0012 }
				desc = contest_events.0862.flavor_9
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_duel_flavor ?= 0020 }
				desc = contest_events.0862.flavor_10
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_duel_flavor ?= 0021 }
				desc = contest_events.0862.flavor_11
			}
		}
		first_valid = {
			# Not a lot in it - range between best and worst is very small
			triggered_desc = {
				trigger = {
					this = scope:pivotal_contestant
					scope:pivotal_contestant.character_chance_of_victory > 0.35
					scope:pivotal_contestant.character_chance_of_victory < 0.65
				}
				desc = contest_events.0872.ptv_close
			}
			# Close to or in fact top score
			triggered_desc = {
				trigger = {
					this = scope:pivotal_contestant
					scope:pivotal_contestant.character_chance_of_victory >= 0.65
				}
				desc = contest_events.0872.ptv_top
			}
			# Close to or in fact bottom score
			triggered_desc = {
				trigger = {
					this = scope:pivotal_contestant
					scope:pivotal_contestant.character_chance_of_victory <= 0.35
				}
				desc = contest_events.0872.ptv_bottom
			}
			desc = contest_events.0872.ptv_fallback
		}
		desc = contest_events.0862.flavor_fallback
	}
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = scope:pivotal_contestant
		animation = aggressive_sword
	}
	right_portrait = {
		character = scope:versus_contestant
		animation = aggressive_sword
	}

	trigger = {
		#DLC check.
		has_ep2_dlc_trigger = yes
		
		#Standard checks.
		is_ai = no
		NOR = {
			scope:pivotal_contestant ?= { has_character_flag = resigned_contest_flag }
			scope:versus_contestant ?= { has_character_flag = resigned_contest_flag }
		}
	}

	immediate = {
		contest_versus_player_vs_ai_scope_effect = yes
		# If competing yourself, it is from your perspective, otherwise find someone relevant
		tournament_pivotal_contestant_scope_effect = yes
		# Determine position of PtV scale
		tournament_pivotal_ptv_versus_value_effect = yes
	}

	option = { # Focus on training
		name = contest_events.0862.a
		trigger = { scope:pivotal_contestant ?= this }
		tournament_pivotal_duel_effect = {
			DUELIST = root
			SKILL_1 = prowess
			SKILL_2 = martial
			NO_CHANGE_CHANCE = yes
			INCREASE = medium
			DECREASE = medium
		}
	}

	option = { # Bravado?
		name = contest_events.0862.b
		trigger = { scope:pivotal_contestant ?= this }
		tournament_pivotal_duel_effect = {
			DUELIST = root
			SKILL_1 = prowess
			SKILL_2 = diplomacy
			NO_CHANGE_CHANCE = yes
			INCREASE = medium
			DECREASE = medium
		}
	}

	option = { # Feint?
		name = contest_events.0862.c
		trigger = { scope:pivotal_contestant ?= this }
		tournament_pivotal_duel_effect = {
			DUELIST = root
			SKILL_1 = prowess
			SKILL_2 = intrigue
			NO_CHANGE_CHANCE = yes
			INCREASE = medium
			DECREASE = medium
		}
	}

	option = { # Get-out
		name = contest_events.0862.d
		trigger = { scope:pivotal_contestant ?= this }
		tournament_pivotal_duel_single_skill_effect = {
			DUELIST = root
			SKILL_1 = prowess
			NO_CHANGE_CHANCE = yes
			INCREASE = minor
			DECREASE = minor
		}
	}

	after = {
		trigger_event = { id = contest_events.0802 days = 1 }
	}
}

contest_events.0863 = { # Board Game Pivotal Moment
	type = activity_event
	title = contest_events.0863.t
	desc = {
		desc = contest_events.0863.desc
		# Random event flavor
		first_valid = {
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_board_game_flavor ?= 5500 }
				desc = contest_events.0863.flavor_1
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_board_game_flavor ?= 5510 }
				desc = contest_events.0863.flavor_2
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_board_game_flavor ?= 5520 }
				desc = contest_events.0863.flavor_3
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_board_game_flavor ?= 5530 }
				desc = contest_events.0863.flavor_4
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_board_game_flavor ?= 5540 }
				desc = contest_events.0863.flavor_5
			}
			triggered_desc = {
				trigger = { scope:pivotal_contestant.var:contest_board_game_flavor ?= 5550 }
				desc = contest_events.0863.flavor_6
			}
			desc = contest_events.0863.flavor_fallback
		}
		first_valid = {
			# Not a lot in it - range between best and worst is very small
			triggered_desc = {
				trigger = {
					this = scope:pivotal_contestant
					scope:pivotal_contestant.character_chance_of_victory > 0.35
					scope:pivotal_contestant.character_chance_of_victory < 0.65
				}
				desc = contest_events.0873.ptv_close
			}
			# Close to or in fact top score
			triggered_desc = {
				trigger = {
					this = scope:pivotal_contestant
					scope:pivotal_contestant.character_chance_of_victory >= 0.65
				}
				desc = contest_events.0873.ptv_top
			}
			# Close to or in fact bottom score
			triggered_desc = {
				trigger = {
					this = scope:pivotal_contestant
					scope:pivotal_contestant.character_chance_of_victory <= 0.35
				}
				desc = contest_events.0873.ptv_bottom
			}
			desc = contest_events.0873.ptv_fallback
		}
	}
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = scope:pivotal_contestant
		animation = thinking
	}
	right_portrait = {
		character = scope:versus_contestant
		animation = worry
	}

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes
		
		#Standard checks.
		is_ai = no
		NOR = {
			scope:pivotal_contestant ?= { has_character_flag = resigned_contest_flag }
			scope:versus_contestant ?= { has_character_flag = resigned_contest_flag }
		}
	}

	immediate = {
		contest_versus_player_vs_ai_scope_effect = yes
		# If competing yourself, it is from your perspective, otherwise find someone relevant
		tournament_pivotal_contestant_scope_effect = yes
		# Determine position of PtV scale
		tournament_pivotal_ptv_versus_value_effect = yes
	}

	option = { # Tactical insight?
		name = contest_events.0863.a
		trigger = { scope:pivotal_contestant ?= this }
		tournament_pivotal_duel_effect = {
			DUELIST = root
			SKILL_1 = learning
			SKILL_2 = martial
			NO_CHANGE_CHANCE = yes
			INCREASE = medium
			DECREASE = medium
		}
	}

	option = { # Bravado?
		name = contest_events.0863.b
		trigger = { scope:pivotal_contestant ?= this }
		tournament_pivotal_duel_effect = {
			DUELIST = root
			SKILL_1 = learning
			SKILL_2 = diplomacy
			NO_CHANGE_CHANCE = yes
			INCREASE = medium
			DECREASE = medium
		}
	}

	option = { # Feint?
		name = contest_events.0863.c
		trigger = { scope:pivotal_contestant ?= this }
		tournament_pivotal_duel_effect = {
			DUELIST = root
			SKILL_1 = learning
			SKILL_2 = intrigue
			NO_CHANGE_CHANCE = yes
			INCREASE = medium
			DECREASE = medium
		}
	}

	option = { # Cautious?
		name = contest_events.0863.d
		trigger = { scope:pivotal_contestant ?= this }
		tournament_pivotal_duel_single_skill_effect = {
			DUELIST = root
			SKILL_1 = learning
			NO_CHANGE_CHANCE = yes
			INCREASE = minor
			DECREASE = minor
		}
	}

	after = {
		trigger_event = { id = contest_events.0802 days = 1 }
	}
}

contest_events.0870 = { # Joust Outcome
	type = activity_event
	title = contest_events.0870.t
	desc = {
		# PtV status flavor
		first_valid = {
			# Not a lot in it - range between best and worst is very small
			triggered_desc = {
				trigger = {
					has_character_flag = success_pivotal_flag
				}
				desc = contest_events.0870.pivotal_success
			}
			triggered_desc = {
				trigger = { has_character_flag = neutral_pivotal_flag }
				desc = contest_events.0870.pivotal_neutral
			}
			# Close to or in fact top score
			triggered_desc = {
				trigger = {
					has_character_flag = failure_pivotal_flag
				}
				desc = contest_events.0870.pivotal_failure
			}
		}
		first_valid = {
			triggered_desc = {
				trigger = { this = scope:contest_winner }
				desc = contest_events.0870.winner_start
			}
			triggered_desc = {
				trigger = { this = scope:contest_loser }
				desc = contest_events.0870.loser_start
			}
		}
		random_valid = {
			triggered_desc = {
				trigger = { this = scope:contest_winner }
				desc = contest_events.0870.winner_break
			}
			triggered_desc = {
				trigger = { this = scope:contest_winner }
				desc = contest_events.0870.winner_unhorse
			}
			triggered_desc = {
				trigger = { this = scope:contest_loser }
				desc = contest_events.0870.loser_break
			}
			triggered_desc = {
				trigger = { this = scope:contest_loser }
				desc = contest_events.0870.loser_unhorse
			}
		}
		first_valid = {
			triggered_desc = {
				trigger = { this = scope:contest_winner }
				desc = contest_events.0871.winner_end
			}
			triggered_desc = {
				trigger = { this = scope:contest_loser }
				desc = contest_events.0871.loser_end
			}
		}
		triggered_desc = {
			trigger = {
				NOR = {
					this = scope:versus_matcher
					this = scope:versus_matchee
				}
			}
			desc = {
				first_valid = {
					triggered_desc = {
						trigger = {
							OR = {
								any_relation = { this = scope:contest_winner }
								is_close_family_of = scope:contest_winner
								is_consort_of = scope:contest_winner
							}
							OR = {
								any_relation = { this = scope:contest_loser }
								is_close_family_of = scope:contest_loser
								is_consort_of = scope:contest_loser
							}
						}
						desc = contest_events.0810.both_relation
					}
					triggered_desc = {
						trigger = {
							OR = {
								any_relation = { this = scope:contest_winner }
								is_close_family_of = scope:contest_winner
								is_consort_of = scope:contest_winner
							}
						}
						desc = contest_events.0810.winner_relation
					}
					triggered_desc = {
						trigger = {
							OR = {
								any_relation = { this = scope:contest_loser }
								is_close_family_of = scope:contest_loser
								is_consort_of = scope:contest_loser
							}
						}
						desc = contest_events.0810.loser_relation
					}
					desc = contest_events.0810.desc
				}
				first_valid = {
					triggered_desc = {
						trigger = {
							exists = var:contest_murder_attempt
							var:contest_murder_attempt = scope:contest_loser
							scope:contest_loser = { is_alive = no }
						}
						desc = contest_events.0810.murder_success
					}
					triggered_desc = {
						trigger = {
							exists = var:contest_murder_attempt
							var:contest_murder_attempt = scope:contest_loser
						}
						desc = contest_events.0810.murder_fail_lose
					}
					triggered_desc = {
						trigger = {
							exists = var:contest_murder_attempt
							var:contest_murder_attempt = scope:contest_winner
						}
						desc = contest_events.0810.murder_fail_win
					}
					triggered_desc = {
						trigger = {
							exists = scope:score_difference
							scope:score_difference < 10
						}
						desc = contest_events.0810.close
					}
					triggered_desc = {
						trigger = {
							exists = scope:score_difference
							scope:score_difference >= 10
							scope:score_difference < 20
						}
						desc = contest_events.0810.average
					}
					desc = contest_events.0810.far
				}
				triggered_desc = {
					trigger = {
						scope:contest_loser = {
							has_trait_rank = {
								trait = wounded
								rank > 1
							}
						}
					}
					desc = contest_events.0810.wound
				}
				triggered_desc = {
					trigger = {
						scope:contest_loser = { is_alive = no }
					}
					desc = contest_events.0810.death
				}
				desc = contest_events.0810.final
			}
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:contest_loser = { is_alive = no }
				}
				desc = contest_events.0810.death
			}
			triggered_desc = {
				trigger = {
					scope:contest_loser = { has_trait = wounded }
				}
				desc = contest_events.0810.wound
			}
		}
	}
	theme = tournament_joust_pivotal
	window = tournament_fullscreen_pivotal_event_widget
	left_portrait = {
		character = scope:pivotal_contestant
		triggered_animation = {
			trigger = { this = scope:contest_winner }
			animation = jockey_victory
		}
		triggered_animation = {
			trigger = { this = scope:contest_loser }
			animation = jockey_loss
		}
	}
	right_portrait = {
		character = scope:other_contestant
		triggered_animation = {
			trigger = {
				this = scope:contest_winner
				is_alive = yes
			}
			animation = jockey_victory
		}
		triggered_animation = {
			trigger = {
				this = scope:contest_loser
				is_alive = yes
			}
			animation = jockey_loss
		}
		triggered_animation = {
			trigger = { is_alive = no }
			animation = loss_1
		}
	}
	override_transition = {
		trigger = {
			scope:pivotal_contestant ?= this
			scope:pivotal_contestant ?= scope:contest_winner
		}
		reference = pivotal_jousting_success 
	}
	override_transition = { 
		trigger = {
			scope:pivotal_contestant ?= this
			scope:pivotal_contestant ?= scope:contest_loser
		}
		reference = pivotal_jousting_fail
	}
	override_transition = { 
		trigger = { always = yes } 
		reference = pivotal_jousting_neutral
	}

	trigger = {
		is_ai = no
		NOR = {
			scope:versus_matcher = { has_character_flag = resigned_contest_flag }
			scope:versus_matchee = { has_character_flag = resigned_contest_flag }
		}
	}

	immediate = { 
		contest_versus_player_vs_ai_scope_effect = yes
		if = {
			limit = { scope:pivotal_contestant = scope:contest_winner }
			scope:contest_loser = { save_scope_as = other_contestant }
		}
		else = {
			scope:contest_winner = { save_scope_as = other_contestant }
		}
		versus_contest_round_outcome_tooltip_effect = {
			WINNER = scope:contest_winner
			LOSER = scope:contest_loser
		}
		if = {
			limit = {
				OR = {
					scope:contest_winner = { is_alive = no }
					scope:contest_loser = { is_alive = no }
				}
			}
			play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_surprise_reaction"
		}
		else_if = {
			limit = { scope:pivotal_contestant ?= scope:contest_winner }
			play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_positive_reaction"
		}
		else = {
			play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_negative_reaction"
		}
		scope:pivotal_contestant = {
			if = {
				limit = { has_character_flag = success_pivotal_flag }
				if = {
					limit = { this = root }
					accolade_major_glory_gain_with_checks_effect = yes
				}
				else = {
					show_as_tooltip = { accolade_major_glory_gain_with_checks_effect = yes }
				}
			}
		}
	}

	option = { # Contestant
		name = {
			trigger = { scope:pivotal_contestant = scope:contest_winner }
			text = contest_events.0871.a
		}
		name = {
			trigger = { scope:pivotal_contestant = scope:contest_loser }
			text = contest_events.0871.a.loser
		}
		trigger = { scope:pivotal_contestant ?= this }
	}

	option = {
		name = {
			text = contest_events.0810.a.death
			trigger = {
				scope:contest_loser = { is_alive = no }
			}
		}
		name = {
			text = contest_events.0810.a.murder_success
			trigger = {
				var:contest_murder_attempt ?= scope:contest_loser
				scope:contest_loser = { is_alive = no }
			}
		}
		name = {
			text = contest_events.0810.a.murder_fail_lose
			trigger = { var:contest_murder_attempt ?= scope:contest_loser }
		}
		name = {
			text = contest_events.0810.a.murder_fail_win
			trigger = { var:contest_murder_attempt ?= scope:contest_winner }
		}
		name = {
			text = contest_events.0810.a.bad_win
			trigger = {
				has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:contest_winner }
			}
		}
		name = {
			text = contest_events.0810.a.bad_lose
			trigger = {
				has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:contest_loser }
			}
		}
		name = {
			text = contest_events.0810.a.good_win
			trigger = {
				OR = {
					has_any_good_relationship_with_character_trigger = { CHARACTER = scope:contest_winner }
					var:tournament_wager_target ?= scope:contest_winner
				}
			}
		}
		name = {
			text = contest_events.0810.a.good_lose
			trigger = {
				OR = {
					has_any_good_relationship_with_character_trigger = { CHARACTER = scope:contest_loser }
					var:tournament_wager_target ?= scope:contest_loser
				}
			}
		}
		name = {
			text = contest_events.0810.a.consorts
			trigger = {
				scope:contest_winner = { is_consort_of = root }
				scope:contest_loser = { is_consort_of = root }
			}
		}
		name = {
			text = contest_events.0810.a.consort_winner
			trigger = {
				scope:contest_winner = { is_consort_of = root }
				NOT = {
					scope:contest_loser = { is_consort_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a.consort_loser
			trigger = {
				scope:contest_loser = { is_consort_of = root }
				NOT = {
					scope:contest_winner = { is_consort_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a.children
			trigger = {
				scope:contest_winner = { is_child_of = root }
				scope:contest_loser = { is_child_of = root }
			}
		}
		name = {
			text = contest_events.0810.a.child_win
			trigger = {
				scope:contest_winner = { is_child_of = root }
				NOT = {
					scope:contest_loser = { is_child_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a.child_lose
			trigger = {
				scope:contest_loser = { is_child_of = root }
				NOT = {
					scope:contest_winner = { is_child_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a.champion_win
			trigger = {
				scope:contest_winner = {
					has_court_position = champion_court_position
					liege = root
				}
			}
		}
		name = {
			text = contest_events.0810.a.champion_lose
			trigger = {
				scope:contest_loser = {
					has_court_position = champion_court_position
					liege = root
				}
			}
		}
		name = {
			text = contest_events.0810.a.close_family
			trigger = {
				scope:contest_winner = { is_close_family_of = root }
				scope:contest_loser = { is_close_family_of = root }
			}
		}
		name = {
			text = contest_events.0810.a.close_family_win
			trigger = {
				scope:contest_winner = { is_close_family_of = root }
				NOT = {
					scope:contest_loser = { is_close_family_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a.close_family_lose
			trigger = {
				scope:contest_loser = { is_close_family_of = root }
				NOT = {
					scope:contest_winner = { is_close_family_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a.house
			trigger = {
				exists = root.house
				scope:contest_winner.house ?= root.house
				scope:contest_loser.house ?= root.house
			}
		}
		name = {
			text = contest_events.0810.a.house_won
			trigger = {
				exists = root.house
				scope:contest_winner.house ?= root.house
				NOT = { scope:contest_loser.house ?= root.house }
			}
		}
		name = {
			text = contest_events.0810.a.house_lost
			trigger = {
				exists = root.house
				scope:contest_loser.house ?= root.house
				NOT = { scope:contest_winner.house ?= root.house }
			}
		}
		name = {
			text = contest_events.0810.a.knights
			trigger = {
				scope:contest_winner = { is_knight_of = root }
				scope:contest_loser = { is_knight_of = root }
			}
		}
		name = {
			text = contest_events.0810.a.knight_win
			trigger = {
				scope:contest_winner = { is_knight_of = root }
				NOT = {
					scope:contest_loser = { is_knight_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a.knight_lose
			trigger = {
				scope:contest_loser = { is_knight_of = root }
				NOT = {
					scope:contest_winner = { is_knight_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a
			trigger = {
				NOR = {
					scope:contest_winner = { tournament_pertinent_contestant_trigger = yes }
					scope:contest_loser = { tournament_pertinent_contestant_trigger = yes }
				}
			}
		}
		trigger = {
			NOT = { scope:pivotal_contestant ?= this }
		}
	}

	option = { # Cheater! I go through!
		name = contest_events.0841.c
		trigger = {
			this = scope:host
			this = scope:contest_loser
		}
		versus_tyrannical_disqualification_effect = yes
		ai_chance = {
			base = 10
			ai_value_modifier = {
				ai_honor = -1
				ai_compassion = -0.5
				ai_boldness = 0.5
			}
		}
	}
}

contest_events.0871 = { # Wrestling Outcome
	type = activity_event
	title = contest_events.0871.t
	desc = {
		# PtV status flavor
		first_valid = {
			# Not a lot in it - range between best and worst is very small
			triggered_desc = {
				trigger = {
					has_character_flag = success_pivotal_flag
				}
				desc = contest_events.0871.pivotal_success
			}
			triggered_desc = {
				trigger = { has_character_flag = neutral_pivotal_flag }
				desc = contest_events.0871.pivotal_neutral
			}
			# Close to or in fact top score
			triggered_desc = {
				trigger = {
					has_character_flag = failure_pivotal_flag
				}
				desc = contest_events.0871.pivotal_failure
			}
		}
		first_valid = {
			triggered_desc = {
				trigger = { this = scope:contest_winner }
				desc = contest_events.0871.winner_start
			}
			triggered_desc = {
				trigger = { this = scope:contest_loser }
				desc = contest_events.0871.loser_start
			}
		}
		random_valid = {
			triggered_desc = {
				trigger = { this = scope:contest_winner }
				desc = contest_events.0871.winner_pin
			}
			triggered_desc = {
				trigger = { this = scope:contest_winner }
				desc = contest_events.0871.winner_throw
			}
			triggered_desc = {
				trigger = { this = scope:contest_loser }
				desc = contest_events.0871.loser_pin
			}
			triggered_desc = {
				trigger = { this = scope:contest_loser }
				desc = contest_events.0871.loser_throw
			}
		}
		first_valid = {
			triggered_desc = {
				trigger = { this = scope:contest_winner }
				desc = contest_events.0871.winner_end
			}
			triggered_desc = {
				trigger = { this = scope:contest_loser }
				desc = contest_events.0871.loser_end
			}
		}
		triggered_desc = {
			trigger = {
				NOR = {
					this = scope:versus_matcher
					this = scope:versus_matchee
				}
			}
			desc = {
				first_valid = {
					triggered_desc = {
						trigger = {
							OR = {
								any_relation = { this = scope:contest_winner }
								is_close_family_of = scope:contest_winner
								is_consort_of = scope:contest_winner
							}
							OR = {
								any_relation = { this = scope:contest_loser }
								is_close_family_of = scope:contest_loser
								is_consort_of = scope:contest_loser
							}
						}
						desc = contest_events.0810.both_relation
					}
					triggered_desc = {
						trigger = {
							OR = {
								any_relation = { this = scope:contest_winner }
								is_close_family_of = scope:contest_winner
								is_consort_of = scope:contest_winner
							}
						}
						desc = contest_events.0810.winner_relation
					}
					triggered_desc = {
						trigger = {
							OR = {
								any_relation = { this = scope:contest_loser }
								is_close_family_of = scope:contest_loser
								is_consort_of = scope:contest_loser
							}
						}
						desc = contest_events.0810.loser_relation
					}
					desc = contest_events.0810.desc
				}
				first_valid = {
					triggered_desc = {
						trigger = {
							exists = var:contest_murder_attempt
							var:contest_murder_attempt = scope:contest_loser
							scope:contest_loser = { is_alive = no }
						}
						desc = contest_events.0810.murder_success
					}
					triggered_desc = {
						trigger = {
							exists = var:contest_murder_attempt
							var:contest_murder_attempt = scope:contest_loser
						}
						desc = contest_events.0810.murder_fail_lose
					}
					triggered_desc = {
						trigger = {
							exists = var:contest_murder_attempt
							var:contest_murder_attempt = scope:contest_winner
						}
						desc = contest_events.0810.murder_fail_win
					}
					triggered_desc = {
						trigger = {
							exists = scope:score_difference
							scope:score_difference < 10
						}
						desc = contest_events.0810.close
					}
					triggered_desc = {
						trigger = {
							exists = scope:score_difference
							scope:score_difference >= 10
							scope:score_difference < 20
						}
						desc = contest_events.0810.average
					}
					desc = contest_events.0810.far
				}
				triggered_desc = {
					trigger = {
						scope:contest_loser = {
							has_trait_rank = {
								trait = wounded
								rank > 1
							}
						}
					}
					desc = contest_events.0810.wound
				}
				triggered_desc = {
					trigger = {
						scope:contest_loser = { is_alive = no }
					}
					desc = contest_events.0810.death
				}
				desc = contest_events.0810.final
			}		
		}
	}
	theme = tournament_wrestling_pivotal
	window = tournament_fullscreen_pivotal_event_widget
	left_portrait = {
		character = scope:pivotal_contestant
		triggered_animation = {
			trigger = { this = scope:contest_winner }
			animation = wrestling_victory
		}
		triggered_animation = {
			trigger = { this = scope:contest_loser }
			animation = wrestling_yield_start
		}
	}
	right_portrait = {
		character = scope:other_contestant
		triggered_animation = {
			trigger = { this = scope:contest_winner }
			animation = wrestling_victory
		}
		triggered_animation = {
			trigger = { this = scope:contest_loser }
			animation = wrestling_yield_start
		}
	}
	override_transition = {
		trigger = {
			scope:pivotal_contestant ?= this
			scope:pivotal_contestant ?= scope:contest_winner
		}
		reference = pivotal_fistfighting_success
	}
	override_transition = { 
		trigger = {
			scope:pivotal_contestant ?= this
			scope:pivotal_contestant ?= scope:contest_loser
		}
		reference = pivotal_fistfighting_fail
	}
	override_transition = { 
		trigger = { always = yes } 
		reference = pivotal_fistfighting_neutral
	}

	trigger = {
		is_ai = no
		NOR = {
			scope:versus_matcher = { has_character_flag = resigned_contest_flag }
			scope:versus_matchee = { has_character_flag = resigned_contest_flag }
		}
	}
	immediate = { 
		contest_versus_player_vs_ai_scope_effect = yes
		if = {
			limit = { scope:pivotal_contestant = scope:contest_winner }
			scope:contest_loser = { save_scope_as = other_contestant }
		}
		else = {
			scope:contest_winner = { save_scope_as = other_contestant }
		}
		versus_contest_round_outcome_tooltip_effect = {
			WINNER = scope:contest_winner
			LOSER = scope:contest_loser
		}
		if = {
			limit = {
				OR = {
					scope:contest_winner = { is_alive = no }
					scope:contest_loser = { is_alive = no }
				}
			}
			play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_surprise_reaction"
		}
		else_if = {
			limit = { scope:pivotal_contestant ?= scope:contest_winner }
			play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_positive_reaction"
		}
		else = {
			play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_negative_reaction"
		}
		scope:pivotal_contestant = {
			if = {
				limit = { has_character_flag = success_pivotal_flag }
				if = {
					limit = { this = root }
					accolade_major_glory_gain_with_checks_effect = yes
				}
				else = {
					show_as_tooltip = { accolade_major_glory_gain_with_checks_effect = yes }
				}
			}
		}
	}

	option = { # Contestant
		name = {
			trigger = { scope:pivotal_contestant = scope:contest_winner }
			text = contest_events.0871.a
		}
		name = {
			trigger = { scope:pivotal_contestant = scope:contest_loser }
			text = contest_events.0871.a.loser
		}
		trigger = { scope:pivotal_contestant ?= this }
	}

	option = {
		name = {
			text = contest_events.0810.a.death
			trigger = {
				scope:contest_loser = { is_alive = no }
			}
		}
		name = {
			text = contest_events.0810.a.murder_success
			trigger = {
				var:contest_murder_attempt ?= scope:contest_loser
				scope:contest_loser = { is_alive = no }
			}
		}
		name = {
			text = contest_events.0810.a.murder_fail_lose
			trigger = { var:contest_murder_attempt ?= scope:contest_loser }
		}
		name = {
			text = contest_events.0810.a.murder_fail_win
			trigger = { var:contest_murder_attempt ?= scope:contest_winner }
		}
		name = {
			text = contest_events.0810.a.bad_win
			trigger = {
				has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:contest_winner }
			}
		}
		name = {
			text = contest_events.0810.a.bad_lose
			trigger = {
				has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:contest_loser }
			}
		}
		name = {
			text = contest_events.0810.a.good_win
			trigger = {
				OR = {
					has_any_good_relationship_with_character_trigger = { CHARACTER = scope:contest_winner }
					var:tournament_wager_target ?= scope:contest_winner
				}
			}
		}
		name = {
			text = contest_events.0810.a.good_lose
			trigger = {
				OR = {
					has_any_good_relationship_with_character_trigger = { CHARACTER = scope:contest_loser }
					var:tournament_wager_target ?= scope:contest_loser
				}
			}
		}
		name = {
			text = contest_events.0810.a.consorts
			trigger = {
				scope:contest_winner = { is_consort_of = root }
				scope:contest_loser = { is_consort_of = root }
			}
		}
		name = {
			text = contest_events.0810.a.consort_winner
			trigger = {
				scope:contest_winner = { is_consort_of = root }
				NOT = {
					scope:contest_loser = { is_consort_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a.consort_loser
			trigger = {
				scope:contest_loser = { is_consort_of = root }
				NOT = {
					scope:contest_winner = { is_consort_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a.children
			trigger = {
				scope:contest_winner = { is_child_of = root }
				scope:contest_loser = { is_child_of = root }
			}
		}
		name = {
			text = contest_events.0810.a.child_win
			trigger = {
				scope:contest_winner = { is_child_of = root }
				NOT = {
					scope:contest_loser = { is_child_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a.child_lose
			trigger = {
				scope:contest_loser = { is_child_of = root }
				NOT = {
					scope:contest_winner = { is_child_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a.champion_win
			trigger = {
				scope:contest_winner = {
					has_court_position = champion_court_position
					liege = root
				}
			}
		}
		name = {
			text = contest_events.0810.a.champion_lose
			trigger = {
				scope:contest_loser = {
					has_court_position = champion_court_position
					liege = root
				}
			}
		}
		name = {
			text = contest_events.0810.a.close_family
			trigger = {
				scope:contest_winner = { is_close_family_of = root }
				scope:contest_loser = { is_close_family_of = root }
			}
		}
		name = {
			text = contest_events.0810.a.close_family_win
			trigger = {
				scope:contest_winner = { is_close_family_of = root }
				NOT = {
					scope:contest_loser = { is_close_family_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a.close_family_lose
			trigger = {
				scope:contest_loser = { is_close_family_of = root }
				NOT = {
					scope:contest_winner = { is_close_family_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a.house
			trigger = {
				exists = root.house
				scope:contest_winner.house ?= root.house
				scope:contest_loser.house ?= root.house
			}
		}
		name = {
			text = contest_events.0810.a.house_won
			trigger = {
				exists = root.house
				scope:contest_winner.house ?= root.house
				NOT = { scope:contest_loser.house ?= root.house }
			}
		}
		name = {
			text = contest_events.0810.a.house_lost
			trigger = {
				exists = root.house
				scope:contest_loser.house ?= root.house
				NOT = { scope:contest_winner.house ?= root.house }
			}
		}
		name = {
			text = contest_events.0810.a.knights
			trigger = {
				scope:contest_winner = { is_knight_of = root }
				scope:contest_loser = { is_knight_of = root }
			}
		}
		name = {
			text = contest_events.0810.a.knight_win
			trigger = {
				scope:contest_winner = { is_knight_of = root }
				NOT = {
					scope:contest_loser = { is_knight_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a.knight_lose
			trigger = {
				scope:contest_loser = { is_knight_of = root }
				NOT = {
					scope:contest_winner = { is_knight_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a
			trigger = {
				NOR = {
					scope:contest_winner = { tournament_pertinent_contestant_trigger = yes }
					scope:contest_loser = { tournament_pertinent_contestant_trigger = yes }
				}
			}
		}
		trigger = {
			NOT = { scope:pivotal_contestant ?= this }
		}
	}

	option = { # Cheater! I go through!
		name = contest_events.0841.c
		trigger = {
			this = scope:host
			this = scope:contest_loser
		}
		versus_tyrannical_disqualification_effect = yes
		ai_chance = {
			base = 10
			ai_value_modifier = {
				ai_honor = -1
				ai_compassion = -0.5
				ai_boldness = 0.5
			}
		}
	}
}

contest_events.0872 = { # Duel Outcome
	type = activity_event
	title = contest_events.0872.t
	desc = {
		# PtV status flavor
		first_valid = {
			# Not a lot in it - range between best and worst is very small
			triggered_desc = {
				trigger = {
					has_character_flag = success_pivotal_flag
				}
				desc = contest_events.0872.pivotal_success
			}
			triggered_desc = {
				trigger = { has_character_flag = neutral_pivotal_flag }
				desc = contest_events.0872.pivotal_neutral
			}
			# Close to or in fact top score
			triggered_desc = {
				trigger = {
					has_character_flag = failure_pivotal_flag
				}
				desc = contest_events.0872.pivotal_failure
			}
		}
		first_valid = {
			triggered_desc = {
				trigger = { this = scope:contest_winner }
				desc = contest_events.0872.winner_start
			}
			triggered_desc = {
				trigger = { this = scope:contest_loser }
				desc = contest_events.0872.loser_start
			}
		}
		random_valid = {
			triggered_desc = {
				trigger = { this = scope:contest_winner }
				desc = contest_events.0872.winner_yield
			}
			triggered_desc = {
				trigger = { this = scope:contest_winner }
				desc = contest_events.0872.winner_disarm
			}
			triggered_desc = {
				trigger = { this = scope:contest_loser }
				desc = contest_events.0872.loser_yield
			}
			triggered_desc = {
				trigger = { this = scope:contest_loser }
				desc = contest_events.0872.loser_disarm
			}
		}
		first_valid = {
			triggered_desc = {
				trigger = { this = scope:contest_winner }
				desc = contest_events.0871.winner_end
			}
			triggered_desc = {
				trigger = { this = scope:contest_loser }
				desc = contest_events.0871.loser_end
			}
		}
		triggered_desc = {
			trigger = {
				NOR = {
					this = scope:versus_matcher
					this = scope:versus_matchee
				}
			}
			desc = {
				first_valid = {
					triggered_desc = {
						trigger = {
							OR = {
								any_relation = { this = scope:contest_winner }
								is_close_family_of = scope:contest_winner
								is_consort_of = scope:contest_winner
							}
							OR = {
								any_relation = { this = scope:contest_loser }
								is_close_family_of = scope:contest_loser
								is_consort_of = scope:contest_loser
							}
						}
						desc = contest_events.0810.both_relation
					}
					triggered_desc = {
						trigger = {
							OR = {
								any_relation = { this = scope:contest_winner }
								is_close_family_of = scope:contest_winner
								is_consort_of = scope:contest_winner
							}
						}
						desc = contest_events.0810.winner_relation
					}
					triggered_desc = {
						trigger = {
							OR = {
								any_relation = { this = scope:contest_loser }
								is_close_family_of = scope:contest_loser
								is_consort_of = scope:contest_loser
							}
						}
						desc = contest_events.0810.loser_relation
					}
					desc = contest_events.0810.desc
				}
				first_valid = {
					triggered_desc = {
						trigger = {
							exists = var:contest_murder_attempt
							var:contest_murder_attempt = scope:contest_loser
							scope:contest_loser = { is_alive = no }
						}
						desc = contest_events.0810.murder_success
					}
					triggered_desc = {
						trigger = {
							exists = var:contest_murder_attempt
							var:contest_murder_attempt = scope:contest_loser
						}
						desc = contest_events.0810.murder_fail_lose
					}
					triggered_desc = {
						trigger = {
							exists = var:contest_murder_attempt
							var:contest_murder_attempt = scope:contest_winner
						}
						desc = contest_events.0810.murder_fail_win
					}
					triggered_desc = {
						trigger = {
							exists = scope:score_difference
							scope:score_difference < 10
						}
						desc = contest_events.0810.close
					}
					triggered_desc = {
						trigger = {
							exists = scope:score_difference
							scope:score_difference >= 10
							scope:score_difference < 20
						}
						desc = contest_events.0810.average
					}
					desc = contest_events.0810.far
				}
				triggered_desc = {
					trigger = {
						scope:contest_loser = {
							has_trait_rank = {
								trait = wounded
								rank > 1
							}
						}
					}
					desc = contest_events.0810.wound
				}
				triggered_desc = {
					trigger = {
						scope:contest_loser = { is_alive = no }
					}
					desc = contest_events.0810.death
				}
				desc = contest_events.0810.final
			}			
		}
	}
	theme = tournament_melee_pivotal
	window = tournament_fullscreen_pivotal_event_widget
	left_portrait = {
		character = scope:pivotal_contestant
		triggered_animation = {
			trigger = { this = scope:contest_winner }
			animation = sword_coup_degrace
		}
		triggered_animation = {
			trigger = { this = scope:contest_loser }
			animation = sword_yield_start
		}
	}
	right_portrait = {
		character = scope:other_contestant
		triggered_animation = {
			trigger = { this = scope:contest_winner }
			animation = sword_coup_degrace
		}
		triggered_animation = {
			trigger = { this = scope:contest_loser }
			animation = sword_yield_start
		}
	}
	override_transition = {
		trigger = {
			scope:pivotal_contestant ?= this
			scope:pivotal_contestant ?= scope:contest_winner
		}
		reference = pivotal_melee_success 
	}
	override_transition = { 
		trigger = {
			scope:pivotal_contestant ?= this
			scope:pivotal_contestant ?= scope:contest_loser
		}
		reference = pivotal_melee_fail 
	}
	override_transition = { 
		trigger = { always = yes } 
		reference = pivotal_melee_neutral
	}

	trigger = {
		is_ai = no
		NOR = {
			scope:versus_matcher = { has_character_flag = resigned_contest_flag }
			scope:versus_matchee = { has_character_flag = resigned_contest_flag }
		}
	}

	immediate = { 
		contest_versus_player_vs_ai_scope_effect = yes
		if = {
			limit = { scope:pivotal_contestant = scope:contest_winner }
			scope:contest_loser = { save_scope_as = other_contestant }
		}
		else = {
			scope:contest_winner = { save_scope_as = other_contestant }
		}
		versus_contest_round_outcome_tooltip_effect = {
			WINNER = scope:contest_winner
			LOSER = scope:contest_loser
		}
		if = {
			limit = {
				OR = {
					scope:contest_winner = { is_alive = no }
					scope:contest_loser = { is_alive = no }
				}
			}
			play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_surprise_reaction"
		}
		else_if = {
			limit = { scope:pivotal_contestant ?= scope:contest_winner }
			play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_positive_reaction"
		}
		else = {
			play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_negative_reaction"
		}
		scope:pivotal_contestant = {
			if = {
				limit = { has_character_flag = success_pivotal_flag }
				if = {
					limit = { this = root }
					accolade_major_glory_gain_with_checks_effect = yes
				}
				else = {
					show_as_tooltip = { accolade_major_glory_gain_with_checks_effect = yes }
				}
			}
		}
	}

	option = { # Contestant
		name = {
			trigger = { scope:pivotal_contestant = scope:contest_winner }
			text = contest_events.0871.a
		}
		name = {
			trigger = { scope:pivotal_contestant = scope:contest_loser }
			text = contest_events.0871.a.loser
		}
		trigger = { scope:pivotal_contestant ?= this }
	}

	option = {
		name = {
			text = contest_events.0810.a.death
			trigger = {
				scope:contest_loser = { is_alive = no }
			}
		}
		name = {
			text = contest_events.0810.a.murder_success
			trigger = {
				var:contest_murder_attempt ?= scope:contest_loser
				scope:contest_loser = { is_alive = no }
			}
		}
		name = {
			text = contest_events.0810.a.murder_fail_lose
			trigger = { var:contest_murder_attempt ?= scope:contest_loser }
		}
		name = {
			text = contest_events.0810.a.murder_fail_win
			trigger = { var:contest_murder_attempt ?= scope:contest_winner }
		}
		name = {
			text = contest_events.0810.a.bad_win
			trigger = {
				has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:contest_winner }
			}
		}
		name = {
			text = contest_events.0810.a.bad_lose
			trigger = {
				has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:contest_loser }
			}
		}
		name = {
			text = contest_events.0810.a.good_win
			trigger = {
				OR = {
					has_any_good_relationship_with_character_trigger = { CHARACTER = scope:contest_winner }
					var:tournament_wager_target ?= scope:contest_winner
				}
			}
		}
		name = {
			text = contest_events.0810.a.good_lose
			trigger = {
				OR = {
					has_any_good_relationship_with_character_trigger = { CHARACTER = scope:contest_loser }
					var:tournament_wager_target ?= scope:contest_loser
				}
			}
		}
		name = {
			text = contest_events.0810.a.consorts
			trigger = {
				scope:contest_winner = { is_consort_of = root }
				scope:contest_loser = { is_consort_of = root }
			}
		}
		name = {
			text = contest_events.0810.a.consort_winner
			trigger = {
				scope:contest_winner = { is_consort_of = root }
				NOT = {
					scope:contest_loser = { is_consort_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a.consort_loser
			trigger = {
				scope:contest_loser = { is_consort_of = root }
				NOT = {
					scope:contest_winner = { is_consort_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a.children
			trigger = {
				scope:contest_winner = { is_child_of = root }
				scope:contest_loser = { is_child_of = root }
			}
		}
		name = {
			text = contest_events.0810.a.child_win
			trigger = {
				scope:contest_winner = { is_child_of = root }
				NOT = {
					scope:contest_loser = { is_child_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a.child_lose
			trigger = {
				scope:contest_loser = { is_child_of = root }
				NOT = {
					scope:contest_winner = { is_child_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a.champion_win
			trigger = {
				scope:contest_winner = {
					has_court_position = champion_court_position
					liege = root
				}
			}
		}
		name = {
			text = contest_events.0810.a.champion_lose
			trigger = {
				scope:contest_loser = {
					has_court_position = champion_court_position
					liege = root
				}
			}
		}
		name = {
			text = contest_events.0810.a.close_family
			trigger = {
				scope:contest_winner = { is_close_family_of = root }
				scope:contest_loser = { is_close_family_of = root }
			}
		}
		name = {
			text = contest_events.0810.a.close_family_win
			trigger = {
				scope:contest_winner = { is_close_family_of = root }
				NOT = {
					scope:contest_loser = { is_close_family_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a.close_family_lose
			trigger = {
				scope:contest_loser = { is_close_family_of = root }
				NOT = {
					scope:contest_winner = { is_close_family_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a.house
			trigger = {
				exists = root.house
				scope:contest_winner.house ?= root.house
				scope:contest_loser.house ?= root.house
			}
		}
		name = {
			text = contest_events.0810.a.house_won
			trigger = {
				exists = root.house
				scope:contest_winner.house ?= root.house
				NOT = { scope:contest_loser.house ?= root.house }
			}
		}
		name = {
			text = contest_events.0810.a.house_lost
			trigger = {
				exists = root.house
				scope:contest_loser.house ?= root.house
				NOT = { scope:contest_winner.house ?= root.house }
			}
		}
		name = {
			text = contest_events.0810.a.knights
			trigger = {
				scope:contest_winner = { is_knight_of = root }
				scope:contest_loser = { is_knight_of = root }
			}
		}
		name = {
			text = contest_events.0810.a.knight_win
			trigger = {
				scope:contest_winner = { is_knight_of = root }
				NOT = {
					scope:contest_loser = { is_knight_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a.knight_lose
			trigger = {
				scope:contest_loser = { is_knight_of = root }
				NOT = {
					scope:contest_winner = { is_knight_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a
			trigger = {
				NOR = {
					scope:contest_winner = { tournament_pertinent_contestant_trigger = yes }
					scope:contest_loser = { tournament_pertinent_contestant_trigger = yes }
				}
			}
		}
		trigger = {
			NOT = { scope:pivotal_contestant ?= this }
		}
	}

	option = { # Cheater! I go through!
		name = contest_events.0841.c
		trigger = {
			this = scope:host
			this = scope:contest_loser
		}
		versus_tyrannical_disqualification_effect = yes
		ai_chance = {
			base = 10
			ai_value_modifier = {
				ai_honor = -1
				ai_compassion = -0.5
				ai_boldness = 0.5
			}
		}
	}
}

contest_events.0873 = { # Board Game Outcome
	type = activity_event
	title = contest_events.0873.t
	desc = {
		# PtV status flavor
		first_valid = {
			# Not a lot in it - range between best and worst is very small
			triggered_desc = {
				trigger = {
					this = scope:pivotal_contestant
					has_character_flag = success_pivotal_flag
				}
				desc = contest_events.0873.pivotal_success
			}
			triggered_desc = {
				trigger = {
					this = scope:pivotal_contestant
					has_character_flag = neutral_pivotal_flag
				}
				desc = contest_events.0873.pivotal_neutral
			}
			# Close to or in fact top score
			triggered_desc = {
				trigger = {
					this = scope:pivotal_contestant
					has_character_flag = failure_pivotal_flag
				}
				desc = contest_events.0873.pivotal_failure
			}
		}
		first_valid = {
			triggered_desc = {
				trigger = { this = scope:contest_winner }
				desc = contest_events.0873.winner_start
			}
			triggered_desc = {
				trigger = { this = scope:contest_loser }
				desc = contest_events.0873.loser_start
			}
		}
		random_valid = {
			triggered_desc = {
				trigger = { this = scope:contest_winner }
				desc = contest_events.0873.winner_surprise
			}
			triggered_desc = {
				trigger = { this = scope:contest_winner }
				desc = contest_events.0873.winner_grind
			}
			triggered_desc = {
				trigger = { this = scope:contest_loser }
				desc = contest_events.0873.loser_surprise
			}
			triggered_desc = {
				trigger = { this = scope:contest_loser }
				desc = contest_events.0873.loser_grind
			}
		}
		first_valid = {
			triggered_desc = {
				trigger = { this = scope:contest_winner }
				desc = contest_events.0871.winner_end
			}
			triggered_desc = {
				trigger = { this = scope:contest_loser }
				desc = contest_events.0871.loser_end
			}
		}
		triggered_desc = {
			trigger = {
				NOR = {
					this = scope:versus_matcher
					this = scope:versus_matchee
				}
			}
			desc = {
				first_valid = {
					triggered_desc = {
						trigger = {
							OR = {
								any_relation = { this = scope:contest_winner }
								is_close_family_of = scope:contest_winner
								is_consort_of = scope:contest_winner
							}
							OR = {
								any_relation = { this = scope:contest_loser }
								is_close_family_of = scope:contest_loser
								is_consort_of = scope:contest_loser
							}
						}
						desc = contest_events.0810.both_relation
					}
					triggered_desc = {
						trigger = {
							OR = {
								any_relation = { this = scope:contest_winner }
								is_close_family_of = scope:contest_winner
								is_consort_of = scope:contest_winner
							}
						}
						desc = contest_events.0810.winner_relation
					}
					triggered_desc = {
						trigger = {
							OR = {
								any_relation = { this = scope:contest_loser }
								is_close_family_of = scope:contest_loser
								is_consort_of = scope:contest_loser
							}
						}
						desc = contest_events.0810.loser_relation
					}
					desc = contest_events.0810.desc
				}
				first_valid = {
					triggered_desc = {
						trigger = {
							exists = var:contest_murder_attempt
							var:contest_murder_attempt = scope:contest_loser
							scope:contest_loser = { is_alive = no }
						}
						desc = contest_events.0810.murder_success
					}
					triggered_desc = {
						trigger = {
							exists = var:contest_murder_attempt
							var:contest_murder_attempt = scope:contest_loser
						}
						desc = contest_events.0810.murder_fail_lose
					}
					triggered_desc = {
						trigger = {
							exists = var:contest_murder_attempt
							var:contest_murder_attempt = scope:contest_winner
						}
						desc = contest_events.0810.murder_fail_win
					}
					triggered_desc = {
						trigger = {
							exists = scope:score_difference
							scope:score_difference < 10
						}
						desc = contest_events.0810.close
					}
					triggered_desc = {
						trigger = {
							exists = scope:score_difference
							scope:score_difference >= 10
							scope:score_difference < 20
						}
						desc = contest_events.0810.average
					}
					desc = contest_events.0810.far
				}
				triggered_desc = {
					trigger = {
						scope:contest_loser = {
							has_trait_rank = {
								trait = wounded
								rank > 1
							}
						}
					}
					desc = contest_events.0810.wound
				}
				triggered_desc = {
					trigger = {
						scope:contest_loser = { is_alive = no }
					}
					desc = contest_events.0810.death
				}
				desc = contest_events.0810.final
			}
		}
	}
	theme = tournament_contest
	window = tournament_fullscreen_pivotal_event_widget
	left_portrait = {
		character = scope:pivotal_contestant
		triggered_animation = {
			trigger = { this = scope:contest_winner }
			animation = schadenfreude
		}
		triggered_animation = {
			trigger = { this = scope:contest_loser }
			animation = war_over_loss
		}
	}
	right_portrait = {
		character = scope:other_contestant
		triggered_animation = {
			trigger = { this = scope:contest_winner }
			animation = war_over_win
		}
		triggered_animation = {
			trigger = { this = scope:contest_loser }
			animation = war_over_loss
		}
	}
	override_transition = {
		trigger = {
			scope:pivotal_contestant ?= this
			scope:pivotal_contestant ?= scope:contest_winner
		}
		reference = pivotal_boardgame_success 
	}
	override_transition = { 
		trigger = {
			scope:pivotal_contestant ?= this
			scope:pivotal_contestant ?= scope:contest_loser
		}
		reference = pivotal_boardgame_fail 
	}
	override_transition = { 
		trigger = { always = yes } 
		reference = pivotal_boardgame_neutral
	}
	
	trigger = {
		is_ai = no
		NOR = {
			scope:versus_matcher = { has_character_flag = resigned_contest_flag }
			scope:versus_matchee = { has_character_flag = resigned_contest_flag }
		}
	}

	immediate = { 
		contest_versus_player_vs_ai_scope_effect = yes
		if = {
			limit = { scope:pivotal_contestant = scope:contest_winner }
			scope:contest_loser = { save_scope_as = other_contestant }
		}
		else = {
			scope:contest_winner = { save_scope_as = other_contestant }
		}
		versus_contest_round_outcome_tooltip_effect = {
			WINNER = scope:contest_winner
			LOSER = scope:contest_loser
		}
		if = {
			limit = { pivotal_success_trigger = yes }
			play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_positive_reaction"
		}
		else_if = {
			limit = { pivotal_failure_trigger = yes }
			play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_negative_reaction"
		}
		else = {
			play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_surprise_reaction"
		}
		scope:pivotal_contestant = {
			if = {
				limit = { has_character_flag = success_pivotal_flag }
				if = {
					limit = { this = root }
					accolade_major_glory_gain_with_checks_effect = yes
				}
				else = {
					show_as_tooltip = { accolade_major_glory_gain_with_checks_effect = yes }
				}
			}
		}
	}

	option = { # Contestant
		name = {
			trigger = { scope:pivotal_contestant = scope:contest_winner }
			text = contest_events.0871.a
		}
		name = {
			trigger = { scope:pivotal_contestant = scope:contest_loser }
			text = contest_events.0871.a.loser
		}
		trigger = { scope:pivotal_contestant ?= this }
	}

	option = {
		name = {
			text = contest_events.0810.a.death
			trigger = {
				scope:contest_loser = { is_alive = no }
			}
		}
		name = {
			text = contest_events.0810.a.murder_success
			trigger = {
				var:contest_murder_attempt ?= scope:contest_loser
				scope:contest_loser = { is_alive = no }
			}
		}
		name = {
			text = contest_events.0810.a.murder_fail_lose
			trigger = { var:contest_murder_attempt ?= scope:contest_loser }
		}
		name = {
			text = contest_events.0810.a.murder_fail_win
			trigger = { var:contest_murder_attempt ?= scope:contest_winner }
		}
		name = {
			text = contest_events.0810.a.bad_win
			trigger = {
				has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:contest_winner }
			}
		}
		name = {
			text = contest_events.0810.a.bad_lose
			trigger = {
				has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:contest_loser }
			}
		}
		name = {
			text = contest_events.0810.a.good_win
			trigger = {
				OR = {
					has_any_good_relationship_with_character_trigger = { CHARACTER = scope:contest_winner }
					var:tournament_wager_target ?= scope:contest_winner
				}
			}
		}
		name = {
			text = contest_events.0810.a.good_lose
			trigger = {
				OR = {
					has_any_good_relationship_with_character_trigger = { CHARACTER = scope:contest_loser }
					var:tournament_wager_target ?= scope:contest_loser
				}
			}
		}
		name = {
			text = contest_events.0810.a.consorts
			trigger = {
				scope:contest_winner = { is_consort_of = root }
				scope:contest_loser = { is_consort_of = root }
			}
		}
		name = {
			text = contest_events.0810.a.consort_winner
			trigger = {
				scope:contest_winner = { is_consort_of = root }
				NOT = {
					scope:contest_loser = { is_consort_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a.consort_loser
			trigger = {
				scope:contest_loser = { is_consort_of = root }
				NOT = {
					scope:contest_winner = { is_consort_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a.children
			trigger = {
				scope:contest_winner = { is_child_of = root }
				scope:contest_loser = { is_child_of = root }
			}
		}
		name = {
			text = contest_events.0810.a.child_win
			trigger = {
				scope:contest_winner = { is_child_of = root }
				NOT = {
					scope:contest_loser = { is_child_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a.child_lose
			trigger = {
				scope:contest_loser = { is_child_of = root }
				NOT = {
					scope:contest_winner = { is_child_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a.champion_win
			trigger = {
				scope:contest_winner = {
					has_court_position = champion_court_position
					liege = root
				}
			}
		}
		name = {
			text = contest_events.0810.a.champion_lose
			trigger = {
				scope:contest_loser = {
					has_court_position = champion_court_position
					liege = root
				}
			}
		}
		name = {
			text = contest_events.0810.a.close_family
			trigger = {
				scope:contest_winner = { is_close_family_of = root }
				scope:contest_loser = { is_close_family_of = root }
			}
		}
		name = {
			text = contest_events.0810.a.close_family_win
			trigger = {
				scope:contest_winner = { is_close_family_of = root }
				NOT = {
					scope:contest_loser = { is_close_family_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a.close_family_lose
			trigger = {
				scope:contest_loser = { is_close_family_of = root }
				NOT = {
					scope:contest_winner = { is_close_family_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a.house
			trigger = {
				exists = root.house
				scope:contest_winner.house ?= root.house
				scope:contest_loser.house ?= root.house
			}
		}
		name = {
			text = contest_events.0810.a.house_won
			trigger = {
				exists = root.house
				scope:contest_winner.house ?= root.house
				NOT = { scope:contest_loser.house ?= root.house }
			}
		}
		name = {
			text = contest_events.0810.a.house_lost
			trigger = {
				exists = root.house
				scope:contest_loser.house ?= root.house
				NOT = { scope:contest_winner.house ?= root.house }
			}
		}
		name = {
			text = contest_events.0810.a.knights
			trigger = {
				scope:contest_winner = { is_knight_of = root }
				scope:contest_loser = { is_knight_of = root }
			}
		}
		name = {
			text = contest_events.0810.a.knight_win
			trigger = {
				scope:contest_winner = { is_knight_of = root }
				NOT = {
					scope:contest_loser = { is_knight_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a.knight_lose
			trigger = {
				scope:contest_loser = { is_knight_of = root }
				NOT = {
					scope:contest_winner = { is_knight_of = root }
				}
			}
		}
		name = {
			text = contest_events.0810.a
			trigger = {
				NOR = {
					scope:contest_winner = { tournament_pertinent_contestant_trigger = yes }
					scope:contest_loser = { tournament_pertinent_contestant_trigger = yes }
				}
			}
		}
		trigger = {
			NOT = { scope:pivotal_contestant ?= this }
		}
	}

	option = { # Cheater! I go through!
		name = contest_events.0841.c
		trigger = {
			this = scope:host
			this = scope:contest_loser
		}
		versus_tyrannical_disqualification_effect = yes
		ai_chance = {
			base = 10
			ai_value_modifier = {
				ai_honor = -1
				ai_compassion = -0.5
				ai_boldness = 0.5
			}
		}
	}
}

##############################
##############################
###   SHARED - 0900-9999   ###
##############################
##############################

##################################################
# Out of Control - Team
# by Joe Parkin
# 1260
##################################################

scripted_effect tournament_savagely_beaten_opinion_effect = {
	add_opinion = {
		modifier = tournament_savagely_beaten_opinion
		target = scope:wrathful_contestant
		opinion = -40
	}
	progress_towards_rival_effect = {
		REASON = rival_contest_savagely_beaten
		CHARACTER = scope:wrathful_contestant
		OPINION = 0
	}
	every_in_list = {
		list = beaten_consorts
		add_opinion = {
			modifier = tournament_savagely_beaten_consort_opinion
			target = scope:wrathful_contestant
			opinion = -20
		}
	}
	every_in_list = {
		list = beaten_lovers
		if = {
			limit = {
				any_secret = {
					secret_type = secret_lover
					OR = {
						secret_target = scope:wrathful_victim
						secret_owner = scope:wrathful_victim
					}
				}
			}
			hidden_effect = {
				add_opinion = {
					modifier = tournament_savagely_beaten_lover_opinion
					target = scope:wrathful_contestant
					opinion = -20
				}
			}
		}
		else = {
			add_opinion = {
				modifier = tournament_savagely_beaten_lover_opinion
				target = scope:wrathful_contestant
				opinion = -20
			}
		}
	}
	every_in_list = {
		list = beaten_friends
		add_opinion = {
			modifier = tournament_savagely_beaten_friend_opinion
			target = scope:wrathful_contestant
			opinion = -20
		}
	}
	every_in_list = {
		list = beaten_family
		add_opinion = {
			modifier = tournament_savagely_beaten_family_opinion
			target = scope:wrathful_contestant
			opinion = -20
		}
	}
	every_in_list = {
		list = beaten_liege
		add_opinion = {
			modifier = tournament_savagely_beaten_liege_opinion
			target = scope:wrathful_contestant
			opinion = -20
		}
	}
}

scripted_effect tournament_savagely_beaten_relations_effect = {
	save_scope_as = wrathful_victim
	every_consort = { add_to_list = beaten_consorts }
	every_relation = {
		type = lover
		limit = {
			NOT = { is_in_list = beaten_consorts }
		}
		add_to_list = beaten_lovers

	}
	every_relation = {
		type = friend
		limit = {
			NOR = {
				is_in_list = beaten_consorts
				is_in_list = beaten_lovers
			}
		}
		add_to_list = beaten_friends
	}
	every_close_family_member = {
		limit = {
			NOR = {
				is_in_list = beaten_consorts
				is_in_list = beaten_lovers
				is_in_list = beaten_friends
			}
		}
		add_to_list = beaten_family
	}
	if = {
		limit = { is_pool_guest = no }
		liege = {
			if = {
				limit = {
					NOT = { is_in_list = beaten_family }
				}
				add_to_list = beaten_liege
			}
		}
	}
}

scripted_effect tournament_savagely_beaten_outcome_effect = {
	scope:wrathful_victim = {
		tournament_savagely_beaten_opinion_effect = yes
		random_list = {
			30 = {
				trigger = {
					NOT = { has_trait = wounded }
				}		
				add_trait = wounded_1
			}
			20 = {
				trigger = {
					has_trait = wounded
					NOR = {
						has_trait = wounded_2
						has_trait = wounded_3
					}
				}
				change_trait_rank = {
					trait = wounded
					rank = 1
					max = 3
				}
			}
			5 = {
				modifier = {
					factor = 1.25
					has_dire_or_giant_trigger = yes
				}
				modifier = {
					factor = 1.25
					has_trait = physique_good
				}
				modifier = {
					factor = 1.25
					has_trait = callous
				}
				add_character_flag = died_in_contest_flag
				override_death_killer_effect = {
					death_reason = death_contest_melee_accident
					killer = scope:wrathful_contestant
				}
			}
		}
	}
}

contest_events.0910 = {
	type = activity_event
	title = contest_events.0910.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:activity = { has_current_phase = tournament_phase_melee }
				}
				desc = contest_events.0910.melee
			}
			triggered_desc = {
				trigger = {
					scope:activity = { has_current_phase = tournament_phase_wrestling }
				}
				desc = contest_events.0910.wrestling
			}
			triggered_desc = {
				trigger = {
					scope:activity = { has_current_phase = tournament_phase_duel }
				}
				desc = contest_events.0910.duel
			}
		}
	}
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = root
		scripted_animation = duel_wield_weapon
	}
	right_portrait = {
		character = scope:wrathful_victim
		animation = fear
	}
	cooldown = { years = 1 }

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes
		
		#Standard checks.
		OR = {
			has_trait = wrathful
			has_trait = berserker
		}
		NOT = { has_character_flag = tournament_active_event_cooldown }
		exists = var:contest_aptitude
		scope:activity = {
			NOT = { has_variable = tournament_events_1260_cooldown }
			trigger_if = {
				limit = { has_current_phase = tournament_phase_melee }
				any_guest_subset_current_phase = {
					name = qualified
					contest_event_general_contestant_valid_trigger = yes
					prowess < root.prowess
					NOR = {
						is_landed = yes
						has_any_good_relationship_with_character_trigger = { CHARACTER = root }	
						is_consort_of = root
						is_close_or_extended_family_of = root
						opinion = {
							target = root
							value >= 25
						}
					}
					save_temporary_scope_as = victim_temp
				}
				NAND = {
					root = {
						is_in_guest_subset = { name = team_alpha }
					}
					scope:victim_temp = {
						is_in_guest_subset = { name = team_alpha }
					}
				}
				NAND = {
					root = {
						is_in_guest_subset = { name = team_beta }
					}
					scope:victim_temp = {
						is_in_guest_subset = { name = team_beta }
					}
				}
			}
			trigger_else = {
				exists = scope:versus_matchee
				exists = scope:versus_matcher
				OR = {
					scope:versus_matchee = {
						NOT = { this = root }
						is_ai = yes
						NOR = {
							is_landed = yes
							has_any_good_relationship_with_character_trigger = { CHARACTER = root }	
							is_consort_of = root
							is_close_or_extended_family_of = root
							opinion = {
								target = root
								value >= 25
							}
						}
					}
					scope:versus_matcher = {
						NOT = { this = root }
						is_ai = yes
						NOR = {
							is_landed = yes
							has_any_good_relationship_with_character_trigger = { CHARACTER = root }	
							is_consort_of = root
							is_close_or_extended_family_of = root
							opinion = {
								target = root
								value >= 25
							}
						}
					}
				}
			}
		}
	}

	immediate = {
		add_character_flag = {
			flag = tournament_active_event_cooldown
			years = 1
		}
		save_scope_as = wrathful_contestant
		save_scope_as = contest_winner
		scope:activity = {
			set_variable = tournament_events_1260_cooldown
			if = {
				limit = { has_current_phase = tournament_phase_melee }
				random_attending_character = {
					limit = {
						exists = var:contest_aptitude
						NOR = {
							this = root
							is_landed = yes
							has_any_good_relationship_with_character_trigger = { CHARACTER = root }	
							is_consort_of = root
							is_close_or_extended_family_of = root
							opinion = {
								target = root
								value >= 25
							}
						}
						save_temporary_scope_as = victim_temp
						scope:activity = {
							trigger_if = {
								limit = { has_current_phase = tournament_phase_melee }
								NAND = {
									root = {
										is_in_guest_subset = { name = team_alpha }
									}
									scope:victim_temp = {
										is_in_guest_subset = { name = team_alpha }
									}
								}
								NAND = {
									root = {
										is_in_guest_subset = { name = team_beta }
									}
									scope:victim_temp = {
										is_in_guest_subset = { name = team_beta }
									}
								}
							}
						}
					}
					tournament_savagely_beaten_relations_effect = yes
				}
			}
			else = {
				if = {
					limit = { root = scope:versus_matchee }
					scope:versus_matcher = {
						save_scope_as = wrathful_victim
						save_scope_as = contest_loser
					}
				}
				else = {
					scope:versus_matchee = {
						save_scope_as = wrathful_victim
						save_scope_as = contest_loser
					}
				}
				scope:contest_loser = {
					show_as_tooltip = { tournament_savagely_beaten_relations_effect = yes }
				}
			}
		}
		if = {
			limit = {
				scope:activity = { has_current_phase = tournament_phase_melee }
			}
			tournament_pivotal_flavor_variable_effect = { CONTEST = melee ID = 0910 }
		}
		else_if = {
			limit = {
				scope:activity = { has_current_phase = tournament_phase_duel }
			}
			tournament_pivotal_flavor_variable_effect = { CONTEST = duel ID = 0910 }
		}
		else_if = {
			limit = {
				scope:activity = { has_current_phase = tournament_phase_wrestling }
			}
			tournament_pivotal_flavor_variable_effect = { CONTEST = wrestling ID = 0910 }
		}
	}

	option = { # Let loose
		name = contest_events.0910.a
		save_scope_as = wrathful_contestant
		show_as_tooltip = { tournament_savagely_beaten_outcome_effect = yes }
		stress_impact = {
			base = medium_stress_impact_loss
			compassionate = medium_stress_impact_gain
			calm = medium_stress_impact_gain
			just = medium_stress_impact_gain
		}
		ai_chance = {
			base = 10
			ai_value_modifier = {
				ai_rationality = -1
				ai_energy = 1
			}
			opinion_modifier = {
				opinion_target = scope:wrathful_victim
				multiplier = 1
			}
		}
	}

	option = { # Calm down
		name = contest_events.0910.b
		stress_impact = {
			wrathful = medium_stress_impact_gain
			berserker = medium_stress_impact_gain
			stubborn = medium_stress_impact_gain
			arbitrary = medium_stress_impact_gain
		}
		ai_chance = {
			base = 10
			ai_value_modifier = {
				ai_rationality = 1
				ai_energy = -1
			}
			opinion_modifier = {
				opinion_target = scope:wrathful_victim
				multiplier = -1
			}
		}
	}

	after = {
		scope:wrathful_contestant = { trigger_event = contest_events.0911 }
	}
}

contest_events.0911 = {
	type = activity_event
	title = contest_events.0911.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { this = scope:wrathful_contestant }
				desc = contest_events.0911.wrathful
			}
			triggered_desc = {
				trigger = {
					scope:activity = { has_current_phase = tournament_phase_melee }
				}
				desc = contest_events.0911.melee
			}
			triggered_desc = {
				trigger = {
					scope:activity = { has_current_phase = tournament_phase_wrestling }
				}
				desc = contest_events.0911.wrestling
			}
			triggered_desc = {
				trigger = {
					scope:activity = { has_current_phase = tournament_phase_duel }
				}
				desc = contest_events.0911.duel
			}
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:wrathful_victim = { is_alive = no }
				}
				desc = contest_events.0911.dead
			}
			desc = contest_events.0911.wound
		}
		triggered_desc = {
			trigger = { exists = scope:angry_host }
			desc = contest_events.0911.angry_host
		}
	}		
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = scope:wrathful_contestant
		animation = anger
	}
	right_portrait = {
		character = scope:wrathful_victim
		animation = loss_1
	}
	lower_right_portrait = {
		character = scope:host
		trigger = {
			NOR = {
				scope:wrathful_contestant = scope:host
				scope:wrathful_victim = scope:host
			}
		}
	}

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes		
	}

	immediate = {
		tournament_savagely_beaten_outcome_effect = yes
		if = {
			limit = {
				NOT = { this = scope:host }
				scope:host = { is_ai = yes }
			}
			scope:host = {
				hidden_effect = {
					random = {
						chance = 50
						opinion_modifier = {
							opinion_target = root
							multiplier = 0.5
						}
						save_scope_as = angry_host
					}
				}
			}
		}
		if = {
			limit = { exists = scope:angry_host }
			scope:wrathful_contestant = {
				custom_tooltip = tournament_contest_disqualify_tt
				remove_variable = contest_aptitude
				if = {
					limit = { is_ai = yes }
					add_opinion = {
						modifier = tournament_disqualified_opinion
						target = scope:wrathful_contestant
						opinion = -20
					}
				}
			}
		}
		scope:wrathful_victim = {
			if = {
				limit = { is_alive = no }
				scope:activity = {
					add_activity_log_entry = {
						key = contest_savagely_pummeled_death_log
						tags = { bad death }
						score = 10
						character = scope:wrathful_contestant
						target = scope:wrathful_victim
					}
				}
			}
			else = {
				scope:activity = {
					add_activity_log_entry = {
						key = contest_savagely_pummeled_log
						tags = { bad }
						score = 10
						character = scope:wrathful_contestant
						target = scope:wrathful_victim
					}
				}
			}
		}
	}

	option = { # Oh well
		name = {
			text = contest_events.0911.a.dead
			trigger = {
				scope:wrathful_victim = { is_alive = no }
				exists = scope:wrathful_contestant
			}
		}
		name = {
			text = contest_events.0911.a.wound
			trigger = { this = scope:wrathful_contestant }
		}
		name = {
			text = contest_events.0911.a
			trigger = {
				NOT = { this = scope:wrathful_contestant }
			}
		}
		trigger = {
			NOT = { exists = scope:angry_host }
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_energy = -1
				ai_honor = -0.5
			}
			modifier = {
				has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:wrathful_victim }
				factor = 0.5
			}
			modifier = {
				has_any_good_relationship_with_character_trigger = { CHARACTER = scope:wrathful_contestant }
				factor = 2
			}
		}
	}

	option = { # Oh well
		name = {
			text = contest_events.0911.c.dead
			trigger = {
				scope:wrathful_victim = { is_alive = no }
			}
		}
		name = {
			text = contest_events.0911.c
			trigger = {
				scope:wrathful_victim = { is_alive = yes }
			}
		}
		trigger = { exists = scope:angry_host }
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_energy = -1
				ai_honor = -0.5
			}
			modifier = {
				has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:wrathful_victim }
				factor = 0.5
			}
			modifier = {
				has_any_good_relationship_with_character_trigger = { CHARACTER = scope:wrathful_contestant }
				factor = 2
			}
		}
	}

	after = {
		scope:activity = {
			every_attending_character = {
				limit = {
					is_ai = no
					NOT = { this = root }
				}
				trigger_event = {
					id = contest_events.0912
					days = 1
				}
			}
		}
	}
}

contest_events.0912 = {
	type = activity_event
	title = contest_events.0911.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:activity = { has_current_phase = tournament_phase_melee }
				}
				desc = contest_events.0911.melee
			}
			triggered_desc = {
				trigger = {
					scope:activity = { has_current_phase = tournament_phase_wrestling }
				}
				desc = contest_events.0911.wrestling
			}
			triggered_desc = {
				trigger = {
					scope:activity = { has_current_phase = tournament_phase_duel }
				}
				desc = contest_events.0911.duel
			}
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:wrathful_victim = { is_alive = no }
				}
				desc = contest_events.0912.dead
			}
			desc = contest_events.0912.wound
		}
		triggered_desc = {
			trigger = { exists = scope:angry_host }
			desc = contest_events.0911.angry_host
		}
	}
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = scope:wrathful_contestant
		animation = anger
	}
	right_portrait = {
		character = scope:wrathful_victim
		animation = loss_1
	}
	lower_right_portrait = {
		character = scope:host
		trigger = {
			NOR = {
				scope:wrathful_contestant = scope:host
				scope:wrathful_victim = scope:host
			}
		}
	}

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes		
	}

	immediate = {
		show_as_tooltip = {
			scope:wrathful_victim = {
				if = {
					limit = { is_alive = no }
					override_death_killer_effect = {
						death_reason = death_contest_melee_accident
						killer = scope:wrathful_contestant
					}
				}
				else_if = {
					limit = { has_trait = wounded_1 }
					add_trait = wounded_1
				}
				else_if = {
					limit = { has_trait = wounded_1 }
					add_trait = wounded_1
				}
				else_if = {
					limit = { has_trait = wounded_1 }
					add_trait = wounded_1
				}
			}
		}
	}

	option = { # Oh well
		name = {
			text = contest_events.0911.a.dead
			trigger = {
				scope:wrathful_victim = { is_alive = no }
			}
		}
		name = {
			text = contest_events.0911.a
			trigger = {
				scope:wrathful_victim = { is_alive = yes }
			}
		}
		trigger = {
			NOT = { exists = scope:angry_host }
		}
	}

	option = { # This behavior won't be tolerated
		name = contest_events.0912.b
		trigger = {
			NOT = { this = scope:wrathful_contestant }
			this = scope:host
			is_ai = no
		}
		scope:wrathful_contestant = {
			custom_tooltip = tournament_contest_disqualify_tt
			remove_variable = contest_aptitude
		}
		reverse_add_opinion = {
			modifier = tournament_disqualified_opinion
			target = scope:wrathful_contestant
			opinion = -20
		}
		stress_impact = {
			arbitrary = medium_stress_impact_gain
			callous = medium_stress_impact_gain
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_energy = -1
				ai_honor = -0.5
			}
			modifier = {
				has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:wrathful_contestant }
				factor = 0.5
			}
			modifier = {
				has_any_good_relationship_with_character_trigger = { CHARACTER = scope:wrathful_victim }
				factor = 2
			}
		}
	}

	option = { # Oh well
		name = {
			text = contest_events.0911.c.dead
			trigger = {
				scope:wrathful_victim = { is_alive = no }
			}
		}
		name = {
			text = contest_events.0911.c
			trigger = {
				scope:wrathful_victim = { is_alive = yes }
			}
		}
		trigger = { exists = scope:angry_host }
	}
}

#############################
#############################
###   MELEE - 1000-1499   ###
#############################
#############################

##################################################
# Attack Murder Intent Target - Unplanned
# by Joe Parkin
# 1100-1102
##################################################

contest_events.1100 = { # Start
	type = activity_event
	title = contest_events.1100.t
	desc = contest_events.1100.desc
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	cooldown = { years = 1 }
	left_portrait = {
		character = root
		scripted_animation = duel_wield_weapon
	}
	right_portrait = {
		character = scope:murder_target
		animation = fear
	}

	widget = {
		gui = "event_window_widget_activity_intent"
		container = "custom_widgets_container"
	}

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes
		
		#Standard checks.
		has_activity_intent = murder_attendee_intent
		exists = intent_target
		exists = var:contest_aptitude
		exists = intent_target.var:contest_aptitude
		is_in_guest_subset = { name = qualified }
		intent_target = {
			is_in_guest_subset = { name = qualified }
		}
	}

	immediate = {
		save_scope_as = murder_actor
		intent_target = { save_scope_as = murder_target }
	}

	option = { # Have at it
		name = contest_events.1100.a
		random_list = {
			5 = {
				show_chance = no
				desc = contest_events_murder_intent_miss
				save_scope_value_as = {
					name = murder_intent_attempt
					value = 0
				}
			}
			10 = {
				show_chance = no
				desc = contest_events_murder_intent_wound
				trigger = {
					scope:murder_target = {
						has_trait_rank = {
							trait = wounded
							rank < 3
						}
					}
				}
				save_scope_value_as = {
					name = murder_intent_attempt
					value = 1
				}
				show_as_tooltip = {
					scope:murder_target = {
						increase_wounds_effect = { REASON = contest_melee_accident }
					}
				}
			}
			5 = {
				show_chance = no
				desc = contest_events_murder_intent_kill
				save_scope_value_as = {
					name = murder_intent_attempt
					value = 2
				}
				show_as_tooltip = {
					scope:murder_target = {
						override_death_killer_effect = {
							death_reason = death_contest_melee_accident
							killer = scope:murder_actor
						}
					}
				}
			}
		}
		stress_impact = {
			brave = minor_stress_impact_gain
			just = minor_stress_impact_gain
		}
		scope:murder_target = { trigger_event = contest_events.1102 }
		trigger_event = contest_events.1101
	}

	option = { # This is not honorable
		name = contest_events.1100.b
		stress_impact = {
			craven = minor_stress_impact_gain
			arbitrary = minor_stress_impact_gain
		}
	}
}

contest_events.1101 = { # Outcome
	type = activity_event
	title = contest_events.1101.t
	desc = {
		desc = contest_events.1101.desc
		first_valid = {
			triggered_desc = {
				trigger = { scope:murder_intent_attempt = 0 }
				desc = contest_events.1101.miss
			}
			triggered_desc = {
				trigger = { scope:murder_intent_attempt = 1 }
				desc = contest_events.1101.wound
			}
			desc = contest_events.1101.kill
		}
	}
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = scope:murder_actor
		scripted_animation = duel_wield_weapon
	}
	right_portrait = {
		character = scope:murder_target
		animation = fear
	}

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes
		
		#Standard checks.
	}

	immediate = {
		show_as_tooltip = {
			switch = {
				trigger = scope:murder_intent_attempt
				0 = {}
				1 = {
					scope:murder_target = {
						switch = {
							trigger = has_trait
							wounded_1 = { add_trait = wounded_1 }
							wounded_2 = { add_trait = wounded_2 }
							wounded_3 = { add_trait = wounded_3 }
						}
					}
				}
				2 = {
					scope:murder_target = {
						override_death_killer_effect = {
							death_reason = death_contest_melee_accident
							killer = scope:murder_actor
						}
					}
				}
			}
		}
		scope:murder_target = {
			if = {
				limit = {
					is_alive = yes
					is_ai = yes
				}
				progress_towards_rival_effect = {
					REASON = rival_tournament_attempted_murder
					CHARACTER = scope:murder_actor
					OPINION = default_rival_opinion
				}
			}
		}
	}

	option = { # Damn!
		name = contest_events.1101.a
		trigger = { scope:murder_intent_attempt = 0 }
	}

	option = { # At least something
		name = contest_events.1101.b
		trigger = { scope:murder_intent_attempt = 1 }
	}

	option = { # Yes!
		name = contest_events.1101.c
		trigger = { scope:murder_intent_attempt = 2 }
	}
}

contest_events.1102 = { # Receiver
	type = activity_event
	title = contest_events.1102.t
	desc = {
		desc = contest_events.1102.desc
		first_valid = {
			triggered_desc = {
				trigger = { scope:murder_intent_attempt = 0 }
				desc = contest_events.1102.miss
			}
			triggered_desc = {
				trigger = { scope:murder_intent_attempt = 1 }
				desc = contest_events.1102.wound
			}
			desc = contest_events.1102.kill
		}
	}
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = scope:murder_target
		animation = fear
	}
	right_portrait = {
		character = scope:murder_actor
		scripted_animation = duel_wield_weapon
	}

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes
	}

	immediate = {
		switch = {
			trigger = scope:murder_intent_attempt
			0 = {}
			1 = {
				scope:murder_target = {
					increase_wounds_effect = { REASON = contest_melee_accident }
				}
			}
			2 = {
				scope:murder_target = {
					add_character_flag = died_in_contest_flag
					override_death_killer_effect = {
						death_reason = death_contest_melee_accident
						killer = scope:murder_actor
					}
				}
			}
		}
	}

	option = { # Damn you!
		name = contest_events.1102.a
		trigger = { scope:murder_intent_attempt = 0 }
		progress_towards_rival_effect = {
			REASON = rival_tournament_attempted_murder
			CHARACTER = scope:murder_actor
			OPINION = default_rival_opinion
		}
	}

	option = { # Ouch!
		name = contest_events.1102.b
		trigger = { scope:murder_intent_attempt = 1 }
		progress_towards_rival_effect = {
			REASON = rival_tournament_attempted_murder
			CHARACTER = scope:murder_actor
			OPINION = default_rival_opinion
		}
	}

	option = { # Argh...
		name = contest_events.1102.c
		trigger = { scope:murder_intent_attempt = 2 }
	}
}

##################################################
# Attack Murder Intent Target - Planned
# by Joe Parkin
# 1100-1102
##################################################

contest_events.1110 = { # Start
	type = activity_event
	title = contest_events.1110.t
	desc = contest_events.1110.desc
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = root
		animation = schadenfreude
	}
	right_portrait = {
		character = scope:murder_target
		animation = war_over_win
	}
	cooldown = { years = 1 }

	widget = {
		gui = "event_window_widget_activity_intent"
		container = "custom_widgets_container"
	}

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes
		
		#Standard checks.
		has_activity_intent = murder_attendee_intent
		exists = intent_target.var:contest_aptitude
		exists = var:contest_murder_attempt
		intent_target = var:contest_murder_target
	}

	immediate = {
		save_scope_as = murder_actor
		intent_target = { save_scope_as = murder_target }
	}

	option = { # Have at it
		name = contest_events.1110.a
		duel = {
			skill = prowess
			value = decent_skill_rating
			5 = {
				show_chance = no
				desc = contest_events_murder_intent_miss
				save_scope_value_as = {
					name = murder_intent_attempt
					value = 0
				}
			}
			10 = {
				show_chance = no
				desc = contest_events_murder_intent_wound
				trigger = {
					scope:murder_target = {
						has_trait_rank = {
							trait = wounded
							rank < 3
						}
					}
				}
				save_scope_value_as = {
					name = murder_intent_attempt
					value = 1
				}
				show_as_tooltip = {
					scope:murder_target = {
						increase_wounds_effect = { REASON = contest_melee_accident }
					}
				}
			}
			5 = {
				show_chance = no
				desc = contest_events_murder_intent_kill
				save_scope_value_as = {
					name = murder_intent_attempt
					value = 2
				}
				show_as_tooltip = {
					scope:murder_target = {
						override_death_killer_effect = {
							death_reason = death_contest_melee_accident
							killer = scope:murder_actor
						}
					}
				}
			}
		}
		stress_impact = {
			brave = minor_stress_impact_gain
			just = minor_stress_impact_gain
		}
		scope:murder_target = { trigger_event = contest_events.1112 }
		trigger_event = contest_events.1111
	}

	option = { # This is not honorable
		name = contest_events.1110.b
		stress_impact = {
			craven = minor_stress_impact_gain
			arbitrary = minor_stress_impact_gain
		}
	}
}

contest_events.1111 = { # Outcome
	type = activity_event
	title = contest_events.1101.t
	desc = {
		desc = contest_events.1101.desc
		first_valid = {
			triggered_desc = {
				trigger = { scope:murder_intent_attempt = 0 }
				desc = contest_events.1101.miss
			}
			triggered_desc = {
				trigger = { scope:murder_intent_attempt = 1 }
				desc = contest_events.1101.wound
			}
			desc = contest_events.1101.kill
		}
	}
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = scope:murder_actor
		scripted_animation = duel_wield_weapon
	}
	right_portrait = {
		character = scope:murder_target
		animation = fear
	}

	immediate = {
		show_as_tooltip = {
			switch = {
				trigger = scope:murder_intent_attempt
				0 = {}
				1 = {
					scope:murder_target = {
						switch = {
							trigger = has_trait
							wounded_1 = { add_trait = wounded_1 }
							wounded_2 = { add_trait = wounded_2 }
							wounded_3 = { add_trait = wounded_3 }
						}
					}
				}
				2 = {
					scope:murder_target = {
						add_character_flag = died_in_contest_flag
						override_death_killer_effect = {
							death_reason = death_contest_melee_accident
							killer = scope:murder_actor
						}
					}
				}
			}
		}
		scope:murder_target = {
			if = {
				limit = {
					is_alive = yes
					is_ai = yes
				}
				progress_towards_rival_effect = {
					REASON = rival_tournament_attempted_murder
					CHARACTER = scope:murder_actor
					OPINION = default_rival_opinion
				}
			}
		}
	}

	option = { # Damn!
		name = contest_events.1101.a
		trigger = { scope:murder_intent_attempt = 0 }
	}

	option = { # At least something
		name = contest_events.1101.b
		trigger = { scope:murder_intent_attempt = 1 }
	}

	option = { # Yes!
		name = contest_events.1101.c
		trigger = { scope:murder_intent_attempt = 2 }
	}
}

contest_events.1112 = { # Receiver
	type = activity_event
	title = contest_events.1102.t
	desc = {
		desc = contest_events.1102.desc
		first_valid = {
			triggered_desc = {
				trigger = { scope:murder_intent_attempt = 0 }
				desc = contest_events.1102.miss
			}
			triggered_desc = {
				trigger = { scope:murder_intent_attempt = 1 }
				desc = contest_events.1102.wound
			}
			desc = contest_events.1102.kill
		}
	}
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = scope:murder_target
		animation = fear
	}
	right_portrait = {
		character = scope:murder_actor
		scripted_animation = duel_wield_weapon
	}

	trigger = {
	}

	immediate = {
		switch = {
			trigger = scope:murder_intent_attempt
			0 = {}
			1 = {
				scope:murder_target = {
					increase_wounds_effect = { REASON = contest_melee_accident }
				}
			}
			2 = {
				scope:murder_target = {
					override_death_killer_effect = {
						death_reason = death_contest_melee_accident
						killer = scope:murder_actor
					}
				}
			}
		}
	}

	option = { # Damn you!
		name = contest_events.1102.a
		trigger = { scope:murder_intent_attempt = 0 }
		progress_towards_rival_effect = {
			REASON = rival_tournament_attempted_murder
			CHARACTER = scope:murder_actor
			OPINION = default_rival_opinion
		}
	}

	option = { # Ouch!
		name = contest_events.1102.b
		trigger = { scope:murder_intent_attempt = 1 }
		progress_towards_rival_effect = {
			REASON = rival_tournament_attempted_murder
			CHARACTER = scope:murder_actor
			OPINION = default_rival_opinion
		}
	}

	option = { # Argh...
		name = contest_events.1102.c
		trigger = { scope:murder_intent_attempt = 2 }
	}
}

##################################################
# Attack Murder Intent Target (AI)
# by Joe Parkin
# 1120
##################################################

contest_events.1120 = {
	type = character_event
	cooldown = { years = 1 }
	hidden = yes

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes
		
		#Standard checks.
		is_ai = yes
		has_activity_intent = murder_attendee_intent
		exists = intent_target
		intent_target = { is_ai = yes }
		scope:activity = {
			any_guest_subset = {
				name = qualified
				phase = tournament_phase_melee
				this = root.intent_target
			}
		}
	}

	immediate = {
		save_scope_as = murder_actor
		intent_target = { save_scope_as = murder_target }
		duel = {
			skill = prowess
			target = scope:murder_target
			5 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
			}
			10 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				tournament_accidental_death_effect = yes
			}
			5 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				scope:murder_target = {
					increase_wounds_effect = { REASON = contest_melee_accident }
				}
			}
		}
	}
}

##################################################
# Mortal Combat - Attack Rival
# by Joe Parkin
# 1130
##################################################

contest_events.1130 = { # Setup
	type = character_event
	hidden = yes
	cooldown = { years = 1 }

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes
		
		#Standard checks.
		scope:activity = { has_current_phase = tournament_phase_melee }
		exists = var:contest_aptitude
		any_relation = {
			type = rival
			is_participant_in_activity = scope:activity
			exists = var:contest_aptitude
			activity_is_valid_tournament_contestant = yes
			NOT = { has_character_flag = busy_in_contest_event }
			save_temporary_scope_as = rival_temp
		}
	}

	weight_multiplier = {
		base = 1
		modifier = {
			factor = 2
			has_activity_intent = murder_attendee_intent
			exists = intent_target
			any_relation = {
				type = rival
				this = root.intent_target
				is_participant_in_activity = scope:activity
				exists = var:contest_aptitude
				activity_is_valid_tournament_contestant = yes
				NOT = { has_character_flag = busy_in_contest_event }
			}
		}
	}

	immediate = {
		save_scope_as = contest_opponent_a
		add_character_flag = busy_in_contest_event
		random_relation = {
			type = rival
			limit = {
				activity_is_valid_tournament_contestant = yes
				NOT = { has_character_flag = busy_in_contest_event }
				save_temporary_scope_as = rival_temp
				scope:activity = {
					any_guest_subset = {
						name = qualified
						this = scope:rival_temp
						phase = tournament_phase_melee
					}
				}
			}
			save_scope_as = contest_opponent_b
			add_character_flag = busy_in_contest_event
		}
		trigger_event = contest_events.1131
		scope:contest_opponent_b = {
			if = {
				limit = { is_ai = yes }
				trigger_event = contest_events.1131
			}
		}
		trigger_event = {
			id = contest_events.1132
			days = 1
		}
	}
}

contest_events.1131 = { # Agency
	type = activity_event
	title = contest_events.1131.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					activity_tournament_same_team_trigger = { FIRST = root SECOND = scope:portrait_scope }
				}
				desc = contest_events.1131.team
			}
			desc = contest_events.1131.enemy
		}
		desc = contest_events.1131.desc
	}
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = root
		scripted_animation = duel_wield_weapon
	}
	right_portrait = {
		character = scope:portrait_scope
		scripted_animation = duel_wield_weapon
	}

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes
	}

	immediate = {
		tournament_pivotal_flavor_variable_effect = { CONTEST = melee ID = 1131 }
		if = {
			limit = { this = scope:contest_opponent_a }
			scope:contest_opponent_b = { save_scope_as = portrait_scope }
		}
		else = {
			scope:contest_opponent_a = { save_scope_as = portrait_scope }
		}
		add_character_flag = wear_armor
		scope:portrait_scope = {
			add_character_flag = wear_armor
		}
	}

	option = { # Fight
		name = contest_events.1131.a
		show_as_tooltip = {
			duel = {
				skill = prowess
				target = scope:portrait_scope
				10 = {
					desc = contest_events.1131.win
					compare_modifier = {
						value = scope:duel_value
						multiplier = 3.5
						min = -49
					}
					add_character_flag = contest_agency_win
					show_as_tooltip = {
						scope:portrait_scope = {
							increase_wounds_effect = { REASON = contest_melee_accident }
							random = {
								chance = 33
								override_death_killer_effect = {
									death_reason = death_contest_melee_accident
									killer = root
								}
							}
						}
					}
					min = 5
				}
				10 = {
					desc = contest_events.1131.lose
					compare_modifier = {
						value = scope:duel_value
						multiplier = -3.5
						min = -49
					}
					show_as_tooltip = {
						increase_wounds_effect = { REASON = contest_melee_accident }
						random = {
							chance = 33
							override_death_killer_effect = {
								death_reason = death_contest_melee_accident
								killer = scope:portrait_scope
							}
						}
					}
					min = 5
				}
			}
		}
		stress_impact = {
			craven = major_stress_impact_gain
			forgiving = major_stress_impact_gain
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = 0.5
				ai_energy = 0.5
				ai_vengefulness = 0.5
			}
		}
	}

	option = { # Flight
		name = contest_events.1131.b
		flavor = contest_events.1131.b.flavor
		add_prestige = minor_prestige_loss
		add_character_flag = {
			flag = contest_agency_fled
			months = 1
		}
		show_as_tooltip = {
			random = {
				chance = 50
				increase_wounds_effect = { REASON = contest_melee_accident }
			}
			random = {
				chance = 16
				override_death_killer_effect = {
					death_reason = death_contest_melee_accident
					killer = scope:portrait_scope
				}
			}
		}
		stress_impact = {
			brave = major_stress_impact_gain
			vengeful = major_stress_impact_gain
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_boldness = -1
				ai_energy = -1
				ai_vengefulness = -1
			}
		}
	}
	after = {
		remove_character_flag = wear_armor
		scope:portrait_scope = {
			remove_character_flag = wear_armor
		}
	}
}

contest_events.1132 = { # Outcome
	type = activity_event
	hidden = yes

	immediate = {
		hidden_effect = {
			random_list = {
				1 = {
					modifier = { add = scope:contest_opponent_a.contest_foot_aptitude_value }
					modifier = {
						trigger = {
							scope:contest_opponent_a = { has_character_flag = contest_agency_win }
						}
						factor = 1.25
					}
					modifier = {
						trigger = {
							scope:contest_opponent_a = { has_character_flag = contest_agency_fled }
						}
						factor = 0
					}
					scope:contest_opponent_a = { save_scope_as = agency_winner }
					scope:contest_opponent_b = { save_scope_as = agency_loser }
				}
				1 = {
					modifier = { add = scope:contest_opponent_b.contest_foot_aptitude_value }
					modifier = {
						trigger = {
							scope:contest_opponent_b = { has_character_flag = contest_agency_win }
						}
						factor = 1.25
					}
					modifier = {
						trigger = {
							scope:contest_opponent_b = { has_character_flag = contest_agency_fled }
						}
						factor = 0
					}
					scope:contest_opponent_b = { save_scope_as = agency_winner }
					scope:contest_opponent_a = { save_scope_as = agency_loser }
				}
				1 = {
					trigger = {
						scope:contest_opponent_a = { has_character_flag = contest_agency_fled }
						scope:contest_opponent_b = { has_character_flag = contest_agency_fled }
					}
					save_scope_as = both_fled
					scope:contest_opponent_a = { save_scope_as = agency_winner }
					scope:contest_opponent_b = { save_scope_as = agency_loser }
				}
			}
		}
		scope:agency_loser = {
			random = {
				chance = 100
				modifier = {
					factor = 0.5
					has_character_flag = contest_agency_fled
				}
				add_character_flag = { flag = agency_wound months = 1 }
				increase_wounds_effect = { REASON = contest_melee_accident }
			}
			random = {
				chance = 33
				modifier = {
					factor = 0.5
					has_character_flag = contest_agency_fled
				}
				override_death_killer_effect = {
					death_reason = death_contest_melee_accident
					killer = scope:agency_winner
				}
				scope:activity = {
					add_activity_log_entry = {
						key = tournament_accident_melee_killer_log
						tags = { bad }
						score = 10
						character = scope:agency_loser
						target = scope:agency_winner
						location = scope:contest_location
					}
				}
			}
			trigger_event = contest_events.1133
		}
		scope:agency_winner = { trigger_event = contest_events.1133 }
		scope:contest_opponent_a = {
			if = {
				limit = { has_character_flag = contest_agency_win }
				remove_character_flag = contest_agency_win
			}
			remove_character_flag = busy_in_contest_event
		}
		scope:contest_opponent_b = {
			if = {
				limit = { has_character_flag = contest_agency_win }
				remove_character_flag = contest_agency_win
			}
			remove_character_flag = busy_in_contest_event
		}
	}
}

contest_events.1133 = { # Outcome Ping
	type = activity_event
	title = contest_events.1133.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { exists = scope:both_fled }
				desc = contest_events.1133.fled_both
			}
			triggered_desc = {
				trigger = {
					has_character_flag = contest_agency_fled
					NOT = {
						scope:portrait_scope = { has_character_flag = contest_agency_fled }
					}
					activity_tournament_same_team_trigger = { FIRST = root SECOND = scope:portrait_scope }
				}
				desc = contest_events.1133.fled_team
			}
			triggered_desc = {
				trigger = {
					has_character_flag = contest_agency_fled
					NOR = {
						scope:portrait_scope = { has_character_flag = contest_agency_fled }
						activity_tournament_same_team_trigger = { FIRST = root SECOND = scope:portrait_scope }
					}
				}
				desc = contest_events.1133.fled_enemy
			}
			triggered_desc = {
				trigger = {
					scope:portrait_scope = { has_character_flag = contest_agency_fled }
					activity_tournament_same_team_trigger = { FIRST = root SECOND = scope:portrait_scope }
				}
				desc = contest_events.1133.chase_team
			}
			triggered_desc = {
				trigger = {
					scope:portrait_scope = { has_character_flag = contest_agency_fled }
					NOT = {
						activity_tournament_same_team_trigger = { FIRST = root SECOND = scope:portrait_scope }
					}
				}
				desc = contest_events.1133.chase_enemy
			}
			desc = contest_events.1133.fight
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					NOT = {
						scope:portrait_scope = { has_character_flag = contest_agency_fled }
					}
					has_character_flag = contest_agency_fled
				}
				desc = contest_events.1133.fled
			}
			triggered_desc = {
				trigger = {
					NOT = { has_character_flag = contest_agency_fled }
					scope:portrait_scope = { has_character_flag = contest_agency_fled }
				}
				desc = contest_events.1133.chase
			}
			triggered_desc = {
				trigger = {
					NOT = { exists = scope:both_fled }
					is_alive = yes
					scope:portrait_scope = { is_alive = yes }
					NOR = {
						has_character_flag = agency_wound
						scope:portrait_scope = { has_character_flag = agency_wound }
						has_character_flag = contest_agency_fled
						scope:portrait_scope = { has_character_flag = contest_agency_fled }
					}
				}
				desc = contest_events.1133.chase
			}
			triggered_desc = {
				trigger = {
					NOT = { exists = scope:both_fled }
					is_alive = yes
					scope:portrait_scope = { is_alive = yes }
					NOR = {
						has_character_flag = agency_wound
						scope:portrait_scope = { has_character_flag = agency_wound }
						has_character_flag = contest_agency_fled
						scope:portrait_scope = { has_character_flag = contest_agency_fled }
					}
				}
				desc = contest_events.1133.nothing
			}
			triggered_desc = {
				trigger = {
					NOT = { exists = scope:both_fled }
					is_alive = yes
					has_character_flag = agency_wound
					has_character_flag = contest_agency_fled
					scope:portrait_scope = { is_alive = yes }
				}
				desc = contest_events.1133.wound_self_fled
			}
			triggered_desc = {
				trigger = {
					NOT = { exists = scope:both_fled }
					is_alive = yes
					scope:portrait_scope = { is_alive = yes }
					has_character_flag = agency_wound
				}
				desc = contest_events.1133.wound_self
			}
			triggered_desc = {
				trigger = {
					NOT = { exists = scope:both_fled }
					is_alive = yes
					scope:portrait_scope = {
						is_alive = yes
						has_character_flag = agency_wound
						has_character_flag = contest_agency_fled
					}
				}
				desc = contest_events.1133.wound_enemy_fled
			}
			triggered_desc = {
				trigger = {
					NOT = { exists = scope:both_fled }
					is_alive = yes
					scope:portrait_scope = {
						is_alive = yes
						has_character_flag = agency_wound
					}
				}
				desc = contest_events.1133.wound_enemy
			}
			triggered_desc = {
				trigger = {
					NOT = { exists = scope:both_fled }
					is_alive = yes
					scope:portrait_scope = {
						is_alive = no
						has_character_flag = contest_agency_fled
					}
				}
				desc = contest_events.1133.kill_fled
			}
			triggered_desc = {
				trigger = {
					NOT = { exists = scope:both_fled }
					is_alive = yes
					scope:portrait_scope = { is_alive = no }
				}
				desc = contest_events.1133.kill
			}
		}
	}
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = root
		triggered_animation = {
			trigger = {
				OR = {
					exists = scope:both_fled
					has_character_flag = contest_agency_fled
				}
			}
			animation = fear
		}
		triggered_animation = {
			trigger = { this = scope:agency_winner }
			animation = celebrate_sword
		}
		triggered_animation = {
			trigger = { this = scope:agency_loser }
			animation = loss_1
		}
	}
	right_portrait = {
		character = scope:portrait_scope
		triggered_animation = {
			trigger = {
				OR = {
					exists = scope:both_fled
					has_character_flag = contest_agency_fled
				}
			}
			animation = fear
		}
		triggered_animation = {
			trigger = { this = scope:agency_winner }
			animation = celebrate_sword
		}
		triggered_animation = {
			trigger = { this = scope:agency_loser }
			animation = loss_1
		}
	}

	trigger = { is_ai = no }

	immediate = {
		if = {
			limit = { this = scope:agency_winner }
			scope:agency_loser = { save_scope_as = portrait_scope }
		}
		else = {
			scope:agency_winner = { save_scope_as = portrait_scope }
		}
		if = {
			limit = {
				NOT = { exists = scope:both_fled }
			}
			scope:agency_loser = {
				tournament_wounded_or_dead_tooltip_effect = { CONTEST = melee }
			}
		}
		show_as_tooltip = {
			scope:portrait_scope = {
				if = {
					limit = { has_character_flag = contest_agency_fled }
					add_prestige = minor_prestige_loss
				}
			}
		}
		if = {
			limit = { exists = scope:both_fled }
		}
		else_if = {
			limit = { this = scope:agency_winner }
			custom_tooltip = contest_events.1131.win
		}
		else = { custom_tooltip = contest_events.1131.lose }
		add_character_flag = wear_armor
		scope:portrait_scope = {
			add_character_flag = wear_armor
		}
	}

	option = { # Option A
		name = {
			trigger = {
				exists = scope:both_fled
			}
			text = contest_events.1133.a.both_fled
		}
		name = {
			trigger = {
				this = scope:agency_winner
				scope:portrait_scope = { is_alive = yes }
			}
			text = contest_events.1133.a.wound
		}
		name = {
			trigger = {
				this = scope:agency_winner
				scope:portrait_scope = { is_alive = no }
			}
			text = contest_events.1133.a.kill
		}
		name = {
			trigger = {
				NOT = { this = scope:agency_winner }
			}
			text = contest_events.1133.a
		}
	}
	after = {
		remove_character_flag = wear_armor
		scope:portrait_scope = {
			remove_character_flag = wear_armor
		}
	}
}

###############################
###############################
###   ARCHERY - 1500-1999   ###
###############################
###############################

##################################################
# Tragedy at the Butts
# by Joe Parkin
# 1520-1521
##################################################

contest_events.1520 = { # Contestant
	type = activity_event
	title = contest_events.1520.t
	desc = {
		desc = contest_events.1520.opening
		first_valid = {
			triggered_desc = {
				trigger = { scope:contestant.var:contest_aptitude < medium_skill_rating }
				desc = contest_events.1520.unskilled
			}
			desc = contest_events.1520.skilled
		}
		desc = contest_events.1520.desc
	}
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = scope:contestant
		animation = shock
	}
	right_portrait = {
		character = scope:host
		animation = stress
		trigger = {
			NOT = { scope:host = scope:contestant }
		}
	}
	cooldown = { years = 2 }

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes

		#Standard checks.
		exists = var:contest_aptitude
		is_in_guest_subset = { name = qualified }
		NOT = {
			scope:activity = { has_variable = contest_events_1520_cooldown }
		}
		NOT = { has_character_flag = archery_contest_event_cooldown }
	}

	immediate = {
		play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_negative_reaction"
		add_character_flag = {
			flag = archery_contest_event_cooldown
			years = 1
		}
		scope:activity = { set_variable = contest_events_1520_cooldown }
		tournament_pivotal_flavor_variable_effect = { CONTEST = archery ID = 1520 }
		save_scope_as = contestant
		activity_tournament_change_contestant_score_effect = { SCORE = decrease_medium }
		scope:activity = {
			activity_location = { save_scope_as = contest_location }
		}
	}

	option = { # Compensate
		name = contest_events.1520.a
		scope:activity = {
			add_activity_log_entry = {
				key = tournament_contest_1520_log
				tags = { contest bad }
				score = 10
				character = scope:contestant

				#Effect
				scope:contestant = { remove_short_term_gold = minor_gold_value }
			}
		}
		if = {
			limit = {
				NOT = { scope:contestant = scope:host }
			}
			reverse_add_opinion = {
				target = scope:host
				modifier = tournament_compensated_tragedy_opinion
				opinion = 10
			}
		}
		stress_impact = {
			greedy = medium_stress_impact_gain
			callous = medium_stress_impact_gain
		}
		ai_chance = {
			base = 10
			ai_value_modifier = {
				ai_greed = -1
				ai_honor = 0.5
				ai_boldness = -0.5
				ai_compassion = 1
			}
		}
	}

	option = { # Oh well
		name = contest_events.1520.b
		scope:activity = {
			add_activity_log_entry = {
				key = tournament_contest_1520_log
				tags = { contest bad }
				score = 10
				character = scope:contestant

				#Effect
				scope:activity.activity_location.county = {
					add_county_modifier = {
						modifier = tournament_butt_tragedy_modifier
						years = 5
					}
				}
			}
		}
		if = {
			limit = {
				NOT = { scope:contestant = scope:host }
			}
			reverse_add_opinion = {
				target = scope:host
				modifier = tournament_upset_crowd_opinion
				opinion = -10
			}
		}
		stress_impact = {
			generous = medium_stress_impact_gain
			compassionate = medium_stress_impact_gain
		}
		ai_chance = {
			base = 10
			ai_value_modifier = {
				ai_greed = 0.5
				ai_honor = -0.5
				ai_boldness = 0.5
				ai_compassion = -1
			}
		}
	}

	option = { # Resign
		name = contest_events.1520.c
		remove_variable = contest_aptitude
		save_scope_as = resign_target
		scope:activity = {
			add_activity_log_entry = {
				key = tournament_contest_1520_log
				tags = { contest bad }
				score = 10
				character = scope:contestant

				# Effects
				custom_description = {
					text = tournament_contest_resign_tt
					subject = scope:contestant
				}
			}
		}
		stress_impact = {
			ambitious = medium_stress_impact_gain
			callous = medium_stress_impact_gain
		}
		ai_chance = {
			base = 10
			ai_value_modifier = {
				ai_greed = 0.5
				ai_honor = 0.5
				ai_energy = -1
				ai_boldness = 0.5
				ai_compassion = 0.5
			}
		}
	}

	after = {
		scope:activity = {
			every_attending_character = {
				limit = {
					NOT  = { this = scope:contestant }
					is_ai = no
				}
				trigger_event = contest_events.1521
			}
		}
	}
}

contest_events.1521 = { # Ping
	type = activity_event
	title = contest_events.1521.t
	desc = {
		desc = contest_events.1521.desc
		desc = contest_events.1520.desc
		first_valid = {
			triggered_desc = {
				trigger = {
					NOT = {
						scope:activity = {
							any_guest_subset = {
								name = qualified
								this = scope:contestant
								phase = tournament_phase_archery
							}
						}
					}
				}
				desc = contest_events.1521.resigned
			}
			triggered_desc = {
				trigger = {
					scope:activity.activity_location.county = { has_county_modifier = tournament_butt_tragedy_modifier }
				}
				desc = contest_events.1521.dismissed
			}
			desc = contest_events.1521.compensated
		}
	}
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = root
		animation = stress
	}
	right_portrait = {
		character = scope:contestant
		triggered_animation = {
			trigger = {
				scope:activity.activity_location.county = { has_county_modifier = tournament_butt_tragedy_modifier }
			}
			animation = eyeroll
		}
		triggered_animation = {
			trigger = {
				NOT = {
					scope:activity.activity_location.county = { has_county_modifier = tournament_butt_tragedy_modifier }
				}
			}
			animation = shock
		}
	}

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes
	}

	immediate = {
		show_as_tooltip = {
			scope:contestant = {
				if = {
					limit = {
						NOT = {
							scope:activity = {
								any_guest_subset = {
									name = qualified
									this = scope:contestant
									phase = tournament_phase_archery
								}
							}
						}
					}
					save_scope_as = resign_target
					custom_description = {
						text = tournament_contest_resign_tt
						subject = scope:resign_target
					}
				}
				else = {
					activity_tournament_change_contestant_score_effect = { SCORE = decrease_medium }
					if = {
						limit = {
							scope:activity.activity_location.county = { has_county_modifier = tournament_butt_tragedy_modifier }
						}
						show_as_tooltip = {
							scope:activity.activity_location.county = {
								add_county_modifier = {
									modifier = tournament_butt_tragedy_modifier
									years = 5
								}
							}
						}
						if = {
							limit = {
								NOR = {
									scope:host = scope:contestant
									scope:host = { is_ai = no }
								}
							}
							reverse_add_opinion = {
								target = scope:host
								modifier = tournament_upset_crowd_opinion
								opinion = -10
							}
						}
					}
					else = {
						remove_short_term_gold = minor_gold_value
						if = {
							limit = {
								NOR = {
									scope:host = scope:contestant
									scope:host = { is_ai = no }
								}
							}
							reverse_add_opinion = {
								target = scope:host
								modifier = tournament_compensated_tragedy_opinion
								opinion = 10
							}
						}
					}
				}
			}
		}
	}

	option = { # 
		name = contest_events.1521.a
	}
}

##################################################
# Nail on the Head
# by Joe Parkin
# 1530-1531
##################################################

contest_events.1530 = { # Contestant
	type = activity_event
	title = contest_events.1530.t
	desc = {
		desc = contest_events.1530.desc
	}
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = scope:contestant
		animation = happiness
	}

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes

		#Standard checks.
		exists = var:contest_aptitude
		scope:activity = {
			any_guest_subset_current_phase = {
				name = qualified
				this = root
			}
		}
		is_in_guest_subset = { name = qualified }
		OR = {
			var:contest_aptitude >= decent_skill_rating
			AND = {
				has_trait = tourney_participant
				has_trait_xp = {
					trait = tourney_participant
					track = bow
					value >= 25
				}
			}
		}
		NOT = {
			scope:activity = { has_variable = contest_events_1530_cooldown }
		}
		NOT = { has_character_flag = archery_contest_event_cooldown }
	}

	immediate = {
		play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_positive_reaction"
		add_character_flag = {
			flag = archery_contest_event_cooldown
			years = 1
		}
		scope:activity = { set_variable = contest_events_1530_cooldown }
		tournament_pivotal_flavor_variable_effect = { CONTEST = archery ID = 1530 }
		save_scope_as = contestant
		activity_tournament_change_contestant_score_effect = { SCORE = increase_medium }
	}

	option = { # Woo
		name = contest_events.1530.a
	}

	after = {
		scope:activity = {
			every_attending_character = {
				limit = {
					NOT  = { this = scope:contestant }
					is_ai = no
				}
				trigger_event = contest_events.1531
			}
		}
	}
}

contest_events.1531 = { # Ping
	type = activity_event
	title = contest_events.1531.t
	desc = {
		desc = contest_events.1531.desc
	}
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = scope:contestant
		animation = happiness
	}
	right_portrait = {
		character = root
		triggered_animation = {
			trigger = { exists = var:contest_aptitude }
			animation = eyeroll
		}
		triggered_animation = {
			trigger = {
				NOT = { exists = var:contest_aptitude }
			}
			animation = throne_room_applaud_1
		}
	}

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes

		#Standard checks.
	}

	immediate = {
		show_as_tooltip = {
			scope:contestant = {
				activity_tournament_change_contestant_score_effect = { SCORE = increase_medium }
			}
		}
	}

	option = {
		name = contest_events.1531.a
	}
}

##################################################
# Bad Day
# by Joe Parkin
# 1540-1541
##################################################

contest_events.1540 = { # Contestant
	type = activity_event
	title = contest_events.1540.t
	desc = {
		desc = contest_events.1540.desc
		first_valid = {
			triggered_desc = {
				trigger = { prowess < decent_skill_rating }
				desc = contest_events.1540.unskilled
			}
			desc = contest_events.1540.sabotage
		}
	}
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = scope:contestant
		animation = stress
	}

	trigger = {
		#Standard checks.
		exists = var:contest_aptitude
		is_in_guest_subset = { name = qualified }
		OR = {
			var:contest_aptitude < decent_skill_rating
		}
		NOT = {
			scope:activity = { has_variable = contest_events_1540_cooldown }
		}
		NOT = { has_character_flag = archery_contest_event_cooldown }
	}

	immediate = {
		play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_negative_reaction"
		add_character_flag = {
			flag = archery_contest_event_cooldown
			years = 1
		}
		scope:activity = { set_variable = contest_events_1540_cooldown }
		tournament_pivotal_flavor_variable_effect = { CONTEST = archery ID = 1540 }
		save_scope_as = contestant
		activity_tournament_change_contestant_score_effect = { SCORE = decrease_major }
	}

	option = {
		name = contest_events.1540.a
	}

	after = {
		scope:activity = {
			every_attending_character = {
				limit = {
					NOT  = { this = scope:contestant }
					is_ai = no
				}
				trigger_event = contest_events.1541
			}
		}
	}
}

contest_events.1541 = { # Ping
	type = activity_event
	title = contest_events.1541.t
	desc = {
		desc = contest_events.1541.desc
		first_valid = {
			triggered_desc = {
				trigger = { scope:contestant.prowess < decent_skill_rating }
				desc = contest_events.1541.unskilled
			}
			desc = contest_events.1541.sabotage
		}
	}
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = scope:contestant
		animation = stress
	}
	right_portrait = {
		character = root
		triggered_animation = {
			trigger = { exists = var:contest_aptitude }
			animation = happiness
		}
		triggered_animation = {
			trigger = {
				NOT = { exists = var:contest_aptitude }
			}
			animation = throne_room_applaud_1
		}
	}

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes

		#Standard checks.
	}

	immediate = {
		show_as_tooltip = {
			scope:contestant = {
				activity_tournament_change_contestant_score_effect = { SCORE = decrease_major }
			}
		}
	}

	option = {
		name = contest_events.1541.a
	}
}

##################################################
# Robin Hood
# by Joe Parkin
# 1550-1554
##################################################

contest_events.1550 = { # Host
	type = activity_event
	title = contest_events.1550.t
	desc = {
		desc = contest_events.1550.desc
		first_valid = {
			triggered_desc = {
				trigger = { exists = scope:mysterious_good }
				desc = contest_events.1550.good
			}
			triggered_desc = {
				trigger = { exists = scope:mysterious_bad }
				desc = contest_events.1550.bad
			}
			desc = contest_events.1550.normal
		}
	}
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = scope:contestant
		scripted_animation = bow_drawn
		outfit_tags = { western_stealth_hood }
	}

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes

		#Standard checks.
		this = scope:host
		scope:activity = {
			any_guest_subset = {
				name = qualified
				exists = var:contest_aptitude
				exists = var:mysterious_stranger_origin
				has_trait = tourney_participant
				has_trait_xp = {
					trait = tourney_participant
					track = bow
					value >= 25
				}
			}
			NOT = { has_variable = contest_events_1550_cooldown }
		}
	}

	immediate = {
		hidden_effect = {
			random_list = {
				1 = { save_scope_as = mysterious_good }
				1 = {}
				1 = { save_scope_as = mysterious_bad }
			}
		}
		tournament_pivotal_flavor_variable_effect = { CONTEST = archery ID = 1550 }
		scope:activity = {
			set_variable = contest_events_1550_cooldown
			random_attending_character = {
				limit = {
					exists = var:contest_aptitude
					exists = var:mysterious_stranger_origin
					has_trait = tourney_participant
					has_trait_xp = {
						trait = tourney_participant
						track = bow
						value >= 25
					}
				}
				save_scope_as = contestant
				if = {
					limit = { exists = scope:mysterious_good }
					activity_tournament_change_contestant_score_effect = { SCORE = increase_major }
				}
				else_if = {
					limit = { exists = scope:mysterious_bad }
					activity_tournament_change_contestant_score_effect = { SCORE = decrease_major }
				}
				tournament_pivotal_flavor_variable_effect = { CONTEST = archery ID = 1550 }			
			}
		}
	}

	option = {
		name = {
			text = contest_events.1550.a.good
			trigger = { exists = scope:mysterious_good }
		}
		name = {
			text = contest_events.1550.a.bad
			trigger = { exists = scope:mysterious_bad }
		}
		name = {
			text = contest_events.1550.a
			trigger = {
				NOR = {
					exists = scope:mysterious_good
					exists = scope:mysterious_bad
				}
			}
		}
	}

	option = {
		name = contest_events.1550.b
		trigger = {	exists = scope:mysterious_good }
		custom_tooltip = contest_events.1550.b.tt
		trigger_event = { on_action = contest_archery_mysterious_event }
	}

	after = {
		scope:activity = {
			every_attending_character = {
				limit = {
					NOT  = { this = scope:host }
					is_ai = no
				}
				trigger_event = contest_events.1551
			}
		}
	}
}

contest_events.1551 = { # Ping
	type = activity_event
	title = contest_events.1550.t
	desc = {
		desc = contest_events.1550.desc
		first_valid = {
			triggered_desc = {
				trigger = { exists = scope:mysterious_good }
				desc = contest_events.1550.good
			}
			triggered_desc = {
				trigger = { exists = scope:mysterious_bad }
				desc = contest_events.1550.bad
			}
			desc = contest_events.1550.normal
		}
	}
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = scope:contestant
		scripted_animation = bow_drawn
		outfit_tags = { western_stealth_hood }
	}
	right_portrait = {
		character = root
		triggered_animation = {
			trigger = { exists = var:contest_aptitude }
			animation = happiness
		}
		triggered_animation = {
			trigger = {
				NOT = { exists = var:contest_aptitude }
			}
			animation = throne_room_applaud_1
		}
	}

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes

		#Standard checks.
		is_ai = no
	}

	immediate = {
		show_as_tooltip = {
			scope:contestant = {
				activity_tournament_change_contestant_score_effect = { SCORE = decrease_major }
			}
		}
	}

	option = {
		name = {
			text = contest_events.1550.a.good
			trigger = { exists = scope:mysterious_good }
		}
		name = {
			text = contest_events.1550.a.bad
			trigger = { exists = scope:mysterious_bad }
		}
		name = {
			text = contest_events.1550.a
			trigger = {
				NOR = {
					exists = scope:mysterious_good
					exists = scope:mysterious_bad
				}
			}
		}
	}
}

contest_events.1553 = { # Arrested
	type = activity_event
	title = contest_events.1553.t
	desc = contest_events.1553.desc
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = scope:marshal
		animation = marshal
	}
	right_portrait = {
		character = scope:contestant
		animation = prisonhouse
		outfit_tags = { western_stealth_hood }
	}

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes

		#Standard checks.
		exists = cp:councillor_marshal
		scope:activity = {
			any_attending_character = { this = root.cp:councillor_marshal }
		}
	}

	immediate = {
		scope:contestant = { add_trait = peasant_leader }
		cp:councillor_marshal = { save_scope_as = marshal }
	}

	option = { # Imprison
		name = contest_events.1553.a
		rightfully_imprison_character_effect = {
			TARGET = scope:contestant
			IMPRISONER = root
		}
		add_character_modifier = {
			modifier = tournament_imprisoned_robin_modifier
			years = 5
		}
	}

	option = { # Execute
		name = contest_events.1553.b
		scope:contestant = {
			override_death_killer_effect = {
				death_reason = death_execution
				killer = root
			}
		}
		add_dread = minor_dread_gain
		add_character_modifier = {
			modifier = tournament_executed_robin_modifier
			years = 5
		}
		reverse_add_opinion = {
			target = scope:marshal
			modifier = grateful_opinion
			opinion = 10
		}
		
	}

	option = { # Pardon
		name = contest_events.1553.c
		add_character_modifier = {
			modifier = tournament_pardoned_robin_modifier
			years = 5
		}
		reverse_add_opinion = {
			target = scope:marshal
			modifier = angry_opinion
			opinion = -20
		}
	}

	option = { # Recruit
		name = contest_events.1553.d
		reverse_add_opinion = {
			target = scope:marshal
			modifier = angry_opinion
			opinion = -20
		}
		reverse_add_opinion = {
			target = scope:contestant
			modifier = angry_opinion
			opinion = -10
		}
		add_courtier = scope:contestant
	}
}

contest_events.1554 = { # Disappeared
	type = activity_event
	title = contest_events.1554.t
	desc = contest_events.1554.desc
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = root
		animation = worry
	}
	lower_right_portrait = {
		character = scope:contestant
		outfit_tags = { western_stealth_hood }
	}

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes

		#Standard checks.
	}

	immediate = {
		scope:contestant = {
			remove_variable = contest_aptitude
			save_scope_as = resign_target
			custom_description = {
				text = tournament_contest_resign_tt
				subject = scope:resign_target
			}
			hidden_effect = {
				override_death_effect = { death_reason = death_disappearance }
			}
		}
	}

	option = { name = contest_events.1554.a }
}

#################################
#################################
###	  WRESTLING - 2000-2499   ###
#################################
#################################

#############################
#############################
###   JOUST - 4000-4499   ###
#############################
#############################

##################################
##################################
###   HORSE RACE - 4500-4999   ###
##################################
##################################

contest_events.3000 = {
	type = activity_event
	title = contest_events.3000.t
	desc = contest_events.3000.desc
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = root
		animation = shock
	}
	right_portrait = {
		character = scope:contestant_1
		animation = stress
	}
	lower_left_portrait = {
		character = scope:contestant_3
		animation = worry
	}
	lower_right_portrait = {
		character = scope:contestant_2
		animation = disapproval
	}

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes

		#Standard checks.
		is_ai = no
		scope:activity = {
			any_guest_subset_current_phase = {
				name = qualified
				count >= 3
				exists = var:contest_aptitude
				is_ai = yes
				NOT = { this = root }
			}
			NOT = { has_variable = contest_events_3000_cooldown }
			# Only one event removing competitors should occur
			any_guest_subset_current_phase = {
				name = qualified
				count >= 8
			}
		}
	}

	immediate = {
		play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_negative_reaction"
		tournament_pivotal_flavor_variable_effect = { CONTEST = horse_race ID = 3000 }
		scope:activity = {
			set_variable = {
				name = contest_events_3000_cooldown
				years = 1
			}
			random_guest_subset_current_phase = {
				name = qualified
				limit = {
					exists = var:contest_aptitude
					is_ai = yes
					NOT = { this = root }
				}
				weight = {
					base = 1
					modifier = {
						add = {
							value = 0
							subtract = var:contest_aptitude
						}
					}
				}
				save_scope_as = contestant_1
				add_to_list = horse_race_colliders
			}
			random_guest_subset_current_phase = {
				name = qualified
				limit = {
					exists = var:contest_aptitude
					is_ai = yes
					NOR = {
						this = root
						this = scope:contestant_1
					}
				}
				save_scope_as = contestant_2
				add_to_list = horse_race_colliders
			}
			random_guest_subset_current_phase = {
				name = qualified
				limit = {
					exists = var:contest_aptitude
					is_ai = yes
					NOR = {
						this = root
						this = scope:contestant_1
						this = scope:contestant_2
					}
				}
				save_scope_as = contestant_3
				add_to_list = horse_race_colliders
			}
		}
		scope:contestant_1 = {
			activity_tournament_change_contestant_score_effect = { SCORE = decrease_medium }
		}
		scope:contestant_2 = {
			activity_tournament_change_contestant_score_effect = { SCORE = decrease_medium }
		}
		scope:contestant_3 = {
			activity_tournament_change_contestant_score_effect = { SCORE = decrease_medium }
		}
	}

	option = {
		name = contest_events.3000.a

		stress_impact = {
			humble = miniscule_stress_impact_loss
			content = miniscule_stress_impact_loss
			callous = minor_stress_impact_gain
			arbitrary = minor_stress_impact_gain
		}

		ai_chance = {
			base = 100
			
			modifier = {
				factor = 5
				OR = {				
					has_trait = callous
					has_trait = arbitrary
				}
			}
		}
	}

	option = {
		name = contest_events.3000.b
		
		reverse_add_opinion = {
			modifier = annoyed_opinion
			target = scope:contestant_1
			opinion = -20
		}

		scope:contestant_2 = {
			add_opinion = {
				modifier = angry_opinion
				target = scope:contestant_1
				opinion = -30
			}
		}

		scope:contestant_3 = {
			add_opinion = {
				modifier = angry_opinion
				target = scope:contestant_1
				opinion = -30
			}
		}

		stress_impact = {
			humble = minor_stress_impact_gain
			content = minor_stress_impact_gain
			callous = miniscule_stress_impact_loss
			arbitrary = miniscule_stress_impact_loss
		}

		ai_chance = {
			base = 100
			
			modifier = {
				factor = 5
				OR = {				
					has_trait = content
					has_trait = humble
				}
			}
		}
	}	

	after = {
		tournament_contest_wager_info_effect = yes
	}
}

# Your horse is bashed around by a competitor's horse
# by James Beaumont
contest_events.3010 = {
	type = activity_event
	title = contest_events.3010.t
	desc = contest_events.3010.desc
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = scope:jockey
		animation = jockey_gallop
	}
	right_portrait = {
		character = scope:enemy_competitor
		animation = shock
	}
	cooldown = { years = 1 }

	trigger = {
		exists = var:horse_race_jockey
		is_in_guest_subset = { name = qualified }
	}

	weight_multiplier = {
		base = 1
		modifier = {
			factor = 2
			root = { has_activity_intent = befriend_attendee_intent }
			scope:activity = {
				any_guest_subset_current_phase = {
					name = qualified
					this = root.intent_target
				}
			}
		}
	}

	immediate = {
		play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_negative_reaction"
		tournament_pivotal_flavor_variable_effect = { CONTEST = horse_race ID = 3010 }
		var:horse_race_jockey = { save_scope_as = jockey }
		scope:activity = {
			random_guest_subset_current_phase = {
				name = qualified
				limit = {
					is_ai = yes
					NOT = { this = root }
				}
				weight = {
					base = 1
					modifier = {
						add = {
							value = 0
							subtract = var:contest_aptitude
						}
					}
					modifier = {
						add = 30
						root = { has_activity_intent = befriend_attendee_intent }
						root.intent_target = this
					}
				}
				save_scope_as = enemy_competitor
			}
		}
		scope:jockey = {
			increase_wounds_no_death_effect = { REASON = wounds }
		}
	}

	option = { # This is clearly against the rules!
		name = contest_events.3010.a
		duel = {
			skills = { diplomacy stewardship }
			target = scope:enemy_competitor
			10 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = contest_events.3010.a.success
				send_interface_toast = {
					title = contest_events.3010.a.success
					left_icon = root
					right_icon = scope:enemy_competitor
					tournament_contest_knocked_out_effect = { CHARACTER = scope:enemy_competitor }
				}
			}
			10 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = contest_events.3010.a.failure
				send_interface_toast = {
					title = contest_events.3010.a.failure
					left_icon = root
					right_icon = scope:enemy_competitor
					activity_tournament_change_contestant_score_effect = { SCORE = decrease_major }
				}
			}
		}
		progress_towards_rival_effect = {
			REASON = rival_tournament_disqualified
			CHARACTER = scope:enemy_competitor
			OPINION = default_rival_opinion
		}
		stress_impact = {
			humble = minor_stress_impact_gain
			content = minor_stress_impact_gain
			depressed_genetic = minor_stress_impact_gain
			depressed_1 = minor_stress_impact_gain
			lazy = minor_stress_impact_gain
		}
		ai_chance = {
			base = 10
		}
	}

	option = { # I will be gracious in defeat
		name = contest_events.3010.b
		activity_tournament_change_contestant_score_effect = { SCORE = decrease_minor }
		progress_towards_friend_effect = {
			REASON = friend_bonded_during_tournament
			CHARACTER = scope:enemy_competitor
			OPINION = default_friend_opinion
		}
		stress_impact = {
			arrogant = minor_stress_impact_gain
			ambitious = minor_stress_impact_gain
			diligent = minor_stress_impact_gain
			just = minor_stress_impact_gain
			arbitrary = minor_stress_impact_gain
			stubborn = minor_stress_impact_gain
			scholar = minor_stress_impact_gain
		}
		ai_chance = {
			base = 10
			modifier = {
				factor = 0
				OR = {
					has_trait = arrogant
					has_trait = ambitious
					has_trait = diligent
					has_trait = just
					has_trait = arbitrary
					has_trait = stubborn
					has_trait = scholar
				}
			}
		}
	}
}

# People are swooning over another jockey
# by James Beaumont
contest_events.3020 = {
	type = activity_event
	title = contest_events.3020.t
	desc = contest_events.3020.desc
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = scope:jockey
		animation = dismissal
	}
	right_portrait = {
		character = scope:enemy_competitor
		animation = personality_honorable
	}
	cooldown = { years = 1 }

	trigger = {
		root.var:horse_race_jockey ?= { exists = yes}
	}

	immediate = {
		play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_positive_reaction"
		tournament_pivotal_flavor_variable_effect = { CONTEST = horse_race ID = 3020 }
		scope:activity = {
			random_guest_subset_current_phase = { # They're participating
				name = contestant
				limit = {
					is_ai = yes
					NOT = { this = root }
				}
				save_scope_as = enemy_competitor
			}
		}
		root.var:horse_race_jockey = { save_scope_as = jockey }
	}

	option = { # No no, cheer for MY jockey instead!
		name = contest_events.3020.a
		duel = {
			skill = diplomacy
			target = scope:enemy_competitor
			100 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = contest_events.3020.a.success
				send_interface_toast = {
					title = contest_events.3020.a.success
					left_icon = root
					right_icon = scope:enemy_competitor
					activity_tournament_change_contestant_score_effect = { SCORE = increase_minor }
					reverse_add_opinion = {
						modifier = pleased_opinion
						target = scope:jockey
						opinion = 30
					}
				}
			}
			100 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = contest_events.3020.a.failure
				send_interface_toast = {
					title = contest_events.3020.a.failure
					left_icon = root
					right_icon = scope:enemy_competitor
					activity_tournament_change_contestant_score_effect = { SCORE = decrease_minor }
					reverse_add_opinion = {
						modifier = disappointed_opinion
						target = scope:jockey
						opinion = -20
					}
				}
			}
		}
		stress_impact = {
			humble = minor_stress_impact_gain
			content = minor_stress_impact_gain
			lazy = minor_stress_impact_gain
		}
		ai_chance = {
			base = 10
		}
	}

	option = { # He IS quite attractive, eh?
		name = contest_events.3020.b
		activity_tournament_change_contestant_score_effect = { SCORE = decrease_minor }
		progress_towards_friend_effect = {
			REASON = friend_bonded_during_tournament
			CHARACTER = scope:enemy_competitor
			OPINION = default_friend_opinion
		}
		stress_impact = {
			arrogant = minor_stress_impact_gain
			ambitious = minor_stress_impact_gain
			arbitrary = minor_stress_impact_gain
			stubborn = minor_stress_impact_gain
			scholar = minor_stress_impact_gain
		}
		ai_chance = {
			base = 10
			modifier = {
				factor = 0
				OR = {
					has_trait = arrogant
					has_trait = ambitious
					has_trait = arbitrary
					has_trait = stubborn
					has_trait = scholar
				}
			}
		}
	}

	option = { # I'll find him after the race for a good tumble
		name = contest_events.3020.c

		trigger = {
			is_attracted_to_gender_of = scope:enemy_competitor
		}

		activity_tournament_change_contestant_score_effect = { SCORE = decrease_miniscule }
		if = {
			limit = {
				scope:enemy_competitor = { is_male = yes }
			}
			had_sex_with_unknown_effect = { GENDER = male }
		}
		else = { had_sex_with_unknown_effect = { GENDER = female } }
		stress_impact = {
			lustful = medium_stress_impact_loss
			rakish = medium_stress_impact_loss
			deviant = medium_stress_impact_loss
			seducer = medium_stress_impact_loss
			chaste = medium_stress_impact_gain
			loyal = medium_stress_impact_gain
			zealous = medium_stress_impact_gain
		}
		ai_chance = {
			base = 10
			modifier = {
				factor = 0
				NOR = { # Only do this if you're horny
					has_trait = lustful
					has_trait = rakish
					has_trait = deviant
					has_trait = seducer
				}
			}
		}
	}
}

# A commoner runs onto the tracks, naked.
# by James Beaumont
scripted_trigger 3030_would_streak_trigger = {
	OR = {
		has_trait = lustful
		has_trait = lunatic
		AND = {
			has_trait = arrogant
			has_trait = impatient
		}
		is_deviant_trigger = yes
		#faith = { has_doctrine_parameter = naked_adherents_active }
		faith = { has_doctrine_parameter = naked_priests_active }
	}
	OR = {
		#faith = { has_doctrine_parameter = naked_adherents_active }
		faith = { has_doctrine_parameter = naked_priests_active }
		NOR = {
			has_trait = chaste
			has_trait = celibate
			has_trait = humble
		}
	}
}

contest_events.3030 = {
	type = activity_event
	title = contest_events.3030.t
	desc = contest_events.3030.desc
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = root
		triggered_animation = {
			trigger = {
				is_deviant_trigger = yes
			}
			animation = ecstasy
		}
		animation = shock
	}
	right_portrait = {
		character = scope:naked_peasant
		animation = happiness
		triggered_outfit = {
			remove_default_outfit = no
			outfit_tags = { no_clothes }
		}
	}
	cooldown = { years = 1 }

	trigger = {
		location.faith = {
			NOT = {
				#has_doctrine_parameter = naked_adherents_active
				has_doctrine_parameter = naked_priests_active
			}
		}
	}

	immediate = {
		play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_surprise_reaction"
		tournament_pivotal_flavor_variable_effect = { CONTEST = horse_race ID = 3030 }
		if = {
			limit = {
				any_pool_character = {
					province = root.location
					3030_would_streak_trigger = yes
				}
			}
			random_pool_character = {
				province = root.location
				limit = { 3030_would_streak_trigger = yes }
				hidden_effect = {
					add_trait = deviant
				}
				save_scope_as = naked_peasant
			}
		}
		else = {
			create_character = {
				template = generic_peasant_character
				culture = root.location.culture
				faith = root.location.faith
				location = root.location
				trait = deviant
				save_scope_as = naked_peasant
			}
		}
	}

	option = { # How disgusting! Arrest them!
		name = contest_events.3030.a
		rightfully_imprison_character_effect = {
			TARGET = scope:naked_peasant
			IMPRISONER = root
		}
		if = {
			limit = {
				faith = {
					NOR = {
						#has_doctrine_parameter = naked_adherents_active
						has_doctrine_parameter = naked_priests_active
						trait_is_virtue = lustful
					}
				}
			}
			stress_impact = {
				deviant = minor_stress_impact_gain
				lustful = minor_stress_impact_gain
				seducer = minor_stress_impact_gain
			}
		}
		else = {
			stress_impact = {
				deviant = minor_stress_impact_gain
				lustful = minor_stress_impact_gain
				seducer = minor_stress_impact_gain
				zealous = minor_stress_impact_gain
			}
		}
		ai_chance = {
			base = 10
			modifier = {
				factor = 0.5
				OR = {
					has_trait = deviant
					has_trait = lustful
					has_trait = seducer
				}
			}
		}
	}

	option = { # Haha! What a display!
		name = contest_events.3030.b
		trigger = {
			NOR = {
				has_trait = callous
				has_trait = sadistic
			}
		}
		show_unlock_reason = no
		if = {
			limit = {
				faith = {
					NOR = {
						#has_doctrine_parameter = naked_adherents_active
						has_doctrine_parameter = naked_priests_active
						trait_is_virtue = lustful
					}
				}
			}
			stress_impact = {
				base = minor_stress_impact_loss
				callous = minor_stress_impact_loss
				sadistic = minor_stress_impact_loss
				deviant = minor_stress_impact_loss
				lustful = minor_stress_impact_loss
				seducer = minor_stress_impact_loss
				chaste = medium_stress_impact_gain
				zealous = medium_stress_impact_gain
			}
		}
		else = {
			stress_impact = {
				base = minor_stress_impact_loss
				callous = minor_stress_impact_loss
				sadistic = minor_stress_impact_loss
				deviant = minor_stress_impact_loss
				lustful = minor_stress_impact_loss
				seducer = minor_stress_impact_loss
				zealous = minor_stress_impact_loss
				chaste = medium_stress_impact_gain
			}
		}
		ai_chance = {
			base = 10
			modifier = {
				factor = 0
				NOR = {
					has_trait = deviant
					has_trait = lustful
					has_trait = seducer
				}
			}
		}
	}

	option = { # Hey, that looks like fun!
		name = contest_events.3030.c
		trigger = {
			is_deviant_trigger = yes
		}
		trait = deviant
		if = {
			limit = {
				NOT = { scope:host = this }
			}
			reverse_add_opinion = {
				modifier = tournament_streaker_opinion
				target = scope:host
				opinion = -30
			}
		}
		set_relation_friend = {
			reason = friend_naked_together
			target = scope:naked_peasant
		}
		if = {
			limit = {
				any_secret = {
					secret_type = secret_deviant
				}
			}
			random_secret = {
				limit = {
					secret_type = secret_deviant
				}
				show_as_tooltip = {
					expose_secret = root
				}
				save_scope_as = secret
			}
			hidden_effect = { #exposing secrets on yourself doesn't trigger secrets.0001, so we have to trigger the effects here
				secret_exposed_owner_effects_effect = { SECRET = scope:secret POV = root }
				secret_exposed_owner_opinion_effects_effect = yes
			}
		}
		stress_impact = {
			base = medium_stress_impact_loss # Base instead of Deviant since the Deviant secret won't give stress loss
			lustful = medium_stress_impact_loss
			rakish = medium_stress_impact_loss
			seducer = medium_stress_impact_loss
			chaste = medium_stress_impact_gain
			zealous = medium_stress_impact_gain
		}
		ai_chance = {
			base = 10
			modifier = {
				factor = 0
				NOR = { # Only do this if you're horny
					has_trait = lustful
					has_trait = rakish
					is_deviant_trigger = yes
					has_trait = seducer
				}
			}
		}
	}

	option = { # Nudity is not a sin!
		name = contest_events.3030.d
		trigger = {
			faith = {
				#OR = {
					#has_doctrine_parameter = naked_adherents_active
					has_doctrine_parameter = naked_priests_active
				#}
			}
		}
		duel = {
			skill = learning
			value = high_skill_rating
			10 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = contest_events.3030.a.success
				send_interface_toast = {
					title = contest_events.3030.a.success
					left_icon = root
					add_piety = medium_piety_gain
					if = {
						limit = {
							NOT = { root.location.faith = root.faith }
							is_liege_or_above_of = root.location.county.holder
							root.location.county.holder = {
								is_ai = yes
								OR = {
									faith = root.faith
									NOT = {
										vassal_contract_has_flag = religiously_protected
									}
								}
							}
						}
						root.location.county = { set_county_faith = root.faith }
					}
				}
			}
			10 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = contest_events.3030.a.failure
				send_interface_toast = {
					title = contest_events.3030.a.failure
					left_icon = root
					add_piety = minor_piety_loss
				}
			}
		}
		progress_towards_friend_effect = {
			REASON = friend_naked_together
			CHARACTER = scope:naked_peasant
			OPINION = default_friend_opinion
		}
		stress_impact = {
			chaste = medium_stress_impact_gain
			lazy = medium_stress_impact_gain
			callous = medium_stress_impact_gain
			cynical = medium_stress_impact_gain
		}
		ai_chance = {
			base = 10
			modifier = {
				factor = 0
				OR = {
					has_trait = chaste
					has_trait = lazy
					has_trait = callous
					has_trait = cynical
				}
			}
		}
	}

	option = { # Let the horses trample them
		name = contest_events.3030.e
		trigger = {
			OR = {
				has_trait = callous
				has_trait = sadistic
			}
		}
		scope:naked_peasant = {
			override_death_effect = {
				death_reason = death_trampled_by_horse
			}
		}
		add_dread = minor_dread_gain
		stress_impact = {
			callous = medium_stress_impact_loss
			sadistic = medium_stress_impact_loss
		}
		ai_chance = {
			base = 10
		}
	}
}

#############################
#############################
###   JOUST - 4000-4499   ###
#############################
#############################

##################################
##################################
###   HORSE RACE - 4500-4999   ###
##################################
##################################

##################################################
# Tragic Tumble
# by Joe Parkin
# 4500-4501
##################################################

contest_events.4500 = { # Contestant
	type = activity_event
	title = contest_events.4500.t
	desc = {
		desc = contest_events.4500.desc
		first_valid = {
			triggered_desc = {
				trigger = { prowess < decent_skill_rating }
				desc = contest_events.4500.unskilled
			}
			desc = contest_events.4500.sabotage
		}
	}
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = root
		animation = stress
	}
	right_portrait = {
		character = scope:jockey
		animation = loss_1
	}

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes

		#Standard checks.
		exists = var:contest_aptitude
		exists = var:horse_race_jockey
		is_in_guest_subset = { name = qualified }
		OR = {
			var:contest_aptitude < decent_skill_rating
			has_character_flag = contest_sabotage_target
		}
		NOT = {
			scope:activity = { has_variable = contest_events_4500_cooldown }
		}
		NOT = { has_character_flag = horse_race_contest_event_cooldown }
		# Only one event removing competitors should occur
		scope:activity = {
			any_guest_subset_current_phase = {
				name = qualified
				count >= 8
			}
		}
	}

	immediate = {
		play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_negative_reaction"
		add_character_flag = {
			flag = horse_race_contest_event_cooldown
			years = 1
		}
		save_scope_as = contestant
		remove_variable = contest_aptitude
		tournament_horse_race_fetch_horse_effect = yes
		scope:activity = {
			set_variable = contest_events_4500_cooldown
			add_activity_log_entry = {
				key = contest_horse_race_crashed_out_log
				tags = { bad }
				score = 10
				character = scope:contestant

				# Effect
				tournament_contest_knocked_out_effect = { CHARACTER = scope:contestant }
			}
		}
		tournament_pivotal_flavor_variable_effect = { CONTEST = horse_race ID = 4500 }
		root.var:horse_race_jockey = { save_scope_as = jockey }
	}

	option = {
		name = contest_events.4500.a
	}

	after = {
		tournament_contest_wager_info_effect = yes
		scope:activity = {
			every_attending_character = {
				limit = {
					NOT  = { this = scope:contestant }
					is_ai = no
				}
				trigger_event = contest_events.4501
			}
		}
	}
}

contest_events.4501 = { # Ping
	type = activity_event
	title = contest_events.4501.t
	desc = {
		desc = contest_events.4501.desc
		first_valid = {
			triggered_desc = {
				trigger = { scope:contestant.prowess < decent_skill_rating }
				desc = contest_events.4501.unskilled
			}
			desc = contest_events.4501.sabotage
		}
	}
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = root
		animation = stress
	}
	right_portrait = {
		character = scope:jockey
		animation = loss_1
	}

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes
	}

	immediate = {
		show_as_tooltip = {
			tournament_contest_knocked_out_effect = { CHARACTER = scope:contestant }
		}
	}

	option = {
		name = contest_events.4501.a
	}

	after = {
		tournament_contest_wager_info_effect = yes
	}
}

##################################################
# Come On, X
# by Joe Parkin
# 4600
##################################################

contest_events.4600 = {
	type = activity_event
	title = contest_events.4600.t
	desc = {
		desc = contest_events.4600.desc
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = var:contest_aptitude
					exists = var:tournament_wager_target.var:contest_aptitude
					NOT = { var:tournament_wager_target = root }
				}
				desc = contest_events.4600.wager_entrant
			}
			triggered_desc = {
				trigger = { exists = var:tournament_wager_target.var:contest_aptitude }
				desc = contest_events.4600.wager
			}
			triggered_desc = {
				trigger = { exists = var:contest_aptitude }
				desc = contest_events.4600.entrant
			}
		}
	}
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = root
		animation = throne_room_cheer_2
	}
	right_portrait = {
		character = scope:jockey
		animation = jockey_gallop
	}
	cooldown = { years = 1 }

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes

		is_ai = no
		exists = var:contest_aptitude
		is_in_guest_subset = { name = qualified }
	}

	immediate = {
		play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_positive_reaction"
		tournament_horse_race_fetch_horse_effect = yes
		var:horse_race_jockey ?= { save_scope_as = jockey }
		if = {
			limit = { exists = var:tournament_wager_target.var:contest_aptitude }
			var:tournament_wager_target = { save_scope_as = wager_owner }
		}
		tournament_contest_wager_info_effect = yes
		tournament_pivotal_flavor_variable_effect = { CONTEST = horse_race ID = 4600 }
	}

	option = { # Mean Cheer
		name = contest_events.4600.a
		stress_impact = {
			shy = minor_stress_impact_gain
			calm = minor_stress_impact_gain
			compassionate = minor_stress_impact_gain
		}
	}

	option = { # Cheer
		name = {
			text = contest_events.4600.b
			trigger = { exists = var:contest_aptitude }
		}
		name = {
			text = contest_events.4600.b.wager
			trigger = { exists = scope:wager_owner }
		}
		stress_impact = {
			shy = minor_stress_impact_gain
		}
	}

	option = { # Cheer
		name = contest_events.4600.c
		stress_impact = {
			gregarious = minor_stress_impact_gain
			wrathful = minor_stress_impact_gain
			impatient = minor_stress_impact_gain
		}
	}

	after = {
		if = {
			limit = { exists = var:contest_aptitude }
			random = {
				chance = 50
				activity_tournament_change_contestant_score_effect = { SCORE = increase_minor }
			}
		}
		if = {
			limit = { exists = scope:wager_owner }
			random = {
				chance = 50
				scope:wager_owner = {
					activity_tournament_change_contestant_score_effect = { SCORE = increase_minor }
				}
			}
		}
	}
}

###############################
###############################
###   RECITAL - 5000-5499   ###
###############################
###############################

###################################
###################################
###   BOARD GAME - 5500-5999   ####
###################################
###################################

contest_events.5500 = { # Contestant
	type = activity_event
	title = contest_events.5500.t
	desc = contest_events.5500.desc
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = root
		animation = worry
	}
	right_portrait = {
		character = scope:versus_contestant
		animation = stress
	}
	cooldown = { years = 1 }

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes

		#Standard checks.
		contest_versus_player_vs_ai_trigger = yes
	}

	immediate = {
		contest_versus_player_vs_ai_scope_effect = yes
		tournament_pivotal_flavor_variable_effect = { CONTEST = board_game ID = 5500 }
	}

	option = { # Feign coughing fit
		name = contest_events.5500.a
		trigger = {
			NOR = {
				has_trait = ill
				has_trait = wheezing
				has_trait = consumption
			}
		}
		random = {
			chance = 5
			save_scope_as = coughing_fit
			show_as_tooltip = {
				add_character_modifier = {
					modifier = tournament_coughing_fit_modifier
					months = 6
				}
				activity_tournament_change_contestant_score_effect = { SCORE = decrease_minor }
			}
		}
		save_scope_value_as = {
			name = randomizer
			value = {
				integer_range = { min = -5 max = 5 }
			}
		}
		random = {
			chance = 50
			modifier = {
				add = scope:randomizer
			}
			modifier = {
				factor = 1.5
				scope:versus_contestant = { has_trait = irritable }
			}
			modifier = {
				factor = 1.5
				scope:versus_contestant = { has_trait = wrathful }
			}
			modifier = {
				factor = 0.5
				scope:versus_contestant = { has_trait = calm }
			}
			save_scope_as = coughing_fit_score
		}
		if = {
			limit = {
				exists = scope:coughing_fit_score
				exists = scope:coughing_fit
			}
			send_interface_toast = {
				title = contest_events.5500.mixed
				left_icon = root
				right_icon = scope:versus_contestant
				add_character_modifier = {
					modifier = tournament_coughing_fit_modifier
					months = 6
				}
				scope:versus_contestant = {
					activity_tournament_change_contestant_score_effect = { SCORE = decrease_medium }
				}
			}
		}
		else_if = {
			limit = { exists = scope:coughing_fit_score }
			send_interface_toast = {
				title = contest_events.5500.success
				left_icon = root
				right_icon = scope:versus_contestant
				scope:versus_contestant = {
					activity_tournament_change_contestant_score_effect = { SCORE = decrease_medium }
				}
			}
		}
		else_if = {
			limit = { exists = scope:coughing_fit }
			send_interface_toast = {
				title = contest_events.5500.failure
				left_icon = root
				right_icon = scope:versus_contestant
				add_character_modifier = {
					modifier = tournament_coughing_fit_modifier
					months = 6
				}
			}
		}
		else = {
			send_interface_toast = {
				title = contest_events.5500.nothing
				left_icon = root
				right_icon = scope:versus_contestant
			}
		}
		stress_impact = {
			honest = minor_stress_impact_gain
			just = minor_stress_impact_gain
		}
		ai_chance = {
			base = 25
			modifier = {
				has_activity_intent = win_contest_intent
				factor = 1.5
			}
			ai_value_modifier = {
				ai_honor = -0.5
				ai_rationality = 0.5
			}
		}
	}

	option = { # Take advantage of your 'condition'
		name = contest_events.5500.b
		trigger = {
			OR = {
				has_trait = ill
				has_trait = wheezing
				has_trait = consumption
			}
		}
		random = {
			chance = 25
			show_as_tooltip = {
				add_character_modifier = {
					modifier = tournament_coughing_fit_modifier
					months = 6
				}
			}
			save_scope_as = coughing_fit
		}
		save_scope_value_as = {
			name = randomizer
			value = {
				integer_range = { min = -3 max = 3 }
			}
		}
		random = {
			chance = 75
			modifier = {
				add = scope:randomizer
			}
			modifier = {
				factor = 1.5
				scope:versus_contestant = { has_trait = irritable }
			}
			modifier = {
				factor = 1.5
				scope:versus_contestant = { has_trait = wrathful }
			}
			modifier = {
				factor = 0.5
				scope:versus_contestant = { has_trait = calm }
			}
			save_scope_as = coughing_fit_score
		}
		if = {
			limit = {
				exists = scope:coughing_fit_score
				exists = scope:coughing_fit
			}
			send_interface_toast = {
				title = contest_events.5500.mixed
				left_icon = root
				right_icon = scope:versus_contestant
				add_character_modifier = {
					modifier = tournament_coughing_fit_modifier
					months = 6
				}
				scope:versus_contestant = {
					activity_tournament_change_contestant_score_effect = { SCORE = decrease_major }
				}
			}
		}
		else_if = {
			limit = { exists = scope:coughing_fit_score }
			send_interface_toast = {
				title = contest_events.5500.success
				left_icon = root
				right_icon = scope:versus_contestant
				scope:versus_contestant = {
					activity_tournament_change_contestant_score_effect = { SCORE = decrease_major }
				}
			}
		}
		else_if = {
			limit = { exists = scope:coughing_fit }
			send_interface_toast = {
				title = contest_events.5500.failure
				left_icon = root
				right_icon = scope:versus_contestant
				add_character_modifier = {
					modifier = tournament_coughing_fit_modifier
					months = 6
				}
			}
		}
		else = {
			send_interface_toast = {
				title = contest_events.5500.nothing
				left_icon = root
				right_icon = scope:versus_contestant
			}
		}
		stress_impact = {
			honest = minor_stress_impact_gain
		}
		ai_chance = {
			base = 25
			modifier = {
				has_activity_intent = win_contest_intent
				factor = 1.5
			}
			ai_value_modifier = {
				ai_honor = -0.5
				ai_rationality = -1
			}
		}
	}

	option = { # Whistle
		name = contest_events.5500.c
		add_prestige = medium_prestige_loss
		reverse_add_opinion = {
			target = scope:versus_contestant
			modifier = tournament_dishonorable_gamer_opinion
			opinion = -10
		}
		save_scope_value_as = {
			name = randomizer
			value = {
				integer_range = { min = -5 max = 5 }
			}
		}
		random = {
			chance = 50
			modifier = {
				add = scope:randomizer
			}
			modifier = {
				factor = 1.5
				scope:versus_contestant = { has_trait = irritable }
			}
			modifier = {
				factor = 1.5
				scope:versus_contestant = { has_trait = wrathful }
			}
			modifier = {
				factor = 0.5
				scope:versus_contestant = { has_trait = calm }
			}
			send_interface_toast = {
				title = contest_events.5500.nothing
				left_icon = root
				right_icon = scope:versus_contestant
				scope:versus_contestant = {
					activity_tournament_change_contestant_score_effect = { SCORE = decrease_medium }
				}
			}
		}
		ai_chance = {
			base = 25
			modifier = {
				has_activity_intent = win_contest_intent
				factor = 1.5
			}
			ai_value_modifier = {
				ai_honor = -1
				ai_rationality = 1
			}
		}
	}

	option = { # Keep schtum
		name = contest_events.5500.d
		stress_impact = {
			ambitious = minor_stress_impact_gain
		}
		accolade_minimal_glory_gain_with_checks_effect = yes
		if = {
			limit = { has_activity_intent = win_contest_intent }
			stress_impact = {
				base = minor_stress_impact_gain
			}
		}
		ai_chance = {
			base = 75
			modifier = {
				has_activity_intent = win_contest_intent
				factor = 0.33
			}
			ai_value_modifier = {
				ai_honor = 1
				ai_energy = -0.5
			}
		}
	}
}

scripted_effect contest_5510_win_effect = {
    versus_contest_round_outcome_tooltip_effect = {
		WINNER = root
		LOSER = scope:versus_contestant
	}
	save_scope_as = contest_winner
	scope:versus_contestant = {
		save_scope_as = contest_loser
		remove_variable = progress_to_victory
		remove_variable = contest_aptitude
	}
	scope:contest_winner = {
		set_variable = {
			name = contest_aptitude
			value = contest_board_game_aptitude_value
		}
	}
	scope:activity = {
		switch = {
			trigger = var:contest_versus_progress
			0 = {
				add_to_guest_subset = {
					name = semi_finalist
					target = scope:contest_winner
					phase = tournament_phase_board_game
				}
			}
			1 = {
				add_to_guest_subset = {
					name = finalist
					target = scope:contest_winner
					phase = tournament_phase_board_game
				}
			}
			2 = {
				add_to_guest_subset = {
					name = winner
					target = scope:contest_winner
					phase = tournament_phase_board_game
				}
				add_to_guest_subset = {
					name = second_place
					target = scope:contest_loser
					phase = tournament_phase_board_game
				}
			}
		}
	}
}

contest_events.5510 = { # Contestant
	type = activity_event
	title = contest_events.5510.t
	desc = contest_events.5510.desc
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = root
		animation = shock
	}
	right_portrait = {
		character = scope:versus_contestant
		animation = rage
	}
	cooldown = { years = 1 }

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes

		#Standard checks.
		contest_versus_player_vs_ai_trigger = yes
	}

	weight_multiplier = {
		base = 50
		modifier = {
			factor = 2
			trigger_if = {
				limit = { this = scope:versus_matchee }
				contest_board_game_aptitude_value > scope:versus_matcher.contest_board_game_aptitude_value
			}
			trigger_else = { contest_board_game_aptitude_value > scope:versus_matchee.contest_board_game_aptitude_value }
		}
		modifier = {
			factor = 2
			trigger_if = {
				limit = { this = scope:versus_matchee }
				scope:versus_matcher = { has_trait = impatient }
			}
			trigger_else = {
				scope:versus_matchee = { has_trait = impatient }
			}
		}
		modifier = {
			factor = 2
			trigger_if = {
				limit = { this = scope:versus_matchee }
				scope:versus_matcher = { has_trait = wrathful }
			}
			trigger_else = {
				scope:versus_matchee = { has_trait = wrathful }
			}
		}
		modifier = {
			factor = 0.5
			trigger_if = {
				limit = { this = scope:versus_matchee }
				contest_board_game_aptitude_value < scope:versus_matcher.contest_board_game_aptitude_value
			}
			trigger_else = { contest_board_game_aptitude_value < scope:versus_matchee.contest_board_game_aptitude_value }
		}
	}

	immediate = {
		contest_versus_player_vs_ai_scope_effect = yes
		tournament_pivotal_flavor_variable_effect = { CONTEST = board_game ID = 5510 }
		scope:versus_contestant = {
			accolade_minimal_glory_loss_with_checks_effect = yes
		}
	}

	option = { # Demand continuation flex
		name = contest_events.5510.a
		contest_5510_win_effect = yes
		scope:versus_contestant = { add_prestige = minor_prestige_loss }
		reverse_add_opinion = {
			target = scope:versus_contestant
			modifier = tournament_rubbed_in_board_game_opinion
			opinion = -10
		}
		stress_impact = {
			forgiving = minor_stress_impact_gain
			compassionate = minor_stress_impact_gain
			just = minor_stress_impact_gain
			shy = minor_stress_impact_gain
		}
		ai_chance = {
			base = 25
			modifier = {
				add = -25
				OR = {
					has_activity_intent = woo_attendee_intent
					has_activity_intent = befriend_attendee_intent
				}
				intent_target = scope:versus_contestant
			}
			opinion_modifier = {
				opinion_target = scope:versus_contestant
				multiplier = -0.5
			}
			ai_value_modifier = {
				ai_honor = -0.5
				ai_vengefulness = 0.5
				ai_compassion = -0.5
				ai_energy = 1
			}
		}
	}

	option = { # Disqualify
		name = contest_events.5510.b
		trigger = { this = scope:host }
		tournament_contest_versus_disqualification_effect = { DISQUALIFIED = scope:versus_contestant MATCH = root CONTEST = board_game SKILL = board_game }
		stress_impact = {
			forgiving = minor_stress_impact_gain
			calm = minor_stress_impact_gain
		}
		ai_chance = {
			base = 25
			modifier = {
				add = -75
				OR = {
					has_activity_intent = woo_attendee_intent
					has_activity_intent = befriend_attendee_intent
				}
				intent_target = scope:versus_contestant
			}
			opinion_modifier = {
				opinion_target = scope:versus_contestant
				multiplier = -1
			}
			ai_value_modifier = {
				ai_honor = -1
				ai_vengefulness = 1
				ai_compassion = -1
				ai_energy = -0.5
			}
		}
	}

	option = { # Offer take back
		name = contest_events.5510.c
		activity_tournament_change_contestant_score_effect = { SCORE = increase_minor }
		reverse_add_opinion = {
			target = scope:versus_contestant
			modifier = tournament_take_back_board_game_opinion
			opinion = 10
		}
		if = {
			limit = { has_activity_intent = win_contest_intent }
			stress_impact = {
				base = minor_stress_impact_gain
			}
		}
		stress_impact = {
			callous = minor_stress_impact_gain
			ambitious = minor_stress_impact_gain
		}
		ai_chance = {
			base = 25
			modifier = {
				add = 75
				OR = {
					has_activity_intent = woo_attendee_intent
					has_activity_intent = befriend_attendee_intent
				}
				intent_target = scope:versus_contestant
			}
			opinion_modifier = {
				opinion_target = scope:versus_contestant
				multiplier = 1
			}
			ai_value_modifier = {
				ai_honor = 1
				ai_compassion = 1
				ai_energy = 1
			}
		}
	}

	option = { # Take win
		name = contest_events.5510.d
		contest_5510_win_effect = yes
		add_prestige = minor_prestige_loss
		stress_impact = {
			arbitrary = minor_stress_impact_gain
			sadistic = minor_stress_impact_gain
		}
		ai_chance = {
			base = 25
			modifier = {
				add = 25
				OR = {
					has_activity_intent = woo_attendee_intent
					has_activity_intent = befriend_attendee_intent
				}
				intent_target = scope:versus_contestant
			}
			ai_value_modifier = {
				ai_honor = 0.5
				ai_rationality = 1
				ai_compassion = 0.5
				ai_energy = -1
			}
		}
	}
}

contest_events.5520 = { # Contestant
	type = activity_event
	title = contest_events.5520.t
	desc = contest_events.5520.desc
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = root
		animation = worry
	}
	right_portrait = {
		character = scope:versus_contestant
		animation = fear
	}
	cooldown = { years = 1 }

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes

		#Standard checks.
		contest_versus_player_vs_ai_trigger = yes
	}

	immediate = {
		contest_versus_player_vs_ai_scope_effect = yes
		tournament_pivotal_flavor_variable_effect = { CONTEST = board_game ID = 5520 }
	}

	option = { # Attempt bold maneuver
		name = contest_events.5520.a
		duel = {
			skills = { intrigue learning }
			target = scope:versus_contestant
			10 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = contest_events.5520.a.success
				send_interface_toast = {
					title = contest_events.5520.a.success
					left_icon = root
					right_icon = scope:versus_contestant
					activity_tournament_change_contestant_score_effect = { SCORE = increase_major }
					hidden_effect = {
						scope:versus_contestant = {
							activity_tournament_change_contestant_score_effect = { SCORE = decrease_major }
						}
					}
				}
				min = 3
			}
			10 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = contest_events.5520.a.failure
				send_interface_toast = {
					title = contest_events.5520.a.failure
					activity_tournament_change_contestant_score_effect = { SCORE = decrease_major }
					hidden_effect = {
						scope:versus_contestant = {
							activity_tournament_change_contestant_score_effect = { SCORE = increase_major }
						}
					}
				}
				min = 3
			}
		}
		stress_impact = {
			craven = medium_stress_impact_gain
			humble = medium_stress_impact_gain
			patient = medium_stress_impact_gain
			diligent = medium_stress_impact_gain
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_vengefulness = 0.5
				ai_rationality = 0.5
				ai_energy = 0.5
				ai_boldness = 1
			}
		}
	}

	option = { # Inform
		name = contest_events.5520.b
		activity_tournament_change_contestant_score_effect = { SCORE = decrease_medium }
		reverse_add_opinion = {
			target = scope:versus_contestant
			modifier = tournament_shared_vulnerability_board_game_opinion
			opinion = 10
		}
		progress_towards_friend_effect = {
			REASON = friend_board_game_opening_inform
			CHARACTER = scope:versus_contestant
			OPINION = 0
		}
		stress_impact = {
			ambitious = medium_stress_impact_gain
			arrogant = medium_stress_impact_gain
			callous = medium_stress_impact_gain
		}
		ai_chance = {
			base = 5
			opinion_modifier = {
				opinion_target = scope:versus_contestant
				multiplier = 1
			}
			modifier = {
				add = 20
				OR = {
					has_activity_intent = woo_attendee_intent
					has_activity_intent = befriend_attendee_intent
				}
				intent_target = scope:versus_contestant
			}
			ai_value_modifier = {
				ai_honor = 0.5
				ai_vengefulness = -1
				ai_compassion = 1
				ai_energy = -1
				ai_boldness = 0.5
			}
		}
	}

	option = { # Ignore
		name = contest_events.5520.c
		stress_impact = {
			brave = medium_stress_impact_gain
			arrogant = medium_stress_impact_gain
			impatient = medium_stress_impact_gain
			lazy = medium_stress_impact_gain
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_vengefulness = -0.5
				ai_rationality = 0.5
				ai_energy = -0.5
				ai_boldness = -0.5
			}
		}
	}
}

# Try to cheat!
# By James Beaumont
contest_events.5530 = { # Contestant
	type = activity_event
	title = contest_events.5530.t
	desc = contest_events.5530.desc
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = root
		animation = scheme
	}
	right_portrait = {
		character = scope:versus_contestant
		animation = boredom
	}
	cooldown = { years = 1 }

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes

		#Standard checks.
		contest_versus_player_vs_ai_trigger = yes
	}

	immediate = {
		play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_negative_reaction"
		contest_versus_player_vs_ai_scope_effect = yes
		tournament_pivotal_flavor_variable_effect = { CONTEST = board_game ID = 5530 }
	}

	option = { # A bishop up the sleeve
		name = contest_events.5530.a
		duel = {
			skill = intrigue
			target = scope:versus_contestant
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = contest_events.5530.a.success
				send_interface_toast = {
					title = contest_events.5530.a.success
					left_icon = root
					right_icon = scope:versus_contestant
					activity_tournament_change_contestant_score_effect = { SCORE = increase_major }
				}
			}
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = contest_events.5530.a.failure
				send_interface_toast = {
					title = contest_events.5530.a.failure
					tournament_contest_versus_resignation_effect = { RESIGNER = root CONTEST = board_game  SKILL = board_game }
					hidden_effect = {
						scope:versus_contestant = {
							activity_tournament_change_contestant_score_effect = { SCORE = increase_major }
						}
					}
				}
			}
		}
		stress_impact = {
			honest = minor_stress_impact_gain
			humble = minor_stress_impact_gain
			patient = minor_stress_impact_gain
			diligent = minor_stress_impact_gain
			just = minor_stress_impact_gain
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_honor = -1
				ai_energy = 0.5
				ai_boldness = 1
			}
		}
	}

	option = { # Make up a rule
		name = contest_events.5530.b
		duel = {
			skills = { diplomacy stewardship }
			target = scope:versus_contestant
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = contest_events.5530.a.success
				send_interface_toast = {
					title = contest_events.5530.a.success
					left_icon = root
					right_icon = scope:versus_contestant
					activity_tournament_change_contestant_score_effect = { SCORE = increase_major }
				}
			}
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = contest_events.5530.a.failure
				send_interface_toast = {
					title = contest_events.5530.a.failure
					activity_tournament_change_contestant_score_effect = { SCORE = decrease_major }
					hidden_effect = {
						scope:versus_contestant = {
							activity_tournament_change_contestant_score_effect = { SCORE = increase_major }
						}
					}
				}
			}
		}
		stress_impact = {
			honest = minor_stress_impact_gain
			humble = minor_stress_impact_gain
			patient = minor_stress_impact_gain
			diligent = minor_stress_impact_gain
			just = minor_stress_impact_gain
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_honor = -1
				ai_energy = 0.5
				ai_boldness = 1
			}
		}
	}

	option = { # I won't cheat!
		name = contest_events.5530.c
		accolade_minimal_glory_gain_with_checks_effect = yes
		stress_impact = {
			deceitful = minor_stress_impact_gain
			arrogant = minor_stress_impact_gain
			impatient = minor_stress_impact_gain
			stubborn = minor_stress_impact_gain
			arbitrary = medium_stress_impact_gain
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_honor = 1
				ai_boldness = -1
			}
		}
	}
}

# Intimidate your opponent into backing down from a daring play
# By James Beaumont
contest_events.5540 = { # Contestant
	type = activity_event
	title = contest_events.5540.t
	desc = contest_events.5540.desc
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = root
		animation = anger
	}
	right_portrait = {
		character = scope:versus_contestant
		animation = boredom
	}
	cooldown = { years = 1 }

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes

		#Standard checks.
		contest_versus_player_vs_ai_trigger = yes
	}

	immediate = {
		play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_surprise_reaction"
		contest_versus_player_vs_ai_scope_effect = yes
		tournament_pivotal_flavor_variable_effect = { CONTEST = board_game ID = 5540 }
	}

	option = { # I'll intimidate them
		name = contest_events.5540.a
		duel = {
			skills = { intrigue prowess }
			target = scope:versus_contestant
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				modifier = {
					add = 10
					root.dread > scope:versus_contestant.dread
				}
				desc = contest_events.5540.a.success
				send_interface_toast = {
					title = contest_events.5540.a.success
					left_icon = root
					right_icon = scope:versus_contestant
					activity_tournament_change_contestant_score_effect = { SCORE = increase_major }
				}
			}
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				modifier = {
					add = 10
					root.dread < scope:versus_contestant.dread
				}
				desc = contest_events.5540.a.failure
				send_interface_toast = {
					title = contest_events.5540.a.failure
					activity_tournament_change_contestant_score_effect = { SCORE = decrease_major }
				}
			}
		}
		stress_impact = {
			craven = minor_stress_impact_gain
			humble = minor_stress_impact_gain
			patient = minor_stress_impact_gain
			paranoid = minor_stress_impact_gain
			calm = medium_stress_impact_gain
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_honor = -1
				ai_energy = 0.5
				ai_boldness = 1
			}
		}
	}

	option = { # I won't cheat!
		name = contest_events.5540.b
		activity_tournament_change_contestant_score_effect = { SCORE = decrease_minor }
		accolade_minimal_glory_gain_with_checks_effect = yes
		stress_impact = {
			arrogant = minor_stress_impact_gain
			impatient = minor_stress_impact_gain
			stubborn = minor_stress_impact_gain
			arbitrary = minor_stress_impact_gain
			wrathful = medium_stress_impact_gain
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_honor = 1
				ai_boldness = -1
			}
		}
	}
}

# Different culture opponent makes a move that is illegal in your culture's version of the game. Spanish rules!
# By James Beaumont
contest_events.5550 = { # Contestant
	type = activity_event
	title = contest_events.5550.t
	desc = contest_events.5550.desc
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = root
		animation = anger
	}
	right_portrait = {
		character = scope:versus_contestant
		animation = personality_rational
	}
	cooldown = { years = 1 }

	trigger = {
		#DLC check.
		#has_ep2_dlc_trigger = yes

		#Standard checks.
		contest_versus_player_vs_ai_trigger = yes
		scope:versus_matcher = {
			NOT = { culture = root.culture }
		}
	}

	immediate = {
		play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_surprise_reaction"
		contest_versus_player_vs_ai_scope_effect = yes
		tournament_pivotal_flavor_variable_effect = { CONTEST = board_game ID = 5550 }
	}

	option = { # Judge! Judge! HE BWOKE THE WOOLS!
		name = contest_events.5550.a
		duel = {
			skills = { diplomacy stewardship }
			target = scope:versus_contestant
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				modifier = { # They also follow your rules
					add = 10
					root.location.culture = root.culture
				}
				desc = contest_events.5550.a.success
				send_interface_toast = {
					title = contest_events.5550.a.success
					left_icon = root
					right_icon = scope:versus_contestant
					activity_tournament_change_contestant_score_effect = { SCORE = increase_major }
				}
			}
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				modifier = {
					add = 10
					root.location.culture = scope:versus_contestant.culture
				}
				desc = contest_events.5550.a.failure
				send_interface_toast = {
					title = contest_events.5550.a.failure
					activity_tournament_change_contestant_score_effect = { SCORE = decrease_major }
				}
			}
		}
		stress_impact = {
			craven = minor_stress_impact_gain
			humble = minor_stress_impact_gain
			patient = minor_stress_impact_gain
			shy = minor_stress_impact_gain
			calm = medium_stress_impact_gain
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_energy = 0.5
				ai_boldness = 1
			}
		}
	}

	option = { # Teach me these "Spanish rules"
		name = contest_events.5550.b
		activity_tournament_change_contestant_score_effect = { SCORE = decrease_minor }
		progress_towards_friend_effect = {
			REASON = friend_good_boardgame
			CHARACTER = scope:versus_contestant
			OPINION = default_friend_opinion
		}
		root.culture = {
			change_cultural_acceptance = {
				target = scope:versus_contestant.culture
				value = minor_cultural_acceptance_gain
				desc = cultural_acceptance_board_game
			}
		}
		stress_impact = {
			arrogant = minor_stress_impact_gain
			impatient = minor_stress_impact_gain
			stubborn = minor_stress_impact_gain
			arbitrary = minor_stress_impact_gain
			wrathful = medium_stress_impact_gain
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_honor = 1
				ai_boldness = -1
			}
		}
	}

	option = { # Judge, here's some money. Fuck Spanish rules.
		name = contest_events.5550.c
		activity_tournament_change_contestant_score_effect = { SCORE = increase_major }
		remove_short_term_gold = medium_gold_value
		stress_impact = {
			arrogant = minor_stress_impact_gain
			impatient = minor_stress_impact_gain
			stubborn = minor_stress_impact_gain
			arbitrary = minor_stress_impact_gain
			greedy = minor_stress_impact_gain
			wrathful = medium_stress_impact_gain
		}
		ai_chance = {
			base = 25
			modifier = {
				factor = 0
				short_term_gold < medium_gold_value
			}
			ai_value_modifier = {
				ai_honor = 1
				ai_greed = -1
				ai_boldness = 1
			}
		}
	}
}

# Someone is directing your opponent from elsewhere
# By James Beaumont
contest_events.5560 = { # Contestant
	type = activity_event
	title = contest_events.5560.t
	desc = contest_events.5560.desc
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = root
		animation = anger
	}
	right_portrait = {
		character = scope:versus_contestant
		animation = personality_rational
	}
	cooldown = { years = 1 }

	trigger = {
		#Standard checks.
		contest_versus_player_vs_ai_trigger = yes
	}

	immediate = {
		play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_surprise_reaction"
		contest_versus_player_vs_ai_scope_effect = yes
	}

	option = { # Judge! I see what you're doing!
		name = contest_events.5560.a
		duel = {
			skills = { diplomacy stewardship }
			target = scope:versus_contestant
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = contest_events.5560.a.success
				send_interface_toast = {
					title = contest_events.5560.a.success
					left_icon = root
					right_icon = scope:versus_contestant
					scope:versus_contestant = {
						activity_tournament_change_contestant_score_effect = { SCORE = decrease_major }
					}
				}
			}
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = contest_events.5560.a.failure
				send_interface_toast = {
					title = contest_events.5560.a.failure
					activity_tournament_change_contestant_score_effect = { SCORE = decrease_major }
				}
			}
		}
		stress_impact = {
			craven = minor_stress_impact_gain
			humble = minor_stress_impact_gain
			patient = minor_stress_impact_gain
			shy = minor_stress_impact_gain
			calm = minor_stress_impact_gain
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_energy = 0.5
				ai_boldness = 1
			}
		}
	}

	option = { # I will throw them off with unpredictable moves
		name = contest_events.5560.b
		duel = {
			skill = intrigue
			target = scope:versus_contestant
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = contest_events.5560.c.success
				send_interface_toast = {
					title = contest_events.5560.c.success
					left_icon = root
					right_icon = scope:versus_contestant
					activity_tournament_change_contestant_score_effect = { SCORE = increase_medium }
				}
			}
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = contest_events.5560.b.failure
				send_interface_toast = {
					title = contest_events.5560.b.failure
					activity_tournament_change_contestant_score_effect = { SCORE = decrease_medium }
				}
			}
		}
		stress_impact = {
			arrogant = minor_stress_impact_gain
			impatient = minor_stress_impact_gain
			stubborn = minor_stress_impact_gain
			arbitrary = minor_stress_impact_gain
			wrathful = medium_stress_impact_gain
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_honor = 1
				ai_boldness = -1
			}
		}
	}

	option = { # I will just focus on the game
		name = contest_events.5560.c
		duel = {
			skill = learning
			target = scope:versus_contestant
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = contest_events.5560.b.success
				send_interface_toast = {
					title = contest_events.5560.b.success
					left_icon = root
					right_icon = scope:versus_contestant
					activity_tournament_change_contestant_score_effect = { SCORE = increase_major }
				}
			}
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = contest_events.5560.b.failure
				send_interface_toast = {
					title = contest_events.5560.b.failure
					activity_tournament_change_contestant_score_effect = { SCORE = decrease_major }
				}
			}
		}
		stress_impact = {
			arrogant = minor_stress_impact_gain
			impatient = minor_stress_impact_gain
			stubborn = minor_stress_impact_gain
			arbitrary = minor_stress_impact_gain
			wrathful = medium_stress_impact_gain
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_honor = 1
				ai_boldness = -1
			}
		}
	}
}

# Your opponent is distracted, move the pieces?
# By James Beaumont
contest_events.5570 = { # Contestant
	type = activity_event
	title = contest_events.5570.t
	desc = contest_events.5570.desc
	theme = tournament_contest
	window = widget_activity_locale_fullscreen_event
	left_portrait = {
		character = root
		animation = chess_cocky
	}
	right_portrait = {
		character = scope:versus_contestant
		animation = dismissal
	}
	cooldown = { years = 1 }

	trigger = {
		#Standard checks.
		contest_versus_player_vs_ai_trigger = yes
	}

	immediate = {
		play_sound_effect = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_crowd_surprise_reaction"
		contest_versus_player_vs_ai_scope_effect = yes
	}

	option = { # Of course I will!
		name = contest_events.5570.a
		trigger = {
			NOR = {
				has_trait = dull
				has_trait = intellect_bad
			}
		}
		show_as_unavailable = {
			always = yes
		}
		duel = {
			skill = intrigue
			target = scope:versus_contestant
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 2.5 # Lower value because you are attempting to distract several people
					min = -49
				}
				desc = contest_events.5570.a.success
				send_interface_toast = {
					title = contest_events.5570.a.success
					left_icon = root
					right_icon = scope:versus_contestant
					activity_tournament_change_contestant_score_effect = { SCORE = increase_major }
				}
			}
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				modifier = {
					add = 10
					root.location.culture = scope:versus_contestant.culture
				}
				desc = contest_events.5570.a.failure
				send_interface_toast = {
					title = contest_events.5570.a.failure
					tournament_contest_versus_resignation_effect = {
						RESIGNER = root
						CONTEST = board_game
						SKILL = board_game
					}
				}
			}
		}
		stress_impact = {
			craven = minor_stress_impact_gain
			humble = minor_stress_impact_gain
			patient = minor_stress_impact_gain
			honest = minor_stress_impact_gain
			just = minor_stress_impact_gain
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_energy = 0.5
				ai_boldness = 1
				ai_honor = -1
			}
		}
	}

	option = { # I will eat a piece!
		name = contest_events.5570.b
		trigger = {
			OR = {
				has_trait = dull
				has_trait = intellect_bad
			}
		}
		activity_tournament_change_contestant_score_effect = { SCORE = increase_major }
		stress_impact = {
			craven = minor_stress_impact_gain
			humble = minor_stress_impact_gain
			patient = minor_stress_impact_gain
			honest = minor_stress_impact_gain
			just = minor_stress_impact_gain
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_energy = 0.5
				ai_boldness = 1
				ai_honor = -1
			}
		}
	}

	option = { # I would never sully my honor with untruth!
		name = contest_events.5570.c
		add_prestige = minor_prestige_gain
		activity_tournament_change_contestant_score_effect = { SCORE = decrease_minor }
		scope:versus_contestant = { activity_tournament_change_contestant_score_effect = { SCORE = increase_minor } }
		stress_impact = {
			deceitful = minor_stress_impact_gain
			callous = minor_stress_impact_gain
			arrogant = minor_stress_impact_gain
			arbitrary = medium_stress_impact_gain
			honest = medium_stress_impact_loss
			just = medium_stress_impact_loss
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_boldness = -0.5
				ai_honor = 1
			}
		}
	}
}


