#On actions about titles

# All on-actions in this file provide scope:transfer_type unless otherwise noted
# scope:transfer_type has the following permutations:
# flag:conquest
# flag:conquest_holy_war
# flag:conquest_claim
# flag:conquest_populist
# flag:inheritance
# flag:abdication
# flag:destroyed
# flag:created
# flag:usurped
# flag:granted
# flag:revoked
# flag:election
# flag:independency
# flag:returned
# flag:leased_out
# flag:lease_revoked
# flag:faction_demand
# flag:swear_fealty

# A title is destroyed
# root = the holder before destruction
# scope:landed_title = the title that is being destroyed
# Does *not* provide scope:transfer_type
on_title_destroyed = {
	events = {
		# Warcraft
		# british_isles.1031	# Danelaw-England partition calc.
	}
}

# A title is transferred to a new character
# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Might be dead
on_title_gain = {
	effect = {
		if = {
			limit = {
				scope:title = { is_holy_order = yes }
				NOT = { has_trait = order_member }
				has_government = holy_order_government
			}
			add_trait = order_member
		}
		
		# Warcraft
		set_long_lived_lifestyle_xp_slowdown_delayed_event_effect = yes
		if = {
			limit = {
				primary_title = scope:title # So that's your first title
			}
			if = { limit = { exists = scope:previous_holder } inherit_dark_frenzy_effect = { CHARACTER = scope:previous_holder } }
			check_available_government_delayed_event_effect = yes
		}
		if = {
			limit = {
				scope:title = title:e_scourge
			}
			if = {
				limit = { NOT = { has_trait = lich_king } }
				add_trait = lich_king
			}
			if = {
				limit = { NOT = { culture = culture:scourge } }
				set_culture = culture:scourge
			}
			if = {
				limit = {
					faith = { has_doctrine_parameter = death_magic_openly_learnable }
				}
				set_character_faith = faith:death_god
			}
			if = {
				limit = { NOT = { has_trait = being_undead } }
				become_undead_effect = yes
			}
			
			if = {
				limit = {
					exists = scope:previous_holder
					scope:previous_holder = {
						is_alive = yes
						has_trait = lich_king
					}
				}
				scope:previous_holder = { remove_trait = lich_king }
			}
		}

		#Did I receive a title from my sibling?
		if = {
			limit = {
				exists = scope:previous_holder
				scope:previous_holder = {
					is_alive = yes
					exists = var:sibling_waiting_for_land
					any_sibling = {
						this = root
						this = scope:previous_holder.var:sibling_waiting_for_land
					}
				}
			}
			add_character_flag = {
				flag = got_title_from_sibling
				years = 4
			}
		}
		
		# Warcraft
		if = {
			limit = {
				exists = scope:previous_holder
				scope:previous_holder = {
					is_in_any_pol_faction_trigger = yes
				}
			}
			if = {
				limit = {
					exists = scope:transfer_type
					scope:transfer_type = flag:inheritance
				}
				try_to_inherit_any_faction_effect = { PREV_HOLDER = scope:previous_holder }
			}
			else = {
				scope:previous_holder = { 
					try_to_clean_up_any_faction_effect = yes
				}
			}
		}
		if = {
			limit = {
				exists = scope:previous_holder
				scope:previous_holder = { has_variable_list = coalition_members }
			}
			try_to_inherit_coalition_as_crisis_effect = { PREV_HOLDER = scope:previous_holder }
		}
		else_if = {
			limit = {
				exists = scope:previous_holder
				scope:previous_holder = { has_variable_list = coalition_targets }
			}
			try_to_inherit_coalition_as_member_effect = { PREV_HOLDER = scope:previous_holder }
		}
	}
	events = {
		# Warcraft
		# roman_restoration.0005		#New Roman Emperor gets Augustus trait. (old holder, if still alive, loses it)
		# roman_restoration.0199		#Restoring the Pentarchy.

		religious_decision.0312		# Base game: new holder of a county with a runestone
		fp1_other_decisions.0113	# FP1: new holder of a county with a runestone
		coa.1						# check if title Coat of Arms should change.
		delay = { days = 1 }
		realm_maintenance.2001		#Big notification about inheriting emperor tier title

		# Warcraft
		# british_isles.1032			# Danelaw-England partition calc.
		# fp1_major_decisions.1011	# Harald Tanglehair becomes Harald Fairhair.
		# fp1_major_decisions.1012	# If Norway has just been created for the first time, flag that.
	}
}

# A title is inherited by a character
# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Should be dead
on_title_gain_inheritance = {
	events = {
	}
}

# A title is usurped by a character
# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Shouldn't be dead
on_title_gain_usurpation = {
	events = {
	}
}

# A title is lost by a character
# root = the old holder
# scope:title = the title that changes hands
# scope:new_holder = new holder.
on_title_lost = {
	events = {
		# Warcraft
		# british_isles.1033	# Danelaw-England partition calc.
	}

	effect = {
		#Earmark landless Scandinavians for adventuring.
		if = {
			limit = {
				#We only want to grab tribal cultures.
				culture = {
					# Warcraft
					has_viking_adventurers_era_trigger = yes
				}
				#Must have lost their last piece of land.
				is_landed = no
				#If they've ventured far outside Europe, they're unlikely to come back, so we don't #want them.
				scope:title = {
					tier = tier_county
					title_province = {
						# Warcraft
						scandi_adventurer_region_trigger = yes
					}
				}
			}
			#Norse, Norwegians, & Danes go into the western adventurer list.
			if = {
				limit = {
					# Warcraft
					potential_western_scandi_adventurer_trigger = yes
				}
				add_to_global_variable_list = {
					name = western_scandinavian_adventurer_list
					target = this
				}
			}
			#Norse & Swedes go into the eastern adventurer list.
			if = {
				limit = {
					# Warcraft
					potential_eastern_scandi_adventurer_trigger = yes
				}
				add_to_global_variable_list = {
					name = eastern_scandinavian_adventurer_list
					target = this
				}
			}
		}

		#Apply loss of stress to the Rivals
		if = {
			limit = {
				scope:title.tier >= tier_county
				OR = {
					scope:transfer_type = flag:conquest
					scope:transfer_type = flag:conquest_holy_war
					scope:transfer_type = flag:conquest_claim
					scope:transfer_type = flag:conquest_populist
					scope:transfer_type = flag:abdication
					scope:transfer_type = flag:usurped
					scope:transfer_type = flag:revoked
					scope:transfer_type = flag:faction_demand
				}
			}
			root = {
				save_scope_as = actor
			}
			every_relation ={
				type = rival

				send_interface_message = {
					type = event_generic_neutral
					title = msg_rival_dethroned
					left_icon = scope:actor
					right_icon = scope:title

					custom_tooltip = msg_rival_dethroned_desc

					stress_impact = { 
						base = medium_stress_loss
						vengeful = medium_stress_loss
					}
				}
			}
		}
	}
}

# A claim is gained by a character
# root = the claimant
# scope:title = the title that is claimed
on_explicit_claim_gain = {
	events = {
		coa.1 # check if title Coat of Arms should change.
	}
}

# A claim is lost by a character
# root = the claimant
# scope:title = the title that was claimed
on_explicit_claim_lost = {
	events = {
		coa.1 # check if title Coat of Arms should change.
	}
}

# A title change makes the character rank up in the landed tiers (eg Duke -> King)
# root = character ranking up
# scope:title = old primary title
on_rank_up = { # Will not fire during history execution or for dying characters
	events = {
		# Sets race trait (gene)
		WCRAC.20
	}
	effect = {
		# Warcraft
		
		# Warcraft
		# Barons don't get it but here they can start
		start_yearly_dark_frenzy_pulse_effect = yes
		
		add_achievement_flag_effect = { FLAG = achievement_moving_up_in_the_world_flag }
		update_embassies_effect = yes
		every_ally = {
			update_embassies_effect = yes
		}
		# Make a note of ranking up for stele purposes.
		if = {
			limit = {
				# DLC check.
				has_fp1_dlc_trigger = yes
				# Is the culture eligible?
				fp1_can_raise_stele_trigger = yes
				# Aaaaand, for balance reasons, were they landed already?
				exists = scope:title
			}
			set_variable = {
				name = recent_rank_increase
				value = root.primary_title
				years = 5
			}
		}
	}
}

# A title change makes the character rank down in the landed tiers (eg King -> Duke)
# root = character ranking down
# scope:title = old primary title
on_rank_down = { # Will not fire during history execution or for dying characters
	events = {
	}
	effect = {
		add_character_flag = {
			flag = make_suicide_available
			years = 5
		}
		update_embassies_effect = yes
		every_ally = {
			update_embassies_effect = yes
		}
	}
}

# A character gains a vassal
# root = character gaining vassal
# scope:vassal = vassal being gained
# scope:old_liege = the previous liege of the vassal. Might be the null character (vassal used to be a non-ruler or independent), so make sure to use "exists" checks where relevant
on_vassal_gained = {
	effect = {
		# Warcraft
		scope:vassal = {
			try_to_clean_up_any_faction_effect = yes
			try_to_clean_up_coalition_as_crisis_effect = yes
			try_to_clean_up_coalition_as_member_effect = yes
		}
	}
	events = {
		realm_maintenance.1000 # Notify vassals of new liege
	}
}

# A baron is found or created for a title, E.G., due to the player using the "Give to Low Noble" action
# No transfer type here; it's always a grant
# root = the baron
# scope:liege = the person who wanted them created
# scope:title = the barony
on_baron_found_or_created_for_title = {
	effect = {
		add_opinion = {
			target = scope:liege
			modifier = received_title_barony
		}
	}
}
