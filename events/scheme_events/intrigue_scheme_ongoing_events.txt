namespace = intrigue_scheme_ongoing

# 1001-1999: Events triggered by agents
# 2001-2999: Events triggered by the target
# 3001-3999: Events triggered by Scheme Owner
# 4001-4999: Events when targeting children




#######################
# A Well-timed Bribe
# by Linnéa Thimrén and Petter Vilberg
#######################
# Can pay gold for scheme progress
 intrigue_scheme_ongoing.1001 = {
	type = character_event
	title = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:scheme = { scheme_type = murder } }
				desc = murder_event_title
			}
			triggered_desc = {
				trigger = { scope:scheme = { scheme_type = abduct } }
				desc = abduct_event_title
			}
			triggered_desc = {
				trigger = { scope:scheme = { scheme_type = elope } }
				desc = elope_event_title
			}
			triggered_desc = {
				trigger = { scope:scheme = { scheme_type = steal_back_artifact } }
				desc = steal_back_artifact_event_title
			}
		}
		desc = intrigue_scheme_ongoing.1001.t
	}
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:scheme = { scheme_type = elope } }
				desc = intrigue_scheme_ongoing.1001.elope.desc
			}
			desc = intrigue_scheme_ongoing.1001.desc
		}
	}
	theme = generic_intrigue_scheme
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	left_portrait = {
		character = scope:agent
		animation = personality_greedy
	}
	right_portrait = scope:target

	trigger = {
		exists = scope:scheme
		scope:scheme = {
			scheme_number_of_agents > 0
			any_scheme_agent = {
				is_alive = yes
				is_courtier_of = scope:target
			}
		}
		short_term_gold < medium_gold_value_check
		NOT = { exists = scope:scheme.var:had_payment_event }
	}

	immediate = {
		scope:scheme = {
			random_scheme_agent = {
				limit = {
					is_courtier_of = scope:target
					is_alive = yes
				}
				save_scope_as = agent
				add_character_flag = {
					flag = use_stealth_clothes
					days = 1
				}
			}
			set_variable = {
				name = had_payment_event
				value = yes
				days = 3650
			}
		}
		#Dummy check to avoid errors since the flag is only checked in portrait modifiers otherwise
		if = {
			limit = {
				has_character_flag = use_stealth_clothes
			}
			#Didn't see you there!
		}
	}

	option = { #Pay the gold
		name = intrigue_scheme_ongoing.1001.a
		remove_short_term_gold = medium_gold_value
		scope:agent = {
			duel = {
				skill = intrigue
				value = 10
				20 = {		
					desc = intrigue_scheme_ongoing.1008.a.success
					compare_modifier = {
						value = scope:duel_value
						multiplier = 0.75
						min = 0
					}
					root = {
						send_interface_toast = {
							title = intrigue_scheme_ongoing.1008.a.success
							left_icon = scope:agent
							scope:scheme = {
								add_scheme_modifier = {
									type = scheme_agent_closing_in_modifier
								}
							}
						}
					}
				}
				10 = {		
					desc = intrigue_scheme_ongoing.1008.a.failure
					compare_modifier = {
						value = scope:duel_value
						multiplier = -0.5
						min = -14
					}
					root = {
						send_interface_toast = {
							title = intrigue_scheme_ongoing.1008.a.failure
							left_icon = scope:agent
							if = {
								limit = {
									scope:scheme = {
										is_scheme_exposed = yes
									}
								}
								scope:scheme = {
									expose_scheme_agent = scope:agent
								}
							}
							else = {
								scope:scheme = {
									expose_scheme = yes
								}
							}
						}
					}
				}
			}
		}
		stress_impact = {
			greedy = medium_stress_impact_gain
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 100
				has_trait = greedy
			}
		}
	}

	option = { #Save it
		name = intrigue_scheme_ongoing.1001.b
		scope:agent = {
			add_opinion = {
				modifier = respect_opinion
				target = root
				opinion = -10
			}
		}
		stress_impact = {
			impatient = minor_stress_impact_gain
		}
		ai_chance = {
			base = 50
		}
	}
}



########################
# Divine Righteousness
# by Linnéa Thimrén and Petter Vilberg
########################
# Ends justify the means, giving you a nice boost
intrigue_scheme_ongoing.1002 = {
	type = character_event
	title = intrigue_scheme_ongoing.1002.t
	desc = intrigue_scheme_ongoing.1002.desc
	theme = generic_intrigue_scheme
	left_portrait = {
		character = scope:agent_in_question
		animation = personality_zealous
	}
	right_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		scope:scheme = {
			any_scheme_agent = {
				has_trait = zealous
				is_christian_trigger = yes
				intrigue < 4
				NOT = { is_agent_exposed_in_scheme = scope:scheme }
			}
			scheme_target = {
				piety_level <= medium_piety_level
			}
			NOT = { has_variable = had_overly_zealous_agent_event }
		}
		scope:scheme.scheme_target = {
			# Warcraft
			age > age_15_value
			is_christian_trigger = yes
		}
	}

	weight_multiplier = {
		base = 0.5
		modifier = {
			add = 1
			scope:scheme = {
				is_scheme_exposed = yes
			}
		}
		modifier = {
			factor = 1.5
			scope:scheme = {
				any_scheme_agent = {
					has_trait = zealous
					NOT = { faith = scope:scheme.scheme_target.faith }
					NOT = { is_agent_exposed_in_scheme = scope:scheme }
				}
			}
		}
	}

	immediate = {
		scope:scheme = {
			random_scheme_agent = {
				limit = {
					has_trait = zealous
					NOT = { faith = scope:scheme.scheme_target.faith }
					NOT = { is_agent_exposed_in_scheme = scope:scheme }
				}
				alternative_limit = {
					has_trait = zealous
					NOT = { is_agent_exposed_in_scheme = scope:scheme }
				}
				save_scope_as = agent_in_question
				add_character_flag = {
					flag = use_stealth_clothes
					days = 1
				}
			}
			set_variable = {
				name = had_overly_zealous_agent_event
				value = yes
				days = 3650
			}
		}
	}

	# Encourage them
	option = {
		name = intrigue_scheme_ongoing.1002.a
		trigger = { NOT = { has_trait = zealous } }
		scope:agent_in_question = {
			duel = {
				skill = diplomacy
				value = 10
				20 = {
					desc = intrigue_scheme_ongoing.1002.a.success
					compare_modifier = {
						value = scope:duel_value
						multiplier = 0.75
						min = 0
					}
					root = {
						send_interface_toast = {
							title = intrigue_scheme_ongoing.1002.a.success
							left_icon = scope:agent_in_question
							scope:scheme = {
								add_scheme_modifier = {
									type = lifestyle_converted_informants_modifier
								}
							}
						}
					}
				}
				5 = {
					desc = intrigue_scheme_ongoing.1002.a.failure
					compare_modifier = {
						value = scope:duel_value
						multiplier = -0.5
						min = -14
					}
					root = {
						send_interface_toast = {
							title = intrigue_scheme_ongoing.1002.a.failure
							left_icon = scope:agent_in_question
							if = {
								limit = {
									scope:scheme = {
										is_scheme_exposed = no
									}
								}
								scope:scheme = {
									expose_scheme = yes
									expose_scheme_agent = scope:agent_in_question
								}
							}
							else = {		
								scope:scheme = {
									expose_scheme_agent = scope:agent_in_question
								}
							}
						}
					}
				}
			}
			add_opinion = {
				modifier = friendliness_opinion
				opinion = 20
				target = root
			}
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = 0.5
			}
		}
	}

	# They will shut up!
	option = {
		name = intrigue_scheme_ongoing.1002.b
		scope:agent_in_question = {
			add_opinion = {
				modifier = respect_opinion
				target = root
				opinion = -15
			}
		}
		stress_impact = {
			zealous = major_stress_impact_gain
		}
		ai_chance = {
			base = 50
		}
	}

	option = {
		name = intrigue_scheme_ongoing.1002.c
		trigger = {
			has_trait = zealous
		}
		trait = zealous
		send_interface_toast = {
			title = intrigue_scheme_ongoing.1002.a.success
			scope:scheme = {
				add_scheme_progress = scheme_progress_gain
			}
		}
	}
}


##########################
# A Little Too Talkative
# by Linnéa Thimrén and Petter Vilberg
##########################
intrigue_scheme_ongoing.1004 = {
	type = character_event
	title = intrigue_scheme_ongoing.1004.t
	desc = intrigue_scheme_ongoing.1004.desc
	theme = generic_intrigue_scheme
	left_portrait = {
		character = scope:agent_in_question
		animation = scheme
	}
	right_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		scope:scheme = {
			any_scheme_agent = {
				has_trait = gregarious
			}
		}
		NOT = { exists = scope:scheme.var:had_talkative_agent_event }
	}

	immediate = {
		scope:scheme = {
			random_scheme_agent = {
				limit = { has_trait = gregarious }
				save_scope_as = agent_in_question
				add_character_flag = {
					flag = use_stealth_clothes
					days = 1
				}
			}

			set_variable = {
				name = had_talkative_agent_event
				value = yes
				days = 3650
			}
		}	
	}

	# Let them blabber on
	option = {
		name = intrigue_scheme_ongoing.1004.a
		scope:agent_in_question = {
			duel = {
				skill = intrigue
				value = 10
				20 = {		
					desc = intrigue_scheme_ongoing.1004.a.success
					compare_modifier = {
						value = scope:duel_value
						multiplier = 0.75
						min = 0
					}
					root = {
						send_interface_toast = {
							title = intrigue_scheme_ongoing.1004.toast.success
							left_icon = scope:agent_in_question
							scope:scheme = {
								add_scheme_modifier = {
									type = scheme_talking_agent_modifier
								}
							}
						}
					}
				}
				10 = {		
					desc = intrigue_scheme_ongoing.1004.a.failure
					compare_modifier = {
						value = scope:duel_value
						multiplier = -0.5
						min = -14
					}
					root = {
						send_interface_toast = {
							title = intrigue_scheme_ongoing.1004.toast.failure
							left_icon = scope:agent_in_question
							if = {
								limit = {
									scope:scheme = {
										is_scheme_exposed = no
									}
								}
								scope:scheme = {
									expose_scheme = yes
								}
							}
							else = {						
								scope:scheme = {
									expose_scheme_agent = scope:agent_in_question
								}
							}
						}
					}
				}
			}
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				scope:agent_in_question = {
					intrigue >= medium_skill_rating
				}
			}
			ai_value_modifier = {
				ai_boldness = 0.5
			}
		}
	}

	# Make them stop
	option = {
		name = intrigue_scheme_ongoing.1004.b
		scope:scheme = {
			add_scheme_modifier = { type = gregarious_demand_complete_silence_modifier days = 365 }
		}
		stress_impact = {
			gregarious = minor_stress_impact_gain
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = -0.25
			}
		}
	}
}


######################
# Lazy Agent leaves traces
# by Linnéa Thimrén and Petter Vilberg
######################
intrigue_scheme_ongoing.1006 = {
	type = character_event
	title = intrigue_scheme_ongoing.1006.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:scheme = { scheme_type = elope } }
				desc = intrigue_scheme_ongoing.1006.elope.desc
			}
			desc = intrigue_scheme_ongoing.1006.desc
		}
	}
	theme = generic_intrigue_scheme
	left_portrait = {
		character = scope:agent_in_question
		animation = personality_irrational
	}
	right_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		scope:scheme = {
			NOT = { exists = var:had_slothful_clues_event }
			any_scheme_agent = {
				has_trait = lazy
			}
		}
		scope:target = {
			is_landed = yes
		}
	}

	immediate = {
		scope:scheme = {
			set_variable = {
				name = had_slothful_clues_event
				value = yes
				days = 3650
			}
			random_scheme_agent = {
				limit = { has_trait = lazy }
				save_scope_as = agent_in_question
				add_character_flag = {
					flag = use_stealth_clothes
					days = 1
				}
			}
		}
	}

	option = { # They might just stress the target out enough...
		name = intrigue_scheme_ongoing.1006.a
		scope:agent_in_question = {
			duel = {
				skill = intrigue
				target = scope:target
				20 = {		
					desc = intrigue_scheme_ongoing.1006.a.success
					compare_modifier = {
						value = scope:duel_value
						multiplier = 0.75
						min = 0
					}
					root = {
						send_interface_toast = {
							title = intrigue_scheme_ongoing.1006.a.success
							left_icon = scope:agent_in_question
							scope:scheme = {
								add_scheme_modifier = {
									type = scheme_stressed_target_modifier
								}
							}
							scope:target = {
								add_stress = medium_stress_gain
							}
						}
					}
				}
				10 = {		
					desc = intrigue_scheme_ongoing.1006.a.failure
					compare_modifier = {
						value = scope:duel_value
						multiplier = -0.5
						min = -14
					}
					root = {
						send_interface_toast = {
							title = intrigue_scheme_ongoing.1006.a.failure
							left_icon = scope:agent_in_question
							if = {
								limit = {
									scope:scheme = {
										is_scheme_exposed = no
									}
								}
								scope:scheme = {
									expose_scheme = yes
								}
							}
							else = {						
								scope:scheme = {
									expose_scheme_agent = scope:agent_in_question
								}
							}
						}
					}
				}
			}
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = 0.75
			}
		}
	}

	option = { # They'll have to be more careful!!
		name = intrigue_scheme_ongoing.1006.b
		scope:scheme = {
			add_scheme_modifier = {
				type = slothful_reduces_power_modifier
				days = 1000
			}
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = patient
			}
		}
	}
}


######################
# Second Thoughts
# by Linnéa Thimrén and Petter Vilberg
######################
scripted_trigger intrigue_scheme_ongoing_1007_caring_character = {
	OR = {
		is_of_major_interest_to_root_trigger = yes
		is_of_minor_interest_to_root_trigger = yes
	}
	opinion = {
		target = root
		value > 30
	}
	is_ai = yes
	NOR = {
		has_trait = callous
		has_trait = sadistic
		has_trait = arrogant
		has_trait = cynical
	}
}

scripted_trigger intrigue_scheme_ongoing_1007_particularly_caring_character = {
	intrigue_scheme_ongoing_1007_caring_character = yes
	OR = {
		has_relation_friend = root
		has_relation_lover = root
		betrothed = root
		is_consort_of = root
	}
}

intrigue_scheme_ongoing.1007 = {
	type = character_event
	title = intrigue_scheme_ongoing.1007.t
	desc = intrigue_scheme_ongoing.1007.desc
	theme = generic_intrigue_scheme
	left_portrait = {
		character = scope:caring_agent
		animation = worry
	}
	right_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = {
		scope:scheme = {
			any_scheme_agent = {
				intrigue_scheme_ongoing_1007_caring_character = yes
			}
		}
		NOT = {
			has_character_flag = had_intrigue_scheme_ongoing_1007_event
		}
	}

	weight_multiplier = {
		base = 0.75
		modifier = {
			add = 1
			scope:scheme = {
				any_scheme_agent = {
					intrigue_scheme_ongoing_1007_particularly_caring_character = yes
				}
			}
		}
		compare_modifier = {
			target = scope:scheme
			value = scheme_power_resistance_ratio
			multiplier = -0.5
			min = -0.9
			max = 1
		}
	}

	immediate = {
		add_character_flag = {
			flag = had_intrigue_scheme_ongoing_1007_event
			days = 1825
		}
		scope:scheme = {
			random_scheme_agent = {
				limit = {
					intrigue_scheme_ongoing_1007_particularly_caring_character = yes
				}
				alternative_limit = {
					intrigue_scheme_ongoing_1007_caring_character = yes
				}
				weight = {
					base = 1
					modifier = {
						add = 0.5
						has_trait = compassionate
					}
				}
				if = {
					limit = { root = { is_ai = no }	}
					assign_quirk_effect = yes
				}
				save_scope_as = caring_agent
				add_character_flag = {
					flag = use_stealth_clothes
					days = 1
				}
			}
		}
	}

	option = { #Focus on scheme
		name = intrigue_scheme_ongoing.1007.a
		scope:scheme = {
			add_scheme_progress = scheme_progress_gain
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_rationality = 0.5
				ai_vengefulness = 0.25
			}
		}
	}

	
	option = { #Focus on them
		name = intrigue_scheme_ongoing.1007.b
		reverse_add_opinion = {
			target = scope:caring_agent
			modifier = love_opinion
			opinion = 20
		}
		stress_impact = {
			callous = medium_stress_impact_gain
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_compassion = 0.5
			}
			opinion_modifier = {
				opinion_target = scope:caring_agent
				multiplier = 0.5
			}
		}
	}
}


##################################
# Target is closing in on agent
##################################

#Suitable agent
scripted_trigger intrigue_scheme_ongoing_1008_suitable_agent = {
	NOT = { is_agent_exposed_in_scheme = scope:scheme }
}

intrigue_scheme_ongoing.1008 = {
	type = character_event
	title = intrigue_scheme_ongoing.1008.t
	desc = intrigue_scheme_ongoing.1008.desc
	theme = generic_intrigue_scheme
	left_portrait = {
		character = scope:agent
		animation = scheme
	}
	right_portrait = scope:defender
	lower_right_portrait = scope:spymaster
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = {
		NOT = { scope:scheme.scheme_target.court_owner = root }
		NOT = { has_character_flag = had_intrigue_scheme_ongoing_1008_event }
		scope:scheme = {
			any_scheme_agent = {
				intrigue_scheme_ongoing_1008_suitable_agent = yes
			}
		}
		scope:target = {
			is_landed = yes
		}
	}

	weight_multiplier = {
		base = 0.75
		modifier = {
			add = 0.5
			scope:scheme = { scheme_number_of_exposed_agents > 0 }
		}
		modifier = {
			trigger = {
				exists = cp:councillor_spymaster
			}
			add = 0.25
			exists = cp:councillor_spymaster
			cp:councillor_spymaster = {
				is_performing_council_task = task_find_secrets
				councillor_task_target = scope:scheme.scheme_defender
			}
		}
	}

	immediate = {
		add_character_flag = {
			flag = had_intrigue_scheme_ongoing_1008_event
			days = 1825
		}
		scope:scheme = {
			scheme_defender = {
				save_scope_as = defender
			}
			random_scheme_agent = {
				limit = {
					intrigue_scheme_ongoing_1008_suitable_agent = yes
				}
				#A target of more value for the scheme is more likely to be picked
				weight = {
					base = 10
					compare_modifier = {
						trigger = { intrigue > 10 }
						value = intrigue
						multiplier = 0.5
						max = 10
					}
				}
				save_scope_as = agent

				add_character_flag = {
					flag = use_stealth_clothes
					days = 1
				}
			}
		}

		#Is my spymaster currently spying in target's court?
		if = {
			limit = {
				exists = cp:councillor_spymaster
				cp:councillor_spymaster = {
					is_performing_council_task = task_find_secrets
					councillor_task_target = scope:defender
				}
			}
			cp:councillor_spymaster = {
				save_scope_as = councillor
			}
		}
	}

	#Let them work it out on their own
	option = {
		name = intrigue_scheme_ongoing.1008.a
		scope:agent = {
			duel = {
				skill = intrigue
				value = 10
				15 = {		
					desc = intrigue_scheme_ongoing.1008.a.success
					compare_modifier = {
						value = scope:duel_value
						multiplier = 0.5
						min = -14
					}
					root = {
						send_interface_toast = {
							title = intrigue_scheme_ongoing.1008.a.success
							left_icon = scope:agent
							scope:agent = {
								add_intrigue_skill = 1
							}
						}
					}
				}
				15 = {		
					desc = intrigue_scheme_ongoing.1008.a.failure
					compare_modifier = {
						value = scope:duel_value
						multiplier = -0.5
						min = -14
					}
					root = {
						send_interface_toast = {
							title = intrigue_scheme_ongoing.1008.a.failure
							left_icon = scope:agent
							if = {
								limit = {
									scope:scheme = {
										is_scheme_exposed = no
									}
								}
								scope:scheme = {
									expose_scheme = yes
								}
							}
							else = {						
								scope:scheme = {
									expose_scheme_agent = scope:agent
								}
							}
						}
					}
				}
			}
		}
	}

	#Their trail needs to end
	option = {
		name = intrigue_scheme_ongoing.1008.b
		scope:agent = {
			forbid_from_scheme = scope:scheme
		}
	}
	
	#Have your spymaster intervene
	option = {
		name = intrigue_scheme_ongoing.1008.c
		trigger = {
			exists = scope:councillor
		}
		scope:councillor = {
			add_character_modifier = {
				modifier = spymaster_task_sacrificed_efficiency_modifier
				days = 3650
			}
		}
	}
}



#############################
# A Close Relation Gets a Push to Join the Scheme
#############################

scripted_trigger intrigue_scheme_ongoing_1008_close_relation = {
	scope:scheme = {
		NOT = { scheme_is_character_agent = prev }
	}
	is_valid_as_agent_in_scheme = scope:scheme
	join_scheme_chance = {
		scheme = scope:scheme
		min = -15
		max = 1
	}
	opinion = {
		target = root
		value > 30
	}
	is_ai = yes
}

intrigue_scheme_ongoing.1009 = {
	type = character_event
	title = intrigue_scheme_ongoing.1009.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:scheme = { scheme_type = elope } }
				desc = intrigue_scheme_ongoing.1009.elope.desc
			}
			desc = intrigue_scheme_ongoing.1009.desc
		}
	}
	theme = generic_intrigue_scheme
	left_portrait = scope:potential_agent
	right_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = {
		scope:scheme = {
			scheme_progress < 8
		}
		OR = {
			any_relation = {
				type = lover
				intrigue_scheme_ongoing_1008_close_relation = yes
			}
			any_relation = {
				type = friend
				intrigue_scheme_ongoing_1008_close_relation = yes
			}
			any_close_family_member = {
				intrigue_scheme_ongoing_1008_close_relation = yes
			}
		}
		NOT = { has_character_flag = had_intrigue_scheme_ongoing_1009_event }
	}

	immediate = {
		add_character_flag = {
			flag = had_intrigue_scheme_ongoing_1009_event
			days = 1825
		}
		random_relation = {
			type = lover
			limit = {
				intrigue_scheme_ongoing_1008_close_relation = yes
			}
			add_to_list = potential_agents
		}
		random_relation = {
			type = friend
			limit = {
				intrigue_scheme_ongoing_1008_close_relation = yes
			}
			add_to_list = potential_agents
		}
		random_close_family_member = {
			limit = {
				intrigue_scheme_ongoing_1008_close_relation = yes
			}
			add_to_list = potential_agents
		}
		random_in_list = {
			list = potential_agents
			save_scope_as = potential_agent
		}
	}

	option = { #Please help me
		name = intrigue_scheme_ongoing.1009.a
		scope:potential_agent = {
			force_add_to_scheme = {
				scheme = scope:scheme
				years = 5
			}
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_compassion = -0.5
				ai_honor = -0.5
				ai_boldness = 1
				ai_greed = 0.5
			}
		}
	}

	option = { #There is one thing you can do...
		name = intrigue_scheme_ongoing.1009.b
		scope:scheme = {
			add_scheme_progress = scheme_progress_gain
		}
		ai_chance = {
			base = 100
			modifier = {
				add = -50
				scope:scheme.scheme_power_resistance_difference < 0
			}
			compare_modifier = { #Less likely the less advantage you have in the scheme
				value = scope:scheme.scheme_power_resistance_difference
				multiplier = -1
			}
		}
	}
}


###################################################
# Events triggered by the target
# 2001 - 2999
###################################################


#################################
# Trusting target trusts agent
# by Petter Vilberg and Linnéa Thimrén
#################################
intrigue_scheme_ongoing.2001 = {
	type = character_event
	title = intrigue_scheme_ongoing.2001.t
	desc = intrigue_scheme_ongoing.2001.desc
	theme = generic_intrigue_scheme
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	left_portrait = scope:target
	right_portrait = scope:agent_in_question

	trigger = {
		scope:scheme.scheme_target = {
			has_trait = trusting
			# Warcraft
			age > age_14_value
			is_ai = yes
		}
		scope:scheme = {
			any_scheme_agent = {
				reverse_opinion = {
					target = scope:scheme.scheme_target
					value >= 10
				}
			}
		}
		NOT = { exists = scope:scheme.var:trusting_target_event }
	}

	immediate = {
		scope:scheme = {
			random_scheme_agent = {
				limit = {
					#Try to find someone the target has a very high opinion of.
					scope:scheme.scheme_target = {
						opinion = {
							target = prev
							value >= 40
						}
					}
				}
				alternative_limit = {
					# Or just settle for someone they like well enough
					scope:scheme.scheme_target = {
						opinion = {
							target = prev
							value >= 10
						}
					}	
				}
				save_scope_as = agent_in_question
				add_character_flag = {
					flag = use_stealth_clothes
					days = 1
				}
			}
		}
		scope:scheme = {
			set_variable = {
				name = trusting_target_event
				value = yes
				days = 3650
			}
		}
	}

	# Offer good advice until the time is right.
	option = {
		name = intrigue_scheme_ongoing.2001.a
		scope:scheme = {
			add_scheme_modifier = { type = murder_trusted_advice_modifier days = 365 }
		}
	}

	# You can make sure they will be in the right place at the right time.
	option = {
		name = intrigue_scheme_ongoing.2001.b
		scope:scheme = {
			add_scheme_progress = scheme_progress_gain
		}
	}
}


######################################
# Drunkard target makes things easier
######################################
scripted_trigger intrigue_scheme_ongoing_2002_agent_trigger = {
	is_ai = yes
	OR = {
		is_in_the_same_court_as = scope:target
		is_vassal_of = scope:target
	}
}

intrigue_scheme_ongoing.2002 = {
	type = character_event
	desc = intrigue_scheme_ongoing.2002.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:target
	right_portrait = scope:agent_in_question
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		is_available_adult = yes
		scope:target = {
			has_trait = drunkard
			is_ai = yes
		}
		scope:scheme = {
			scheme_number_of_agents > 0
			NOT = { has_variable = had_drunkard_target_scheme_event }
			any_scheme_agent = {
				intrigue_scheme_ongoing_2002_agent_trigger = yes
			}
		}
	}

	immediate = {
		scope:scheme = {
			set_variable = {
				name = had_drunkard_target_scheme_event
				value = yes
				days = 3650
			}
			random_scheme_agent = {
				limit = {
					intrigue_scheme_ongoing_2002_agent_trigger = yes
				}
				save_scope_as = agent_in_question
				add_character_flag = {
					flag = use_stealth_clothes
					days = 1
				}
			}
		}
	}

	# Encourage
	option = {
		name = intrigue_scheme_ongoing.2002.a
		remove_short_term_gold = 50
		scope:scheme = {
			add_scheme_modifier = {
				type = scheme_impaired_judgment_modifier
			}
		}
	}

	# Make them feel safe in their crapulence.
	option = {
		name = intrigue_scheme_ongoing.2002.b
		trigger = {
			NOT = {
				has_trait = drunkard
			}
		}
		scope:scheme = {
			add_scheme_modifier = {	
				type = scheme_drunkard_murder_target_modifier
			}
		}
	}

	option = {
		name = intrigue_scheme_ongoing.2002.c
		trigger = {
			has_trait = drunkard
		}
		scope:scheme = {
			add_scheme_modifier = {
				type = scheme_drunkard_murdering_drunkard_modifier
			}
		}
	}
}


######################
# Discover a secret about someone else at target's court
######################
scripted_trigger intrigue_scheme_ongoing_2003_other_secret_target = {
	NOT = { this = scope:target }
	any_secret = {
		NOT = { is_known_by = scope:owner }
	}
	scope:scheme = {
		NOT = { scheme_is_character_agent = prev }
	}
}

intrigue_scheme_ongoing.2003 = {
	type = character_event
	title = intrigue_scheme_ongoing.2003.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:secret_to_reveal = {
						OR = {
							secret_type = secret_homosexual
							secret_type = secret_deviant
							secret_type = secret_cannibal
						}
					}
				}
				desc = intrigue_scheme_ongoing.2003.bad_habits
			}
			triggered_desc = {
				trigger = {
					scope:secret_to_reveal = {
						OR = {
							secret_type = secret_lover
						}
					}
				}
				desc = intrigue_scheme_ongoing.2003.secret_relationships
			}
			triggered_desc = {
				trigger = {
					scope:secret_to_reveal = {
						OR = {
							secret_type = secret_disputed_heritage
							secret_type = secret_unmarried_illegitimate_child
						}
					}
				}
				desc = intrigue_scheme_ongoing.2003.bastardy
			}
			triggered_desc = {
				trigger = {
					scope:secret_to_reveal = {
						OR = {
							secret_type = secret_murder_attempt
							secret_type = secret_murder
						}
					}
				}
				desc = intrigue_scheme_ongoing.2003.murder
			}
			desc = intrigue_scheme_ongoing.2003.desc
		}
	}
	theme = generic_intrigue_scheme
	left_portrait = {
		character = scope:agent
		animation = scheme
	}
	right_portrait = scope:other_secret_target
	lower_right_portrait = scope:secret_target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = {
		exists = scope:target.court_owner
		scope:target.court_owner = {
			OR = {
				any_courtier = {
					intrigue_scheme_ongoing_2003_other_secret_target = yes
				}
				AND = {
					NOT = { this = scope:target }
					intrigue_scheme_ongoing_2003_other_secret_target = yes
				}
			}
		}
		scope:scheme = {
			scheme_number_of_agents > 0
			any_scheme_agent = {
				NOT = { is_agent_exposed_in_scheme = scope:scheme }
			}
			scheme_power_resistance_difference > 0
		}
		NOT = {
			has_character_flag = had_intrigue_scheme_ongoing_2003_event
		}
	}

	weight_multiplier = {
		base = 1
		modifier = {
			add = 1
			scope:scheme = {
				scheme_number_of_agents = 1
				any_scheme_agent = {
					NOT = { is_agent_exposed_in_scheme = scope:scheme }
				}
			}
		}
	}

	immediate = {
		add_character_flag = {
			flag = had_intrigue_scheme_ongoing_2003_event
			days = 1825
		}
		if = {
			limit = {
				NOT = { scope:target = scope:target.court_owner }
				scope:target.court_owner = {
					intrigue_scheme_ongoing_2003_other_secret_target = yes
				}
			}
			scope:target.court_owner = {
				add_to_list = secret_holders
			}
		}
		scope:target.court_owner = {
			every_courtier = {
				limit = {
					NOT = { this = scope:target }
					intrigue_scheme_ongoing_2003_other_secret_target = yes
					NOT = { is_in_list = secret_holders }
				}
				add_to_list = secret_holders
			}
		}
		random_in_list = {
			list = secret_holders
			limit = {
				OR = {
					is_close_or_extended_family_of = scope:target
					is_spouse_of = scope:target
				}
			}
			alternative_limit = { is_alive = yes }
			save_scope_as = other_secret_target
			random_secret = {
				limit = { NOT = { is_known_by = scope:owner } }
				save_scope_as = secret_to_reveal
			}
		}
		scope:scheme = {
			random_scheme_agent = {
				limit = {
					NOT = { is_agent_exposed_in_scheme = scope:scheme }
				}
				save_scope_as = agent
				add_character_flag = {
					flag = use_stealth_clothes
					days = 1
				}
			}
		}
		scope:secret_to_reveal = {
			if = {
				limit = {
					exists = secret_target
					NOT = { secret_target = scope:other_secret_target }
				}
				secret_target = {
					save_scope_as = secret_target
				}
			}
		}
	}

	option = {
		name = intrigue_scheme_ongoing.2003.a
		scope:secret_to_reveal = {
			reveal_to = scope:owner
		}
	}
}



###########################################################
# EVENTS TRIGGERED BY SCHEME OWNER
# 3001-3999
###########################################################

############################
# Being Just Causes Stress
############################
intrigue_scheme_ongoing.3001 = {
	type = character_event
	title = intrigue_scheme_ongoing.3001.t
	desc = intrigue_scheme_ongoing.3001.desc
	theme = generic_intrigue_scheme
	left_portrait = {
		character = root
		animation = worry
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = {
		has_trait = just
		NOT = { has_character_flag = had_intrigue_scheme_ongoing_1003_event }
		scope:scheme = {
			NOT = {
				has_scheme_modifier = modifier_just_scheming_less
			}
		}
	}

	weight_multiplier = {
		base = 1
	}

	immediate = {
		add_character_flag = {
			flag = had_intrigue_scheme_ongoing_1003_event
			days = 730
		}
	}

	#Keep scheming
	option = {
		name = intrigue_scheme_ongoing.3001.a
		stress_impact = {
			just = medium_stress_impact_gain
		}
		ai_chance = {
			base = 30
			ai_value_modifier = {
				ai_boldness = 1
			}
		}
	}

	#Back down a little
	option = {
		name = intrigue_scheme_ongoing.3001.b
		trait = just
		scope:scheme = {
			add_scheme_modifier = {
				type = modifier_just_scheming_less
				days = 1825
			}
		}
		stress_impact = {
			stubborn = minor_stress_impact_gain
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_rationality = 0.5
			}
		}
	}
}



###################################
# Being Compassionate Causes Pain
###################################

intrigue_scheme_ongoing.3002 = {
	type = character_event
	title = intrigue_scheme_ongoing.3002.t
	desc = intrigue_scheme_ongoing.3002.desc
	theme = generic_intrigue_scheme
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	left_portrait = {
		character = root
		animation = worry
	}
	
	trigger = {
		NOT = { has_character_flag = had_intrigue_scheme_ongoing_3002_event }
		OR = {
			has_trait = compassionate
			has_trait = trusting
			has_trait = honest
		}
		ai_compassion > 10
		scope:scheme = {
			scheme_progress > 2
			scheme_power_resistance_difference > 0
		}
	}

	weight_multiplier = {
		base = 0 #Will be 1 at ai_compassion 10
		compare_modifier = {
			value = ai_compassion
			multiplier = 0.1
		}
	}

	immediate = {
		add_character_flag = {
			flag = had_intrigue_scheme_ongoing_3002_event
			days = 730
		}
	}

	#No, this is *fine*
	option = {
		name = intrigue_scheme_ongoing.3002.a
		trigger = {
			scope:scheme = {
				scheme_type = murder
			}
		}
		scope:scheme = {
			add_scheme_progress = scheme_progress_loss
		}
		stress_impact = {
			compassionate = massive_stress_impact_gain
			trusting = minor_stress_impact_gain
			honest = medium_stress_impact_gain
		}
	}

	#Tone it down
	option = {
		name = intrigue_scheme_ongoing.3002.b
		scope:scheme = {
			add_scheme_modifier = {
				type = scheme_modifier_compassionate_slowing_down
				days = 730
			}
		}
		stress_impact = {
			compassionate = minor_stress_impact_gain
			trusting = minor_stress_impact_gain
			honest = minor_stress_impact_gain
		}
	}
	
	#End it
	option = {
		name = intrigue_scheme_ongoing.3002.c
		scope:scheme = {
			end_scheme = yes
		}
		stress_impact = {
			stubborn = medium_stress_impact_gain
		}
	}
	
	#If I tell them, it's fine
	option = {
		name = intrigue_scheme_ongoing.3002.d
		trigger = {
			has_trait = honest
			scope:scheme = {
				is_scheme_exposed = no
			}
		}
		trait = honest
		scope:scheme = {
			expose_scheme = yes
		}
		stress_impact = {
			compassionate = minor_stress_impact_gain
		}
	}
}


############################################
# Map wilderness outside of target location, by Mathilda Bjarnehed
############################################

scripted_trigger intrigue_scheme_ongoing_3003_hunter_trigger = {
	NOT = { has_any_relation_trigger = { CHARACTER = root } }
	has_dynasty = no
	can_be_warrior_trigger = { ARMY_OWNER = scope:target.host }
	basic_is_available_ai = yes
}

scripted_trigger intrigue_scheme_ongoing_3003_hunter_friend_trigger = {
	basic_is_available_ai = yes
	has_trait = lifestyle_hunter
	NOR = {
		is_spouse_of = scope:target
		is_close_or_extended_family_of = scope:target
		has_relation_friend = scope:target
		has_relation_lover = scope:target
	}
}

intrigue_scheme_ongoing.3003 = { #by Mathilda Bjarnehed
	type = character_event
	title = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:scheme = { scheme_type = murder } }
				desc = murder_event_title
			}
			triggered_desc = {
				trigger = { scope:scheme = { scheme_type = abduct } }
				desc = abduct_event_title
			}
			triggered_desc = {
				trigger = { scope:scheme = { scheme_type = elope } }
				desc = elope_event_title
			}
		}
		desc = intrigue_scheme_ongoing.3003.t
	}
	desc = {
		desc = intrigue_scheme_ongoing.start.3003.desc
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:scheme = {
						OR = {
							scheme_type = abduct
							scheme_type = elope
						}
					}
					scope:target = { is_ruler = no } # or the text gets wonky
				}
				desc = intrigue_scheme_ongoing.leave_with_target.3003.desc
			}
			triggered_desc = {
				trigger = {
					scope:scheme = { scheme_type = plague }
				}
				desc = intrigue_scheme_ongoing.plague.3003.desc
			}
			desc = intrigue_scheme_ongoing.escape_route.3003.desc
		}
		desc = intrigue_scheme_ongoing.end.3003.desc
	}
	theme = generic_intrigue_scheme
	override_background = {
		event_background = terrain_scope
	}
	left_portrait = scope:hunter
	right_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		exists = scope:target.host
		exists = scope:target.host.capital_province
		scope:target.host = { NOT = { this = root } }
			scope:scheme = {
			NOT = {
				has_variable = had_intrigue_scheme_ongoing_3003_event
			}
		}
	}

	weight_multiplier = {
		base = 1

		modifier = {
			has_trait = lifestyle_hunter
			add = 0.5
		}
	}


	immediate = {
		hidden_effect = {
			scope:scheme = {
				set_variable = {
					name = had_intrigue_scheme_ongoing_3003_event
					value = yes
				}
			}
			
			# Warcraft
			scope:target.host = { save_scope_as = defender }
			#Save location for image and text
			if = {
				limit = { exists = scope:scheme.var:plague_center }
				scope:scheme.var:plague_center.title_province = {
					save_scope_as = scheme_location
					save_scope_as = background_terrain_scope
				}
			}
			else = {
				scope:target.host = {
					capital_province = {
						save_scope_as = scheme_location
						save_scope_as = background_terrain_scope
					}
				}
			}

			# Is there an available Master of the Hunt?
			if = {
				limit = {
					NOT = { has_trait = lifestyle_hunter }
					has_royal_court = yes
					employs_court_position = master_of_hunt_court_position
					any_court_position_holder = {
						type = master_of_hunt_court_position
						intrigue_scheme_ongoing_3003_hunter_friend_trigger = yes
					}
				}
				random_court_position_holder = {
					type = master_of_hunt_court_position
					limit = { intrigue_scheme_ongoing_3003_hunter_friend_trigger = yes }
					save_scope_as = hunter
				}
			}
			# Can a friend help?
			else_if = {
				limit = {
					NOT = { has_trait = lifestyle_hunter }
					any_relation = {
						type = friend
						intrigue_scheme_ongoing_3003_hunter_friend_trigger = yes
					}
				}
				random_relation = {
					type = friend
					limit = { intrigue_scheme_ongoing_3003_hunter_friend_trigger = yes }
					save_scope_as = hunter
				}
			}
			# If not, grab a hunter
			else = {
				random_pool_character = {
					province = scope:scheme_location
					limit = {
						has_trait = lifestyle_hunter
						intrigue_scheme_ongoing_3003_hunter_trigger = yes
					}
					alternative_limit = {
						intrigue_scheme_ongoing_3003_hunter_trigger = yes
					}
					weight = {
						base = 10
						modifier = {
							add = {
								value = prowess
								multiply = 10
							}
						}
					}
					save_scope_as = hunter
					if = {
						limit = { NOT = { has_trait = lifestyle_hunter } }
						add_trait = hunter_1
					}
				}

				# Create a hunter
				if = {
					limit = { NOT = { exists = scope:hunter } }
					create_character = {
						location = scope:scheme_location
						template = hunter_template
						faith = scope:defender.faith
						culture = scope:defender.culture
						save_scope_as = hunter
					}
				}
			}
		}
	}


	# Bribe a hunter
	option = {
		name = intrigue_scheme_ongoing.3003.a
		trigger = {
			NOT = {
				has_relation_friend = scope:hunter
				scope:hunter = { has_court_position = master_of_hunt_court_position }
			}
		}
		
		pay_short_term_gold = {
			target = scope:hunter
			gold = minor_gold_value
		}

		scope:scheme = {
			add_scheme_modifier = {
				type = intrigue_scheme_mapped_surroundings_modifier
			}
		}

		# Will hunter spill the beans
			random_list = {
				60 = { # Hunter keeps mouth shut
					desc = intrigue_scheme_ongoing.3003.a.success
					ai_value_modifier = {
						ai_rationality = 0.5
					}
					opinion_modifier = {
						who = scope:hunter
						opinion_target = root
						multiplier = 0.5
					}
					send_interface_toast = {
						title = intrigue_scheme_ongoing.3003.a.success
						left_icon = scope:hunter
					}
					hidden_effect = {
						if = {
							limit = { 	
								can_set_relation_potential_friend_trigger = { CHARACTER = scope:hunter }
								scope:hunter.prowess >= decent_skill_rating
							}
							set_relation_potential_friend = scope:hunter
						}
					}	
				}
				40 = { # Hunter tells tales
					desc = intrigue_scheme_ongoing.3003.a.failure
					modifier = {
						scope:hunter = {
							OR = {
								has_trait = honest
								has_trait = drunkard
							}
						}
						add = 20
					}
					opinion_modifier = {
						who = scope:hunter
						opinion_target = scope:target.host #i.e. are they loyal to the local lord/lady
						multiplier = 0.3
					}
					send_interface_toast = {
						title = intrigue_scheme_ongoing.3003.a.failure
						left_icon = scope:hunter
						scope:scheme = {
						add_scheme_modifier = {
							type = intrigue_scheme_tattletale_modifier
						}
					}
					}
					if = { #Player gets a warning
						limit = {
							scope:defender = { is_ai = no }
							scope:scheme = { is_scheme_exposed = no }
						}
						scope:defender = { trigger_event = intrigue_scheme_ongoing.3004 }
					}
				}
			}

			stress_impact = {
			greedy = medium_stress_impact_gain
			paranoid = minor_stress_impact_gain
		}

		ai_chance = {
				base = 100
				modifier = {
					short_term_gold < minor_gold_value
					add = -100
				}
				modifier = { #To make the follow up trigger more often
					scope:defender = { is_ai = no }
					scope:scheme = { is_scheme_exposed = no }
					add = 1000
				}
		}
	}

	#Ask your Master of the Hunt
	option = {
		trigger = {
			scope:hunter = { has_court_position = master_of_hunt_court_position }
		}
		name = intrigue_scheme_ongoing.3003.e
		add_internal_flag = special

		scope:scheme = {
			add_scheme_modifier = {
				type = intrigue_scheme_mapped_surroundings_modifier
			}
		}

		stress_impact = {
			lazy = medium_stress_impact_gain
			craven = medium_stress_impact_gain
			impatient = minor_stress_impact_gain
		}

		ai_chance = {
			base = 100
		}
	}

	# Ask a friend
	option = {
		trigger = {
			has_relation_friend = scope:hunter
			NOT = { scope:hunter = { has_court_position = master_of_hunt_court_position } }
		}
		name = intrigue_scheme_ongoing.3003.d
		add_internal_flag = special

		scope:scheme = {
			add_scheme_modifier = {
				type = intrigue_scheme_mapped_surroundings_modifier
			}
		}

		hidden_effect = {
			add_opinion = {
				modifier = grateful_opinion
				opinion = 15
				target = scope:hunter
			}
		}

		stress_impact = {
			lazy = medium_stress_impact_gain
			craven = medium_stress_impact_gain
			impatient = minor_stress_impact_gain
		}

		ai_chance = {
			base = 100
		}
	}

	# Do it yourself
	option = {	
		trigger = {
			# Warcraft
			is_incapable_trigger = no
			
			NOT = { has_trait = lifestyle_hunter }
		}
		name = intrigue_scheme_ongoing.3003.b

		random_list = {
			60 = { # Success
				desc = intrigue_scheme_ongoing.3003.b.success
				send_interface_toast = {
						title = intrigue_scheme_ongoing.3003.b.success
					scope:scheme = {
						add_scheme_modifier = {
							type = intrigue_scheme_mapped_surroundings_modifier
						}
					}
					}
			}
			30 = { # Failure
				desc = intrigue_scheme_ongoing.3003.b.soft_failure
				send_interface_toast = {
						title = intrigue_scheme_ongoing.3003.b.soft_failure
					add_stress = minor_stress_gain
					}
			}
			10 = { # Sick
				desc = intrigue_scheme_ongoing.3003.b.hard_failure
				send_interface_toast = {
						title = intrigue_scheme_ongoing.3003.b.hard_failure
					add_stress = medium_stress_gain
					contract_disease_effect = { DISEASE = ill TREATMENT_EVENT = yes }
					}
			}
		}

		stress_impact = {
			lazy = medium_stress_impact_gain
			craven = medium_stress_impact_gain
			impatient = minor_stress_impact_gain
		}

		ai_chance = {
				base = 50
		}
	}

	# Do it yourself very well
	option = {
		name = intrigue_scheme_ongoing.3003.b
		trigger = {
			# Warcraft
			is_incapable_trigger = no
			
			has_trait = lifestyle_hunter
		}
		trait = hunter_1
		trait = hunter_2
		trait = hunter_3

		scope:scheme = {
			add_scheme_modifier = {
				type = intrigue_scheme_mapped_surroundings_modifier
			}
		}

		stress_impact = {
			lazy = medium_stress_impact_gain
			craven = medium_stress_impact_gain
			impatient = minor_stress_impact_gain
		}

		ai_chance = {
				base = 100
		}
	}
	
	# Ignore
	option = {
		name = intrigue_scheme_ongoing.3003.c
		
		stress_impact = {
			diligent = minor_stress_impact_gain
		}

		ai_chance = {
				base = 10
		}
	}
}

# Player defender gets a warning
intrigue_scheme_ongoing.3004 = { #by Mathilda Bjarnehed
	type = character_event
	title = intrigue_scheme_ongoing.3004.t
	desc = intrigue_scheme_ongoing.3004.desc
	theme = generic_intrigue_scheme
	override_background = {
		event_background = tavern
	}
	left_portrait = {
		character = scope:hunter
		animation = personality_irrational
	}
	
	immediate = {
		add_character_modifier = {
			modifier = more_vigilant_recistance_modifier
			years = 5
		}
		hidden_effect = {
			add_opinion = {
				target = scope:hunter
				modifier = treachery_opinion
			}
		}

		stress_impact = {
			craven = minor_stress_impact_gain
			paranoid = medium_stress_impact_gain
		}
	}

	# Thanks for telling me
	option = {
		name = intrigue_scheme_ongoing.3004.a
	
		stress_impact = {
			sadistic = minor_stress_impact_gain
			wrathful = medium_stress_impact_gain
			paranoid = minor_stress_impact_gain
			vengeful = medium_stress_impact_gain
		}
	}

	# Imprison the idiot
	option = {
		name = intrigue_scheme_ongoing.3004.b

		imprison_character_effect = {
			TARGET = scope:hunter
			IMPRISONER = root
		}

		stress_impact = {
			compassionate = medium_stress_impact_gain
			forgiving = major_stress_impact_gain
			trusting = minor_stress_impact_gain
			calm = minor_stress_impact_gain
		}	
	}

	# Torture the information out of hunter
	option = {
		trigger = {
			OR = {
				has_trait = sadistic
				has_trait = torturer
			}
		}
		name = intrigue_scheme_ongoing.3004.c
		trait = sadistic
		trait = torturer

		add_dread = medium_dread_gain
		hidden_effect = {
			send_interface_toast = {
				title = intrigue_scheme_ongoing.3004.toast
				scope:scheme = { expose_scheme = yes }
				left_icon = scope:owner
				right_icon = scope:target
			}
		}
		custom_tooltip = intrigue_scheme_ongoing.3004.c.tt
		scope:hunter = {
			override_death_killer_effect = { death_reason = death_dungeon killer = root }
		}
	}
}

	
########################
# Messenger pigeon by Mathilda Bjarnehed
##########################
scripted_trigger intrigue_scheme_ongoing_3005_elope_agent_trigger = {
	basic_is_available_ai = yes
	OR = {
		has_relation_friend = scope:target
		AND = { # Could be a servant
			sex_same_as = scope:target
			has_dynasty = no
		}
		is_close_family_of = scope:target
	}
}

scripted_trigger intrigue_scheme_ongoing_3005_other_agent_trigger = {
	basic_is_available_ai = yes
}


intrigue_scheme_ongoing.3005 = { #by Mathilda Bjarnehed
	type = character_event
	title = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:scheme = { scheme_type = murder } }
				desc = murder_event_title
			}
			triggered_desc = {
				trigger = { scope:scheme = { scheme_type = abduct } }
				desc = abduct_event_title
			}
			triggered_desc = {
				trigger = { scope:scheme = { scheme_type = elope } }
				desc = elope_event_title
			}
		}
		desc = intrigue_scheme_ongoing.3005.t
	}
	desc = intrigue_scheme_ongoing.3005.desc
	theme = generic_intrigue_scheme
	left_portrait = {
		character = scope:pigeon_recipient
		animation = scheme
	}
	right_portrait = scope:right_portrait
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = {
		scope:scheme = {
			NOT = { has_variable = had_intrigue_scheme_ongoing_3005_event }
			OR = {
				scheme_type = elope
				any_scheme_agent = { intrigue_scheme_ongoing_3005_other_agent_trigger = yes }
			}
		}
		exists = scope:target.host
		NOT = { scope:target.host = root }
	}

	weight_multiplier = {
		base = 1
		modifier = {
			add = 1
			has_character_modifier = modifier_hunt_friend_of_animal
		}
	}

	immediate = {
		scope:scheme = {
			set_variable = {	
				name = had_intrigue_scheme_ongoing_3005_event
				value = yes
			}
		}

		# Who is receiving pigeon? Elope: target
		if = {
			limit = { scope:scheme = { scheme_type = elope } }
			scope:target = { save_scope_as = pigeon_recipient }

			#Try to save a random agent
			scope:scheme = {
				random_scheme_agent = {
					limit = { intrigue_scheme_ongoing_3005_elope_agent_trigger = yes }
					save_scope_as = elope_agent
					add_character_flag = {
						flag = use_stealth_clothes
						days = 1
					}
				}
			}

			scope:target.liege = {
				save_scope_as = right_portrait
			}
		}
		# Murder/abduct: agent
		else = {
			scope:scheme = {
				random_scheme_agent = {
					limit = { intrigue_scheme_ongoing_3005_other_agent_trigger = yes }
					save_scope_as = pigeon_recipient
					add_character_flag = {
						flag = use_stealth_clothes
						days = 1
					}
				}
				scope:target = { save_scope_as = right_portrait } # Just for the visuals
			}
		}

		# Some more scopes
		scope:target.host = {
			save_scope_as = defender
			if = {
				limit = {
					exists = capital_province
				}
				capital_province = { save_scope_as = target_location }
			}
		}
		if = {
			limit = { exists = capital_province } #Non-rulers can do these schemes too but it's only relevant for text
			capital_province = { save_scope_as = root_location }
		}
	}

	# Bribe someone to have it delivered
	option = {
		name = intrigue_scheme_ongoing.3005.a

		remove_short_term_gold = minor_gold_value

		random_list = {
			70 = {
				desc = intrigue_scheme_ongoing.3005.a.success
				send_interface_toast = {
					title = intrigue_scheme_ongoing.3005.a.success
					left_icon = scope:defender
					scope:scheme = {
						add_scheme_modifier = {
							type = intrigue_scheme_messenger_pigeon_modifier
						}
					}
				}
			}
			30 = {
				desc = intrigue_scheme_ongoing.3005.a.failure
				send_interface_toast = {
					title = intrigue_scheme_ongoing.3005.a.failure
					left_icon = scope:defender
				}
			}
		}

		stress_impact = {
			greedy = minor_stress_impact_gain
		}

		ai_chance = {
			base = 100
		}
	}

	# Deliver it yourself
	option = {
		name = intrigue_scheme_ongoing.3005.b

		scope:scheme = {
			add_scheme_modifier = {
				type = intrigue_scheme_messenger_pigeon_modifier
			}
			add_scheme_modifier = {
				type = intrigue_scheme_involved_modifier
			}
		}

		stress_impact = {
			craven = medium_stress_impact_gain
			paranoid = medium_stress_impact_gain
		}
	}

	# Use an agent
	option = {
		name = intrigue_scheme_ongoing.3005.c
		trigger = { exists = scope:elope_agent }
		add_internal_flag = special
		flavor = intrigue_scheme_ongoing.3005.c.f

		scope:scheme = {
			add_scheme_modifier = {
				type = intrigue_scheme_messenger_pigeon_modifier
			}
		}
	}
	
	# Bad idea
	option = {
		name = intrigue_scheme_ongoing.3005.d
	}
}

#########################################
# by Letter Translation by Daniel Moore #
#########################################

intrigue_scheme_ongoing.3010 = {
	type = character_event
	title = intrigue_scheme_ongoing.3010.t
	desc = intrigue_scheme_ongoing.3010.desc
	theme = generic_intrigue_scheme
	left_portrait = {
		character = root
		animation = chancellor
	}

	trigger = {
		scope:scheme = {
			NOT = { 
				has_variable = had_intrigue_scheme_ongoing_3010_event
			}
		}
		knows_language_of_culture = scope:target.culture
		NOT = {
			scope:target.culture = {
				has_same_culture_language = root.culture
			}
		}
	}

	immediate = {
		scope:scheme = {
			set_variable = {	
				name = had_intrigue_scheme_ongoing_3010_event
				value = yes
			}
		}
	}

	option = { #Do it yourself
		name = intrigue_scheme_ongoing.3010.a
		add_stress = minor_stress_gain
		scope:scheme = {
			add_scheme_modifier = {
				type = intrigue_scheme_personally_translating_letters_modifier
			}
			add_scheme_progress = 1
		}
		stress_impact = {
			lazy = medium_stress_gain
		}	

		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_energy = 0.5
			}
		}
	}

	option = { #Let the translators handle it
		name = intrigue_scheme_ongoing.3010.b

		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_energy = -0.5
			}
		}
	}

	
}

###############################
# Secret Code by Daniel Moore #
###############################

intrigue_scheme_ongoing.3011 = { #By Daniel Moore
	type = character_event
	title = intrigue_scheme_ongoing.3011.t
	desc = intrigue_scheme_ongoing.3011.desc
	theme = generic_intrigue_scheme
	left_portrait = {
		character = scope:multilingual_agent
		animation = throne_room_writer
	}

	trigger = {
		scope:scheme = {
			NOT = { 
				has_variable = had_intrigue_scheme_ongoing_3011_event
			}

			any_scheme_agent ={
				num_of_known_languages > 2
			}
		}

	}

	immediate = {
		scope:scheme = {
			set_variable = {	
				name = had_intrigue_scheme_ongoing_3011_event
				value = yes
			}

			random_scheme_agent = {
				limit = {
					num_of_known_languages > 2
				}
				save_scope_as = multilingual_agent

			}

			random_culture_global = {
				limit = {
					scope:multilingual_agent = { knows_language_of_culture = prev }
					NOT = { has_same_culture_language = scope:multilingual_agent.culture }
				}

				save_scope_as = language_culture
			}

			random_culture_global = {
				limit = {
					scope:multilingual_agent = { knows_language_of_culture = prev }
					NOT = { has_same_culture_language = scope:multilingual_agent.culture }
					NOT = { has_same_culture_language = scope:language_culture }
				}

				save_scope_as = language_culture_2
			}
		}
	}

	option = { #Excellent Idea
		name = intrigue_scheme_ongoing.3011.a
		#Lower discovery chance
		scope:scheme = {
			add_scheme_modifier = {
				type = intrigue_scheme_secret_code_modifier
			}
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_energy = 0.5
			}
		}

	}

	option = { #Our efforts are best spent elsewhere
		name = intrigue_scheme_ongoing.3011.b
		scope:scheme = {
			add_scheme_progress = 1
		}
		scope:multilingual_agent = {
			add_opinion = {
				modifier = opinion_scheme_code_rejected
				target = root
			}	
		}

		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_rationality = 0.5
			}
		}
	}
}


###########################################################
# Events when targeting children
# 4000-4999
###########################################################

###########################################
# Agent put in charge of group of children
###########################################
intrigue_scheme_ongoing.4001 = {
	type = character_event
	title = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:scheme = { scheme_type = murder } }
				desc = murder_event_title
			}
			triggered_desc = {
				trigger = { scope:scheme = { scheme_type = abduct } }
				desc = abduct_event_title
			}
		}
		desc = intrigue_scheme_ongoing.4001.t
	}
	desc = intrigue_scheme_ongoing.4001.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:agent_in_question
	right_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		scope:scheme = {
			scheme_target = {
				is_adult = no
			}
			any_scheme_agent ={
				is_landed = no
				is_in_the_same_court_as = scope:scheme.scheme_target
			}
		}
		scope:target = {
			is_landed = yes
		}
		scope:scheme = {
			has_variable = child_murder_agent_in_charge
		}
	}

	immediate = {
		scope:scheme = {
			random_scheme_agent = {
				limit = {
					is_landed = no
					is_in_the_same_court_as = scope:scheme.scheme_target
				}
				save_scope_as = agent_in_question
				add_character_flag = {
					flag = use_stealth_clothes
					days = 1
				}
			}
			set_variable = {
				name = child_murder_agent_in_charge
				value = yes
				days = 3650
			}
		}
	}

	option = {
		name = intrigue_scheme_ongoing.4001.a
		scope:scheme = {
			add_scheme_modifier = {
				type = murder_agent_looking_after_child_target_modifier
				days = 730
			}
		}
	}

	option = {
		name = intrigue_scheme_ongoing.4001.b
		scope:scheme = {
			add_scheme_modifier = {
				type = murder_agent_befriending_child_target_modifier
				days = 730
			}
		}
		hidden_effect = {
			scope:scheme = {
				set_variable = {
					name = friend_of_child_target
					value = scope:agent_in_question
				}
			}
		}
	}
}


###########################################
# Naivety of children
###########################################
intrigue_scheme_ongoing.4002 = {
	type = character_event
	title = intrigue_scheme_ongoing.4002.t
	desc = intrigue_scheme_ongoing.4002.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:target
	right_portrait = scope:parent
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		scope:scheme = {
			scheme_target = {
				is_adult = no
				age >= childhood_education_start_age
				# Warcraft
				age_in_relation_to_humans_less_than_trigger = { age = 14 }
				AND = {
					intrigue < 8
					learning < 12
				}
				opinion = {
					target = scope:scheme.scheme_owner
					value > 0
				}
				is_at_same_location = scope:scheme.scheme_owner
			}
		}
		NOT = { exists = scope:scheme.var:had_child_murder_naivety_event }
	}

	immediate = {
		scope:scheme = {
			set_variable = {
				name = had_child_murder_naivety_event
				value = yes
				days = 3650
			}
		}
		if = {
			limit = {
				scope:target = { NOT = { is_child_of = root } }
			}
			scope:target = {
				random_parent = {
					limit = {
						is_alive = yes
					}
					save_scope_as = parent
				}
			}
		}
	}

	option = {
		name = intrigue_scheme_ongoing.4002.a
		trigger = {
			exists = scope:parent
		}
		every_parent = {
			limit = {
				is_alive = yes
			}
			add_opinion = {
				target = root
				modifier = pleased_opinion
				opinion = 20
			}
		}
	}

	option = {
		name = intrigue_scheme_ongoing.4002.b
		scope:scheme = {
			add_scheme_progress = scheme_progress_gain
		}
	}
}


############################################
# Agent Friend of Child Has Second Thoughts
############################################
intrigue_scheme_ongoing.4003 = {
	type = character_event
	title = intrigue_scheme_ongoing.4003.t
	desc = intrigue_scheme_ongoing.4003.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:agent_in_question
	right_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		scope:scheme = {
			scheme_target = {
				# Warcraft
				age_in_relation_to_humans_less_than_trigger = { age = 15 }
			}
			exists = scope:scheme.var:friend_of_child_target
			scope:scheme.var:friend_of_child_target = { is_alive = yes }
			scheme_is_character_agent = scope:scheme.var:friend_of_child_target
		}
		NOT = { exists = scope:scheme.var:had_child_murder_agent_second_thoughts_event }
	}

	immediate = {
		scope:scheme = {
			set_variable = {
				name = had_child_murder_agent_second_thoughts_event
				value = yes
				days = 3650
			}
		}
		scope:scheme.var:friend_of_child_target = {
			save_scope_as = agent_in_question
			add_character_flag = {
				flag = use_stealth_clothes
				days = 1
			}
		}
	}

	option = {
		name = intrigue_scheme_ongoing.4003.a
		ai_chance = {
			base = 80
		}
		stress_impact = {
			compassionate = major_stress_impact_gain
			gregarious = minor_stress_impact_gain
			sadistic = minor_stress_impact_loss
			generous = minor_stress_impact_gain
		}
		scope:agent_in_question = {
			add_stress = 20
			add_opinion = {
				modifier = forced_to_scheme_against_friend_opinion
				target = scope:scheme.scheme_owner
			}
		}
	}

	option = {
		name = intrigue_scheme_ongoing.4003.b
		ai_chance = {
			base = 20
		}
		scope:agent_in_question = {
			forbid_from_scheme = scope:scheme
		}
		stress_impact = {
			sadistic = minor_stress_impact_gain
			cynical = minor_stress_impact_gain
		}
		scope:scheme = {
			add_scheme_progress = scheme_progress_loss
		}
	}
}



###########################################################
# Other events
# 5000-5999
###########################################################

###########################################
# Distract guards with itching powder
# by Linnéa Thimrén
###########################################

intrigue_scheme_ongoing.5001 = {
	type = character_event
	title = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:scheme = { scheme_type = murder } }
				desc = murder_event_title
			}
			triggered_desc = {
				trigger = { scope:scheme = { scheme_type = abduct } }
				desc = abduct_event_title
			}
			triggered_desc = {
				trigger = { scope:scheme = { scheme_type = elope } }
				desc = elope_event_title
			}
		}
		desc = intrigue_scheme_ongoing.5001.t
	}
	desc = intrigue_scheme_ongoing.5001.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:servant
	right_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		is_available_adult = yes
		scope:scheme = {
			NOT = { has_variable = had_itching_scheme_event }
		}
		scope:target = {
			is_landed = yes
			is_ai = yes # We don't want to spontaneously create mystery servant characters for players
			is_adult = yes
		}
	}

	immediate = {
		scope:scheme = {
			set_variable = {
				name = had_itching_scheme_event
				value = yes
				days = 3650
			}
		}
		create_character = {
			employer = scope:target
			template = servant_character
			gender_female_chance = root_faith_dominant_gender_adjusted_female_chance
			save_scope_as = servant
		}
	}

	# Rose hips it is!
	option = {
		trigger = {
			OR = {
				is_ai = no
				short_term_gold >= 50
			}
		}
		name = intrigue_scheme_ongoing.5001.a
		remove_short_term_gold = 50
		scope:scheme = {
			add_scheme_progress = scheme_progress_gain
		}
		ai_chance = {
			base = 100
		}
	}

	# Ruin their clothes! For fun!
	option = {
		name = intrigue_scheme_ongoing.5001.b
		scope:target = {
			add_prestige = medium_prestige_loss
		}
		stress_impact = {
			fickle = minor_stress_impact_loss
		}
		ai_chance = {
			base = 0
			modifier = {
				add = 50
				has_trait = fickle
			}
		}
	}
}

###########################################
# Convince mystic to give target omen
# by Linnéa Thimrén
###########################################
intrigue_scheme_ongoing.5002 = {
	type = character_event
	title = intrigue_scheme_ongoing.5002.t
	desc = intrigue_scheme_ongoing.5002.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		is_available_adult = yes
		scope:scheme = {
			NOT = { has_variable = had_omen_scheme_event }
		}
		exists = scope:target.court_owner
		scope:target = {
			is_landed = yes
		}
	}

	immediate = {
		scope:scheme = {
			set_variable = {
				name = had_omen_scheme_event
				value = yes
				days = 3650
			}
		}
		random_dummy_gender_clergy_effect = yes
	}

	# Give bad omen
	option = {
		name = intrigue_scheme_ongoing.5002.a
		flavor = intrigue_scheme_ongoing.5002.a.tt
		random_list = {
			75 = {
				desc = intrigue_scheme_ongoing.5002.a.success
				show_chance = no
				modifier = {
					add = 50
					scope:target = {
						has_trait = paranoid
					}
				}
				modifier = {
					add = 50
					scope:target = {
						has_trait = honest
					}
				}
				send_interface_toast = {
					title = intrigue_scheme_ongoing.5002.a.success
					left_icon = scope:target
					show_as_tooltip = {
						scope:target = {
							add_character_modifier = {
								modifier = bad_omen_modifier
								years = 10
							}
						}
					}
					scope:scheme = {
						add_scheme_progress = scheme_progress_gain
					}
				}
				scope:target = { #To give the omen to the character
					trigger_event = intrigue_scheme_ongoing.5003
				}
			}
			25 = {
				desc = intrigue_scheme_ongoing.5002.a.failure
				show_chance = no
				send_interface_toast = {
					title = intrigue_scheme_ongoing.5002.a.failure
					scope:scheme = {
						add_scheme_progress = scheme_progress_loss
					}
				}
			}
		}
	}

	# Give good omen
	option = {
		name = intrigue_scheme_ongoing.5002.b
		flavor = intrigue_scheme_ongoing.5002.b.tt
		random_list = {
			75 = {
				desc = intrigue_scheme_ongoing.5002.b.success
				show_chance = no
				modifier = {
					add = 20
					scope:target = {
						has_trait = content
					}
				}
				ai_value_modifier = {
					ai_compassion = medium_chance_impact_positive_ai_value
				}
				send_interface_toast = {
					title = intrigue_scheme_ongoing.5002.b.success
					show_as_tooltip = {
						scope:target = {
							add_character_modifier = {
								modifier = good_omen_modifier
								years = 10
							}
						}
					}
					scope:scheme = {
						add_scheme_progress = scheme_progress_gain
					}
				}
				scope:target = { #To give the omen to the character
					trigger_event = intrigue_scheme_ongoing.5004
				}
			}
			25 = {
				desc = intrigue_scheme_ongoing.5002.b.failure
				show_chance = no
				modifier = {
					add = 50
					scope:target = {
						has_trait = cynical
					}
				}
				modifier = {
					add = 50
					scope:target = {
						has_trait = paranoid
					}
				}
				send_interface_toast = {
					title = intrigue_scheme_ongoing.5002.b.failure
					scope:scheme = {
						add_scheme_progress = scheme_progress_loss
					}
				}
			}
		}
	}
}

#For target: get a bad omen
intrigue_scheme_ongoing.5003 = {
	type = character_event
	title = intrigue_scheme_ongoing.5003.t
	desc = {
		desc = intrigue_scheme_ongoing.5003.desc_opening
		desc = intrigue_scheme_ongoing.5003.desc
	}
	theme = skull
	override_background = {
		event_background = throne_room
	}
	left_portrait = scope:target

	immediate = {
		add_character_modifier = {
			modifier = bad_omen_modifier
			years = 10
		}
	}

	option = {
		name = intrigue_scheme_ongoing.5003.a
	}
}

#For target: get a good omen
intrigue_scheme_ongoing.5004 = {
	type = character_event
	title = intrigue_scheme_ongoing.5003.t
	desc = {
		desc = intrigue_scheme_ongoing.5003.desc_opening
		desc = intrigue_scheme_ongoing.5004.desc
	}
	theme = recovery
	override_background = {
		event_background = throne_room
	}
	left_portrait = scope:target

	immediate = {
		add_character_modifier = {
			modifier = good_omen_modifier
			years = 10
		}
	}

	option = {
		name = intrigue_scheme_ongoing.5004.a
	}
}


###########################################
# Gift them poisonous gold
# by Linnéa Thimrén
###########################################
intrigue_scheme_ongoing.5005 = {
	type = character_event
	title = intrigue_scheme_ongoing.5005.t
	desc = intrigue_scheme_ongoing.5005.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:spymaster
	right_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		is_available_adult = yes
		gold > root.minor_gold_value
		scope:scheme = {
			NOT = { has_variable = had_poisonous_gold_event }
		}
		exists = cp:councillor_spymaster
		scope:target = {
			is_physically_able_adult = yes
		}
	}

	immediate = {
		scope:scheme = {
			set_variable = {
				name = had_poisonous_gold_event
				value = yes
				days = 3650
			}
		}
		if = {
			limit = {
				exists = cp:councillor_spymaster
			}
			cp:councillor_spymaster = {
				save_scope_as = spymaster
			}
		}
	}

	# Give them poisonous gold
	option = {
		name = intrigue_scheme_ongoing.5005.a
		pay_short_term_gold = { #Give them their gift...
			target = scope:target
			gold = root.minor_gold_value
		}
		show_as_tooltip = { #Actually add it in their response event
			scope:target = {
				add_character_modifier = {
					modifier = poisonous_gold_modifier
					years = 7
				}
			}
		}
		scope:scheme = {
			add_scheme_progress = scheme_progress_gain
		}
		scope:target = { #Response event
			trigger_event = intrigue_scheme_ongoing.5006
		}
		#Risk of bad side effects
		hidden_effect = {
			if = {
				limit = {
					any_child = {
						is_courtier_of = root
						is_ai = yes
					}
				}
				random = {
					chance = 15
					trigger_event = {
						id = intrigue_scheme_ongoing.5007
						days = { 10 30 }
					}
				}
			}
			else_if = {
				limit = {
					exists = cp:councillor_spymaster
					cp:councillor_spymaster = { is_ai = yes }
				}
				random = {
					chance = 15
					trigger_event = {
						id = intrigue_scheme_ongoing.5008
						days = { 10 30 }
					}
				}
			}
		}
		stress_impact = {
			greedy = minor_stress_impact_gain
		}
		ai_chance = {
			base = 100
		}
	}

	# Nah
	option = {
		name = intrigue_scheme_ongoing.5005.b
		ai_chance = {
			base = 0
			modifier = {
				add = 50
				has_trait = greedy
			}
		}
	}
}

#For target: you got a gift! And now you're not feeling so well...
intrigue_scheme_ongoing.5006 = {
	type = character_event
	title = intrigue_scheme_ongoing.5006.t
	desc = intrigue_scheme_ongoing.5006.desc
	theme = friendly
	left_portrait = scope:target

	immediate = {
		show_as_tooltip = {
			scope:actor = {
				pay_short_term_gold = {
					target = scope:target
					gold = root.minor_gold_value
				}
			}
		}
		add_character_modifier = { #Actually apply the modifier
			modifier = poisonous_gold_modifier
			years = 7
		}
	}

	option = {
		name = intrigue_scheme_ongoing.5006.a
	}
}

#Your child touched the gold before you sent it away!
intrigue_scheme_ongoing.5007 = {
	type = character_event
	title = intrigue_scheme_ongoing.5007.t
	desc = {
		desc = intrigue_scheme_ongoing.5007.desc_opening
		desc = intrigue_scheme_ongoing.5007.desc
	}
	theme = skull
	left_portrait = scope:poisoned

	immediate = {
		random_child = {
			limit = {
				is_courtier_of = root
				is_ai = yes
			}
			save_scope_as = poisoned
			add_character_modifier = {
				modifier = poisonous_gold_modifier
				years = 7
			}
		}
	}

	option = {
		name = intrigue_scheme_ongoing.5007.a
		flavor = intrigue_scheme_ongoing.5007.a.tt
	}
}

#Your spymaster touched the gold!
intrigue_scheme_ongoing.5008 = {
	type = character_event
	title = intrigue_scheme_ongoing.5007.t
	desc = {
		desc = intrigue_scheme_ongoing.5007.desc_opening
		desc = intrigue_scheme_ongoing.5008.desc
	}
	theme = skull
	left_portrait = scope:poisoned

	immediate = {
		cp:councillor_spymaster = {
			save_scope_as = poisoned
			add_character_modifier = {
				modifier = poisonous_gold_modifier
				years = 7
			}
		}
	}

	option = {
		name = intrigue_scheme_ongoing.5008.a
		flavor = intrigue_scheme_ongoing.5007.a.tt
	}
}


###########################################
# "Friend of Animals" gets some help
# by Linnéa Thimrén
###########################################
intrigue_scheme_ongoing.5009 = {
	type = character_event
	title = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:scheme = { scheme_type = murder } }
				desc = murder_event_title
			}
			triggered_desc = {
				trigger = { scope:scheme = { scheme_type = abduct } }
				desc = abduct_event_title
			}
			triggered_desc = {
				trigger = { scope:scheme = { scheme_type = elope } }
				desc = elope_event_title
			}
		}
		desc = intrigue_scheme_ongoing.5009.t
	}
	desc = intrigue_scheme_ongoing.5009.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		is_available_adult = yes
		has_character_modifier = modifier_hunt_friend_of_animal
		scope:scheme = {
			NOT = { has_variable = had_friend_of_animals_event }
		}
		scope:target = {
			is_landed = yes
		}
	}

	immediate = {
		scope:scheme = {
			set_variable = {
				name = had_friend_of_animals_event
				value = yes
				days = 3650
			}
		}
	}

	# Follow the rats
	option = {
		name = intrigue_scheme_ongoing.5009.a
		flavor = intrigue_scheme_ongoing.5009.a.tt
		trigger_event = {
			id = intrigue_scheme_ongoing.5010
			days = { 7 10 }
		}
	}

	# Nah
	option = {
		name = intrigue_scheme_ongoing.5009.b
	}
}

#The rats showed you a way into the place!
intrigue_scheme_ongoing.5010 = {
	type = character_event
	title = intrigue_scheme_ongoing.5009.t
	desc = intrigue_scheme_ongoing.5010.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:target

	trigger = {
		exists = scope:scheme
	}

	immediate = {
		scope:scheme = {
			add_scheme_progress = scheme_progress_gain
		}
		hidden_effect = {
			if = {
				limit = {
					NOT = { has_trait = ill }
				}
				random = {
					chance = 20
					save_scope_value_as = {
						name = sick
						value = yes
					}
				}
			}
		}
	}

	option = {
		name = intrigue_scheme_ongoing.5010.a
		trigger = {
			NOT = { exists = scope:sick }
		}
	}

	option = {
		name = intrigue_scheme_ongoing.5010.b
		trigger = {
			exists = scope:sick
		}
		add_trait = ill
	}
}


###########################################
# You mess up with venomous animals
# by Linnéa Thimrén
###########################################
intrigue_scheme_ongoing.5011 = {
	type = character_event
	title = intrigue_scheme_ongoing.5011.t
	desc = intrigue_scheme_ongoing.5011.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		is_available_adult = yes
		scope:scheme = {
			NOT = { has_variable = had_venomous_animal_event }
		}
	}

	immediate = {
		scope:scheme = {
			set_variable = {
				name = had_venomous_animal_event
				value = yes
			}
		}
	}

	# Buy one to give to murder target
	option = {
		name = intrigue_scheme_ongoing.5011.a
		flavor = intrigue_scheme_ongoing.5011.a.tt
		hidden_effect = {
			random_list = {
				20 = { #It escapes...
					trigger_event = {
						id = intrigue_scheme_ongoing.5012
						days = { 7 10 }
					}
				}
				80 = { #It escapes and gives you prestige
					trigger_event = {
						id = intrigue_scheme_ongoing.5013
						days = { 7 10 }
					}
				}
			}
		}
	}
	# nah, I'll study it instead
	option = {
		name = intrigue_scheme_ongoing.5011.b
		add_character_modifier = {
			modifier = studied_venomous_animal_modifier
			years = 5
		}
	}
}

#You bought a venomous creature, and it goes to hell
intrigue_scheme_ongoing.5012 = {
	type = character_event
	title = intrigue_scheme_ongoing.5011.t
	desc = intrigue_scheme_ongoing.5012.desc
	theme = generic_intrigue_scheme
	left_portrait = {
		character = root
		animation = fear
	}

	immediate = {
		add_character_modifier = {
			modifier = venomous_animal_modifier
			years = 5
		}
	}

	option = {
		name = intrigue_scheme_ongoing.5012.a
	}
}

#You bought a venomous creature, and you get some prestige
intrigue_scheme_ongoing.5013 = {
	type = character_event
	title = intrigue_scheme_ongoing.5011.t
	desc = {
		desc = intrigue_scheme_ongoing.5012.desc
		desc = intrigue_scheme_ongoing.5013.desc
	}
	theme = generic_intrigue_scheme
	left_portrait = {
		character = root
		animation = fear
	}

	option = {
		name = intrigue_scheme_ongoing.5013.a
		flavor = intrigue_scheme_ongoing.5013.a.tt
		add_prestige = minor_prestige_gain
	}
}

###########################################
# You buy them a plush and exotic carpet
# by Linnéa Thimrén
###########################################
intrigue_scheme_ongoing.5014 = {
	type = character_event
	title = intrigue_scheme_ongoing.5014.t
	desc = intrigue_scheme_ongoing.5014.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		is_available_adult = yes
		scope:scheme = {
			NOT = { has_variable = had_murder_carpet_event }
		}
	}

	immediate = {
		scope:scheme = {
			set_variable = {
				name = had_murder_carpet_event
				value = yes
				days = 3650
			}
		}
	}

	# Give them the carpet
	option = {
		name = intrigue_scheme_ongoing.5014.a
		scope:target = {
			trigger_event = intrigue_scheme_ongoing.5015
		}
		show_as_tooltip = {
			random_list = {
				50 = {
					show_chance = no
					desc = intrigue_scheme_ongoing.5014.a.success
					scope:scheme = { add_scheme_progress = scheme_progress_gain }
					scope:target = {
						add_character_modifier = {
							modifier = has_plush_carpet_modifier
							days = 3650
						}
					}
				}
				50 = {
					show_chance = no
					desc = intrigue_scheme_ongoing.5014.a.failure
					scope:target = {
						add_character_modifier = {
							modifier = suspicious_of_carpet_modifier
							days = 3650
						}
					}
				}
			}
		}
		ai_chance = {
			base = 1
		}
	}
	# Use it yourself
	option = {
		name = intrigue_scheme_ongoing.5014.b
		add_character_modifier = {
			modifier = has_plush_carpet_modifier
			days = 3650
		}
		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_honor = 0.25
			}
			modifier = {
				add = 1
				has_trait = arrogant
			}
		}
	}
}

#For target - Accept gift?
intrigue_scheme_ongoing.5015 = {
	type = character_event
	title = intrigue_scheme_ongoing.5014.t
	desc = intrigue_scheme_ongoing.5015.desc
	theme = friendly
	left_portrait = scope:owner

	immediate = {
		scope:scheme = {
			set_variable = {
				name = had_murder_carpet_event
				value = yes
				days = 3650
			}
		}
	}

	# ooh, fancy!
	option = {
		name = intrigue_scheme_ongoing.5015.a
		scope:target = {
			add_character_modifier = {
				modifier = has_plush_carpet_modifier
				days = 3650
			}
		}
		hidden_effect = {
			scope:owner = {
				send_interface_toast = {
					title = intrigue_scheme_ongoing.5014.a.success
					right_icon = scope:target
					scope:scheme = { add_scheme_progress = scheme_progress_gain }
					show_as_tooltip = {
						scope:target = {
							add_character_modifier = {
								modifier = has_plush_carpet_modifier
								days = 3650
							}
						}
					}
				}
			}
		}
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_compassion = 0.25
			}
			modifier = {
				add = 2
				has_trait = trusting
			}
		}
	}
	# nah
	option = {
		name = intrigue_scheme_ongoing.5015.b
		add_gold = minor_gold_value
		add_character_modifier = {
			modifier = suspicious_of_carpet_modifier
			days = 3650
		}
		hidden_effect = {
			scope:owner = {
				send_interface_toast = {
					title = intrigue_scheme_ongoing.5014.a.failure
					right_icon = scope:target
					show_as_tooltip = {
						scope:target = {
							add_character_modifier = {
								modifier = suspicious_of_carpet_modifier
								days = 3650
							}
						}
					}
				}
			}
		}
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_greed = 0.75
			}
			modifier = {
				add = 2
				has_trait = paranoid
			}
		}
	}
}

###########################################
# Lower their courtiers opinion of them (making them more likely to become agents)
# by Linnéa Thimrén
###########################################
scripted_trigger intrigue_scheme_ongoing_5016_target_courtier = {
	scope:scheme = {
		NOT = { scheme_is_character_agent = prev }
	}
	is_valid_as_agent_in_scheme = scope:scheme
}

intrigue_scheme_ongoing.5016 = {
	type = character_event
	title = intrigue_scheme_ongoing.5016.t
	desc = intrigue_scheme_ongoing.5016.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:servant
	right_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		is_available_adult = yes
		short_term_gold < minor_gold_value_check
		scope:scheme = {
			NOT = { has_variable = had_courtier_slander_event }
		}
		scope:target = {
			is_ai = yes #Let's not create servants and manipulate courtier's opinion too much for players
			any_courtier_or_guest = {
				intrigue_scheme_ongoing_5016_target_courtier = yes
			}
		}
	}

	immediate = {
		scope:scheme = {
			set_variable = {
				name = had_courtier_slander_event
				value = yes
				days = 3650
			}
		}
		create_character = {
			employer = scope:target
			template = servant_character
			gender_female_chance = root_faith_dominant_gender_adjusted_female_chance
			save_scope_as = servant
		}
	}

	# Spread rumors about how bad they are!
	option = {
		name = intrigue_scheme_ongoing.5016.a
		remove_short_term_gold = minor_gold_value
		scope:target = {
			every_courtier_or_guest = {
				custom = intrigue_scheme_ongoing_5016_every_courtier
				limit = {
					intrigue_scheme_ongoing_5016_target_courtier = yes
				}
				add_opinion = {
					target = scope:target
					modifier = heard_bad_rumours_opinion
				}
			}
		}
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_honor = -0.5
			}
		}
	}
	# Keep the doors open for me
	option = {
		name = intrigue_scheme_ongoing.5016.b
		remove_short_term_gold = minor_gold_value
		scope:scheme = { add_scheme_progress = scheme_progress_gain }
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_boldness = 0.75
			}
		}
	}
	#Nah
	option = {
		name = {
			trigger = { is_female = yes }
			text = intrigue_scheme_ongoing.5016.c_woman
		}
		name = {
			trigger = { is_male = yes }
			text = intrigue_scheme_ongoing.5016.c_man
		}
		remove_short_term_gold = 2
		ai_chance = {
			base = 0
		}
	}
}


###########################################
# Lower their spouse's opinion of them (making them more likely to become an agent)
# by Linnéa Thimrén
###########################################

scripted_trigger intrigue_scheme_ongoing_5017_spouse = {
	is_ai = yes
	is_landed = no
	scope:scheme = {
		NOT = { scheme_is_character_agent = prev }
	}
	is_valid_as_agent_in_scheme = scope:scheme
}

intrigue_scheme_ongoing.5017 = {
	type = character_event
	title = intrigue_scheme_ongoing.5017.t
	desc = intrigue_scheme_ongoing.5017.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:spouse
	right_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		is_available_adult = yes
		scope:scheme = {
			NOT = { has_variable = had_spouse_slander_event }
		}
		scope:target = {
			any_consort = {
				intrigue_scheme_ongoing_5017_spouse = yes
			}
		}
	}

	weight_multiplier = {
		base = 0.5
		modifier = { #Much more likely if you are in the same court as spouse
			add = 1.5
			scope:target = {
				any_consort = {
					intrigue_scheme_ongoing_5017_spouse = yes
					is_in_the_same_court_as = root
				}
			}
		}
	}

	immediate = {
		scope:scheme = {
			set_variable = {
				name = had_spouse_slander_event
				value = yes
				days = 3650
			}
		}
		scope:target = {
			random_consort = {
				limit = {
					intrigue_scheme_ongoing_5017_spouse = yes
					scope:target.primary_spouse = this
				}
				alternative_limit = {
					intrigue_scheme_ongoing_5017_spouse = yes
				}
				save_scope_as = spouse
			}
		}
	}

	# Spread rumors about how bad they are!
	option = {
		name = intrigue_scheme_ongoing.5017.a
		duel = {
			skill = diplomacy
			target = scope:target
			75 = {
				desc = intrigue_scheme_ongoing.5017.a.success
				compare_modifier = {
					value = scope:duel_value
					multiplier = 0.5
				}
				send_interface_toast = {
					title = intrigue_scheme_ongoing.5017.a.success
					right_icon = scope:spouse
					left_icon = scope:target
					scope:spouse = {
						add_opinion = {
							target = scope:target
							modifier = insult_opinion
							opinion = -30
						}
					}
				}
			}
			25 = {
				desc = intrigue_scheme_ongoing.5017.a.failure
				compare_modifier = {
					value = scope:duel_value
					multiplier = -0.5
				}
				send_interface_toast = {
					title = intrigue_scheme_ongoing.5017.a.failure
					right_icon = scope:target
					left_icon = scope:spouse
					scope:target = {
						add_opinion = {
							target = root
							modifier = respect_opinion
							opinion = -20
						}
					}
					scope:spouse = {
						add_opinion = {
							target = root
							modifier = respect_opinion
							opinion = -20
						}
					}
				}
				
			}
		}
		ai_chance = {
			base = 0
			modifier = {
				add = 2
				diplomacy >= medium_skill_rating
			}
		}
	}
	#
	option = {
		name = intrigue_scheme_ongoing.5017.b
		scope:scheme = { add_scheme_progress = scheme_progress_gain }
		ai_chance = {
			base = 1
		}
	}
}


###########################################
# Target at war - send camp followers to them
# by Linnéa Thimrén
###########################################

intrigue_scheme_ongoing.5018 = {
	type = character_event
	title = intrigue_scheme_ongoing.5018.t
	desc = intrigue_scheme_ongoing.5018.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		is_available_adult = yes
		scope:scheme = {
			NOT = { has_variable = had_target_at_war_event }
		}
		scope:target = {
			is_at_war = yes
			is_commanding_army = yes
		}
	}

	immediate = {
		scope:scheme = {
			set_variable = {
				name = had_target_at_war_event
				value = yes
				days = 3650
			}
		}
		scope:target = {
			location = {
				save_scope_as = location
			}
		}
	}

	# Plant agents
	option = {
		name = intrigue_scheme_ongoing.5018.a
		scope:scheme = { add_scheme_progress = scheme_progress_gain }
		ai_chance = {
			base = 1.25
		}
	}

	# Sabotage
	option = {
		name = intrigue_scheme_ongoing.5018.b
		scope:target = {
			show_as_tooltip = {
				add_character_modifier = {
					modifier = warfare_troops_lacking_provisions_modifier
					years = 5
				}
			}
			hidden_effect = {
				send_interface_message = {
					type = event_war_bad
					title = intrigue_scheme_ongoing.5018.msg.t
					add_character_modifier = {
						modifier = warfare_troops_lacking_provisions_modifier
						years = 5
					}
				}
			}
		}
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_boldness = 0.5
			}
		}
	}
}



###########################################
# Find old architectural papers
# by Linnéa Thimrén
###########################################

intrigue_scheme_ongoing.5019 = {
	type = character_event
	title = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:scheme = { scheme_type = murder } }
				desc = murder_event_title
			}
			triggered_desc = {
				trigger = { scope:scheme = { scheme_type = abduct } }
				desc = abduct_event_title
			}
			triggered_desc = {
				trigger = { scope:scheme = { scheme_type = elope } }
				desc = elope_event_title
			}
		}
		desc = intrigue_scheme_ongoing.5019.t
	}
	desc = intrigue_scheme_ongoing.5019.desc
	theme = generic_intrigue_scheme
	left_portrait = {
		character = scope:agent
		animation = scheme
	}
	right_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		is_available_adult = yes
		scope:target = {
			is_landed = yes
			NOT = { is_courtier_of = root }
		}
		scope:scheme = {
			NOT = { has_variable = had_architectural_papers_event }
			any_scheme_agent = {
				is_alive = yes
			}
		}
	}

	immediate = {
		scope:scheme = {
			set_variable = {
				name = had_architectural_papers_event
				value = yes
				days = 3650
			}
			random_scheme_agent = {
				limit = {
					is_courtier_of = scope:target
					is_alive = yes
				}
				alternative_limit = {
					is_alive = yes
				}
				save_scope_as = agent
				add_character_flag = {
					flag = use_stealth_clothes
					days = 1
				}
			}
		}
		if = {
			limit = {
				employs_court_position = royal_architect_court_position
				any_court_position_holder = {
					type = royal_architect_court_position
				}
			}
			random_court_position_holder = {
				type = royal_architect_court_position
				save_scope_as = architect
			}
		}
	}

	# Cool, let's use them!
	option = {
		name = intrigue_scheme_ongoing.5019.a
		scope:scheme = { add_scheme_progress = scheme_progress_gain }
	}

	# Inspiration for own rebuilding!
	option = {
		name = intrigue_scheme_ongoing.5019.b
		if = {
			limit = {
				exists = scope:architect
			}
			custom_tooltip = intrigue_scheme_ongoing.5019.b.tt
			add_character_modifier = {
				modifier = hidden_nooks_and_crannies_architect_modifier
				years = 10
			}
		}
		else = {
			add_character_modifier = {
				modifier = hidden_nooks_and_crannies_modifier
				years = 10
			}
		}
	}
}


###########################################
# Spouse/child finds your murderous plans
# by Linnéa Thimrén
###########################################

scripted_trigger intrigue_scheme_ongoing_5021_scheme_trigger = {
	scheme_type = murder
	NOT = { has_variable = had_family_finds_out_event }
}

intrigue_scheme_ongoing.5021 = {
	type = character_event
	title = intrigue_scheme_ongoing.5021.t
	desc = intrigue_scheme_ongoing.5021.desc
	theme = intrigue
	left_portrait = scope:owner

	trigger = {
		# Warcraft
		age > age_12_value
		OR = {
			any_parent = {
				any_scheme = {
					intrigue_scheme_ongoing_5021_scheme_trigger = yes
				}
			}
			any_spouse = {
				any_scheme = {
					intrigue_scheme_ongoing_5021_scheme_trigger = yes
				}
			}
		}
	}

	weight_multiplier = {
		base = 0.75
		modifier = {
			add = 0.25
			has_trait = paranoid
		}
		modifier = {
			add = 0.5
			has_trait_rank = {
				trait = intellect_good
				rank > 1
			}
		}
	}

	immediate = {
		save_scope_as = family_member
		if = {
			limit = {
				NOT = { exists = scope:scheme }
			}
			if = {
				limit = {
					any_parent = {
						any_scheme = {
							intrigue_scheme_ongoing_5021_scheme_trigger = yes
						}
					}
				}
				random_parent = {
					limit = {
						any_scheme = {
							intrigue_scheme_ongoing_5021_scheme_trigger = yes
						}
					}
					random_scheme = {
						limit = {
							intrigue_scheme_ongoing_5021_scheme_trigger = yes
						}
						save_scope_as = scheme
						scheme_owner = {
							save_scope_as = owner
						}
						scheme_target = {
							save_scope_as = target
						}
					}
				}
			}
			else = {
				random_spouse = {
					limit = {
						any_scheme = {
							intrigue_scheme_ongoing_5021_scheme_trigger = yes
						}
					}
					random_scheme = {
						limit = {
							intrigue_scheme_ongoing_5021_scheme_trigger = yes
						}
						save_scope_as = scheme
						scheme_owner = {
							save_scope_as = owner
						}
						scheme_target = {
							save_scope_as = target
						}
					}
				}
			}
		}
		scope:scheme = {
			set_variable = {
				name = had_family_finds_out_event
				value = yes
				days = 3650
			}
		}
	}

	# confront them
	option = {
		name = intrigue_scheme_ongoing.5021.a
		show_as_tooltip = {
			random_list = {
				50 = {
					show_chance = no
					desc = intrigue_scheme_ongoing.5021.a.success
					custom_tooltip = intrigue_scheme_ongoing.5021.a.success.tt
				}
				50 = {
					show_chance = no
					desc = intrigue_scheme_ongoing.5021.a.failure
					scope:owner = {
						add_opinion = {
							target = root
							modifier = insult_opinion
							opinion = -20
						}
					}
				}
			}
		}
		scope:owner = {
			trigger_event = intrigue_scheme_ongoing.5022
		}
		ai_chance = {
			base = 0.75
			ai_value_modifier = {
				ai_honor = 0.75
			}	
		}
	}

	# ignore it
	option = {
		name = intrigue_scheme_ongoing.5021.b
		stress_impact = {
			compassionate = minor_stress_impact_gain
		}
		ai_chance = {
			base = 0.25
			modifier = {
				add = 1
				has_trait = callous
			}
		}
	}
}

#For the scheme owner - spouse/child confronts you
intrigue_scheme_ongoing.5022 = {
	type = character_event
	title = intrigue_scheme_ongoing.5022.t
	desc = intrigue_scheme_ongoing.5022.desc
	theme = generic_intrigue_scheme
	left_portrait = {
		character = scope:family_member
		animation = fear
	}

	option = { #I would never!!
		name = intrigue_scheme_ongoing.5022.a
		duel = {
			target = scope:family_member
			skill = intrigue
			75 = {
				desc = intrigue_scheme_ongoing.5022.a.success
				compare_modifier = {
					value = scope:duel_value
					multiplier = 1
				}
				reverse_add_opinion = {
					target = scope:family_member
					modifier = trust_opinion
					opinion = 15
				}
				hidden_effect = {
					scope:family_member = {
						send_interface_toast = {
							title = intrigue_scheme_ongoing.5021.a.failure
							scope:owner = {
								add_opinion = {
									target = root
									modifier = insult_opinion
									opinion = -20
								}
							}
						}
					}
				}
			}
			25 = {
				desc = intrigue_scheme_ongoing.5022.a.failure
				compare_modifier = {
					value = scope:duel_value
					multiplier = -1
				}
				scope:family_member = {
					send_interface_toast = {
						title = intrigue_scheme_ongoing.5021.a.success
						show_as_tooltip = {
							scope:owner = {
								scope:scheme = {
									expose_scheme = yes
								}
							}
						}
					}
				}
			}
		}
		ai_chance = {
			base = 1
		}
	}

	option = { #Try to convince them that it's for the best
		name = intrigue_scheme_ongoing.5022.b
		duel = {
			target = scope:family_member
			skill = diplomacy
			75 = {
				desc = intrigue_scheme_ongoing.5022.b.success
				compare_modifier = {
					value = scope:duel_value
					multiplier = 1
				}
				reverse_add_opinion = {
					target = scope:family_member
					modifier = trust_opinion
					opinion = 15
				}
				hidden_effect = {
					scope:family_member = {
						send_interface_toast = {
							title = intrigue_scheme_ongoing.5021.a.failure
							scope:owner = {
								add_opinion = {
									target = root
									modifier = insult_opinion
									opinion = -20
								}
							}
						}
					}
				}
			}
			25 = {
				desc = intrigue_scheme_ongoing.5022.b.failure
				compare_modifier = {
					value = scope:duel_value
					multiplier = -1
				}
				scope:family_member = {
					send_interface_toast = {
						title = intrigue_scheme_ongoing.5021.a.success
						show_as_tooltip = {
							scope:owner = {
								scope:scheme = {
									expose_scheme = yes
								}
							}
						}
					}
				}
			}
		}
		ai_chance = {
			base = 0
		}
	}

	option = { #Kill them
		name = intrigue_scheme_ongoing.5022.c
		scope:family_member = {
			trigger_event = intrigue_scheme_ongoing.5023
		}
		show_as_tooltip = {
			unknown_murder_effect = {
				VICTIM = scope:family_member
				MURDERER = scope:owner
				REASON = death_mysterious
			}
		}
		stress_impact = {
			compassionate = medium_stress_impact_gain
		}
		ai_chance = {
			base = 0
		}
	}
}

intrigue_scheme_ongoing.5023 = {
	type = character_event
	title = intrigue_scheme_ongoing.5021.t
	desc = intrigue_scheme_ongoing.5023.desc
	theme = generic_intrigue_scheme
	left_portrait = {
		character = scope:owner
		animation = anger
	}

	immediate = {
		unknown_murder_effect = {
			VICTIM = scope:family_member
			MURDERER = scope:owner
			REASON = death_mysterious
		}
	}

	option = {
		name = intrigue_scheme_ongoing.5023.a
	}
}



###########################################
# Encourage local celebration
# by Linnéa Thimrén
###########################################

intrigue_scheme_ongoing.5024 = {
	type = character_event
	title = intrigue_scheme_ongoing.5024.t
	desc = intrigue_scheme_ongoing.5024.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:target
	right_portrait = scope:agent
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		is_available_adult = yes
		short_term_gold >= medium_gold_value
		scope:scheme = {
			NOT = { has_variable = had_local_celebration_event }
			scheme_number_of_agents > 0
		}
		scope:target = {
			OR = {
				exists = location
				exists = capital_province
			}
		}
	}

	weight_multiplier = {
		base = 0.75
		modifier = {
			add = 0.25
			scope:target = {
				is_landed = yes
			}
		}
	}

	immediate = {
		scope:target = {
			if = {
				limit = {
					exists = capital_province
				}
				capital_province = { save_scope_as = province }
			}
			else = {
				location = { save_scope_as = province }
			}
		}
		scope:scheme = {
			random_scheme_agent = {
				limit = {
					is_alive = yes
				}
				weight = {
					base = 1
					modifier = {
						add = 10
						is_courtier_of = scope:target
					}
				}
				save_scope_as = agent
				add_character_flag = {
					flag = use_stealth_clothes
					days = 1
				}
			}
			set_variable = {
				name = had_local_celebration_event
				value = yes
				days = 3650
			}
		}
	}

	# Make sure the local celebration is held
	option = {
		name = intrigue_scheme_ongoing.5024.a
		remove_short_term_gold = medium_gold_value
		scope:scheme = {
			add_scheme_modifier = {
				type = scheme_local_infiltrators_modifier
			}
		}
		stress_impact = {
			greedy = medium_stress_impact_gain
		}
		ai_chance = {
			base = 100	
		}
	}

	# Decline
	option = {
		name = intrigue_scheme_ongoing.5024.b
		stress_impact = {
			impatient = medium_stress_impact_gain
			greedy = medium_stress_impact_loss
		}
		ai_chance = {
			base = 0
			modifier = {
				add = 50
				has_trait = greedy
			}
		}
	}
}



###########################################
# Court chaplain is in on it
# by Linnéa Thimrén
###########################################

scripted_trigger intrigue_scheme_ongoing_5026_pious_target_trigger = {
	OR = {
		has_trait = zealous
		has_lifestyle = learning_lifestyle
		piety_level >= high_piety_level
	}
}

intrigue_scheme_ongoing.5026 = {
	type = character_event
	title = intrigue_scheme_ongoing.5026.t
	desc = intrigue_scheme_ongoing.5026.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:target
	right_portrait = scope:court_chaplain
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		is_available_adult = yes
		scope:scheme = {
			NOT = { has_variable = had_court_chaplain_scheme_event }
		}
		scope:target = {
			exists = cp:councillor_court_chaplain
			NOT = { has_trait = cynical }
		}

		trigger_if = { #If the court chaplain isn't an agent they can't like the target too much
			limit = {
				NOT = {
					scope:scheme = {
						scheme_is_character_agent = scope:target.cp:councillor_court_chaplain
					}
				}
			}
			scope:target.cp:councillor_court_chaplain = {
				NOR = {
					has_friendly_relationship_trigger = {
						CHARACTER = scope:target
					}
					opinion = {
						target = scope:target
						value > 60
					}
				}
			}
		}
	}

	weight_multiplier = {
		base = 0.25
		modifier = { #the court chaplain is an agent in the scheme
			add = 0.5
			scope:scheme = {
				any_scheme_agent = {
					this = scope:target.cp:councillor_court_chaplain
				}
			}
		}
		modifier = { #the target is pious
			add = 0.5
			scope:target = {
				intrigue_scheme_ongoing_5026_pious_target_trigger = yes
			}
		}
		modifier = {
			add = 0.25
			OR = {
				has_trait = gregarious
				has_trait = scholar
			}
		}
	}

	immediate = {
		if = {
			limit = {
				exists = capital_province
			}
			capital_province = { save_scope_as = province }
		}
		else = {
			location = { save_scope_as = province }
		}
		scope:target = {
			cp:councillor_court_chaplain = {
				add_character_flag = {
					flag = use_stealth_clothes
					days = 1
				}
				save_scope_as = court_chaplain
			}
		}
		scope:scheme = {
			set_variable = {
				name = had_court_chaplain_scheme_event
				value = yes
				days = 3650
			}
		}
	}

	# Convince them through diplomacy
	option = {
		name = intrigue_scheme_ongoing.5026.a
		trigger = {
			NOT = { has_trait = gregarious }
		}
		duel = {
			skill = diplomacy
			target = scope:court_chaplain
			20 = {		
				desc = intrigue_scheme_ongoing.5026.a.success
				compare_modifier = {
					value = scope:duel_value
					multiplier = 0.75
					min = 0
				}
				root = {
					send_interface_toast = {
						title = intrigue_scheme_ongoing.5026.a.success
						left_icon = scope:court_chaplain
						scope:scheme = {
							if = {
								limit = {
									scope:target = {
										intrigue_scheme_ongoing_5026_pious_target_trigger = yes
									}
								}
								add_scheme_modifier = {
									type = scheme_pious_target_court_chaplain_is_in_modifier
								}
							}
							else = {
								add_scheme_modifier = {
									type = scheme_court_chaplain_is_in_modifier
								}
							}
						}
					}
				}
			}
			10 = {		
				desc = intrigue_scheme_ongoing.5026.a.failure
				compare_modifier = {
					value = scope:duel_value
					multiplier = -0.5
					min = -14
				}
				root = {
					send_interface_toast = {
						title = intrigue_scheme_ongoing.5026.a.failure
						left_icon = scope:court_chaplain
						if = {
							limit = {
								scope:scheme = {
									scheme_is_character_agent = scope:court_chaplain
								}
							}
							scope:court_chaplain = {
								forbid_from_scheme = scope:scheme
							}
						}
						else = {
							scope:scheme = {
								add_scheme_modifier = {
									type = scheme_court_chaplain_is_working_against_modifier
								}
							}
						}
					}
				}
			}
		}
		stress_impact = {
			shy = medium_stress_impact_gain
			zealous = minor_stress_impact_gain
		}
		ai_chance = {
			base = 50

			modifier = {
				add = 25
				diplomacy >= medium_skill_rating
			}

			modifier = {
				add = -25
				scope:court_chaplain.diplomacy > root.diplomacy
			}
		}
	}

	option = { #If you're cool you only get the good stuff
		name = intrigue_scheme_ongoing.5026.a_gregarious
		trigger = { has_trait = gregarious }
		trait = gregarious
		flavor = intrigue_scheme_ongoing.5026.a_gregarious_tt

		scope:scheme = {
			if = {
				limit = {
					scope:target = {
						intrigue_scheme_ongoing_5026_pious_target_trigger = yes
					}
				}
				add_scheme_modifier = {
					type = scheme_pious_target_court_chaplain_is_in_modifier
				}
			}
			else = {
				add_scheme_modifier = {
					type = scheme_court_chaplain_is_in_modifier
				}
			}
		}
		stress_impact = {
			shy = medium_stress_impact_gain
			zealous = minor_stress_impact_gain
		}
		ai_chance = {
			base = 100	
		}
	}

	# Convince them through learning
	option = {
		name = {
			trigger = {
				scope:scheme = {
					scheme_is_character_agent = scope:court_chaplain
				}
			}
			text = intrigue_scheme_ongoing.5026.b_agent
		}
		name = intrigue_scheme_ongoing.5026.b
		trigger = {
			NOT = { has_trait = scholar }
		}
		duel = {
			skill = learning
			target = scope:court_chaplain
			20 = {		
				desc = intrigue_scheme_ongoing.5026.a.success
				compare_modifier = {
					value = scope:duel_value
					multiplier = 0.75
					min = 0
				}
				root = {
					send_interface_toast = {
						title = intrigue_scheme_ongoing.5026.a.success
						left_icon = scope:court_chaplain
						scope:scheme = {
							if = {
								limit = {
									scope:target = {
										intrigue_scheme_ongoing_5026_pious_target_trigger = yes
									}
								}
								add_scheme_modifier = {
									type = scheme_pious_target_court_chaplain_is_in_modifier
								}
							}
							else = {
								add_scheme_modifier = {
									type = scheme_court_chaplain_is_in_modifier
								}
							}
						}
					}
				}
			}
			10 = {		
				desc = intrigue_scheme_ongoing.5026.a.failure
				compare_modifier = {
					value = scope:duel_value
					multiplier = -0.5
					min = -14
				}
				root = {
					send_interface_toast = {
						title = intrigue_scheme_ongoing.5026.a.failure
						left_icon = scope:court_chaplain
						if = {
							limit = {
								scope:scheme = {
									scheme_is_character_agent = scope:court_chaplain
								}
							}
							scope:court_chaplain = {
								forbid_from_scheme = scope:scheme
							}
						}
						else = {
							scope:scheme = {
								add_scheme_modifier = {
									type = scheme_court_chaplain_is_working_against_modifier
								}
							}
						}
					}
				}
			}
		}
		stress_impact = {
			zealous = medium_stress_impact_gain
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 25
				learning >= medium_skill_rating
			}

			modifier = {
				add = -25
				scope:court_chaplain.learning > root.learning
			}	
		}
	}

	option = { #If you're cool you only get the good stuff
		name = intrigue_scheme_ongoing.5026.b_scholar
		trigger = {
			has_trait = scholar
		}
		trait = scholar
		flavor = intrigue_scheme_ongoing.5026.b_scholar_tt

		scope:scheme = {
			if = {
				limit = {
					scope:target = {
						intrigue_scheme_ongoing_5026_pious_target_trigger = yes
					}
				}
				add_scheme_modifier = {
					type = scheme_pious_target_court_chaplain_is_in_modifier
				}
			}
			else = {
				add_scheme_modifier = {
					type = scheme_court_chaplain_is_in_modifier
				}
			}
		}
		stress_impact = {
			zealous = medium_stress_impact_gain
		}
		ai_chance = {
			base = 100	
		}
	}

	# Nah
	option = {
		name = intrigue_scheme_ongoing.5026.c
		add_piety = minor_piety_gain
		stress_impact = {
			impatient = medium_stress_impact_gain
		}
		ai_chance = {
			base = 0
		}
	}
}
