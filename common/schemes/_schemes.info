== Structure ==
This documentation does not currently include all possible parameters due to the limited knowledge of the author.

Success Chance is in the range of 0-100
Secrecy is in the range of 0-100
Progress Chance is in the range of 0-100
Scheme Progress goes from 0-10

(Note that accessing Success Chance and Secrecy in script is done as "scheme_success_chance" and "scheme_secrecy")

scheme_name = { # Identifier for the scheme. Also used for localizing the name. Postfixed with "_action" for localizing the action

	skill = learning # What skill to base scheme power on
	
	hostile = yes # This will be considered a hostile scheme, which means that the participants get the effects of hostile_scheme_resistance/power_add/mult. Schemes are *not* hostile by default and are instead personal and effected by personal_scheme_resistance/power_add/mult
	icon = key # Defaults to scheme key

	allow = {} # When this scheme can be started
	
	valid = {} # What conditions have to be fulfilled for the scheme to keep going; if invalid it will end. Checked daily.
	
	agent_join_threshold = 5 # How much does the AI have to want to join in order to actually join
	agent_leave_threshold = 1 # If the AI falls below this, it will automatically leave the scheme

	uses_agents = no # If set to no, it is not possible to add agents to this scheme in any way. The member list and invite button will also get hidden
	uses_resistance = no # if set to no, this makes resistance be 0
	
	valid_agent = {} # trigger to check if an agent is valid to be part of the scheme (some basic checks already apply, use sparingly as this is checked frequently)
	
	agent_join_chance = { # How much does the AI want to join
		base = 0
		modifier = {
			add = 10
			always = yes
		}
	}
	
	agent_success_chance = {} # each agent adds this to the success chance of the scheme uses the same scopes as the join chance (agent as root)
	
	base_success_chance = {} # the base chance uses the scheme as root
	
	maximum_success_chance = 100
	minimum_success_chance = 0
	maximum_secrecy = 100
	minimum_secrecy = 0
	maximum_progress_chance = 100
	minimum_progress_chance = 5
	
	cooldown = { days = 0 } # After the scheme ends, how many days minimum before the same type of scheme can be used by the owner on the target
	
	is_secret = yes #If the Scheme is secret, the secrecy mechanics are used (otherwise always 100% secrecy)
	
	use_secrecy = {} # trigger that can be used for schemes that sometimes should be secret and sometimes not (seduction depending on targets) if this returns false secrecy is set to 100%
	
	base_secrecy = -20 #The base chance used for the monthly scheme expose check secrecy is based on: base_secrecy + success_chance + scheme_modifiers and clamped to 0-100
	
	on_ready = { # What should happen when the scheme is ready (ie when progress has reached it's maximum)
		scheme_owner = {
			trigger_event = test_compose.0001
		}
	}

	on_monthly = { # What should happen once a month while the scheme exists
		scheme_owner = {
			trigger_event = {
				on_action = compose_ongoing
			}
		}
	}

	on_invalidated = { # What should happen if the scheme invalidates. Check on_valid for what conditions invalidate the scheme.
		
	}

	on_agent_leave = {} # effect executed for every agent that joins. If not empty, it replacec default feed notifications about joining agents

	on_agent_join = {} # effect executed for every agent that leaves the scheme. If not empty, it replace default feed notifications about leaving agents. Doesn't get triggered for invalidated scheme

	# Travel freeze/cancel defaults to no.
	freeze_scheme_when_traveling = yes/no # If the scheme should freeze automatically when the schemer starts traveling
	freeze_scheme_when_traveling_target = yes/no # If the scheme should freeze automatically when the scheme target starts traveling
	cancel_scheme_when_traveling = yes/no # If the scheme should be cancelled automatically when the schemer starts traveling
	cancel_scheme_when_traveling_target = yes/no # If the scheme should be cancelled automatically when the scheme target starts traveling
	
	# Progress chance each month is scheme power minus scheme resistance. E.G., 50 power, 25 resistance, means 25% chance
	
	power_per_skill_point = 0.1 # How much scheme power does the owner get per point of the relevant skill
	resistance_per_skill_point = 0 # How much resistance does the defender get per point of the relevant skill
	
	power_per_agent_skill_point = 1 # How much scheme power does the participants supporting the owner get per point of the relevant skill
	spymaster_power_per_skill_point = 1
	spymaster_resistance_per_skill_point = 1
	tier_resistance = 1
}

== Event targets ==
Schemes have the following event targets automatically generated:

scope:scheme = {
	This is the scheme scope itself for a given scheme.
}
scheme_owner = {
	Set within the scheme scope. If you want to access it from outside the scheme scope, you must first scope to the scheme by doing like this:
	scope:scheme.scheme_owner = { }
}
scheme_target = {
	Same as scheme_owner.
}


scope:target = {
	The same as scheme_target, except it lets you scope directly to it, as long as you are still in an unbroken event chain that can be traced back to the scheme scope.
}
scope:owner = {
	Same as scheme_owner, following the same rule as scope:target. (If in doubt about how to use these, just use scope:scheme.scheme_owner = { } )
}


scope:agent = {
	A scope referring to an agent in the plot, fired from an effect in the scheme's file. So far we're only doing that with the on_agent_exposed = { } effect, so that you can track which specific agent is discovered.	
}

== Related modifiers ==
hostile_scheme_power_add = x.x # Provides a given amount of scheme power when participating in hostile schemes. Used on characters
hostile_scheme_resistance_add = x.x # Provides a given amount of scheme resistance when the target of a hostile scheme. Used on characters
hostile_scheme_power_mult = x.x # Provides a multiplier to the amount of scheme power when participating in hostile schemes. Used on characters
hostile_scheme_resistance_mult = x.x # Provides a multiplier to the amount of scheme resistance when the target of a hostile scheme. Used on characters

personal_scheme_power_add = x.x # Provides a given amount of scheme power when participating in personal schemes. Used on characters
personal_scheme_resistance_add = x.x # Provides a given amount of scheme resistance when the target of a personal scheme. Used on characters
personal_scheme_power_mult = x.x # Provides a multiplier to the amount of scheme power when participating in personal schemes. Used on characters
personal_scheme_resistance_mult = x.x # Provides a multiplier to the amount of scheme resistance when the target of a personal scheme. Used on characters

scheme_power = x.x # Provides a given amount of scheme power to the scheme itself. Used on the scheme itself
scheme_resistance = x.x # Provides a given amount of scheme resistance to the scheme itself. Used on the scheme itself
scheme_secrecy = x.x # Provides a given amount of scheme secrecy to the scheme itself. Used on the scheme itself
scheme_success_chance = x
owned_personal_scheme_success_chance_add = x # Increases success chance of all personal schemes a character owns
owned_hostile_scheme_success_chance_add = x # Increases success chance of all hostile schemes a character owns
enemy_personal_scheme_success_chance_add = x # Increases success chance of all personal schemes a character is the target of
enemy_hostile_scheme_success_chance_add = x # Increases success chance of all hostile schemes a character is the target of

max_<scheme_name>_schemes_add = x # Used on character
max_hostile_schemes_add = x # Used on character
max_personal_schemes_add = x # Used on character
# The hostile/personal + scheme_name + base define control how many of each scheme you can have running at once

<scheme_name>_power_add = x.x # Used on character
<scheme_name>_power_mult = x # Used on character
<scheme_name>_resistance_add = x.x # Used on character
<scheme_name>_resistance_mult = x # Used on character

== Related loc/UI functions ==
[SCHEME.GetName] - Gets the name of the scheme type. E.G., "Seduction Scheme"
[SCHEME.GetAction] - Gets the name of the scheme action. E.G., "Seduce"
[SCHEME.GetFullActionName] - Gets the name of the action combined with the target. E.G., "Seduce Duke William"
[SCHEME.GetTypeDescription] - Gets the description of the scheme type
[SCHEME.GetSecrecy] - Gets as a number how secret the scheme is
[SCHEME.GetOwner] - Gets who owns the scheme
[SCHEME.GetTarget] - Gets who is targeted by the scheme
[SCHEME.GetPower] - Gets the power of the scheme as a number
[SCHEME.GetResistance] - Gets the resistance of the scheme as a number
[SCHEME.GetPowerDifference] - Gets the difference between the scheme power and resistance as a number
[SCHEME.IsOwnerExposed] - Gets whether the owner is exposed
[SCHEME.GetProgress] - Gets the progress of the scheme as a number
[SCHEME.IsFrozen] - Gets whether the scheme is frozen
[SCHEME.IsUnfrozen] - Gets whether the scheme is unfrozen
[SCHEME.IsSecret] - Gets whether the scheme is secret
[SCHEME.GetChangeDesc] - Gets the description of how progress will change
