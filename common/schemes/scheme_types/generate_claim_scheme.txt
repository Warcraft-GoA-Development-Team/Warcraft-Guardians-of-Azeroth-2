generate_claim = {
	# Basic Setup
	skill = learning
	desc = "generate_claim_desc_general"
	success_desc = "GENERATE_CLAIM_SUCCESS_DESC"
	icon = icon_scheme_generate_claim
	illustration = "gfx/interface/illustrations/event_scenes/corridor.dds"
	target_type = title
	is_secret = yes
	maximum_breaches = 5
	category = contract
	cooldown = { years = 10 }

	# Travel Triggers (default no)
	freeze_scheme_when_traveling = yes

	# Parameters
	speed_per_skill_point = t2_spsp_owner_value
	target_spymaster_speed_per_skill_point = 0
	uses_resistance = no
	base_progress_goal = t2_base_phase_length_value
	maximum_secrecy = 95
	base_maximum_success = t2_base_max_success_value
	phases_per_agent_charge = 1
	success_chance_growth_per_skill_point = laamp_contract_scgpsp_value
	base_secrecy = {
		add = secrecy_base_value
		add = countermeasure_apply_secrecy_maluses_value
	}

	# Core Triggers
	allow = {
		is_adult = yes
		is_imprisoned = no
	}

	valid = {
		# Warcraft
		NOT = { is_isolated_from_trigger = { target = scope:target } }
		scope:target = {
			is_noble_family_title = no
			is_landless_type_title = no
		}
	}

	# Agents
	agent_leave_threshold = -25
	agent_join_chance = {
		base = 0
		ai_agent_join_chance_basic_suite_modifier = yes
		ai_agent_join_chance_hostile_title_modifier = yes
	}
	valid_agent = { is_valid_agent_standard_trigger = yes }
	agent_groups_owner_perspective = { courtiers guests scripted_relations }

	odds_prediction = {
		add = base_odds_prediction_target_is_title_value
		add = odds_skill_contribution_learning_target_is_title_value
		add = agent_groups_owner_perspective_value
		add = odds_generate_claim_scheme_misc_value
		min = 0
	}

	# Base Chances
	base_success_chance = {
		base = 0
		scheme_type_skill_success_chance_modifier = { SKILL = LEARNING }

		hostile_scheme_title_base_chance_modifier = yes

		# Spiritual Head of Faith
		modifier = {
			add = -50
			desc = "SCHEME_VS_SPIRITUAL_HOF"
			exists = scope:target.holder
			scope:owner = {
				faith = {
					exists = religious_head
					has_doctrine = doctrine_spiritual_head
					religious_head = {
				 		this = scope:target.holder
				 	}
				}
			}
		}

		compare_modifier = {
			desc = "SCHEME_MY_LEARNING"
			value = scope:owner.learning
			multiplier = 2
		}

		modifier = {
			add = -30
			always = scope:exposed
			desc = "SCHEME_IS_EXPOSED"
		}

		modifier = {
			add = -20
			desc = FABRICATE_HOOK_HOLDER_SCHEMER
			scope:target.holder ?= {
				has_trait = schemer
			}
		}

		modifier = {
			add = 20
			desc = FABRICATE_HOOK_DECEITFUL
			scope:owner = {
				has_trait = deceitful
			}
		}

		modifier = {
			add = -20
			desc = FABRICATE_HOOK_HONEST
			scope:owner = {
				has_trait = honest
			}
		}

		modifier = {
			add = 10
			desc = FABRICATE_HOOK_HOLDER_TRUSTING
			scope:target.holder ?= {
				has_trait = trusting
			}
		}

		# Family Feud
		house_feud_hostile_scheme_title_success_modifier = yes

		# Diarchs are better at schemes within their liege's realm
		diarch_scheming_title_within_realm_bonus_modifier = yes

		# house_head_request_interaction
		modifier = {
			add = political_scheme_variable_list_value
			scope:owner = {
				has_variable_list = supporting_political_schemes
			}
			desc = HOUSE_HEAD_SCHEME_SUPPORT_DESC
		}
		modifier = {
			add = -10
			scope:owner = { has_character_modifier = political_schemes_distracted_modifier }
			desc = political_schemes_distracted_modifier
		}
		modifier = {
			scope:owner = {
				has_character_modifier = united_political_agents_modifier
				is_vassal_of = scope:target
			}
			desc = united_political_agents_modifier
			add = 15
		}
	}

	# On Actions
	on_start = {
		set_variable = {
			name = apply_countermeasures
			value = flag:indirect
		}
		# Fallback agents — a balanced config if you start the scheme from script.
		if = {
			limit = {
				scheme_owner = {
					NOT = { has_variable = agents_added }
				}
			}
			add_agent_slot = agent_scribe
			add_agent_slot = agent_scribe
			add_agent_slot = agent_diplomat
			add_agent_slot = agent_justiciar_speed
			add_agent_slot = agent_decoy
		}
	}
	on_phase_completed = {
		suppress_scheme_follow_up_event_till_input_given_effect = yes
		fabricate_hook_scheme_prep_effect = yes
		cap_schemes_and_fire_reminders_effect = yes
	}
	on_hud_click  = { generate_claim_scheme_prep_effect = yes }
	on_semiyearly = {
		if = {
			limit = {
				scheme_owner = { is_ai = yes }
			}
			generate_claim_scheme_prep_effect = yes
		}
	}

	## Invalidation
	on_invalidated = {
		scheme_target_title = {
			save_scope_as = target
		}
		scheme_owner = {
			save_scope_as = owner
			send_interface_toast = {
				type = event_toast_effect_neutral
				title = generate_claim_invalidated_title
				left_icon = scope:target
				if = { # Gained the title
					limit = { scope:target.holder = scope:owner }
					custom_tooltip = scheme_owner_owns_title
				}
				else_if = { # Gained a claim
					limit = {
						scope:owner = { has_claim_on = scope:target }
					}
					custom_tooltip = scheme_owner_owns_claim
				}
				else_if = { # No more admin
					limit = {
						scope:owner = {
							NOT = { government_allows = administrative }
						}
					}
					custom_tooltip = scheme_owner_not_admin
				}
				else_if = { # Target is outside of the realm
					limit = {
						exists = scope:owner.top_liege.primary_title
						scope:target = {
							NOT = { target_is_de_facto_liege_or_above = scope:owner.top_liege.primary_title }
						}
					}
					custom_tooltip = title_no_more_valid
				}
			}
		}
	}

	## Ongoing
	on_monthly = {
		hostile_scheme_monthly_discovery_chance_effect = yes
		if = {
			limit = {
				NOT = { exists = scope:discovery_event_happening }
			}
			fire_generic_contract_scheme_on_going_events_effect = yes
		}
	}
}
