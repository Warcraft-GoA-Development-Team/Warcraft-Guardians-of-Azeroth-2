
# If we can end a regency, we should.
action_end_regency = {
	priority = 1000
	check_create_action = {
		if = {
			limit = {
				# Are you in a regency?
				has_active_diarchy = yes
				# Could you take the interaction(s)?
				OR = {
					# Temporary.
					AND = {
						has_diarchy_active_parameter = diarchy_type_is_temporary_regency
						is_character_interaction_valid = {
							interaction = liege_dismiss_temporary_regency_interaction
							recipient = diarch
						}
					}
					# Entrenched.
					AND = {
						has_diarchy_active_parameter = diarchy_type_is_entrenched_regency
						is_character_interaction_valid = {
							interaction = liege_dismiss_entrenched_regency_interaction
							recipient = diarch
						}
					}
				}
			}
			try_create_important_action = {
				important_action_type = action_end_regency
				actor = root
				recipient = diarch
			}
		}
	}
	effect = {
		if = {
			limit = { has_diarchy_active_parameter = diarchy_type_is_temporary_regency }
			open_interaction_window = {
				interaction = liege_dismiss_temporary_regency_interaction
				actor = root
				recipient = diarch
			}
		}
		else_if = {
			limit = { has_diarchy_active_parameter = diarchy_type_is_entrenched_regency }
			open_interaction_window = {
				interaction = liege_dismiss_entrenched_regency_interaction
				actor = root
				recipient = diarch
			}
		}
	}
}

# Regents always want to swing the scales if they can.
action_swing_scales_regent = {
	priority = 1000
	check_create_action = {
		if = {
			limit = {
				# Are you a regent?
				is_diarch = yes
				# Could you take the interaction?
				is_character_interaction_valid = {
					interaction = swing_scales_currency_interaction
					recipient = liege
				}
			}
			try_create_important_action = {
				important_action_type = action_swing_scales_regent
				actor = root
				recipient = liege
			}
		}
	}
	unimportant = {
		# Do you have one of the standard currencies available?
		NOR = {
			prestige >= swing_scales_prestige_cost_value
			AND = {
				faith = liege.faith
				piety >= swing_scales_piety_cost_value
			}
			gold >= swing_scales_cash_cost_value
			has_usable_hook = liege
			# We're not check HoF stuff for general ease of scripting - it's more of a roleplay option.
		}
	}
	effect = {
		open_interaction_window = {
			interaction = swing_scales_currency_interaction
			actor = root
			recipient = scope:recipient
		}
	}
}

# Lieges want to swing the scales once an entrenched regency starts getting out of control.
action_swing_scales_liege_entrenched_dangerous = {
	priority = 1000
	is_dangerous = yes
	check_create_action = {
		if = {
			limit = {
				# Do you have an active regency?
				has_active_diarchy = yes
				# Is it one worth bothering yourself over?
				has_diarchy_active_parameter = diarchy_type_is_entrenched_regency
				diarchy_swing >= 45
				# Could you take the interaction?
				is_character_interaction_valid = {
					interaction = swing_scales_currency_interaction
					recipient = diarch
				}
			}
			try_create_important_action = {
				important_action_type = action_swing_scales_liege_entrenched_dangerous
				actor = root
				recipient = diarch
			}
		}
	}
	unimportant = {
		# Do you have one of the standard currencies available?
		NOR = {
			prestige >= diarch.swing_scales_prestige_cost_value
			AND = {
				faith = diarch.faith
				piety >= diarch.swing_scales_piety_cost_value
			}
			gold >= diarch.swing_scales_cash_cost_value
			has_usable_hook = diarch
			# We're not check HoF stuff for general ease of scripting - it's more of a roleplay option.
		}
	}
	effect = {
		open_interaction_window = {
			interaction = swing_scales_currency_interaction
			actor = root
			recipient = scope:recipient
		}
	}
}

# Regents want to use their revoke whenever they can.
action_regent_revoke = {
	combine_into_one = yes
	check_create_action = {
		if = {
			limit = {
				# Are you a regent?
				is_diarch = yes
				liege = {
					# Is the power unlocked?
					has_diarchy_active_parameter = unlock_diarch_revoke_title_interaction
					# And is there a valid target?
					any_vassal = {
						save_temporary_scope_as = char_temp
						# Could you take the interaction?
						root = {
							is_character_interaction_valid = {
								interaction = diarch_revoke_title_interaction
								recipient = scope:char_temp
							}
						}
					}
				}
			}
			liege = {
				every_vassal = {
					limit = {
						any_held_title = {
							title_revocation_standard_can_pick_title_trigger = yes
							root = { has_claim_on = prev }
						}
					}
					try_create_important_action = {
						important_action_type = action_regent_revoke
						actor = root
						recipient = this
					}
				}
			}
		}
	}
	effect = {
		open_interaction_window = {
			interaction = diarch_revoke_title_interaction
			actor = root
			recipient = scope:recipient
		}
	}
}

# Regents want to use their retract whenever they can.
action_regent_retract = {
	combine_into_one = yes
	check_create_action = {
		if = {
			limit = {
				# Are you a regent?
				is_diarch = yes
				liege = {
					# Is the power unlocked?
					has_diarchy_active_parameter = unlock_diarch_retract_vassal_interaction
					# And is there a valid target?
					any_vassal = {
						save_temporary_scope_as = char_temp
						# Could you take the interaction?
						root = {
							is_character_interaction_valid = {
								interaction = diarch_retract_vassal_interaction
								recipient = scope:char_temp
							}
						}
					}
				}
			}
			liege = {
				every_vassal = {
					limit = {
						NOT = { this = root }
						any_vassal = {
							highest_held_title_tier >= tier_county
							highest_held_title_tier < root.highest_held_title_tier
							any_held_title = {
								save_temporary_scope_as = title_temp
								root = {
									any_held_title = { is_de_jure_liege_or_above_target = scope:title_temp }
								}
							}
						}
					}
					save_scope_as = char_temp
					try_create_important_action = {
						important_action_type = action_regent_retract
						actor = root
						recipient = scope:char_temp
					}
				}
			}
		}
	}
	effect = {
		open_interaction_window = {
			interaction = diarch_retract_vassal_interaction
			actor = root
			recipient = scope:recipient
		}
	}
}

# Regents want to use their imprison when they've got a good target.
action_regent_imprison = {
	combine_into_one = yes
	check_create_action = {
		if = {
			limit = {
				# Are you a regent?
				is_diarch = yes
				# Is the power unlocked?
				liege = { has_diarchy_active_parameter = unlock_diarch_imprison_interaction }
				# And is there a valid target?
				OR = {
					# Scan over your liege's vassals to get people who really, really hate you.
					liege = {	
						any_vassal = { action_regent_imprison_suitable_char_covassals_trigger = yes }
					}
					# Plus we want to pick up your rivals.
					any_relation = {
						type = rival
						action_regent_imprison_suitable_char_rivals_trigger = yes
					}
				}
			}
			# First, nab vassals.
			liege = {
				every_vassal = {
					limit = { action_regent_imprison_suitable_char_covassals_trigger = yes }
					try_create_important_action = {
						important_action_type = action_regent_imprison
						actor = root
						recipient = this
					}
				}
			}
			# Then, rivals.
			every_relation = {
				type = rival
				limit = { action_regent_imprison_suitable_char_rivals_trigger = yes }
				try_create_important_action = {
					important_action_type = action_regent_imprison
					actor = root
					recipient = this
				}
			}
		}
	}
	effect = {
		open_interaction_window = {
			interaction = diarch_imprison_interaction
			actor = root
			recipient = scope:recipient
		}
	}
}

# Regents want to get claims most of the time.
action_legal_meddling = {
	combine_into_one = yes
	check_create_action = {
		if = {
			limit = {
				# Are you a regent?
				is_diarch = yes
				liege = {
					# Is the power unlocked?
					has_diarchy_active_parameter = unlock_legal_meddling_interaction
					any_vassal = {
						action_legal_meddling_suitable_char_trigger = yes
						save_temporary_scope_as = char_temp
						any_held_title = { action_legal_meddling_suitable_title_trigger = yes }
					}
				}
			}
			liege = {
				every_vassal = {
					limit = {
						action_legal_meddling_suitable_char_trigger = yes
						save_temporary_scope_as = char_temp
						any_held_title = { action_legal_meddling_suitable_title_trigger = yes }
					}
					try_create_important_action = {
						important_action_type = action_legal_meddling
						actor = root
						recipient = this
					}
				}
			}
		}
	}
	effect = {
		open_interaction_window = {
			interaction = diarch_legal_meddling_interaction
			actor = root
			recipient = scope:recipient
		}
	}
}

# Regents want to embezzle when they stand a good chance of getting away with it.
action_syphon_treasury = {
	combine_into_one = yes
	check_create_action = {
		if = {
			limit = {
				# Are you a regent?
				is_diarch = yes
				liege = {
					# Is the power unlocked?
					has_diarchy_active_parameter = unlock_syphon_treasury_interaction
					# Do you have at least 50:50 stewardship?
					stewardship <= root.stewardship
				}
				# Could you take the interaction otherwise?
				is_character_interaction_valid = {
					interaction = diarch_syphon_treasury_interaction
					recipient = liege
				}
			}
			try_create_important_action = {
				important_action_type = action_syphon_treasury
				actor = root
				recipient = liege
			}
		}
	}
	effect = {
		open_interaction_window = {
			interaction = diarch_syphon_treasury_interaction
			actor = root
			recipient = scope:recipient
		}
	}
}

# Regents want to shift privileges when they're poor and likely to get away with it.
action_shift_privileges = {
	combine_into_one = yes
	check_create_action = {
		if = {
			limit = {
				# Are you a regent?
				is_diarch = yes
				liege = {
					# Is the power unlocked?
					has_diarchy_active_parameter = unlock_shift_privileges_interaction
					# And is there a valid target?
					any_vassal = { action_shift_privileges_suitable_char_trigger = yes }
				}
			}
			liege = {
				every_vassal = {
					limit = { action_shift_privileges_suitable_char_trigger = yes }
					try_create_important_action = {
						important_action_type = action_shift_privileges
						actor = root
						recipient = this
					}
				}
			}
		}
	}
	effect = {
		open_interaction_window = {
			interaction = diarch_shift_privileges_interaction
			actor = root
			recipient = scope:recipient
		}
	}
}

# Regents want to boost liege CA/TA when it'd help them.
action_subsidise_liege_authority = {
	check_create_action = {
		if = {
			limit = {
				# Are you a regent?
				is_diarch = yes
				# Liege checks.
				liege = {
					# And we probably only want to advise you to do this when entrenched.
					has_diarchy_active_parameter = diarchy_type_is_entrenched_regency
					# And they've got poor CA/TA.
					NOT = { has_realm_law_flag = diarchs_want_to_subsidise_without_this_flag }
					# Finally, is there anything you might want to use/gain from this?
					## We check for revocation, because it's a nice basic power & checking for actual nodes would get tricksy.
					has_diarchy_active_parameter = unlock_diarch_revoke_title_interaction
				}
			}
			try_create_important_action = {
				important_action_type = action_subsidise_liege_authority
				recipient = liege
			}
		}
	}
	unimportant = {
		# Advertise that it's there but not that you can do it if you couldn't afford it.
		prestige < {
			value = liege.increase_crown_authority_prestige_cost
			multiply = subsidised_liege_authority_discount_value
		}
	}
	effect = {
		open_interaction_window = {
			interaction = diarch_subsidise_crown_authority_interaction
			actor = root
			recipient = scope:recipient
		}
	}
}

# Remember to secure the succession when you can.
action_designate_regent_for_hook = {
	is_dangerous = yes
	check_create_action = {
		if = {
			limit = {
				# Not doing so hot.
				health < fine_health
				# Has an heir to be concerned about.
				player_heir ?= { age <= 10 }
				# No pre-existing arrangements.
				NOR = {
					exists = diarch
					exists = designated_diarch
				}
			}
			
			try_create_important_action = {
				important_action_type = action_designate_regent_for_hook
				actor = root
				recipient = player_heir
			}
		}
	}
	effect = {
		scope:actor = { open_view_data = diarchy }
	}
}
