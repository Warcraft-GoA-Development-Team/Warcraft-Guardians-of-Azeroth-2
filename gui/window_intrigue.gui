######################################################
##################### INTRIGUE #######################
######################################################

window = {
	name = "intrigue_window"
	parentanchor = top|right
	layer = windows_layer
	movable = no
	
	# Warcraft
	visible = "[And(IsGameViewOpen('intrigue_window'), GetVariableSystem.HasValue( 'right_window_open', 'intrigue' ) )]"

	using = Window_Size_MainTab

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
		using = Window_Position_MainTab

		on_start = "[IntrigueWindow.SetTab( 'schemes' )]"

		# Warcraft
		on_start = "[GetVariableSystem.Set( 'right_window_open', 'intrigue' )]"

		on_start = "[GetVariableSystem.Set( 'secrets_show_all', 'true' )]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
		using = Window_Position_MainTab_Hide

		# Warcraft
		on_start = "[GetVariableSystem.ClearIf( 'right_window_open', GetVariableSystem.HasValue( 'right_window_open', 'intrigue' ) )]"
	}

	margin_widget = {
		size = { 100% 100% }
		margin = { 0 26 }
		margin_right = 20

		widget = {
			size = { 100% 100% }

			vbox = {
				using = Window_Margins

				header_with_picture = {
					layoutpolicy_horizontal = expanding

					blockoverride "header_text"
					{
						text = "INTRIGUE_VIEW"
					}

					blockoverride "button_close"
					{
						onclick = "[IntrigueWindow.Close]"
					}

					blockoverride "illustration_texture"
					{
						texture = "gfx/interface/illustrations/window_headers/header_prison.dds"
					}
				}

				hbox = {
					name = "tabs"
					layoutpolicy_horizontal = expanding

					button_tab = {
						name = "open_scheme_tab"
						layoutpolicy_horizontal = expanding

						text = "OPEN_SCHEMES_TAB"
						default_format = "#low"
						onclick = "[IntrigueWindow.SetTab( 'schemes' )]"
						down = "[IntrigueWindow.IsTabShown( 'schemes' )]"

						using = tooltip_above
					}

					button_tab = {
						name = "open_hooks_and_secrets_tab"
						layoutpolicy_horizontal = expanding

						text = "OPEN_HOOKS_AND_SECRETS_TAB"
						default_format = "#low"
						onclick = "[IntrigueWindow.SetTab( 'hooks_and_secrets' )]"
						down = "[IntrigueWindow.IsTabShown( 'hooks_and_secrets' )]"

						using = tooltip_above
					}
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					### SCHEMES
					scrollbox = {
						name = "schemes"
						visible = "[IntrigueWindow.IsTabShown( 'schemes' )]"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						state = {
							name = _show
							using = Animation_FadeIn_Quick
						}

						state = {
							name = _hide
							alpha = 0
						}

						background = {
							texture = "gfx/interface/skinned/illustrations/council/bg_council_spymaster.dds"
							margin = { -5 0 }
							fittype = end
							alpha = 0.3

							modify_texture = {
								texture = "gfx/interface/component_masks/mask_fade_vertical_up.dds"
								blend_mode = alphamultiply
							}
						}

						blockoverride "scrollbox_content"
						{
							## My Schemes
							vbox = {
								name = "my_own_schemes"
								layoutpolicy_horizontal = expanding
								spacing = 10

								vbox = {
									datacontext = "[IntrigueWindow.GetHostileSchemes]"
									layoutpolicy_horizontal = expanding

									text_label_center = {
										layoutpolicy_horizontal = expanding
										text = "[hostile_schemes|E]"
									}

									vbox = {
										name = "my_hostile_schemes"
										visible = "[SkillSchemeGroup.HasSchemes]"
										datamodel = "[SkillSchemeGroup.GetSchemes]"
										layoutpolicy_horizontal = expanding

										item = {
											vbox_own_scheme_item = {
												layoutpolicy_horizontal = expanding
											}
										}
									}

									text_multi = {
										name = "no_own_schemes"
										visible = "[Not(SkillSchemeGroup.HasSchemes)]"
										layoutpolicy_horizontal = expanding
										minimumsize = { 0 110  }

										text = "SCHEME_WINDOW_NOT_OWNED_SCHEMES"
										default_format = "#low;italic"
										align = center

										background = {
											using = Background_Area
										}
									}
								}

								vbox = {
									name = "my_personal_schemes"
									datacontext = "[IntrigueWindow.GetPersonalSchemes]"
									layoutpolicy_horizontal = expanding

									text_label_center = {
										layoutpolicy_horizontal = expanding
										text = "[personal_schemes|E]"
									}

									vbox = {
										name = "hostile_list"
										visible = "[SkillSchemeGroup.HasSchemes]"
										datamodel = "[SkillSchemeGroup.GetSchemes]"
										layoutpolicy_horizontal = expanding

										item = {
											vbox_own_scheme_item = {
												layoutpolicy_horizontal = expanding
											}
										}
									}

									text_multi = {
										name = "no_own_schemes"
										visible = "[Not(SkillSchemeGroup.HasSchemes)]"
										layoutpolicy_horizontal = expanding
										minimumsize = { 0 110  }

										text = "SCHEME_WINDOW_NOT_OWNED_SCHEMES"
										default_format = "#low;italic"
										align = center

										background = {
											using = Background_Area
										}
									}
								}
							}

							## Known schemes
							vbox = {
								name = "discovered_schemes"
								layoutpolicy_horizontal = expanding
								margin_top = 10

								text_label_center = {
									name = "label"
									layoutpolicy_horizontal = expanding

									text = "SCHEME_WINDOW_KNOWN_SCHEMES_TITLE"

									icon = {
										name = "discovered_icon"
										position = { 5 -5 }
										size = { 35 35 }
										texture = "gfx/interface/icons/schemes/icon_discovered_scheme.dds"
									}
								}

								vbox = {
									name = "known_schemes_grid"
									visible = "[IntrigueWindow.HasKnownSchemes]"
									datamodel = "[IntrigueWindow.GetKnownSchemes]"
									layoutpolicy_horizontal = expanding

									item = {
										vbox_discovered_scheme_item = {
											layoutpolicy_horizontal = expanding
										}
									}
								}

								text_multi = {
									name = "no_own_schemes"
									visible = "[Not(IntrigueWindow.HasKnownSchemes)]"
									layoutpolicy_horizontal = expanding
									minimumsize = { 0 110  }

									text = "SCHEME_WINDOW_NOT_KNOWN_SCHEMES"
									default_format = "#low"
									align = center

									background = {
										using = Background_Area
									}
								}
							}
						}
					}

					### HOOKS AND SECRETS
					scrollbox = {
						name = "hooks_and_secrets"
						visible = "[IntrigueWindow.IsTabShown( 'hooks_and_secrets' )]"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						state = {
							name = _show
							using = Animation_FadeIn_Quick
						}

						state = {
							name = _hide
							alpha = 0
						}

						background = {
							texture = "gfx/interface/illustrations/event_scenes/alley.dds"
							margin = { -5 0 }
							fittype = end
							alpha = 0.6

							modify_texture = {
								texture = "gfx/interface/component_masks/mask_fade_vertical_up.dds"
								blend_mode = alphamultiply
							}
						}

						blockoverride "scrollbox_content"
						{
							spacing = 20

							# My Hooks
							vbox = {
								name = "my_hooks"
								layoutpolicy_horizontal = expanding
								spacing = 2

								widget = {
									size = { -1 24 }
									layoutpolicy_horizontal = expanding
									
									hbox = {
										layoutpolicy_horizontal = expanding
										text_label_center = {
											layoutpolicy_horizontal = expanding
											align = center
											text = "INTRIGUE_WINDOW_MY_HOOKS_TITLE"
										}
									}
									hbox = {
										margin = { 10 0 }
										spacing = 10

										expand = {}

										hbox = {
											spacing = 4

											icon = {
												size = { 14 14 }
												texture = "gfx/interface/icons/portraits/hook_secret_small.dds"
												framesize = { 28 28 }
												frame = 1
												tooltip = "INTRIGUE_WINDOW_WEAK_HOOKS_COUNT"
											}

											text_single = {
												text = "[IntrigueWindow.GetMyWeakHooksCount]"
												tooltip = "INTRIGUE_WINDOW_WEAK_HOOKS_COUNT"
												align = nobaseline
											}
										}

										hbox = {
											spacing = 4

											icon = {
												size = { 14 14 }
												texture = "gfx/interface/icons/portraits/hook_secret_small.dds"
												framesize = { 28 28 }
												frame = 2
												tooltip = "INTRIGUE_WINDOW_STRONG_HOOKS_COUNT"
											}

											text_single = {
												text = "[IntrigueWindow.GetMyStrongHooksCount]"
												tooltip = "INTRIGUE_WINDOW_STRONG_HOOKS_COUNT"
												align = nobaseline
											}
										}
										
										spacer = {}
										
										hbox = {

											button_expand = {
												name = "show"
												visible = "[GreaterThan_int32(GetDataModelSize(IntrigueWindow.GetMyHooks), '(int32)4')]"
												frame = "[Select_int32( GetVariableSystem.Exists( 'hooks_expand' ), '(int32)2', '(int32)1' )]"
												onclick = "[GetVariableSystem.Toggle( 'hooks_expand' )]"

												using = tooltip_ws
												tooltip = "EXPAND_FILTER"
											}
										}
									}
								}

								hbox = {
									layoutpolicy_horizontal = expanding

									fixedgridbox = {
										datamodel = "[IntrigueWindow.GetMyHooks]"
										visible = "[And( GetVariableSystem.Exists( 'hooks_expand' ), DataModelHasItems( IntrigueWindow.GetMyHooks ) )]"
										flipdirection = yes
										maxhorizontalslots = 4
										datamodel_wrap = 4

										addcolumn = 116
										addrow = 120
								
										item = {
											portrait_head = {
												datacontext = "[IntrigueWindowHookItem.GetCharacter]"
											}
										}
									}

									fixedgridbox = {
										datamodel = "[IntrigueWindow.GetMyHooks]"
										visible = "[And( Not( GetVariableSystem.Exists( 'hooks_expand' ) ), DataModelHasItems( IntrigueWindow.GetMyHooks ) )]"
										flipdirection = yes
										maxhorizontalslots = 4
										
										addcolumn = 116
										addrow = 120
								
										item = {
											portrait_head = {
												datacontext = "[IntrigueWindowHookItem.GetCharacter]"
											}
										}
									}

									expand = {}
									text_single = {
										visible = "[And( Not( GetVariableSystem.Exists( 'hooks_expand' ) ), GreaterThan_int32(GetDataModelSize(IntrigueWindow.GetMyHooks), '(int32)4') )]"
										text = "[GetNumberAbove_int32(GetDataModelSize(IntrigueWindow.GetMyHooks), '(int32)4' )|=]"
										default_format = "#weak"
										using = Font_Size_Medium
										align = center
										layoutpolicy_vertical = growing
										layoutpolicy_horizontal = expanding
									}
								}

								text_multi = {
									visible = "[IsDataModelEmpty( IntrigueWindow.GetMyHooks )]"
									layoutpolicy_horizontal = expanding
									minimumsize = { 0 120 }
									text = "MY_HOOKS_ARE_EMPTY"
									align = center

									background = {
										using = Background_Area
									}
								}
							}

							# Secrets known to me
							vbox = {
								name = "secrets_known_to_me"
								layoutpolicy_horizontal = expanding
								spacing = 2
						
								widget = {
									size = { -1 24 }
									layoutpolicy_horizontal = expanding
									
									hbox = {
										layoutpolicy_horizontal = expanding
										
										text_label_center = {
											layoutpolicy_horizontal = expanding
											text = "INTRIGUE_WINDOW_SECRETS_KNOWN_TO_ME_TITLE"
										}
									}
									
									hbox = {
										
										layoutpolicy_horizontal = expanding
									
										expand = {}

										hbox = {
											margin_right = 15
											spacing = 5
											tooltip = "INTRIGUE_WINDOW_HOOK_SHOW_ALL"
											
											button_checkbox = {
												name = "show_all_secrets"
												onclick = "[GetVariableSystem.Toggle( 'secrets_show_all' )]"
												checked = "[GetVariableSystem.Exists( 'secrets_show_all' )]"
											}

											icon = {
												size = { 20 20 }
												texture = "gfx/interface/icons/portraits/hook_secret.dds"
												framesize = { 40 40 }
												frame = 4
											}
										}
									}
								}

								vbox_secret_item = {
									datamodel = "[IntrigueWindow.GetSecretsKnownToMe]"
									layoutpolicy_horizontal = expanding

									blockoverride "portrait"
									{
										datacontext = "[IntrigueWindowSecretGroup.GetCharacter]"
									}
								}

								text_multi = {
									visible = "[IsDataModelEmpty( IntrigueWindow.GetSecretsKnownToMe )]"
									layoutpolicy_horizontal = expanding
									minimumsize = { 0 120 }
									text = "SECRETS_KNOWN_TO_ME_IS_EMPTY"
									align = center

									background = {
										using = Background_Area
									}
								}
							}

							# Hooks on you
							vbox = {
								name = "hooks_on_me"
								layoutpolicy_horizontal = expanding
								spacing = 2

								text_label_center = {
									layoutpolicy_horizontal = expanding
									align = center
									text = "INTRIGUE_WINDOW_HOOKS_ON_ME_TITLE"

									hbox = {
										margin = { 10 0 }
										spacing = 10

										expand = {}

										hbox = {
											spacing = 4

											icon = {
												size = { 14 14 }
												texture = "gfx/interface/icons/portraits/hook_secret_small.dds"
												framesize = { 28 28 }
												frame = 1
												tooltip = "INTRIGUE_WINDOW_WEAK_HOOKS_COUNT"
											}

											text_single = {
												text = "[IntrigueWindow.GetWeakHooksOnMeCount]"
												tooltip = "INTRIGUE_WINDOW_WEAK_HOOKS_COUNT"
												align = nobaseline
											}
										}

										hbox = {
											spacing = 4

											icon = {
												size = { 14 14 }
												texture = "gfx/interface/icons/portraits/hook_secret_small.dds"
												framesize = { 28 28 }
												frame = 2
												tooltip = "INTRIGUE_WINDOW_STRONG_HOOKS_COUNT"
											}

											text_single = {
												text = "[IntrigueWindow.GetStrongHooksOnMeCount]"
												tooltip = "INTRIGUE_WINDOW_STRONG_HOOKS_COUNT"
												align = nobaseline
											}
										}
									}
								}

								vbox = {
									datamodel = "[IntrigueWindow.GetHooksOnMe]"
									visible = "[DataModelHasItems( IntrigueWindow.GetHooksOnMe )]"
									layoutpolicy_horizontal = expanding
									spacing = 3

									item = {
										hbox = {
											layoutpolicy_horizontal = expanding
											datacontext = "[IntrigueWindowHookItem.GetHook]"

											background = {
												using = Background_Area
											}

											portrait_head_small = {
												datacontext = "[IntrigueWindowHookItem.GetCharacter]"
											}

											vbox = {
												layoutpolicy_horizontal = expanding
												margin_left = 15

												hbox = {
													layoutpolicy_horizontal = expanding

													icon = {
														size = { 20 20 }
														texture = "gfx/interface/icons/portraits/hook_secret.dds"
														framesize = { 40 40 }
														frame = "[Hook.GetHookFrame]"
													}

													text_single = {
														layoutpolicy_horizontal = expanding
														text = " [Hook.GetHookStrengthState]"
														align = nobaseline
													}
												}

												hbox = {
													layoutpolicy_horizontal = expanding
													spacing = 5

													text_single = {
														text = "[Hook.GetName]"
													}

													text_single = {
														layoutpolicy_horizontal = expanding
														visible = "[Hook.HasExpirationDate]"
														text = "INTRIGUE_WINDOW_HOOK_EXPIRATION"
														default_format = "#low"
														autoresize = no
													}

													expand = {}
												}
											}

											expand = {}
										}
									}
								}

								text_multi = {
									visible = "[IsDataModelEmpty( IntrigueWindow.GetHooksOnMe )]"
									layoutpolicy_horizontal = expanding
									minimumsize = { 0 120 }
									text = "NOBODY_HAS_HOOKS_ON_ME"
									align = center

									background = {
										using = Background_Area
									}
								}
							}

							# My secrets
							vbox = {
								name = "my_secrets"
								layoutpolicy_horizontal = expanding
								spacing = 2

								text_label_center = {
									layoutpolicy_horizontal = expanding
									text = "INTRIGUE_WINDOW_MY_SECRETS_TITLE"
								}

								vbox = {
									name = "my_secrets_grid"
									datamodel = "[IntrigueWindow.GetMySecrets]"
									visible = "[DataModelHasItems( IntrigueWindow.GetMySecrets )]"
									layoutpolicy_horizontal = expanding
									margin_top = 10
									spacing = 5

									item = {
										vbox = {
											datacontext = "[IntrigueWindowSecretItem.GetSecret]"
											visible = "[Secret.IsValid]"
											layoutpolicy_horizontal = expanding

											hbox = {
												layoutpolicy_horizontal = expanding
												margin = { 10 0 }
												spacing = 10
												tooltip = "[Secret.GetTooltipDesc]"

												icon = {
													texture = "[Secret.GetType.GetIcon]"
													size = { 30 30 }
												}

												text_multi = {
													layoutpolicy_horizontal = expanding
													text = "INTRIGUE_WINDOW_SECRET_DESC"
													align = nobaseline
													max_width = 450
												}

												expand = {}
											}

											vbox_secret_item = {
												visible = "[IntrigueWindowSecretItem.IsExpanded]"
												datamodel = "[IntrigueWindowSecretItem.GetKnownBy]"
												layoutpolicy_horizontal = expanding

												blockoverride "portrait_context"
												{
												}
											}
										}
									}
								}

								text_multi = {
									visible = "[IsDataModelEmpty( IntrigueWindow.GetMySecrets )]"
									layoutpolicy_horizontal = expanding
									minimumsize = { 0 120 }
									text = "I_HAVE_NO_SECRETS"
									align = center

									background = {
										using = Background_Area
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

######################################################
################ TYPES AND TEMPLATES #################
######################################################

types IntrigueWindow
{
	type vbox_own_scheme_item = vbox {
		name = "my_own_scheme"
		datacontext = "[SchemeItem.GetScheme]"

		background = {
			using = Background_Area_With_Header
		}

		margin_widget = {
			name = "my_own_scheme_header"
			layoutpolicy_horizontal = expanding
			size = { 0 30 }
			margin_left = 10
			margin_right = 5
			
			text_single = {
				parentanchor = left|vcenter

				text = "SCHEME_WINDOW_ITEM_NAME"
				using = Font_Size_Medium
				align = center

				tooltip = "SCHEME_WINDOW_TT_ITEM"
			}

			button_cancel = {
				name = "cancel_button"
				parentanchor = right|vcenter
				position = { 0 2 }
				size = { 30 30 }

				onclick = "[SchemeItem.OnCancelClick]"
				enabled = "[SchemeItem.CanCancelScheme]"
				tooltip = "[SchemeItem.GetCancelSchemeDescription]"
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			margin = { 5 5 }
			margin_left = 15

			flowcontainer = {
				direction = vertical

				background = {
					visible = "[Scheme.IsExposed]"
					using = Status_Bad
					margin_right = 10
					margin_top = 5
				}

				flowcontainer  = {
					spacing = 5
					tooltip = "SCHEME_WINDOW_SUCCESS_TOOLTIP"

					icon = {
						name = success_icon
						size = { 30 30 }

						texture = "gfx/interface/icons/schemes/icon_scheme_success.dds"
					}

					text_single = {
						name = "success"
						text = "SCHEME_WINDOW_SUCCESS_CHANCE"
						using = Font_Size_Medium
						align = nobaseline
					}
				}

				flowcontainer  = {
					visible = "[Scheme.IsSecret]"
					spacing = 5
					tooltip = "SCHEME_WINDOW_SECRECY_TOOLTIP"

					icon = {
						name = "secrecy_icon"
						size = { 30 30 }
						texture = "gfx/interface/icons/schemes/icon_secrecy.dds"
					}

					text_single = {
						name = "secrecy"
						size = { 40 20 }
						text = "SCHEME_WINDOW_SECRECY"
						using = Font_Size_Medium
						align = nobaseline
					}
				}

				icon = {
					visible = "[Scheme.IsExposed]"
					size = { 35 35 }
					texture = "gfx/interface/icons/schemes/icon_discovered_scheme.dds"
					tooltip = "SCHEME_WINDOW_EXPOSED_TOOLTIP"
				}
			}

			# Progressbar
			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin_top = 13

				flowcontainer = {
					name = "progress"

					tooltip = "SCHEME_ITEM_PROGRESS_TOOLTIP"
					spacing = 2

					icon = {
						texture = "gfx/interface/progressbars/progress_scheme.dds"
						size = { 25 25 }
						framesize = { 45 45 }
						frame = "[Scheme.GetProgressFrame('(int32)1')]"
					}

					icon = {
						texture = "gfx/interface/progressbars/progress_scheme.dds"
						size = { 25 25 }
						framesize = { 45 45 }
						frame = "[Scheme.GetProgressFrame('(int32)2')]"
					}

					icon = {
						texture = "gfx/interface/progressbars/progress_scheme.dds"
						size = { 25 25 }
						framesize = { 45 45 }
						frame = "[Scheme.GetProgressFrame('(int32)3')]"
					}

					icon = {
						texture = "gfx/interface/progressbars/progress_scheme.dds"
						size = { 25 25 }
						framesize = { 45 45 }
						frame = "[Scheme.GetProgressFrame('(int32)4')]"
					}

					icon = {
						texture = "gfx/interface/progressbars/progress_scheme.dds"
						size = { 25 25 }
						framesize = { 45 45 }
						frame = "[Scheme.GetProgressFrame('(int32)5')]"
					}

					icon = {
						texture = "gfx/interface/progressbars/progress_scheme.dds"
						size = { 25 25 }
						framesize = { 45 45 }
						frame = "[Scheme.GetProgressFrame('(int32)6')]"
					}

					icon = {
						texture = "gfx/interface/progressbars/progress_scheme.dds"
						size = { 25 25 }
						framesize = { 45 45 }
						frame = "[Scheme.GetProgressFrame('(int32)7')]"
					}

					icon = {
						texture = "gfx/interface/progressbars/progress_scheme.dds"
						size = { 25 25 }
						framesize = { 45 45 }
						frame = "[Scheme.GetProgressFrame('(int32)8')]"
					}

					icon = {
						texture = "gfx/interface/progressbars/progress_scheme.dds"
						size = { 25 25 }
						framesize = { 45 45 }
						frame = "[Scheme.GetProgressFrame('(int32)9')]"
					}

					icon = {
						texture = "gfx/interface/progressbars/progress_scheme.dds"
						size = { 25 25 }
						framesize = { 45 45 }
						frame = "[Scheme.GetProgressFrame('(int32)10')]"
					}
				}

				text_single = {
					name = "estimated_time"
					text = "SW_ESTIMATED_TIME"
					using = Font_Size_Medium
					tooltip = "[SelectLocalization( Scheme.IsReady, 'SCHEME_READY_TOOLTIP', Scheme.GetEstimatedTimeRemaining )]"
				}

				expand = {}
			}

			portrait_head = {
				datacontext = "[Scheme.GetTarget]"
				using = tooltip_es
				blockoverride "portrait_button"
				{
					tooltip = "SCHEME_WINDOW_SCHEME_TARGET"
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			margin = { 9 5 }

			divider_light = {
				visible = "[Scheme.GetSchemeType.UsesAgents]"
				layoutpolicy_horizontal = expanding
			}
		}

		### MEMBERS BUTTONS
		hbox = {
			name = "my_own_scheme_buttons"
			visible = "[Scheme.GetSchemeType.UsesAgents]"
			layoutpolicy_horizontal = expanding
			margin = { 10 5 }
			margin_left = 15
			margin_bottom = 10
			spacing = 3

			text_single = {
				text = "SCHEME_WINDOW_SHOW_MEMBERS"
				margin_right = 3
				align = nobaseline
			}

			button_expand = {
				size = { 25 25 }
				frame = 2

				visible = "[GetVariableSystem.Exists( 'own_scheme_expand')]"
				onclick = "[GetVariableSystem.Clear( 'own_scheme_expand')]"
			}

			button_expand = {
				size = { 25 25 }
				frame = 1

				visible = "[Not(GetVariableSystem.Exists( 'own_scheme_expand'))]"
				onclick = "[GetVariableSystem.Set( 'own_scheme_expand', 'true' )]"
				enabled = "[SchemeItem.HasMembers]"
			}

			expand = {}

			button_standard_small = {
				name = "potential_agents_button"
				text = "SCHEME_WINDOW_INVITE_MEMBERS"
				default_format ="#medium"

				onclick = "[SchemeItem.ShowPotentialAgents]"
				enabled = "[GreaterThan_int32( SchemeItem.GetNumberOfPotentialOwnerAgents, '(int32)0' )]"
				using = tooltip_ws
				tooltip = "SCHEME_WINDOW_INVITE_TOOLTIP"
			}
		}

		### MEMBERS
		vbox = {
			name = "my_own_scheme_members"
			visible = "[GetVariableSystem.Exists( 'own_scheme_expand' )]"
			layoutpolicy_horizontal = expanding
			margin = { 7 0 }
			margin_bottom = 5

			vbox = {
				name = "owner_member_grid"
				datamodel = "[SchemeItem.GetMembers]"
				layoutpolicy_horizontal = expanding

				item = {
					hbox = {
						layoutpolicy_horizontal = expanding
						datacontext = "[SchemeAgentItem.GetCharacter]"
						spacing = 10

						background = {
							using = Background_Area_Light
							alpha = 0.7
						}

						portrait_head_small = {
							using = tooltip_ws

							tooltip = "SCHEME_AGENT_TOOLTIP"

							blockoverride "status_icons" {}
							blockoverride "opinion_box" {}

							icon = {
								visible = "[SchemeAgentItem.IsExposed]"
								parentanchor = top|right
								size = { 25 25 }
								alwaystransparent = yes
								texture = "gfx/interface/icons/schemes/icon_discovered_scheme.dds"
							}
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							spacing = 10

							text_single = {
								layoutpolicy_horizontal = expanding
								text = "[Character.GetNameNoTooltip]"
								using = Font_Size_Medium
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 10

								hbox = {
									spacing = 5

									icon = {
										name = success_icon
										size = { 25 25 }
										texture = "gfx/interface/icons/schemes/icon_scheme_success.dds"
										tooltip = "[SchemeAgentItem.GetSuccessDesc]"
									}

									text_single = {
										text = "[SchemeAgentItem.GetSuccessChance|0]"
										tooltip = "[SchemeAgentItem.GetSuccessDesc]"
										default_format = "#high"
										using = Font_Size_Medium
										align = nobaseline
									}
								}

								hbox = {
									spacing = 5

									icon = {
										name = power_icon
										size = { 25 25 }
										texture = "gfx/interface/icons/schemes/icon_scheme_power.dds"
										tooltip = "INTRIGUE_WINDOW_SCHEME_POWER_TT"
									}

									text_single = {
										text = "[SchemeAgentItem.GetInfluence|0]"
										tooltip = "INTRIGUE_WINDOW_SCHEME_POWER_TT"
										default_format = "#high"
										using = Font_Size_Medium
										align = nobaseline
									}
								}

								expand = {}

								text_single = {
									text = "INTRIGUE_WINDOW_AGENT_DISCOVERED"
									visible = "[SchemeAgentItem.IsExposed]"
									default_format = "#negative_value"
									tooltip = "INTRIGUE_WINDOW_AGENT_DISCOVERED_TT"
								}
							}
						}
					}
				}
			}

			expand = {}
		}
	}

	type vbox_discovered_scheme_item = vbox {
		name = "known_scheme"
		datacontext = "[SchemeItem.GetScheme]"

		background = {
			using = Background_Area_With_Header
		}

		widget = {
			name = "my_own_scheme_header"
			size = { 510 130 }

			text_single = {
				parentanchor = hcenter
				position = { 0 3 }
				text = "SCHEME_WINDOW_ITEM_NAME"
				using = Font_Size_Medium
			}

			flowcontainer = {
				position = { 10 35 }
				direction = vertical

				flowcontainer = {
					tooltip = "SCHEME_WINDOW_SUCCESS_DISCOVERED_TOOLTIP"
					spacing = 5

					icon = {
						name = success_icon
						size = { 30 30 }

						texture = "gfx/interface/icons/schemes/icon_scheme_success.dds"
					}

					text_single = {
						name = "success"
						parentanchor = vcenter
						text = "SCHEME_WINDOW_SUCCESS_CHANCE"
						using = Font_Size_Medium
						align = nobaseline
					}
				}

				flowcontainer = {
					visible = "[Scheme.IsSecret]"
					spacing = 5
					tooltip = "SCHEME_WINDOW_SECRECY_DISCOVERED_TOOLTIP"

					icon = {
						name = "secrecy_icon"
						size = { 30 30 }
						texture = "gfx/interface/icons/schemes/icon_secrecy.dds"
					}

					text_single = {
						name = "secrecy"
						size = { 40 20 }
						text = "SCHEME_WINDOW_SECRECY"
						using = Font_Size_Medium
						align = nobaseline
					}
				}
			}

			portrait_head = {
				name = "target_portrait"
				datacontext = "[Scheme.GetTarget]"
				parentanchor = right
				position = { -20 0 }
				using = tooltip_es
				blockoverride "portrait_button"
				{
					tooltip = "SCHEME_WINDOW_SCHEME_TARGET"
				}

				icon = {
					name = "target_arrow"
					position = { -40 20 }
					parentanchor = left|vcenter
					texture = "gfx/interface/icons/scheme_target_arrow.dds"
				}
			}
		}

		hbox = {
			visible = "[And( Not(SchemeItem.HasMembers ), SchemeItem.GetScheme.GetSchemeType.UsesAgents)]"
			layoutpolicy_horizontal = expanding
			margin = { 0 30 }

			background = {
				using = Background_Area
			}

			text_single = {
				text = "SCHEME_WINDOW_NO_KNOWN_AGENTS"
				align = center
				default_format = "#low;italic"
			}
		}

		vbox = {
			visible = "[SchemeItem.HasMembers]"
			name = "known_scheme_members"
			layoutpolicy_horizontal = expanding
			margin = { 15 10 }
			spacing = 5

			background = {
				using = Background_Area
			}

			text_single = {
				text = "SCHEME_WINDOW_MEMBER_LIST"
			}

			hbox = {
				layoutpolicy_horizontal = expanding

				fixedgridbox = {
					name = "owner_member_grid"
					datamodel = "[SchemeItem.GetMembers]"
					addcolumn = 95
					addrow = 95
					datamodel_wrap = 5
					flipdirection = yes

					item = {
						portrait_head_small = {
							datacontext = "[SchemeAgentItem.GetCharacter]"
							using = tooltip_ws

							blockoverride "portrait_button"
							{
								tooltip = "[SchemeAgentItem.GetTooltip]"
							}
						}
					}
				}

				expand = {}
			}

			expand = {}
		}
	}
}

types IntrigueWindowTypes
{
	type vbox_secret_item = vbox {
		spacing = 7

		item = {
			hbox = {
				layoutpolicy_horizontal = expanding
				visible = "[Or( IntrigueWindowSecretGroup.HasUnspentHooks, GetVariableSystem.Exists( 'secrets_show_all' ) )]"

				background = {
					using = Background_Area
					margin_bottom = 5
				}

				portrait_head_small = {
					block "portrait" {}
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					datacontext = "[IntrigueWindowSecretGroup.GetCharacter]"
					margin = { 10 0 }

					vbox = {
						name = "secrets"
						datamodel = "[IntrigueWindowSecretGroup.GetSecrets]"
						visible = "[DataModelHasItems( IntrigueWindowSecretGroup.GetSecrets )]"
						margin = { 5 5 }
						spacing = 5
						layoutpolicy_horizontal = expanding

						item = {
							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 5
								datacontext = "[IntrigueWindowSecretItem.GetSecret]"
								visible = "[And( Secret.IsValid, Or( Not( IntrigueWindowSecretItem.IsSpent ), GetVariableSystem.Exists( 'secrets_show_all' ) ) )]"
								

								icon = {
									texture = "[Secret.GetType.GetIcon]"
									size = { 30 30 }
									tooltip = "INTRIGUE_WINDOW_SECRET_TOOLTIP"
								}
								spacer = {}
								text_multi = {
									layoutpolicy_horizontal = expanding
									text = "INTRIGUE_WINDOW_SECRET_DESC"
									#default_format = "#high"
									align = nobaseline
									autoresize = yes
									max_width = 300
								}

								expand = {}
								icon = {
									size = { 20 20 }
									texture = "gfx/interface/icons/portraits/hook_secret.dds"
									framesize = {40 40 }
									frame = 1
									visible = "[IntrigueWindowSecretItem.IsWeakHook( Character.Self )]"
									tooltip = "INTRIGUE_WINDOW_BLACKMAIL_WEAK_HOOK_TT"
								}


								icon = {
									size = { 20 20 }
									texture = "gfx/interface/icons/portraits/hook_secret.dds"
									framesize = { 40 40 }
									frame = 2
									visible = "[IntrigueWindowSecretItem.IsStrongHook( Character.Self )]"
									tooltip = "INTRIGUE_WINDOW_BLACKMAIL_STRONG_HOOK_TT"
								}

								icon = {
									size = { 20 20 }
									texture = "gfx/interface/icons/symbols/icon_warning.dds"
									visible = "[Not( Character.IsPlayerInteractionWithTargetSecretValid( 'blackmail_interaction', Secret.Self ) )]"
									tooltip = "[Character.GetPlayerInteractionWithTargetSecretTooltip( 'blackmail_interaction', Secret.Self )]"
								}
							}
						}
					}

					hbox = {
						visible = "[Character.IsPlayerInteractionShown('blackmail_interaction')]"
						layoutpolicy_horizontal = expanding
						margin_right = 5
						spacing = 5

						expand = {}

						button_standard_small = {
							name = "blackmail_button"
							datacontext = "[IntrigueWindowSecretGroup.GetFirstSecret.GetSecret]"
							size = { 120 25 }
							enabled = "[IntrigueWindowSecretGroup.CanBlackmail]"
							onclick = "[Character.OpenPlayerInteraction( 'blackmail_interaction' )]"
							text = "INTRIGUE_WINDOW_SECRET_KNOWN_TO_ME_BLACKMAIL"
							tooltip = "INTRIGUE_WINDOW_SECRET_BLACKMAIL_TT"
							using = tooltip_se
						}

						button_tertiary = {
							name = "expose_button"
							datacontext = "[IntrigueWindowSecretGroup.GetFirstSecret.GetSecret]"
							size = { 120 25 }
							onclick = "[Character.OpenPlayerInteraction( 'expose_secret_interaction' )]"
							#"[IntrigueWindow.ExposeSecret( Character.Self, 'blackmail_interaction', Secret.Self )]"
							text = "INTRIGUE_WINDOW_SECRET_EXPOSE"
							tooltip = "INTRIGUE_WINDOW_SECRET_EXPOSE_TT"
							using = tooltip_se
						}

						
					}
				}


				expand = {}
			}
		}
	}
}
