debug_make_hate_me_interaction = {
	category = interaction_debug_main
	common_interaction = yes
	icon = debug_bad

	auto_accept = yes
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	
	is_shown = {
		debug_only = yes
		NOT = {
			scope:recipient = scope:actor
		}
	}
	
	on_accept = {
		scope:recipient = {
			add_opinion = {
				modifier = hate_opinion
				target = scope:actor
				opinion = -200
			}
		}
	}
}

debug_make_love_me_interaction = {
	category = interaction_debug_main
	common_interaction = yes
	icon = debug_good


	auto_accept = yes
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	
	is_shown = {
		debug_only = yes
		NOT = {
			scope:recipient = scope:actor
		}
	}
	
	on_accept = {
		scope:recipient = {
			add_opinion = {
				modifier = love_opinion
				target = scope:actor
				opinion = 200
			}
		}
	}
}


debug_make_like_me_interaction = {
	category = interaction_debug_main
	
	auto_accept = yes
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	
	is_shown = {
		debug_only = yes
		always = no
	}

	on_accept = {
		scope:recipient = {
			add_opinion = {
				modifier = friendliness_opinion
				target = scope:actor
				opinion = 100
			}
		}
	}
}

debug_make_dislike_me_interaction = {
	category = interaction_debug_main
	
	auto_accept = yes
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	
	is_shown = {
		debug_only = yes
		always = no
	}

	on_accept = {
		scope:recipient = {
			add_opinion = {
				modifier = angry_opinion
				target = scope:actor
				opinion = -100
			}
		}
	}
}


make_lover_interaction = {
	category = interaction_debug_main
	
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes

	is_shown = {
		debug_only = yes
		NOT = { scope:recipient = scope:actor }
		NOT = {
			scope:actor = {
				has_relation_lover = scope:recipient
			}
		}
		always = no
	}
	
	auto_accept = yes

	on_accept = {
		scope:actor = {
			set_relation_lover = { reason = test_lover_desc target = scope:recipient }
		}
	}
}

make_soulmate_interaction = {
	category = interaction_debug_main
	
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes

	is_shown = {
		debug_only = yes
		NOT = { scope:recipient = scope:actor }
		scope:actor = { has_relation_lover = scope:recipient }
		NOT = {
			scope:actor = {
				has_relation_soulmate = scope:recipient
			}
		}
		always = no
	}

	auto_accept = yes

	on_accept = {
		scope:actor = {
			set_relation_soulmate = { reason = test_soulmate_desc copy_reason = lover target = scope:actor }
		}
	}
}

make_rival_interaction = {
	category = interaction_debug_main
	
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes

	is_shown = {
		debug_only = yes
		NOT = { scope:recipient = scope:actor }
		NOT = {
			scope:actor = {
				any_relation = {
				type = rival
					this = scope:recipient
				}
			}
		}
		always = no
	}

	auto_accept = yes

	on_accept = {
		scope:actor = {
			set_relation_rival = {
				target = scope:recipient
				reason = rival_debug
			}
		}
	}
}

make_nemesis_interaction = {
	category = interaction_debug_main
	
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes

	is_shown = {
		debug_only = yes
		NOT = { scope:recipient = scope:actor }
		scope:actor = { has_relation_rival = scope:recipient }
		NOT = {
			scope:actor = {
				has_relation_nemesis = scope:recipient
			}
		}
		always = no
	}

	auto_accept = yes

	on_accept = {
		scope:actor = {
			set_relation_nemesis = {
				reason = test_nemesis_desc
				copy_reason = rival
				target = scope:recipient
			}
		}
	}
}

remove_rival_interaction = {
	category = interaction_debug_main
	
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes

	is_shown = {
		debug_only = yes
		NOT = { scope:recipient = scope:actor }
		scope:actor = {
			has_relation_rival = scope:recipient
		}
	}

	auto_accept = yes

	on_accept = {
		scope:actor = {
			remove_relation_rival = scope:recipient
		}
	}
}

make_friend_interaction = {
	category = interaction_debug_main
	
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes

	is_shown = {
		debug_only = yes
		NOT = { scope:recipient = scope:actor }
		NOT = {
			scope:actor = {
				any_relation = {
				type = friend
					this = scope:recipient
				}
			}
		}
		always = no
	}

	auto_accept = yes

	on_accept = {
		scope:actor = {
			set_relation_friend = { reason = test_friend_desc target = scope:recipient }
		}
	}
}


learn_secrets_interaction = {
	category = interaction_debug_main
	
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	common_interaction = yes
	icon = icon_discovered_scheme
	interface_priority = -3

	is_shown = {
		debug_only = yes
		
		scope:recipient = {
			any_secret = {
				NOT = {
					is_known_by = scope:actor
				}
			}
		}
	}
	on_accept = {
		scope:recipient = {
			every_secret = {
				reveal_to = scope:actor
			}
		}
	}
	
	auto_accept = yes
}


expose_known_secrets_interaction = {
	category = interaction_debug_main
	
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes

	is_shown = {
		debug_only = yes
	}
	on_accept = {
		scope:actor = {
			every_known_secret = {
				limit = {
					secret_owner = scope:recipient
				}
				expose_secret = scope:actor
			}
		}
	}
	
	auto_accept = yes
}

take_title_interaction = {
	category = interaction_debug_main
	
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	target_type = title
	target_filter = recipient_domain_titles

	is_shown = {
		debug_only = yes
		scope:recipient = { is_landed = yes }
		NOT = {
			scope:recipient = scope:actor
		}
	}
	
	auto_accept = yes
	
	on_accept = {
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = no
		}

		scope:target = {
			change_title_holder = {
				holder = scope:actor
				change = scope:change
			}
		}
		resolve_title_and_vassal_change = scope:change
	}
}

take_title_and_vassals_interaction = {
	category = interaction_debug_main
	common_interaction = yes
	
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	target_type = title
	target_filter = recipient_domain_titles
	icon = debug_take_title

	is_shown = {
		debug_only = yes
		scope:recipient = { is_landed = yes }
		NOT = {
			scope:recipient = scope:actor
		}
	}
	
	auto_accept = yes
	
	on_accept = {
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
		}
		scope:target = {
			change_title_holder_include_vassals = {
				holder = scope:actor
				change = scope:change
			}
		}
		resolve_title_and_vassal_change = scope:change
	}
}

take_domain_interaction = {
	category = interaction_debug_main
	
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes

	is_shown = {
		debug_only = yes
		scope:recipient = { is_landed = yes }
		NOT = {
			scope:recipient = scope:actor
		}
		always = no
	}
	
	auto_accept = yes
	
	on_accept = {
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
		}
		scope:recipient = {
			every_held_title = {
				change_title_holder_include_vassals = {
					holder = scope:actor
					change = scope:change
				}
			}
		}
		resolve_title_and_vassal_change = scope:change
	}
}

take_realm_interaction = {
	category = interaction_debug_main
	
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	common_interaction = yes
	
	icon = grant_titles_interaction

	is_shown = {
		debug_only = yes
		scope:recipient = { is_landed = yes }
		NOT = {
			scope:recipient = scope:actor
		}
	}
	
	auto_accept = yes
	
	send_option = {
		flag = domain
		localization = take_domain_interaction
	}
	send_option = {
		flag = realm
		localization = take_realm_interaction
	}
	
	on_accept = {
		if = {
			limit = { scope:realm = yes }
				create_title_and_vassal_change = {
				type = conquest
				save_scope_as = change
			}
			scope:recipient = {
				every_sub_realm_title = {
					limit = { tier > tier_barony }
					change_title_holder_include_vassals = {
						holder = scope:actor
						change = scope:change
					}
				}
			}
			resolve_title_and_vassal_change = scope:change
		}
		else_if = {
			limit = { scope:domain = yes }
			create_title_and_vassal_change = {
				type = conquest
				save_scope_as = change
			}
			scope:recipient = {
				every_held_title = {
					change_title_holder_include_vassals = {
						holder = scope:actor
						change = scope:change
					}
				}
			}
			resolve_title_and_vassal_change = scope:change
		}
	}
}

start_pregnancy_interaction = {
	category = interaction_debug_main
	
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = pregnant

	is_shown = {
		debug_only = yes
		scope:recipient = { is_adult = yes }
		scope:actor = { is_adult = yes }
		scope:recipient = { is_pregnant = no }
		scope:actor = { is_pregnant = no }

		OR = {
			AND = {
				scope:recipient = { is_female = yes }
				scope:actor = { is_male = yes }
			}
			AND = {
				scope:recipient = { is_male = yes }
				scope:actor = { is_female = yes }
			}
		}
	}

	on_accept = {
		scope:actor = { trigger_event = debug.0002 }
	}
	
	auto_accept = yes
}

get_claim_interaction = {
	category = interaction_debug_main
	
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = vassal_claim_liege_title_interaction

	is_shown = {
		debug_only = yes
		scope:recipient = { is_landed = yes }
	}
	
	auto_accept = yes
	
	on_accept = {
		scope:actor = {
			add_pressed_claim = scope:recipient.primary_title
		}
	}
}

get_claim_on_all_creatable_interaction = {
	category = interaction_debug_main
	
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes

	is_shown = {
		debug_only = yes
		scope:recipient = scope:actor
	}
	
	auto_accept = yes
	
	on_accept = {
		scope:actor = {
			every_alert_creatable_title =
			{
				scope:actor = {
					add_pressed_claim = prev
				}
			}
		}
	}
}

test_dynasty_prestige_interaction = {
	category = interaction_debug_main
	
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes

	is_shown = {
		debug_only = yes
		scope:recipient = scope:actor
		always = no
	}
	
	auto_accept = yes
	
	on_accept = {
		scope:actor.dynasty = {
			add_dynasty_prestige_level = 1
			add_dynasty_prestige = 1000
		}
	}
}

# TODO WC CRUSADES ADAPTATION
# Warcraft
# debug_start_era_of_crusades_interaction = {
#	category = interaction_debug_main
#	
#	use_diplomatic_range = no
#	ignores_pending_interaction_block = yes
#	interface_priority = -100
#
#	is_shown = {
#		debug_only = yes
#		faith:catholic = {
#			NOT = {
#				religion = { exists = var:variable_ghw_unlocked }
#			}
#		}
#	}
#	
#	auto_accept = yes
#	
#	on_accept = {
#		faith:catholic = {
#			change_fervor = {
#				value = 200
#				desc = test_interaction_fervor_gain
#			}
#			save_scope_as = awakening_faith
#			if = {
#				limit = {
#					exists = religious_head
#				}
#				religious_head = { save_scope_as = ghw_first_sponsor }
#			}
#			else = {
#				random_theocratic_ruler = {
#					limit = { faith = root }
#					save_scope_as = ghw_first_sponsor
#				}
#			}
#			if = { # Fallback
#				limit = {
#					NOT = {
#						exists = scope:ghw_first_sponsor
#					}
#				}
#				random_ruler = {
#					limit = { faith = root }
#					save_scope_as = ghw_first_sponsor
#				}
#			}
#			religion = {
#				set_variable = {
#					name = variable_ghw_unlocked # Crusades
#					value = yes
#				}
#			}
#			every_player = {
#				trigger_event = great_holy_war.0011 # Flavor fluff for various Faiths.
#			}
#		}
#	}
# }

# debug_launch_natural_crusade_interaction = {
#	category = interaction_debug_main
#	
#	use_diplomatic_range = no
#	ignores_pending_interaction_block = yes
#	interface_priority = -100
#
#	is_shown = {
#		debug_only = yes
#		faith:catholic = {
#			NOR = {
#				exists = great_holy_war
#				exists = var:variable_ghw_cooldown
#				religion = { exists = var:variable_first_ghw_cooldown } # Do not event spam after Crusades have been just unlocked.
#			}
#			religion = { exists = var:variable_ghw_unlocked } #Activated by event for every religion.
#		}
#	}
#	
#	auto_accept = yes
#	
#	on_accept = {
#		faith:catholic = {
#			change_fervor = {
#				value = 200
#				desc = test_interaction_fervor_gain
#			}
#			trigger_event = great_holy_war.0001
#		}
#	}
# }

# debug_start_era_of_jihads_interaction = {
#	category = interaction_debug_main
#	
#	use_diplomatic_range = no
#	ignores_pending_interaction_block = yes
#	interface_priority = -100
#
#	is_shown = {
#		debug_only = yes
#		faith:ashari = {
#			NOT = {
#				religion = { exists = var:variable_ghw_unlocked }
#			}
#		}
#	}
#	
#	auto_accept = yes
#	
#	on_accept = {
#		faith:ashari = {
#			change_fervor = {
#				value = 200
#				desc = test_interaction_fervor_gain
#			}
#			save_scope_as = awakening_faith
#			if = {
#				limit = {
#					exists = religious_head
#				}
#				religious_head = { save_scope_as = ghw_first_sponsor }
#			}
#			else = {
#				random_theocratic_ruler = {
#					limit = { faith = root }
#					save_scope_as = ghw_first_sponsor
#				}
#			}
#			if = { # Fallback
#				limit = {
#					NOT = {
#						exists = scope:ghw_first_sponsor
#					}
#				}
#				random_ruler = {
#					limit = { faith = root }
#					save_scope_as = ghw_first_sponsor
#				}
#			}
#			religion = {
#				set_variable = {
#					name = variable_ghw_unlocked # Crusades
#					value = yes
#				}
#			}
#			every_player = {
#				trigger_event = great_holy_war.0011 # Flavor fluff for various Faiths.
#			}
#		}
#	}
# }

debug_start_great_holy_war_interaction = {
	category = interaction_debug_main
	
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	interface_priority = -100

	is_shown = {
		debug_only = yes
		NOT = { scope:recipient.faith = scope:actor.faith }
	}
	
	auto_accept = yes
	
	on_accept = {
		scope:actor.faith = {
			start_great_holy_war = {
				target_character = scope:recipient
				target_title = scope:recipient.primary_title
				delay = 30
			}
		}
	}
}

debug_change_council_task_interaction = {
	category = interaction_debug_main
	
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes

	is_valid_showing_failures_only = {
		scope:actor = {
			cp:councillor_spymaster = {
				NOT = { councillor_task_target = scope:recipient }
			}
		}
	}
	
	is_shown = {
		debug_only = yes
		exists = scope:actor.cp:councillor_spymaster.councillor_task_target
		always = no
	}
	
	auto_accept = yes
	
	on_accept = {
		scope:actor = {
			cp:councillor_spymaster = {
				set_council_task = {
					task_type = task_find_secrets
					target = scope:recipient
				}
			}
		}
	}
}

# debug_trigger_localization_testing_interaction = {
	# category = interaction_debug_main
	
	# use_diplomatic_range = no
	# ignores_pending_interaction_block = yes

	# is_valid_showing_failures_only = {

	# }

	# is_valid = {
		# scope:actor.father = scope:actor.father
		# scope:actor.father.killer = scope:actor
		# scope:actor.capital_county.holder = scope:actor
		# scope:actor.capital_county.faith = scope:actor.faith
		# scope:actor.faith.religion = faith:catholic.religion
		# scope:actor.capital_county.kingdom = title:k_england
		# scope:recipient.liege = scope:actor
		
		
	# }
	
	# is_shown = {
		# always = no # This interaction has no purpose beyond debugging trigger localization. As such, it can be disabled unless somebody is actively working on that.
		# debug_only = yes
	# }

	# auto_accept = yes

	# on_accept = {
		# add_gold = 100
	# }
# }

# DEBUG INTERACTION!
create_betrothal_interaction = {
	category = interaction_debug_main
	
	is_shown = {
		debug_only = yes
		scope:actor = {
			is_married = no
			is_betrothed = no
			allowed_to_marry_character_gender_trigger = { CHARACTER = scope:recipient }
			OR = {
				is_adult = no
				scope:recipient = { is_adult = no }
			}
			scope:recipient = {
				is_married = no
				is_betrothed = no
			}
		}
	}

	
	on_accept = {
		scope:actor = {
			create_betrothal = scope:recipient
		}
	}
	
	ai_accept = {
		base = 70
		modifier = {
			add = 100
			scope:recipient = {
				opinion = { target = scope:actor value >= 0 }
			}
		}
	}
}

set_relation_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes

	is_shown = {
		debug_only = yes
		NOT = { scope:recipient = scope:actor }
		always = no # deprecated
	}

	on_accept = {
		scope:actor = { trigger_event = debug.350 }
	}

	auto_accept = yes
}
