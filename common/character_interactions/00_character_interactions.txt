# Add general actions here, if any.

offer_vassalization_interaction = {
	category = interaction_category_vassal


	desc = offer_vassalization_interaction_desc
	
	ai_targets = {
		ai_recipients = neighboring_rulers
	}
	ai_target_quick_trigger = {
		adult = yes
	}
	ai_frequency = 48

	is_shown = {
		scope:recipient = {
			NOT = { this = scope:actor }
			is_landed = yes
			is_independent_ruler = yes
			highest_held_title_tier < scope:actor.highest_held_title_tier
			NOT = { government_has_flag = can_not_be_vassal_or_liege }
		}
	}

	is_valid_showing_failures_only = {
		scope:recipient = {
			is_at_war = no

			custom_description = {
				text = was_recently_granted_independence
				NOT = {
					has_opinion_modifier = {
						modifier = granted_independence_opinion
						target = scope:actor
					}
				}
			}
		}
		
		#Warcraft
		scope:actor = {
			is_in_stun_trigger = no 
		}
	}

	greeting = positive
	notification_text = OFFER_VASSALIZATION_INTERACTION_NOTIFICATION

	ai_min_reply_days = 5
	ai_max_reply_days = 10

	ai_accept = {
		base = -45
		#MAIN
		#Heretic/Infidel modifier.
		#Tier difference modifier.
		#Dejure modifier.
		#Distant/Remote Realm modifier.
		#Military power difference modifier.

		#MINOR
		#Rivalry modifier.
		#Same Dynasty modifier.
		#Cultural/Cultural Group modifiers.
		#Ageism modifier vs kids.
		#Ruler Legitimacy modifier.
		#Claimant modifier.

		#OPINION SCALES
		#Dread
		#Compare Opinion modifier.
		
		# PERKS
		modifier = { # Perk boost
			desc = offer_vassalization_true_ruler_perk_tt
			trigger = {
				scope:actor = { has_perk = true_ruler_perk }
			}
			add = true_ruler_value
		}

		# MAIN
		modifier = { #Different faith, no pluralism.
			desc = offer_vassalization_interaction_aibehavior_differentfaith_tt
			trigger = {
				scope:recipient = {
					NOR = { #Of two different faiths AND the potential vassal's faith is not pluralistic.
						faith = scope:actor.faith
						faith = { has_doctrine = doctrine_pluralism_pluralistic }
					}
				}
			}
			add = {
				value = -40
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_hostile_level
							}
						}
					}
					add = -40
				}
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_evil_level
							}
						}
					}
					add = -40
				}
			}
		}
		
		modifier = { #Different faith, pluralism.
			desc = offer_vassalization_interaction_aibehavior_differentfaith_tt
			trigger = {
				scope:recipient = {
					NOT = {
						faith = scope:actor.faith
					}
					NOT = {
						scope:actor.faith = { has_doctrine = doctrine_pluralism_pluralistic }
					}
					faith = { has_doctrine = doctrine_pluralism_pluralistic }
				}
			}
			add = {
				value = -20
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_hostile_level
							}
						}
					}
					add = -20
				}
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_evil_level
							}
						}
					}
					add = -20
				}
			}
		}
		
		modifier = { #Different faith, both have pluralism.
			desc = offer_vassalization_interaction_aibehavior_differentfaith_tt
			trigger = {
				scope:recipient = {
					NOT = {
						faith = scope:actor.faith
					}
					scope:actor.faith = { has_doctrine = doctrine_pluralism_pluralistic }
					faith = { has_doctrine = doctrine_pluralism_pluralistic }
				}
			}
			add = {
				value = -10
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_hostile_level
							}
						}
					}
					add = -10
				}
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_evil_level
							}
						}
					}
					add = -10
				}
			}
		}
		modifier = { #I am a King!
			desc = offer_vassalization_interaction_aibehavior_amkingtier_tt
			trigger = {
				scope:recipient = { highest_held_title_tier = tier_kingdom }
			}
			add = -50
		}
		modifier = { #We just fought against each other.
			desc = offer_vassalization_interaction_aibehavior_recent_war_tt
			trigger = {
				scope:recipient = {
					any_truce_holder = {
						this = scope:actor
					}
				}
			}
			add = -40
		}
		modifier = { #I fought an independence war against you.
			desc = offer_vassalization_interaction_aibehavior_independence_war_tt
			trigger = {
				scope:recipient = {
					exists = var:independence_war_former_liege
					var:independence_war_former_liege = scope:actor
				}
			}
			add = -100
		}
		modifier = { #Wide difference in rank
			desc = offer_vassalization_interaction_aibehavior_widetitletier_tt
			trigger = {
				scope:actor = {
					tier_difference = {
						target = scope:recipient
						value > 1
					}
				}
			}
			add = 5
		}
		modifier = { # Is the Rightful Liege of recipient
			desc = offer_vassalization_interaction_aibehavior_rightfulliegetitleholder_tt
			trigger = {
				is_rightful_liege_of_trigger = {
					VASSAL = scope:recipient
					LIEGE = scope:actor
				}
			}
			add = 10
		}
		modifier = { #Is not the Rightful Liege of recipient
			desc = offer_vassalization_interaction_aibehavior_not_rightfulliegetitleholder_tt
			trigger = {
				NOT = {
					is_rightful_liege_of_trigger = {
						VASSAL = scope:recipient
						LIEGE = scope:actor
					}
				}
			}
			add = -25
		}
		modifier = { #Distant Realm.
			desc = offer_vassalization_interaction_aibehavior_distantrealm_tt
			trigger = {
				scope:actor = {
					character_is_realm_neighbor = scope:recipient
					NOT = {
						character_is_land_realm_neighbor = scope:recipient
					}
				}
			}
			add = -100
		}
		modifier = { #Remote Realm.
			desc = offer_vassalization_interaction_aibehavior_remoterealm_tt
			trigger = {
				scope:actor = {
					NOT = {
						character_is_realm_neighbor = scope:recipient
					}
				}
				scope:recipient.capital_province = { squared_distance = { target = scope:actor.capital_province value >= 200000 } }
			}
			add = -500
		}
		modifier = {
		desc = offer_vassalization_interaction_aibehavior_power_tt
	  	  	add = {
				value = 1
					subtract = {
					value = scope:recipient.max_military_strength
					divide = { value = scope:actor.max_military_strength min = 1 }
					}
				multiply = 20
				ceiling = yes
	  		}
		}

		# MINOR
		modifier = { #Friend modifier.
			desc = offer_vassalization_interaction_aibehavior_friend_tt
			trigger = {
				scope:recipient = {
					has_relation_friend = scope:actor
					NOT = { has_relation_best_friend = scope:actor }
				}
			}
			add = 10
		}
		modifier = { #Best Friend modifier.
			desc = offer_vassalization_interaction_aibehavior_best_friend_tt
			trigger = {
				scope:recipient = {
					has_relation_best_friend = scope:actor
				}
			}
			add = 20
		}
		modifier = { #Rivalry modifier.
			desc = offer_vassalization_interaction_aibehavior_rival_tt
			trigger = {
				scope:recipient = {
					has_relation_rival = scope:actor
					NOT = { has_relation_nemesis = scope:actor }
				}
			}
			add = -10
		}
		modifier = { #Nemesis modifier.
			desc = offer_vassalization_interaction_aibehavior_nemesis_tt
			trigger = {
				scope:recipient = {
					has_relation_nemesis = scope:actor
				}
			}
			add = -1000
		}
		modifier = { #Same Dynasty modifier.
			desc = offer_vassalization_interaction_aibehavior_dynasty_tt
			trigger = {
				scope:recipient = {
					dynasty = scope:actor.dynasty
				}
			}
			add = 5
		}
		modifier = { #Cultural modifiers.
			add = -10
			desc = offer_vassalization_interaction_aibehavior_culture_tt
			trigger = {
				scope:actor = {
					has_same_culture_group_as = scope:recipient
					NOT = { has_same_culture_as = scope:recipient }
				}
			}
		}
		
		modifier = { #Cultural Group modifiers.
			add = -30
			desc = offer_vassalization_interaction_aibehavior_culture_group_tt
			trigger = {
				scope:actor = {
					NOT = { has_same_culture_group_as = scope:recipient }
				}
			}
		}
		modifier = { #Ageism modifier vs kids.
			desc = offer_vassalization_interaction_aibehavior_child_tt
			trigger = {
				scope:actor = {
					# Warcraft
					age_in_relation_to_humans_less_than_trigger = { age = 12 }
				}
				scope:recipient = {
					# Warcraft
					age_in_relation_to_humans_more_than_trigger = { age = 16 }
				}
			}
			add = -5
		}
		modifier = { #Illegitimacy modifier.
			desc = offer_vassalization_interaction_aibehavior_illegitimate_tt
			trigger = {
				OR = {
					AND = {
						scope:actor = {
							has_trait = bastard
						}
						scope:recipient = {
							faith = { NOT = { has_doctrine = doctrine_bastardry_none } }
						}
					}
					has_trait = denounced
					has_trait = disinherited
				}
			}
			add = -10
		}

		modifier = { #Claimant modifier.
			desc = offer_vassalization_interaction_aibehavior_claimant_tt
			trigger = {
				scope:actor.primary_title = {
					scope:recipient = {
						has_claim_on = prev
					}
				}
			}
			add = -15
		}

		# OPINION INFLUENCE
		modifier = {
			add = intimidated_external_reason_value
			scope:recipient = {
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = cowed_external_reason_value
			scope:recipient = {
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
		opinion_modifier = { #Compare Opinion modifier.
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.35
		}

		# CONTRACT OPTIONS
		modifier = {
			add = 60
			scope:recipient = {	has_government = feudal_government }
			scope:religious_exemption = yes
			desc = CONTRACT_RELIGIOUS_EXEMPTION_REASON
		}
		modifier = {
			add = 30
			scope:recipient = {	has_government = feudal_government }
			scope:low_obligations = yes
			desc = CONTRACT_LOW_TAXES_REASON
		}
		modifier = {
			add = -40
			scope:recipient = {	has_government = feudal_government }
			scope:high_obligations = yes
			desc = CONTRACT_HIGH_TAXES_REASON
		}
	}

	# High starting obligations
	send_option = {
		is_shown = {
			scope:recipient = {
				has_government = feudal_government
			}
		}
		flag = high_obligations								# If selected then scope:flag_name will be set to yes
		localization = high_obligations					# Loc_key for option label
	}

	# Medium starting obligations
	send_option = {										
		is_shown = {
			scope:recipient = {
				has_government = feudal_government
			}
		}
		flag = normal_obligations								# If selected then scope:flag_name will be set to yes
		localization = normal_obligations				# Loc_key for option label
		starts_enabled = { always = yes	}				# Trigger for whether this should be on when the window opens. If not defined, defaults to off

	}

	# Low starting obligations
	send_option = {
		is_shown = {
			scope:recipient = {
				has_government = feudal_government
			}
		}
		flag = low_obligations
		localization = low_obligations	
	}

	# Low starting obligations + religious exemption
	send_option = {
		is_shown = {
			scope:recipient = {
				has_government = feudal_government
			}
		}
		is_valid = {
			NOT = { scope:recipient.faith = scope:actor.faith }
		}
		flag = religious_exemption
		localization = religious_exemption
	}

	send_options_exclusive = yes

	on_accept = {
		offer_vassalization_interaction_effect = yes
		scope:actor = {
			trigger_event = char_interaction.0001
		}
	}

	on_decline = {
		scope:actor = {
			trigger_event = char_interaction.0002
		}
	}
	
	ai_potential = {
		is_adult = yes
		is_independent_ruler = yes
		highest_held_title_tier > tier_county
	}

	ai_will_do = {
		base = 100

		# AI prefers to receive higher obligations from their vassals when possible.
		modifier = {
			add = 2
			scope:low_obligations = yes
		}

		modifier = {
			add = 3
			scope:normal_obligations = yes
		}

		modifier = {
			add = 4
			scope:high_obligations = yes
		}

		# Cynical rulers are happy to offer religious protection to potential vassals, but only when it makes them accept a vassalization offer they would otherwise refuse.
		# Zealous rulers become increasingly reluctant to offer religious protection, as they want to enforce religious homogeneity in their realm.
		modifier = {
			add = {
				value = ai_zeal
				multiply = -2
				max = 1
			}
			scope:religious_exemption = yes
		}


		modifier = { # If the recipient is a player, do not bother sending
			factor = 0
			scope:recipient = {
				is_ai = no
			}
		}
	}
}

offer_fealty_interaction = {
	category = interaction_category_vassal


	desc = offer_fealty_interaction_desc

	is_shown = {
		scope:recipient = {
			NOT = { this = scope:actor }
		}
		scope:actor.highest_held_title_tier < scope:recipient.highest_held_title_tier
		scope:actor.liege = scope:actor
		scope:recipient = {
			liege = this
			is_landed = yes
		}
	}

	is_valid_showing_failures_only = {
		scope:actor = {
			is_imprisoned = no
			is_at_war = no
		}
		scope:recipient = {
			custom_description = {
				text = "offer_fealty_neighboring_condition"
				subject = scope:recipient
				OR = {
					any_neighboring_top_liege_realm_owner = { this = scope:actor }
					any_held_title = {
						is_de_jure_liege_or_above_target = scope:actor.capital_barony
					}
				}
			}
		}
		#Warcraft
		scope:actor = { 
			is_in_stun_trigger = no
		}
	}

	greeting = positive
	notification_text = OFFER_FEALTY_INTERACTION_NOTIFICATION
	
	ai_min_reply_days = 5
	ai_max_reply_days = 10

	ai_accept = {
		base = 50
		#MAIN
		#Heretic/Infidel modifier.
		#Tier difference modifier.
		#Dejure modifier.
		#Distant/Remote Realm modifier.

		#MINOR
		#Rivalry modifier.
		#Same Dynasty modifier.
		#Cultural/Cultural Group modifiers.
		#Claimant modifier.

		#OPINION SCALES
		#Personality modifier.
		#Compare Opinion modifier.
		#MAIN
		modifier = { #Different faith, no pluralism.
			desc = offer_vassalization_interaction_aibehavior_differentfaith_tt
			trigger = {
				scope:actor = {
					NOR = { #Of two different faiths AND the potential vassal's faith is not pluralistic.
						faith = scope:recipient.faith
						faith = { has_doctrine = doctrine_pluralism_pluralistic }
					}
				}
			}
			add = {
				value = -25
				if = {
					limit = {
						scope:actor.faith = {
							faith_hostility_level = {
								target = scope:recipient.faith
								value >= faith_hostile_level
							}
						}
					}
					add = -10
				}
				if = {
					limit = {
						scope:actor.faith = {
							faith_hostility_level = {
								target = scope:recipient.faith
								value >= faith_evil_level
							}
						}
					}
					add = -25
				}
			}
		}

		modifier = { #I am a King!
			desc = offer_fealty_interaction_aibehavior_amkingtier_tt
			trigger = {
				scope:actor = { highest_held_title_tier = tier_kingdom }
			}
			add = -10
		}
		modifier = { #Wide difference in rank
			desc = offer_vassalization_interaction_aibehavior_widetitletier_tt
			trigger = {
				scope:actor = {
					tier_difference = {
						target = scope:recipient
						value > 1
					}
				}
			}
			add = 20
		}
		modifier = { # They are my Rightful Liege
			desc = offer_vassalization_interaction_aibehavior_rightfulvassaltitleholder_tt
			trigger = {
				is_rightful_liege_of_trigger = {
					VASSAL = scope:actor
					LIEGE = scope:recipient
				}
			}
			add = 25
		}
		modifier = { #Distant Realm.
			desc = offer_vassalization_interaction_aibehavior_distantrealm_tt
			trigger = {
				scope:actor = {
					NOT = {
						any_neighboring_top_liege_realm_owner = { this = scope:recipient }
					}
				}
				scope:actor.capital_province = { squared_distance = { target = scope:recipient.capital_province value < 200000 } }
			}
			add = -15
		}
		modifier = { #Remote Realm.
			desc = offer_vassalization_interaction_aibehavior_remoterealm_tt
			trigger = {
				scope:actor = {
					NOT = {
						any_neighboring_top_liege_realm_owner = { this = scope:recipient }
					}
				}
				scope:actor.capital_province = { squared_distance = { target = scope:recipient.capital_province value >= 200000 } }
			}
			add = -25
		}

		#MINOR
		modifier = { #Rivalry modifier.
			desc = offer_vassalization_interaction_aibehavior_rival_tt
			trigger = {
				scope:recipient = {
					has_relation_rival = scope:actor
					NOT = { has_relation_nemesis = scope:actor }
				}
			}
			add = -10
		}
		modifier = { #Nemesis modifier.
			desc = offer_vassalization_interaction_aibehavior_nemesis_tt
			trigger = {
				scope:recipient = {
					has_relation_nemesis = scope:actor
				}
			}
			add = -30
		}
		modifier = { #Same Dynasty modifier.
			desc = offer_vassalization_interaction_aibehavior_dynasty_tt
			trigger = {
				scope:recipient = {
					dynasty = scope:actor.dynasty
				}
			}
			add = 10
		}
		modifier = { #Cultural modifiers.
			add = -5
			desc = offer_vassalization_interaction_aibehavior_culture_tt
			trigger = {
				scope:actor = {
					has_same_culture_group_as = scope:recipient
					NOT = { has_same_culture_as = scope:recipient }
				}
			}
		}
		
		modifier = { #Cultural Group modifiers.
			add = -10
			desc = offer_vassalization_interaction_aibehavior_culture_tt
			trigger = {
				scope:actor = {
					NOT = { has_same_culture_group_as = scope:recipient }
				}
			}
		}

		modifier = { #Claimant modifier.
			desc = offer_vassalization_interaction_aibehavior_claimant_tt
			trigger = {
				scope:actor.primary_title = {
					scope:recipient = {
						has_claim_on = prev
					}
				}
			}
			add = -15
		}

		#PERSONALITY
		ai_value_modifier = {
			ai_greed = 0.75
			min = 0
		}

		#OPINION INFLUENCE
		opinion_modifier = { #Compare Opinion modifier.
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.5
		}

		# CONTRACT OPTIONS
		modifier = {
			add = {
				value = -10
				if = {
					limit = { scope:recipient = { has_trait = zealous } }
					add = -30
				}
				else_if = {
					limit = { scope:recipient = { has_trait = cynical } }
					add = 30
				}
			}
			scope:actor = {	has_government = feudal_government }
			scope:religious_taxation = yes
			desc = CONTRACT_RELIGIOUS_TAXATION_REASON
		}
		modifier = {
			add = -40
			scope:actor = {	has_government = feudal_government }
			scope:low_obligations = yes
			desc = CONTRACT_LOW_TAXES_REASON
		}
		modifier = {
			add = 40
			scope:actor = {	has_government = feudal_government }
			scope:high_obligations = yes
			desc = CONTRACT_HIGH_TAXES_REASON
		}
	}

	# High starting obligations
	send_option = {
		is_shown = {
			scope:actor = {
				has_government = feudal_government
			}
		}
		flag = high_obligations	
		localization = high_obligations	
	}

	# Medium starting obligations
	send_option = {										
		is_shown = {
			scope:actor = {
				has_government = feudal_government
			}
		}
		flag = normal_obligations						
		localization = normal_obligations				
		starts_enabled = { always = yes	}				

	}

	# Low starting obligations
	send_option = {
		is_shown = {
			scope:actor = {
				has_government = feudal_government
			}
		}
		flag = low_obligations
		localization = low_obligations	
	}

	# Medium-high starting obligations + religious protection
	send_option = {
		is_shown = {
			scope:actor = {
				has_government = feudal_government
			}
		}
		is_valid = {
			NOT = { scope:recipient.faith = scope:actor.faith }
		}
		flag = religious_taxation
		localization = religious_taxation
	}

	send_options_exclusive = yes

	on_accept = {
		offer_fealty_interaction_effect = yes

		scope:actor = {
			trigger_event = char_interaction.0010
		}
	}

	on_decline = {
		scope:actor = {
			trigger_event = char_interaction.0011
		}
	}
}

force_vote_in_succession_election_interaction = {
	category = interaction_category_uncategorized
	hidden = yes
	special_interaction = force_vote_in_succession_election

	greeting = positive
	notification_text = FORCE_VOTE_INTERACTION_NOTIFICATION
	force_notification = yes

	desc = force_vote_in_succession_election_interaction_desc

	auto_accept = yes

	is_valid_showing_failures_only = {
		custom_description = {
			text = must_have_usable_hook_blocker
			subject = scope:actor
			object = scope:recipient

			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		#Warcraft
		scope:actor = { 
			is_in_stun_trigger = no
		}
	}

	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"

	on_accept = {
		scope:actor = {
			send_interface_message = {
				type = event_generic_neutral
				title = force_vote_in_succession_election_interaction
				
				right_icon = scope:recipient

				show_as_tooltip = {
					scope:actor = {
						use_hook = scope:recipient
						custom_tooltip = msg_force_vote_in_succession_election_message
					}
				}
			}
			hidden_effect = {
				use_hook = scope:recipient
			}
		}
	}
}

set_primary_spouse_interaction = {
	category = interaction_category_diplomacy
	desc = set_primary_spouse_interaction_desc

	auto_accept = yes

	is_shown = {
		scope:actor = {
			is_spouse_of = scope:recipient
		}
		NOT = {
			scope:actor.primary_spouse = scope:recipient
		}
	}
	is_valid_showing_failures_only = {
		scope:recipient = { is_diplomatically_available = yes }
		scope:recipient = {
			NOT = {
				has_trait = incapable
			}
		}

		#Warcraft
		scope:actor = { 
			is_in_stun_trigger = no
		}
	}

	on_accept = {
		scope:actor.primary_spouse = {
			if = {
				limit = {
					has_opinion_modifier = {
						target = scope:actor
						modifier = spouse_made_primary_opinion
					}
				}
				remove_opinion = {
					modifier = spouse_made_primary_opinion
					target = scope:actor
				}
			}
			add_opinion = {
				target = scope:actor
				modifier = spouse_made_secondary_opinion
			}
			hidden_effect = {
				send_interface_toast = {
					title = set_primary_spouse_interaction_toast
					left_icon = scope:actor
					right_icon = scope:recipient

					custom_tooltip = set_primary_spouse_interaction_toast_removed
				}
			}
		}
		scope:actor = {
			set_primary_spouse = scope:recipient
			hidden_effect = {	
				send_interface_toast = {
					title = set_primary_spouse_interaction_toast
					left_icon = scope:actor
					right_icon = scope:recipient

					custom_tooltip = set_primary_spouse_interaction_toast_changed
				}
			}
		}
		scope:recipient = {
			hidden_effect = {	
				send_interface_toast = {
					title = set_primary_spouse_interaction_toast
					left_icon = scope:actor
					right_icon = scope:recipient

					custom_tooltip = set_primary_spouse_interaction_toast_added
				}
			}

			if = {
				limit = {
					has_opinion_modifier = {
						target = scope:actor
						modifier = spouse_made_secondary_opinion
					}
				}
				remove_opinion = {
					modifier = spouse_made_secondary_opinion
					target = scope:actor
				}
			}
			add_opinion = {
				target = scope:actor
				modifier = spouse_made_primary_opinion
			}
		}
	}
	
	ai_targets = {
		ai_recipients = spouses
	}
	ai_target_quick_trigger = {
		adult = yes
	}
	ai_frequency = 72
	
	ai_potential = {
		any_spouse = {
			count >= 2
		}
	}
	
	ai_will_do = {
		base = 100

		modifier = { #AI only does it if current primary_spouse is hated and another spouse is preferred.
			factor = 0
			NOT = {
				scope:actor = {
					opinion = {
						target = scope:actor.primary_spouse
						value < -50
					}
					opinion = {
						target = scope:recipient
						value >= 50
					}
				}
			}
		}
	}
}

grant_independence_interaction = {
	category = interaction_category_vassal
	force_notification = yes
	greeting = positive
	notification_text = GRANT_INDEPENDENCE_INTERACTION_NOTIFICATION

	desc = grant_independence_interaction_desc
	
	is_shown = {
		scope:recipient = {
			is_vassal_of = scope:actor
		}
		NOT = { scope:recipient = scope:actor }
	}

	is_valid_showing_failures_only = {
		NOT = { scope:actor = { is_at_war_with = scope:recipient } }
		scope:actor = {
			is_independent_ruler = yes
			NOT = {
				is_at_war = yes
			}
		}
		custom_description = {
			text = is_at_war_with_another_vassal
			object = scope:recipient
			NOT = {
				scope:actor = {
					any_vassal_or_below = {
						is_at_war_with = scope:recipient
					}
				}
			}
		}
		custom_description = {
			text = is_de_jure_vassal_check
			object = scope:recipient
			NOT = { #Can not be used against de jure vassals
				scope:recipient.primary_title = {
					any_this_title_or_de_jure_above = {
						holder = scope:actor
					}
				}
			}
		}
		#Warcraft
		scope:actor = { 
			is_in_stun_trigger = no
		}
	}

	auto_accept = yes

	on_accept = {
		scope:actor = {
			stress_impact = {
				ambitious = medium_stress_impact_gain
				arrogant = minor_stress_impact_gain
				greedy = minor_stress_impact_gain
			}
			hidden_effect = {	
				send_interface_toast = {
					title = grant_vassal_independence_interaction_toast
					left_icon = scope:actor
					right_icon = scope:recipient

					custom_tooltip = grant_vassal_independence_interaction_toast_desc
				}
			}
		}

		scope:recipient = {
			#Send notifications
			if = {
				limit = {
					any_liege_or_above = {
						is_ai = no
						NOT = { this = scope:actor }
					}
				}
				every_liege_or_above = {
					limit = {
						is_ai = no
						NOT = { this = scope:actor }
					}
					trigger_event = vassal_interaction.0023
				}
			}
			if = {
				limit = {
					any_liege_or_above = {
						any_vassal = {
							is_ai = no
							NOR = {
								this = scope:recipient
								this = scope:actor
							}
						}
					}
				}
				every_liege_or_above = {
					limit = {
						any_vassal = {
							is_ai = no
							NOR = {
								this = scope:recipient
								this = scope:actor
							}
						}
					}
					every_vassal = {
						limit = {
							is_ai = no
							NOT = { this = scope:recipient }
						}
						trigger_event = {
							id = vassal_interaction.0022
							days = 3
						}
					}
				}
			}

			add_opinion = {
				target = scope:actor
				modifier = granted_independence_opinion
			}

			add_truce_both_ways = {
				character = scope:actor
				days = 3650
				name = TRUCE_GRANT_INDEPENDENCE
			}

			create_title_and_vassal_change = {
				type = independency
				save_scope_as = change
				add_claim_on_loss = yes
			}
			becomes_independent = {
				change = scope:change
			}

			resolve_title_and_vassal_change = scope:change
		}
	}

	ai_will_do = {
		base = 0 #The AI should never do this!
	}
}

expose_secret_interaction = {
	interface_priority = 120
	common_interaction = yes
	category = interaction_category_hostile
	interface = blackmail	
	
	desc = expose_secret_interaction_desc

	is_shown = {
		scope:recipient = {
			any_known_secret = {
				is_known_by = scope:actor
			}
			NOT = { this = scope:actor }
			age > 10
		}
	}

	is_valid_showing_failures_only = {
		scope:recipient = { is_diplomatically_available = yes } 
	}
	
	on_accept = {
		
		scope:actor = {	
			if = {
				limit = {
					exists = scope:target
				}
				scope:target = {
					expose_secret = scope:actor
				}
			}	
			else =
			{
				every_known_secret = {
					limit = {
						secret_owner = scope:recipient
					}
					expose_secret = scope:actor
				}
			}	
			
			stress_impact = {
				honest = medium_stress_impact_loss
				just = medium_stress_impact_loss
				shy = medium_stress_impact_gain
			}
		}

		scope:recipient = {
			stress_impact = {
				honest = medium_stress_impact_loss
				just = medium_stress_impact_loss
				shy = medium_stress_impact_gain
			}
		}
	}

	auto_accept = yes
}


