# Events for saving from a murder attempt

namespace = murder_save

#Events:
# 0001 - Target saved from an assassin by a protective lover
# 0002 - Lover dies to a venomous creature instead of target
# 0003 - Target's Mindbreak character sacrifices themselves to stop an assassin
# 0004 - Target's warhorse saves them from hired thugs
# 0005 - Prison Pet saves target's life
# 0006 - Personal Guard saves target from Hired Thugs
# 0007 - Saved from creepy crawlies by cat
# 0008 - Saved from assassin by dog
# 0010 - Family Connections (Murder Save)
# 0011 - Saved from poisoned food by cat
# 0012 - Saved from poisoned food by dog
# 0013 - Gluttonous trait saved you
# 0014 - Language saved you
# 0015 - Artifact saved you


#############################
# Execution Events 0000 - 0999
#############################

#############################
# Saved from Assassin by Lover
# by Petter Vilberg
#############################
scripted_trigger murder_save_0001_lover_trigger = {
	is_landed = no
	is_ruler = no
	is_available_ai_adult = yes
	is_alive = yes
}

#For scheme owner
murder_save.0001 = {
	type = character_event
	title = murder_save.0001.t
	desc = {
		desc = murder_save.0001.opening
		triggered_desc = {
			trigger = {
				OR = {
					is_close_or_extended_family_of = scope:lover
					is_consort_of = scope:lover
					is_employer_of = scope:lover
					has_any_scripted_relation = scope:lover
				}
			}
			desc = murder_save.0001.rel_to_me
		}
		desc = murder_save.0001.end
	}

	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = grief
	}
	right_portrait = {
		character = scope:lover
		animation = pain
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		scope:murder_method = flag:hired_assassin
		scope:target = {
			any_relation = {
				type = lover
				murder_save_0001_lover_trigger = yes
			}
		}
	}

	weight_multiplier = {
		base = 1
		modifier = {
			add = 1
			scope:target = {
				any_relation = {
					type = lover
					murder_save_0001_lover_trigger = yes
					OR = {
						has_opinion_modifier = {
							target = root
							modifier = love_opinion
						}
						has_relation_soulmate = root
					}
				}
			}
		}
		# Mortal Adoration Perk:
		mortal_adoration_murder_save_modifier = yes
	}

	immediate = {
		save_scope_value_as = {
			name = murder_saved
			value = flag:lover_stopped_assassin
		}
		scope:target = {
			random_relation = {
				type = lover
				limit = {
					murder_save_0001_lover_trigger = yes
				}
				weight = {
					base = 1
					modifier = {
						add = 5
						OR = {
							has_opinion_modifier = {
								target = root
								modifier = love_opinion
							}
							has_relation_soulmate = root
						}
					}
				}
				save_scope_as = lover
			}
		}
		random_dummy_gender_assassin_effect = yes
		murder_failure_effect = yes # Fires the response for the target

	}

	option = {
		name = murder_save.0001.a
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			scope:scheme = {
				end_scheme = yes
			}
		}
		ai_chance = {
			base = 100
		}
	}

	option = {
		name = murder_save.0001.b
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			start_scheme = {
				type = murder
				target = scope:target
			}
		}
		hidden_effect = {
			save_scope_value_as = {
				name = restart_scheme
				value = yes
			}
		}
		ai_chance = {
			base = 0
		}
	}

	after = {
		show_as_tooltip = {
			if = {
				limit = {
					exists = scope:scheme_discovered
				}
				known_murder_effect = {
					VICTIM = scope:lover
					MURDERER = root
					EXPOSER = scope:target
				}
			}
			else = {
				unknown_murder_effect = {
					VICTIM = scope:lover
					MURDERER = root
					REASON = death_duel
				}
			}
		}
		hidden_effect = {
			trigger_event = murder_outcome.9999
		}
	}
}


#############################
# Saved from Venomous Creature by Lover
# by Petter Vilberg
#############################
scripted_trigger murder_save_0002_lover_trigger = {
	is_landed = no
	is_ruler = no
	is_available_ai_adult = yes
}
murder_save.0002 = {
	type = character_event
	title = murder_save.0002.t
	desc = {
		desc = murder_save.0002.opening
		triggered_desc = {
			trigger = {
				OR = {
					is_close_or_extended_family_of = scope:lover
					is_consort_of = scope:lover
					is_employer_of = scope:lover
					has_any_scripted_relation = scope:lover
				}
			}
			desc = murder_save.0002.rel_to_me
		}
		desc = murder_save.0002.end
	}

	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = grief
	}
	right_portrait = {
		character = scope:lover
		animation = pain
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		scope:murder_method = flag:creepy_crawly
		scope:target = {
			any_relation = {
				type = lover
				murder_save_0002_lover_trigger = yes
			}
		}
	}

	weight_multiplier = {
		base = 1
		modifier = {
			add = 1
			scope:target = {
				any_relation = {
					type = lover
					murder_save_0002_lover_trigger = yes
					has_opinion_modifier = {
						target = root
						modifier = love_opinion
					}
				}
			}
		}
		# Mortal Adoration Perk:
		mortal_adoration_murder_save_modifier = yes
	}

	immediate = {
		save_scope_value_as = {
			name = murder_saved
			value = flag:lover_stopped_creepy_crawly
		}
		scope:target = {
			random_relation = {
				type = lover
				limit = {
					murder_save_0002_lover_trigger = yes
				}
				weight = {
					base = 1
					modifier = {
						add = 5
						has_opinion_modifier = {
							target = root
							modifier = love_opinion
						}
					}
				}
				save_scope_as = lover
			}
		}
		murder_failure_effect = yes # Fires the response for the target
	}

	option = {
		name = murder_save.0001.a
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			scope:scheme = {
				end_scheme = yes
			}
		}
		ai_chance = {
			base = 100
		}
	}

	option = {
		name = murder_save.0001.b
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			start_scheme = {
				type = murder
				target = scope:target
			}
		}
		hidden_effect = {
			save_scope_value_as = {
				name = restart_scheme
				value = yes
			}
		}
		ai_chance = {
			base = 0
		}
	}

	after = {
		show_as_tooltip = {
			if = {
				limit = {
					exists = scope:scheme_discovered
				}
				known_murder_effect = {
					VICTIM = scope:lover
					MURDERER = root
					EXPOSER = scope:target
				}
			}
			else = {
				unknown_murder_effect = {
					VICTIM = scope:lover
					MURDERER = root
					REASON = death_duel
				}
			}
		}
		hidden_effect = {
			trigger_event = murder_outcome.9999
		}
	}
}


#############################
# Saved from Assassin by Mindbreak character
# by Petter Vilberg
#############################
murder_save.0003 = {
	type = character_event
	title = murder_save.0003.t
	desc = murder_save.0003.desc

	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = grief
	}
	right_portrait = {
		character = scope:broken_person
		animation = pain
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		scope:murder_method = flag:hired_assassin
		scope:target = {
			has_variable = mind_broken_victim
			var:mind_broken_victim = {
				is_alive = yes
				NOT = { is_incapable_trigger = yes }
			}
		}
	}

	weight_multiplier = {
		base = 1
	}

	immediate = {
		scope:target.var:mind_broken_victim = {
			save_scope_as = broken_person
		}
		save_scope_value_as = {
			name = murder_saved
			value = flag:broken_person_stopped_assassin
		}
		murder_failure_effect = yes # Fires the response for the target
	}

	option = {
		name = murder_save.0003.a
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			scope:scheme = {
				end_scheme = yes
			}
		}
		ai_chance = {
			base = 100
		}
	}

	option = {
		name = murder_save.0003.b
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			start_scheme = {
				type = murder
				target = scope:target
			}
		}
		hidden_effect = {
			save_scope_value_as = {
				name = restart_scheme
				value = yes
			}
		}
		ai_chance = {
			base = 0
		}
	}

	after = {
		show_as_tooltip = {
			if = {
				limit = {
					exists = scope:scheme_discovered
				}
				known_murder_effect = {
					VICTIM = scope:broken_person
					MURDERER = root
					EXPOSER = scope:target
				}
			}
			else = {
				unknown_murder_effect = {
					VICTIM = scope:broken_person
					MURDERER = root
					REASON = death_duel
				}
			}
		}
		hidden_effect = {
			trigger_event = murder_outcome.9999
		}
	}
}


#############################
# Saved from Thugs by War Horse
# by Petter Vilberg
#############################
murder_save.0004 = {
	type = character_event
	title = murder_save.0004.t
	desc = murder_save.0004.desc

	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = shock
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		scope:murder_method = flag:hired_thugs
		scope:target = {
			owns_story_of_type = story_cycle_martial_lifestyle_warhorse
		}
	}

	weight_multiplier = {
		base = 1
	}

	immediate = {
		save_scope_value_as = {
			name = murder_saved
			value = flag:warhorse_stops_thugs
		}
		random = {
			chance = 30
			save_scope_value_as = {
				name = warhorse_survives
				value = yes
			}
		}
		murder_failure_effect = yes # Fires the response for the target
	}

	option = {
		name = murder_save.0001.a
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			scope:scheme = {
				end_scheme = yes
			}
		}
		ai_chance = {
			base = 100
		}
	}

	option = {
		name = murder_save.0001.b
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			start_scheme = {
				type = murder
				target = scope:target
			}
		}
		hidden_effect = {
			save_scope_value_as = {
				name = restart_scheme
				value = yes
			}
		}
		ai_chance = {
			base = 0
		}
	}

	after = {
		if = {
			limit = {
				NOT = { exists = scope:warhorse_survives }
			}
			custom_tooltip = murder_save_failure_warhorse_tt
			show_as_tooltip = {
				scope:target = {
					remove_horse_story_modifiers_effect = yes
				}
			}
			scope:target = {
				random_owned_story = {
					limit = { story_type = story_cycle_martial_lifestyle_warhorse }
					hidden_effect = { end_story = yes }
				}
			}
		}
		hidden_effect = {
			trigger_event = murder_outcome.9999
		}
	}
}


#############################
# Saved from Being Beaten to Death by Prison Pet
# by Petter Vilberg
#############################
murder_save.0005 = {
	type = character_event
	title = murder_save.0005.t
	desc = murder_save.0005.desc

	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = grief
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		scope:murder_method = flag:beat_to_death_in_dungeon
		scope:target = {
			has_variable = prison_pet_variable
		}
	}

	weight_multiplier = {
		base = 1
	}

	immediate = {
		save_scope_value_as = {
			name = murder_saved
			value = flag:prison_pet_save
		}
		murder_failure_effect = yes # Fires the response for the target
	}

	option = {
		name = murder_save.0001.a
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			scope:scheme = {
				end_scheme = yes
			}
		}
		ai_chance = {
			base = 100
		}
	}

	option = {
		name = murder_save.0001.b
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			start_scheme = {
				type = murder
				target = scope:target
			}
		}
		hidden_effect = {
			save_scope_value_as = {
				name = restart_scheme
				value = yes
			}
		}
		ai_chance = {
			base = 0
		}
	}

	after = {
		hidden_effect = {
			trigger_event = murder_outcome.9999
		}
	}
}



#############################
# Saved from Thugs by Personal Guard
# by Petter Vilberg
#############################
murder_save.0006 = {
	type = character_event
	title = murder_save.0006.t
	desc = {
		desc = murder_save.0006.opening
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:target = {
						is_married = yes
					}
				}
				desc = murder_save.0006.spouse
			}
			desc = murder_save.0006.no_spouse
		}
		desc = murder_save.0006.end
	}

	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = fear
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		scope:murder_method = flag:hired_thugs
		scope:target = {
			has_character_modifier = spouse_martial_personal_guard_modifier
		}
	}

	weight_multiplier = {
		base = 1
	}

	immediate = {
		save_scope_value_as = {
			name = murder_saved
			value = flag:spouse_personal_guard
		}
		if = {
			limit = {
				scope:target = {
					is_married = yes
				}
			}
			random_spouse = {
				weight = {
					base = 1
					compare_modifier = {
						value = martial
					}
				}
				save_scope_as = spouse
			}
		}
		murder_failure_effect = yes # Fires the response for the target
	}

	option = {
		name = murder_save.0001.a
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			scope:scheme = {
				end_scheme = yes
			}
		}
		ai_chance = {
			base = 100
		}
	}

	option = {
		name = murder_save.0001.b
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			start_scheme = {
				type = murder
				target = scope:target
			}
		}
		hidden_effect = {
			save_scope_value_as = {
				name = restart_scheme
				value = yes
			}
		}
		ai_chance = {
			base = 0
		}
	}

	after = {
		hidden_effect = {
			trigger_event = murder_outcome.9999
		}
	}
}


#############################
# Saved from creepy crawlies by cat
# by Linnéa Thimrén
#############################
murder_save.0007 = {
	type = character_event
	title = murder_save.0007.t
	desc = murder_save.0007.desc

	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = shock
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		scope:murder_method = flag:creepy_crawly
		scope:target = {
			any_owned_story = {
				story_type = story_cycle_pet_cat
			}
		}
	}

	immediate = {
		random = {
			chance = 70
			save_scope_value_as = {
				name = cat_survives
				value = yes
			}
		}
		save_scope_value_as = {
			name = murder_saved
			value = flag:cat_save
		}
		murder_failure_effect = yes # Fires the response for the target
	}

	option = {
		name = murder_save.0001.a
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			scope:scheme = {
				end_scheme = yes
			}
		}
		ai_chance = {
			base = 100
		}
	}

	option = {
		name = murder_save.0001.b
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			start_scheme = {
				type = murder
				target = scope:target
			}
		}
		hidden_effect = {
			save_scope_value_as = {
				name = restart_scheme
				value = yes
			}
		}
		ai_chance = {
			base = 0
		}
	}

	after = {
		if = {
			limit = {
				NOT = { exists = scope:cat_survives }
			}
			custom_tooltip = murder_save_failure_cat_tt
			show_as_tooltip = {
				scope:target = {
					remove_cat_story_modifiers_effect = yes
				}
			}
			scope:target = {
				random_owned_story = {
					limit = { story_type = story_cycle_pet_cat }
					hidden_effect = { end_story = yes }
				}
			}
		}
		hidden_effect = {
			trigger_event = murder_outcome.9999
		}
	}
}

#############################
# Saved from assassin by dog
# by Linnéa Thimrén
#############################
murder_save.0008 = {
	type = character_event
	title = murder_save.0008.t
	desc = murder_save.0008.desc

	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = shock
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		scope:murder_method = flag:hired_assassin
		scope:target = {
			any_owned_story = {
				story_type = story_cycle_pet_dog
			}
		}
	}

	immediate = {
		save_scope_value_as = {
			name = murder_saved
			value = flag:dog_save
		}
		murder_failure_effect = yes # Fires the response for the target
	}

	option = {
		name = murder_save.0001.a
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			scope:scheme = {
				end_scheme = yes
			}
		}
		ai_chance = {
			base = 100
		}
	}

	option = {
		name = murder_save.0001.b
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			start_scheme = {
				type = murder
				target = scope:target
			}
		}
		hidden_effect = {
			save_scope_value_as = {
				name = restart_scheme
				value = yes
			}
		}
		ai_chance = {
			base = 0
		}
	}

	after = {
		hidden_effect = {
			trigger_event = murder_outcome.9999
		}
	}
}

###########################
# Family Connections (Murder Save)
# by Petter Vilberg
###########################
murder_save.0009 = {
	type = character_event
	title = murder_save.0009.t
	desc = murder_save.0009.desc
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = scheme
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		scope:target = {
			exists = dynasty
			dynasty = {
				has_dynasty_perk = guile_legacy_5
			}
			NOT = { has_character_flag = guile_legacy_5_save_used }
		}
	}

	immediate = {
		save_scope_value_as = {
			name = murder_saved
			value = flag:guile_legacy_save
		}
		murder_failure_effect = yes # Fires the response for the target
	}

	option = {
		name = murder_save.0009.a
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			scope:scheme = {
				end_scheme = yes
			}
		}
		ai_chance = {
			base = 100
		}
	}

	option = {
		name = murder_save.0009.b
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			start_scheme = {
				type = murder
				target = scope:target
			}
		}
		hidden_effect = {
			save_scope_value_as = {
				name = restart_scheme
				value = yes
			}
		}
		ai_chance = {
			base = 0
		}
	}

	after = {
		custom_tooltip = murder_save.targets_guile_legacy_save_used_up
		hidden_effect = {
			trigger_event = murder_outcome.9999
		}
	}
}


#############################
# Saved from Assassin by Varangian Guard
# by Petter Vilberg
#############################
scripted_trigger murder_save_0010_varangian_trigger = {
	always = no
	#has_character_flag = is_currently_varangian
	#court_owner = scope:target # To block the actual liege of the Varangian character
	#is_landed = no
	#is_ruler = no
	#is_available_ai_adult = yes
	#is_alive = yes
}

#For scheme owner
murder_save.0010 = {
	type = character_event
	title = murder_save.0010.t
	desc = {
		desc = murder_save.0010.desc
		triggered_desc = {
			trigger = { exists = local_var:varangian_dies }
			desc = murder_save.0010.varangian_dies
		}
	}
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = shock
	}
	right_portrait = {
		character = scope:varangian
		animation = pain
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		scope:murder_method = flag:hired_assassin
		scope:target = {
			any_courtier_or_guest = {
				murder_save_0010_varangian_trigger = yes
			}
		}
	}

	weight_multiplier = {
		base = 1
	}

	immediate = {
		save_scope_value_as = {
			name = murder_saved
			value = flag:varangian_stopped_assassin
		}
		scope:target = {
			random_courtier_or_guest = {
				limit = {
					murder_save_0010_varangian_trigger = yes
				}
				weight = {
					base = 1
					compare_modifier = {
						value = ai_boldness
						multiplier = 0.01
						min = 0
					}
					opinion_modifier = {
						opinion_target = scope:target
						multiplier = 0.01
						min = 0
					}
				}
				save_scope_as = varangian
			}
		}
		hidden_effect = {
			random = {
				chance = {
					value = 30
					subtract = scope:varangian.prowess
				}
				set_local_variable = {
					name = varangian_dies
					value = yes
				}
			}
		}
		if = {
			limit = { exists = local_var:varangian_dies }
			show_as_tooltip = {
				if = {
					limit = {
						exists = scope:scheme_discovered
					}
					known_murder_effect = {
						VICTIM = scope:varangian
						MURDERER = root
						EXPOSER = scope:target
					}
				}
				else = {
					unknown_murder_effect = {
						VICTIM = scope:varangian
						MURDERER = root
						REASON = death_duel
					}
				}
			}
		}
		random_dummy_gender_assassin_effect = yes
		murder_failure_effect = yes # Fires the response for the target
	}

	option = {
		name = murder_save.0010.a
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			scope:scheme = {
				end_scheme = yes
			}
		}
		ai_chance = {
			base = 100
		}
	}

	option = {
		name = murder_save.0010.b
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			start_scheme = {
				type = murder
				target = scope:target
			}
		}
		hidden_effect = {
			save_scope_value_as = {
				name = restart_scheme
				value = yes
			}
		}
		ai_chance = {
			base = 0
		}
	}

	after = {
		hidden_effect = {
			trigger_event = murder_outcome.9999
		}
	}
}


#############################
# Saved from poisoned food by cat
# by Linnéa Thimrén
#############################
murder_save.0011 = {
	type = character_event
	title = murder_save.0011.t
	desc = murder_save.0011.desc

	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = shock
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		scope:murder_method = flag:used_poison
		scope:target = {
			any_owned_story = {
				story_type = story_cycle_pet_cat
			}
		}
	}

	immediate = {
		save_scope_value_as = {
			name = murder_saved
			value = flag:cat_poison_save
		}
		murder_failure_effect = yes # Fires the response for the target
	}

	option = {
		name = murder_save.0001.a
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			scope:scheme = {
				end_scheme = yes
			}
		}
		ai_chance = {
			base = 100
		}
	}

	option = {
		name = murder_save.0001.b
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			start_scheme = {
				type = murder
				target = scope:target
			}
		}
		hidden_effect = {
			save_scope_value_as = {
				name = restart_scheme
				value = yes
			}
		}
		ai_chance = {
			base = 0
		}
	}

	after = {
		custom_tooltip = murder_save_poison_cat_tt
		show_as_tooltip = {
			scope:target = {
				remove_cat_story_modifiers_effect = yes
			}
		}
		scope:target = {
			random_owned_story = {
				limit = { story_type = story_cycle_pet_cat }
				hidden_effect = { end_story = yes }
			}
		}
		hidden_effect = {
			trigger_event = murder_outcome.9999
		}
	}
}


#############################
# Saved from poisoned food by dog
# by Linnéa Thimrén
#############################
murder_save.0012 = {
	type = character_event
	title = murder_save.0012.t
	desc = murder_save.0012.desc

	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = shock
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		scope:murder_method = flag:used_poison
		scope:target = {
			any_owned_story = {
				story_type = story_cycle_pet_dog
			}
		}
	}

	immediate = {
		save_scope_value_as = {
			name = murder_saved
			value = flag:dog_poison_save
		}
		murder_failure_effect = yes # Fires the response for the target
	}

	option = {
		name = murder_save.0001.a
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			scope:scheme = {
				end_scheme = yes
			}
		}
		ai_chance = {
			base = 100
		}
	}

	option = {
		name = murder_save.0001.b
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			start_scheme = {
				type = murder
				target = scope:target
			}
		}
		hidden_effect = {
			save_scope_value_as = {
				name = restart_scheme
				value = yes
			}
		}
		ai_chance = {
			base = 0
		}
	}

	after = {
		custom_tooltip = murder_save_poison_dog_tt
		show_as_tooltip = {
			scope:target = {
				remove_dog_story_modifiers_effect = yes
			}
		}
		scope:target = {
			random_owned_story = {
				limit = { story_type = story_cycle_pet_dog }
				hidden_effect = { end_story = yes }
			}
		}
		hidden_effect = {
			trigger_event = murder_outcome.9999
		}
	}
}

#############################
# Saved from poisoned food by Gluttonous trait
# by Maxence Voleau
#############################
murder_save.0013 = {
	type = character_event
	title = murder_save.0013.t
	desc = murder_save.0013.desc

	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = shock
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		scope:murder_method = flag:used_poison
		scope:target = {
			has_trait = gluttonous
		}
	}

	immediate = {
		save_scope_value_as = {
			name = murder_saved
			value = flag:gluttonous_instinct
		}
		murder_failure_effect = yes # Fires the response for the target
	}

	option = {
		name = murder_save.0001.a
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			scope:scheme = {
				end_scheme = yes
			}
		}
		ai_chance = {
			base = 100
		}
	}

	option = {
		name = murder_save.0001.b
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			start_scheme = {
				type = murder
				target = scope:target
			}
		}
		hidden_effect = {
			save_scope_value_as = {
				name = restart_scheme
				value = yes
			}
		}
		ai_chance = {
			base = 0
		}
	}

	after = {
		hidden_effect = {
			trigger_event = murder_outcome.9999
		}
	}
}

#############################
# Saved from assassin by LINGUISTICS
# by Daniel Moore
#############################
murder_save.0014 = {
	type = character_event
	title = murder_save.0014.t
	desc = murder_save.0014.desc

	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = shock
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		scope:murder_method = flag:hired_assassin
		scope:target = {
			knows_language_of_culture = scope:owner.culture
			NOT = {
				scope:target.culture = {
					has_same_culture_language = scope:owner.culture
				}
			}
		}
	}

	immediate = {
		save_scope_value_as = {
			name = murder_saved
			value = flag:language_save
		}
		murder_failure_effect = yes # Fires the response for the target
	}

	option = {
		name = murder_save.0001.a
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			scope:scheme = {
				end_scheme = yes
			}
		}
		ai_chance = {
			base = 100
		}
	}

	option = {
		name = murder_save.0001.b
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			start_scheme = {
				type = murder
				target = scope:target
			}
		}
		hidden_effect = {
			save_scope_value_as = {
				name = restart_scheme
				value = yes
			}
		}
		ai_chance = {
			base = 0
		}
	}

	after = {
		hidden_effect = {
			trigger_event = murder_outcome.9999
		}
	}
}

#############################
# Saved from assassin by artifact
# by Daniel Moore
#############################
murder_save.0015 = {
	type = character_event
	title = murder_save.0015.t
	desc = murder_save.0015.desc

	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = shock
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	artifact = {
		target = scope:this_artifact
		position = lower_center_portrait
	}

	trigger = {
		exists = scope:murder_method
		scope:murder_method = flag:hired_assassin
		scope:target = {
			is_available_healthy_adult = yes
			has_any_artifact = yes
			any_character_artifact = {
				NOT = {
					has_variable = saved_from_assassination
				}
			}
		}
	}

	immediate = {
		save_scope_value_as = {
			name = murder_saved
			value = flag:artifact_save
		}

		scope:target = {
			random_character_artifact = {
				limit = {
					NOT = {
						has_variable = saved_from_assassination
					}
				}
				save_scope_as = this_artifact
			}
		}
		scope:this_artifact = {
			# Warcraft
			if = {
				limit = { artifact_can_be_damaged_trigger = yes }
				add_durability = {
					value = scope:this_artifact.artifact_durability
					multiply = -0.25
				}
			}

			set_variable = saved_from_assassination
		}
		murder_failure_effect = yes # Fires the response for the target
	}

	option = {
		name = murder_save.0001.a
		if = {
			limit = { exists = scope:scheme_discovered}
			add_dread = medium_dread_gain
		}
		scope:scheme = {
			end_scheme = yes
		}

		ai_chance = {
			base = 100
		}
	}

	option = {
		name = murder_save.0001.b
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			start_scheme = {
				type = murder
				target = scope:target
			}
		}
		hidden_effect = {
			save_scope_value_as = {
				name = restart_scheme
				value = yes
			}
		}
		ai_chance = {
			base = 0
		}
	}

	after = {
		hidden_effect = {
			trigger_event = murder_outcome.9999
		}
	}
}


#####################################
# Victim Events
# 1000 - 1999
#####################################

#Lover dies to an assassin for you
murder_save.1001 = {
	type = character_event
	title = murder_save.0001.t
	desc = murder_save.1001.desc
	left_portrait = {
		character = root
		animation = grief
	}
	right_portrait = {
		character = scope:lover
		animation = pain
	}
	lower_left_portrait = scope:owner_revealed
	theme = intrigue

	trigger = {
		exists = scope:murder_saved
		scope:murder_saved = flag:lover_stopped_assassin
	}

	immediate = {
		set_variable = {
			name = block_death_event_from
			value = scope:lover
			days = 3
		}
		if = {
			limit = {
				exists = scope:scheme_discovered
			}
			scope:owner = {
				save_scope_as = owner_revealed
			}
			known_murder_effect = {
				VICTIM = scope:lover
				MURDERER = scope:owner
				EXPOSER = scope:target
			}
		}
		else = {
			unknown_murder_effect = {
				VICTIM = scope:lover
				MURDERER = scope:owner
				REASON = death_duel
			}
		}
		# Warcraft
		# add_achievement_flag_effect = { FLAG = achievement_the_things_love_does_for_us_flag }
	}

	option = { #Who could do such a thing?
		name = murder_save.1001.a
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	option = { #Vengeance!
		name = murder_save.1001.b
		trigger = {
			exists = scope:scheme_discovered
		}
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	option = { #Who could do such a thing?
		name = murder_save.1001.c
		trigger = {
			NOT = { exists = scope:scheme_discovered }
			OR = {
				has_trait = callous
				has_trait = sadistic
			}
		}
		exclusive = yes
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	after = {
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
	}
}

#Lover dies to a venomous creature
murder_save.1002 = {
	type = character_event
	title = murder_save.0002.t
	desc = murder_save.1002.desc
	left_portrait = {
		character = root
		animation = grief
	}
	right_portrait = {
		character = scope:lover
		animation = pain
	}
	lower_left_portrait = scope:owner_revealed
	theme = intrigue

	trigger = {
		exists = scope:murder_saved
		scope:murder_saved = flag:lover_stopped_creepy_crawly
	}

	immediate = {
		set_variable = {
			name = block_death_event_from
			value = scope:lover
			days = 3
		}
		if = {
			limit = {
				exists = scope:scheme_discovered
			}
			scope:owner = {
				save_scope_as = murder_revealed
			}
			known_murder_effect = {
				VICTIM = scope:lover
				MURDERER = scope:owner
				EXPOSER = scope:target
			}
		}
		else = {
			unknown_murder_effect = {
				VICTIM = scope:lover
				MURDERER = scope:owner
				REASON = death_poison
			}
		}
		# Warcraft
		# add_achievement_flag_effect = { FLAG = achievement_the_things_love_does_for_us_flag }
	}

	option = { #Who could do such a thing?
		name = murder_save.1001.a
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	option = { #Vengeance!
		name = murder_save.1001.b
		trigger = {
			exists = scope:scheme_discovered
		}
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	after = {
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
	}
}

#Mind broken character sacrifices themselves for it
murder_save.1003 = {
	type = character_event
	title = murder_save.0003.t
	desc = murder_save.1003.desc
	left_portrait = {
		character = root
		animation = shock
	}
	right_portrait = {
		character = scope:broken_person
		animation = pain
	}
	lower_left_portrait = scope:owner_revealed
	theme = intrigue

	trigger = {
		exists = scope:murder_saved
		scope:murder_saved = flag:broken_person_stopped_assassin
	}

	immediate = {
		if = {
			limit = {
				exists = scope:scheme_discovered
			}
			scope:owner = {
				save_scope_as = owner_revealed
			}
			known_murder_effect = {
				VICTIM = scope:broken_person
				MURDERER = root
				EXPOSER = scope:target
			}
		}
		else = {
			unknown_murder_effect = {
				VICTIM = scope:broken_person
				MURDERER = root
				REASON = death_duel
			}
		}
	}

	option = { #Who could do such a thing?
		name = murder_save.1003.a
		trigger = {
			NOT = { exists = scope:scheme_discovered }
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	option = { #Vengeance!
		name = murder_save.1003.a
		trigger = {
			exists = scope:scheme_discovered
		}
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	after = {
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
	}
}

#Warhorse saves you from thugs
murder_save.1004 = {
	type = character_event
	title = murder_save.0004.t
	desc = {
		desc = murder_save.1004.opening
		triggered_desc = {
			trigger = { NOT = { exists = scope:warhorse_survives } }
			desc = murder_save.1004.warhorse_dies
		}
	}
	left_portrait = {
		character = root
		animation = shock
	}
	right_portrait = {
		character = scope:owner_revealed
		animation = anger
	}
	theme = intrigue

	trigger = {
		exists = scope:murder_saved
		scope:murder_saved = flag:warhorse_stops_thugs
	}

	immediate = {
		if = {
			limit = {
				exists = scope:scheme_discovered
			}
			scope:owner = {
				save_scope_as = owner_revealed
			}
		}
	}

	option = { #Who could do such a thing?
		name = murder_save.1004.a
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
			exists = scope:warhorse_survives
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	option = { #Vengeance!
		name = murder_save.1004.b
		trigger = {
			exists = scope:scheme_discovered
			exists = scope:warhorse_survives
		}
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	option = { #Who could do such a thing?
		name = murder_save.1004.c
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
			NOT = { exists = scope:warhorse_survives }
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	option = { #Vengeance!
		name = murder_save.1004.d
		trigger = {
			exists = scope:scheme_discovered
			NOT = { exists = scope:warhorse_survives }
		}
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	after = {
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
		if = {
			limit = {
				NOT = { exists = scope:warhorse_survives }
			}
			custom_tooltip = murder_save_warhorse_dies_to_thugs
			show_as_tooltip = {
				remove_horse_story_modifiers_effect = yes
			}
			hidden_effect = {
				if = {
					limit = {
						owns_story_of_type = story_cycle_martial_lifestyle_warhorse
					}
					random_owned_story = {
						limit = {
							story_type = story_cycle_martial_lifestyle_warhorse
						}
						end_story = yes
					}
				}
			}
		}
	}
}

#Prison Pet saves you
murder_save.1005 = {
	type = character_event
	title = murder_save.0005.t
	desc = murder_save.1005.desc
	left_portrait = {
		character = root
		animation = grief
	}
	right_portrait = {
		character = scope:owner_revealed
		animation = anger
	}
	theme = intrigue

	trigger = {
		exists = scope:murder_saved
		scope:murder_saved = flag:prison_pet_save
	}

	immediate = {
		if = {
			limit = {
				exists = scope:scheme_discovered
			}
			scope:owner = {
				save_scope_as = owner_revealed
			}
		}
		random = {
			chance = 50
			save_scope_value_as = {
				name = prison_pet_survives
				value = yes
			}
		}
	}

	option = { #Who could do such a thing?
		name = murder_save.1005.a
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
			exists = scope:prison_pet_survives
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	option = { #Vengeance!
		name = murder_save.1005.a
		trigger = {
			exists = scope:scheme_discovered
			exists = scope:prison_pet_survives
		}
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	option = { #Who could do such a thing?
		name = murder_save.1005.b
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
			NOT = { exists = scope:prison_pet_survives }
		}
		prison_pet_death_effect = yes
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	option = { #Vengeance!
		name = murder_save.1005.b
		trigger = {
			exists = scope:scheme_discovered
			NOT = { exists = scope:prison_pet_survives }
		}
		prison_pet_death_effect = yes
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	after = {
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
	}
}


#Personal Guard saves you
murder_save.1006 = {
	type = character_event
	title = murder_save.0006.t
	desc = {
		desc = murder_save.1006.opening
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = scope:spouse
				}
				desc = murder_save.1006.spouse
			}
			desc = murder_save.1006.no_spouse
		}
		desc = murder_save.1006.end
	}
	left_portrait = {
		character = root
		animation = shock
	}
	right_portrait = {
		character = scope:owner_revealed
		animation = anger
	}
	theme = intrigue

	trigger = {
		exists = scope:murder_saved
		scope:murder_saved = flag:spouse_personal_guard
	}

	immediate = {
		if = {
			limit = {
				exists = scope:scheme_discovered
			}
			scope:owner = {
				save_scope_as = owner_revealed
			}
		}
		if = {
			limit = {
				is_married = yes
			}
			random_spouse = {
				weight = {
					base = 1
					compare_modifier = {
						value = martial
					}
				}
				save_scope_as = spouse
			}
		}
	}

	option = { #Who could do such a thing?
		name = murder_save.1001.a
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	option = { #Vengeance!
		name = murder_save.1001.b
		trigger = {
			exists = scope:scheme_discovered
		}
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	after = {
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
	}
}

#Cat saves you
murder_save.1007 = {
	type = character_event
	title = murder_save.0007.t
	desc = {
		desc = murder_save.1007.opening
		triggered_desc = {
			trigger = { NOT = { exists = scope:cat_survives } }
			desc = murder_save.1007.cat_dies
		}
	}
	left_portrait = {
		character = root
		triggered_animation = {
			trigger = { NOT = { exists = scope:cat_survives } }
			animation = grief
		}
		triggered_animation = {
			trigger = { always = yes }
			animation = shock
		}
	}
	right_portrait = {
		character = scope:owner_revealed
		animation = anger
	}
	theme = intrigue

	trigger = {
		exists = scope:murder_saved
		scope:murder_saved = flag:cat_save
	}

	immediate = {
		if = {
			limit = {
				exists = scope:scheme_discovered
			}
			scope:owner = {
				save_scope_as = owner_revealed
			}
		}
	}

	option = { #Who could do such a thing?
		name = murder_save.1007.a
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
			exists = scope:cat_survives
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	option = { #Vengeance!
		name = murder_save.1007.b
		trigger = {
			exists = scope:scheme_discovered
			exists = scope:cat_survives
		}
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	option = { #Who could do such a thing?
		name = murder_save.1007.c
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
			NOT = { exists = scope:cat_survives }
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	option = { #Vengeance!
		name = murder_save.1007.d
		trigger = {
			exists = scope:scheme_discovered
			NOT = { exists = scope:cat_survives }
		}
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	after = {
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
		if = {
			limit = {
				NOT = { exists = scope:cat_survives }
			}
			custom_tooltip = murder_save_creepy_crawlies_cat_dies
			show_as_tooltip = {
				remove_cat_story_modifiers_effect = yes
			}
			hidden_effect = {
				if = {
					limit = {
						owns_story_of_type = story_cycle_pet_cat
					}
					random_owned_story = {
						limit = {
							story_type = story_cycle_pet_cat
						}
						end_story = yes
					}
				}
			}
		}
	}
}

#Dog saves you
murder_save.1008 = {
	type = character_event
	title = murder_save.0008.t
	desc = murder_save.1008.desc
	left_portrait = {
		character = root
		animation = shock
	}
	right_portrait = {
		character = scope:owner_revealed
		animation = anger
	}
	theme = intrigue

	trigger = {
		exists = scope:murder_saved
		scope:murder_saved = flag:dog_save
	}

	immediate = {
		if = {
			limit = {
				exists = scope:scheme_discovered
			}
			scope:owner = {
				save_scope_as = owner_revealed
			}
		}
	}

	option = { #Who could do such a thing?
		name = murder_save.1008.a
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	option = { #Vengeance!
		name = murder_save.1001.b
		trigger = {
			exists = scope:scheme_discovered
		}
		custom_tooltip = murder_save.failure_known_owner_tt
	}
	after = {
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
	}
}

#Guile Legacy saves you
murder_save.1009 = {
	type = character_event
	title = murder_save.0009.t
	desc = {
		desc = murder_save.1009.opening
		first_valid = {
			triggered_desc = {
				trigger = { exists = scope:scheme_discovered }
				desc = murder_save.1009.owner_discovered
			}
			desc = murder_save.1009.owner_not_discovered
		}
		desc = murder_save.1009.end
	}
	theme = intrigue
	left_portrait = {
		character = root
		animation = scheme
	}
	right_portrait = {
		character = scope:owner_revealed
		animation = anger
	}

	trigger = {
		exists = scope:murder_saved
		scope:murder_saved = flag:guile_legacy_save
	}

	immediate = {
		add_character_flag = guile_legacy_5_save_used
		if = {
			limit = {
				exists = scope:scheme_discovered
			}
			scope:owner = {
				save_scope_as = owner_revealed
			}
		}
	}

	option = { #Who could do such a thing?
		name = murder_save.1009.a
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
		custom_tooltip = murder_save.used_up_guile_legacy_5_save
	}

	option = { #Vengeance!
		name = murder_save.1001.b
		trigger = {
			exists = scope:scheme_discovered
		}
		custom_tooltip = murder_save.failure_known_owner_tt
		custom_tooltip = murder_save.used_up_guile_legacy_5_save
	}

	after = {
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
		#To give players a notification if this character was important
		hidden_effect = {
			if = {
				limit = {
					dynasty = {
						any_dynasty_member = {
							is_ai = no
							OR = {
								any_vassal = {
									this = scope:target
								}
								any_close_family_member = {
									this = scope:target
								}
								any_consort = {
									this = scope:target
								}
							}
						}
					}
				}
				dynasty = {
					random_dynasty_member = {
						limit = {
							is_ai = no
							OR = {
								any_vassal = {
									this = scope:target
								}
								any_close_family_member = {
									this = scope:target
								}
								any_consort = {
									this = scope:target
								}
							}
						}
						send_interface_message = {
							type = event_spymaster_task_good
							title = murder_save.dynasty_member_used_guile_legacy_5_save
							desc = murder_save.dynasty_member_used_guile_legacy_5_save_desc

							left_icon = scope:target

						}
					}
				}
			}
		}
	}
}

#Varangian saves you from an assassin
murder_save.1010 = {
	type = character_event
	title = murder_save.0010.t
	desc = {
		desc = murder_save.1010.desc
		triggered_desc = {
			trigger = { exists = local_var:varangian_dies }
			desc = murder_save.1010.varangian_dies
		}
		triggered_desc = {
			trigger = { exists = scope:scheme_discovered }
			desc = murder_save.1010.owner_discovered
		}
	}
	left_portrait = {
		character = scope:varangian
		animation = pain
	}
	right_portrait = {
		character = scope:owner_revealed
		animation = anger
	}
	theme = murder_scheme

	trigger = {
		exists = scope:murder_saved
		scope:murder_saved = flag:varangian_stopped_assassin
		scope:target = {
			NOT = { has_character_flag = recently_saved_by_varangian }
		}
	}

	immediate = {
		add_character_flag = {
			flag = recently_saved_by_varangian
			years = 10
		}
		# Handle the death of the Varangian if necessary
		if = {
			limit = { exists = local_var:varangian_dies }
			save_scope_as = emperor

			# Warcraft
			# scope:varangian.liege = {
				# trigger_event = {
					# id = varangian.3001
					# days = 1
				# }
			# }

			if = {
				limit = {
					exists = scope:scheme_discovered
				}
				known_murder_effect = {
					VICTIM = scope:varangian
					MURDERER = root
					EXPOSER = scope:target
				}
			}
			else = {
				unknown_murder_effect = {
					VICTIM = scope:varangian
					MURDERER = root
					REASON = death_duel
				}
			}
		}
	}

	option = { #Who could do such a thing?
		name = murder_save.1010.a
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	option = { #Vengeance!
		name = murder_save.1010.b
		trigger = {
			exists = scope:scheme_discovered
		}
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	after = {
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
	}
}

#Cat saves you from poison
murder_save.1011 = {
	type = character_event
	title = murder_save.0011.t
	desc = murder_save.1011.desc
	left_portrait = {
		character = root
		animation = grief
	}
	right_portrait = {
		character = scope:owner_revealed
		animation = anger
	}
	theme = intrigue

	trigger = {
		exists = scope:murder_saved
		scope:murder_saved = flag:cat_poison_save
	}

	immediate = {
		if = {
			limit = {
				exists = scope:scheme_discovered
			}
			scope:owner = {
				save_scope_as = owner_revealed
			}
		}
	}

	option = { #Who could do such a thing?
		name = murder_save.1001.a
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	option = { #Vengeance!
		name = murder_save.1001.b
		trigger = {
			exists = scope:scheme_discovered
		}
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	after = {
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
		custom_tooltip = murder_save_poison_cat_dies
		show_as_tooltip = {
			remove_cat_story_modifiers_effect = yes
		}
		hidden_effect = {
			if = {
				limit = {
					owns_story_of_type = story_cycle_pet_cat
				}
				random_owned_story = {
					limit = {
						story_type = story_cycle_pet_cat
					}
					end_story = yes
				}
			}
		}
	}
}

#Dog saves you from poison
murder_save.1012 = {
	type = character_event
	title = murder_save.0012.t
	desc = murder_save.1012.desc
	left_portrait = {
		character = root
		animation = grief
	}
	right_portrait = {
		character = scope:owner_revealed
		animation = anger
	}
	theme = intrigue

	trigger = {
		exists = scope:murder_saved
		scope:murder_saved = flag:dog_poison_save
	}

	immediate = {
		if = {
			limit = {
				exists = scope:scheme_discovered
			}
			scope:owner = {
				save_scope_as = owner_revealed
			}
		}
	}

	option = { #Who could do such a thing?
		name = murder_save.1001.a
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	option = { #Vengeance!
		name = murder_save.1001.b
		trigger = {
			exists = scope:scheme_discovered
		}
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	after = {
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
		custom_tooltip = murder_save_poison_dog_dies
		show_as_tooltip = {
			remove_dog_story_modifiers_effect = yes
		}
		hidden_effect = {
			if = {
				limit = {
					owns_story_of_type = story_cycle_pet_dog
				}
				random_owned_story = {
					limit = {
						story_type = story_cycle_pet_dog
					}
					end_story = yes
				}
			}
		}
	}
}

#Gluttonous trait saved you
murder_save.1013 = {
	type = character_event
	title = murder_save.0013.t
	desc = murder_save.1013.desc
	left_portrait = {
		character = root
		animation = anger
	}
	right_portrait = {
		character = scope:owner_revealed
		animation = anger
	}
	theme = intrigue

	trigger = {
		exists = scope:murder_saved
		scope:murder_saved = flag:gluttonous_instinct
	}

	immediate = {
		if = {
			limit = {
				exists = scope:scheme_discovered
			}
			scope:owner = {
				save_scope_as = owner_revealed
			}
		}
	}

	option = { #Who could do such a thing?
		name = murder_save.1001.a
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	option = { #Vengeance!
		name = murder_save.1001.b
		trigger = {
			exists = scope:scheme_discovered
		}
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	after = {
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
	}
}

#Language saved you
murder_save.1014 = {
	type = character_event
	title = murder_save.0014.t
	desc = murder_save.1014.desc
	left_portrait = {
		character = root
		animation = anger
	}
	right_portrait = {
		character = scope:owner_revealed
		animation = rage
	}
	theme = intrigue

	trigger = {
		exists = scope:murder_saved
		scope:murder_saved = flag:language_save
	}

	immediate = {
		if = {
			limit = {
				exists = scope:scheme_discovered
			}
			scope:owner = {
				save_scope_as = owner_revealed
			}
		}
	}

	option = { #Who could do such a thing?
		name = murder_save.1014.a
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	option = { #Vengeance!
		name = murder_save.1001.b
		trigger = {
			exists = scope:scheme_discovered
		}
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	after = {
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
	}
}

#Artifact saved you
murder_save.1015 = {
	type = character_event
	title = murder_save.0015.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:this_artifact = {
						OR = {
							artifact_type = tapestry
							artifact_type = animal_hide
							artifact_type = animal_hide_big
							artifact_type = necklace
							artifact_type = wall_big
							#has_variable = christian_loincloth
							#has_variable = christian_girdle
						}

					}
				}
				desc = murder_save.1015.strangling_artifact.desc
			}
			triggered_desc = {
				trigger = {
					scope:this_artifact = {
						OR = {
							artifact_type = brooch
							artifact_type = philosophers_stone
							#has_variable = christian_veil
							#has_variable = buddhism_tongue
						}
					}
				}
				desc = murder_save.1015.small_artifact.desc
			}
			triggered_desc = {
				trigger = {
					scope:this_artifact = {
							artifact_type = throne
					}
				}
				desc = murder_save.1015.throne_artifact.desc
			}
			triggered_desc = {
				trigger = {
					scope:this_artifact = {
						artifact_type = throne_special
					}
				}
				desc = murder_save.1015.throne_special_artifact.desc
			}
			triggered_desc = {
				trigger = {
					scope:this_artifact = {
						OR = {
							artifact_type = sculpture
							artifact_type = cabinet
						}
					}
				}
				desc = murder_save.1015.sculpture_artifact.desc
			}
			triggered_desc = {
				trigger = {
					scope:this_artifact = {
						artifact_type = chest
					}
				}
				desc = murder_save.1015.chest_artifact.desc
			}
			triggered_desc = {
				trigger = {
					scope:this_artifact = {
						artifact_slot_type = primary_armament
					}
				}
				desc = murder_save.1015.actual_weapon_artifact.desc
			}
			triggered_desc = {
				desc = murder_save.1015.blunt_artifact.desc
			}
		}
	}
	theme = intrigue
	left_portrait = {
		character = root
		animation = anger
	}
	right_portrait = {
		character = scope:attempted_assassin
		animation = loss_1
	}
	artifact = {
        target = scope:this_artifact
        position = lower_center_portrait
    }

	trigger = {
		OR = {
			exists = root.capital_province
			exists = root.location.barony # In case the character is at sea
		}
		exists = scope:murder_saved
		scope:murder_saved = flag:artifact_save
	}

	immediate = {
		ROOT = {
			save_scope_as = target
		}
		scope:this_artifact = {
			set_variable = saved_from_assassination
		}

		if = {
			limit = {
				exists = capital_province
			}
			capital_province = {
				save_scope_as = home_province
			}
		}
		else = {
			location = {
				save_scope_as = home_province
			}
		}

		if = {
			limit = {
				any_pool_guest = {
					has_no_particular_noble_roots_trigger = yes
					is_available_ai_adult = yes
				}
			}

			random_pool_guest = {
				limit = {
					has_no_particular_noble_roots_trigger = yes
					is_available_ai_adult = yes
				}
				save_scope_as = attempted_assassin
			}
		}
		else = {
			create_character = {
				gender_female_chance = 50
				location = scope:home_province
				template_character = scope:target
				save_scope_as = attempted_assassin
			}
		}

		scope:attempted_assassin = {
			hidden_effect = {
				# Warcraft
				trigger_race_giving_no_gene_effect = yes			#Assigns race trait
				add_trait = peasant_leader
				if = {
					limit = {
						NOT = {
							has_trait = wounded_2
						}
					}
					increase_wounds_effect = { REASON = fight }
				}

				if = {
					limit = {
						NOT = {
							has_trait = wounded_2
						}
					}
					increase_wounds_effect = { REASON = fight }
				}
			}
		}
		if = {
			limit = {
				exists = scope:scheme_discovered
			}
			scope:owner = {
				save_scope_as = owner_revealed
			}
		}
	}

	option = { #Who could do such a thing?
		name = murder_save.1001.a
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
		}
		scope:this_artifact = {
			# Warcraft
			if = {
				limit = { artifact_can_be_damaged_trigger = yes }
				add_durability = {
					value = scope:this_artifact.artifact_durability
					multiply = -0.25
				}
			}
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	option = { #Vengeance!
		name = murder_save.1001.b
		trigger = {
			exists = scope:scheme_discovered
		}
		scope:this_artifact = {
			# Warcraft
			if = {
				limit = { artifact_can_be_damaged_trigger = yes }
				add_durability = {
					value = scope:this_artifact.artifact_durability
					multiply = -0.25
				}
			}
		}
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	after = {
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
		scope:attempted_assassin = {
			# Warcraft
			override_death_killer_artifact_effect = { death_reason = death_murder killer = scope:target artifact = scope:this_artifact }
		}

		if = {
			limit = {
				scope:target = {
					highest_held_title_tier >= tier_kingdom
				}
			}
			scope:this_artifact = {
				if = {
					limit = {
						OR = {
							artifact_type = tapestry
							artifact_type = animal_hide
							artifact_type = animal_hide_big
							artifact_type = wall_big
						}
					}
					set_artifact_description = new_artifact_loc_banner
				}
				else = {
					set_artifact_description = new_artifact_loc
				}
			}
		}
	}
}

#Murder succeeds
murder_save.9999 = {
	type = character_event
	hidden = yes

	trigger = { exists = scope:scheme }

	immediate = {
		trigger_event = {
			on_action = murder_succeeded
		}
	}
}
