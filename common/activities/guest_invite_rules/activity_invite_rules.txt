### ACTIVITY INVITE RULES ###

activity_invite_rule_landed_family = {
	effect = {
		every_close_or_extended_family_member = {
			limit = {
				# Remove diarchs from the list.
				is_landed = yes
				bannable_serving_diarch_trigger = no
			}
			add_to_list = characters
		}
	}
}

activity_invite_rule_allies_and_player_vassals = {
	effect = {
		ordered_ally = {
			limit = { is_landed = yes }
			max = 5
			order_by = max_military_strength
			add_to_list = characters
		}
		every_vassal_or_below = {
			limit = { is_ai = no }
			add_to_list = characters
		}
	}
}

# Friends, Best Friends
activity_invite_rule_friends = {
	effect = {
		every_relation = {
			type = friend
			limit = {
				# Remove diarchs from the list.
				bannable_serving_diarch_trigger = no
			}
			add_to_list = characters
		}
	}
}

# Rivals, Nemeses
activity_invite_rule_rivals = {
	effect = {
		every_relation = {
			type = rival
			limit = {
				# Remove diarchs from the list.
				bannable_serving_diarch_trigger = no
			}
			add_to_list = characters
		}
	}
}
activity_invite_rule_rivals_if_appropriate = {
	effect = {
		if = {
			limit = {
				# Some characters are willing to have rivals over.
				OR = {
					# Players are eclectic.
					is_ai = no
					# Such as folks they _really_ want dead.
					AND = {
						has_activity_intent = murder_attendee_intent
						intent_target = { has_relation_rival = root }
					}
					involved_activity = {
						has_activity_option = {
							category = special_type
							option = feast_type_murder
						}
					}
					# Or if they're just someone who tries to build bridges.
					has_trait = forgiving
					# Or someone who might prefer the company regardless.
					AND = {
						NOT = { has_trait = vengeful }
						# Because they like people.
						has_trait = gregarious
						has_trait = compassionate
						# Because they can be a bit arbitrary.
						has_trait = fickle
						has_trait = arbitrary
						# Or because they like to gloat.
						has_trait = arrogant
					}
				}
			}
			every_relation = {
				type = rival
				limit = {
					# Remove diarchs from the list.
					bannable_serving_diarch_trigger = no
				}
				add_to_list = characters
			}
		}
	}
}

# Lovers, Soulmates
activity_invite_rule_lovers = {
	effect = {
		every_relation = {
			type = lover
			limit = {
				# Remove diarchs from the list.
				bannable_serving_diarch_trigger = no
			}
			add_to_list = characters
		}
	}
}

# Children, Grandchildren, Parents, Grandparents
activity_invite_rule_close_family = {
	effect = {
		every_close_family_member = {
			limit = {
				# Remove diarchs from the list.
				bannable_serving_diarch_trigger = no
			}
			add_to_list = characters
		}
	}
}

# Uncles, Aunts, Niblings, Cousins
activity_invite_rule_extended_family = {
	effect = {
		every_extended_family_member = {
			limit = {
				# Remove diarchs from the list.
				bannable_serving_diarch_trigger = no
			}
			add_to_list = characters
		}
	}
}

# Liege
activity_invite_rule_liege = {
	effect = {
		liege ?= {
			if = {
				limit = {
					# Remove diarchs from the list.
					bannable_serving_diarch_trigger = no
				}
				add_to_list = characters
			}
		}
	}
}

# Direct Vassals
activity_invite_rule_vassals = {
	effect = {
		every_vassal = {
			limit = {
				# Remove diarchs from the list.
				bannable_serving_diarch_trigger = no
			}
			add_to_list = characters
		}
	}
}

# Fellow Vassals
activity_invite_rule_fellow_vassals = {
	effect = {
		if = {
			limit = {
				is_independent_ruler = no
			}
			liege = {
				every_vassal = {
					limit = {
						# Remove diarchs from the list.
						bannable_serving_diarch_trigger = no
					}
					add_to_list = characters
				}
			}
		}
	}
}

# Neighbouring Rulers
activity_invite_neighbouring_rulers = {
	effect = {
		top_liege ?= {
			every_neighboring_and_across_water_top_liege_realm_owner = {
				limit = {
					# Remove diarchs from the list.
					bannable_serving_diarch_trigger = no
				}
				add_to_list = characters
			}
		}
	}
}

# Knights
activity_invite_rule_knights = {
	effect = {
		every_knight = {
			limit = {
				is_landed = no
				# Remove diarchs from the list.
				bannable_serving_diarch_trigger = no
			}
			add_to_list = characters
		}
	}
}

# Non-Knight Courtiers
activity_invite_rule_courtiers = {
	effect = {
		every_courtier = {
			limit = {
				is_knight = no
				is_landed = no
				# Remove diarchs from the list.
				bannable_serving_diarch_trigger = no
			}
			add_to_list = characters
		}
	}
}

# Pool Guests, Foreign Guests
activity_invite_rule_guests = {
	effect = {
		every_pool_guest = {
			limit = {
				# Remove diarchs from the list.
				bannable_serving_diarch_trigger = no
			}
			add_to_list = characters
		}
		every_foreign_court_guest = {
			limit = {
				# Remove diarchs from the list.
				bannable_serving_diarch_trigger = no
			}
			add_to_list = characters
		}
	}
}

# Known House Witches
activity_invite_rule_house_witches = {
	effect = {
		house ?= {
			every_house_member = {
				limit = {
					has_trait = witch
					# Remove diarchs from the list.
					bannable_serving_diarch_trigger = no
				}
				add_to_list = characters
			}
		}
	}
}

# Known non-House Witches
activity_invite_rule_other_witches = {
	effect = {
		# Vassals
		every_vassal_or_below = {
			limit = {
				has_trait = witch
				# Remove diarchs from the list.
				bannable_serving_diarch_trigger = no
			}
			add_to_list = characters
		}
		# Non-House Family
		every_close_or_extended_family_member = {
			limit = {
				has_trait = witch
				# Remove diarchs from the list.
				bannable_serving_diarch_trigger = no
			}
			add_to_list = characters
		}
		# Spouses
		every_spouse = {
			limit = {
				has_trait = witch
				# Remove diarchs from the list.
				bannable_serving_diarch_trigger = no
			}
			add_to_list = characters
		}
		# Liege
		liege ?= {
			if = {
				limit = {
					has_trait = witch
					# Remove diarchs from the list.
					bannable_serving_diarch_trigger = no
				}
				add_to_list = characters
			}
		}
		# Lovers
		every_relation = {
			type = lover
			limit = {
				has_trait = witch
				# Remove diarchs from the list.
				bannable_serving_diarch_trigger = no
			}
			add_to_list = characters
		}
		# Friends
		every_relation = {
			type = friend
			limit = {
				has_trait = witch
				# Remove diarchs from the list.
				bannable_serving_diarch_trigger = no
			}
			add_to_list = characters
		}
		# Courtiers
		every_courtier_or_guest = {
			limit = {
				has_trait = witch
				# Remove diarchs from the list.
				bannable_serving_diarch_trigger = no
			}
			add_to_list = characters
		}
		# Foreign Guests
		every_foreign_court_guest = {
			limit = {
				has_trait = witch
				# Remove diarchs from the list.
				bannable_serving_diarch_trigger = no
			}
			add_to_list = characters
		}
		# Other Known Secrets
		every_known_secret = {
			limit = {
				secret_type = secret_witch
				# Remove diarchs from the list.
				secret_owner = { bannable_serving_diarch_trigger = no }
			}
			secret_owner = { add_to_list = characters }
		}
	}
}

# All lieges and above
activity_invite_rule_all_lieges = {
	effect = {
		every_liege_or_above = {
			limit = {
				# Remove diarchs from the list.
				bannable_serving_diarch_trigger = no
			}
			add_to_list = characters
		}
	}
}

# Head of Faith
activity_invite_rule_hof = {
	effect = {
		faith.religious_head ?= {
			if = {
				limit = {
					# Remove diarchs from the list.
					bannable_serving_diarch_trigger = no
				}
				add_to_list = characters
			}
		}
	}
}

# Player Heir
activity_invite_rule_player_heir = {
	effect = {
		player_heir ?= {
			if = {
				limit = {
					# Remove diarchs from the list.
					bannable_serving_diarch_trigger = no
				}
				add_to_list = characters
			}
		}
	}
}

activity_invite_rule_hunters = {
	effect = {
		court_position:master_of_hunt_court_position ?= {
			if = {
				limit = {
					# Remove diarchs from the list.
					bannable_serving_diarch_trigger = no
				}
				add_to_list = characters
			}
		}
		every_vassal = {
			limit = {
				has_trait = lifestyle_hunter
				# Remove diarchs from the list.
				bannable_serving_diarch_trigger = no
			}
			add_to_list = characters
		}
		every_courtier_or_guest = {
			limit = {
				has_trait = lifestyle_hunter
				# Remove diarchs from the list.
				bannable_serving_diarch_trigger = no
			}
			add_to_list = characters
		}
	}
}

activity_invite_rule_glory_hounds = {
	effect = {
		every_vassal = {
			limit = {
				has_vassal_stance = glory_hound
				# Remove diarchs from the list.
				bannable_serving_diarch_trigger = no
			}
			add_to_list = characters
		}
	}
}

#Close family of both spouses in a Grand Wedding
activity_invite_spouses_close_family = {
	effect = {
		var:promised_grand_wedding_marriage_countdown ?= {
			every_close_family_member = {
				limit = {
					# Remove diarchs from the list.
					bannable_serving_diarch_trigger = no
				}
				add_to_list = characters
			}
			betrothed = {
				every_close_family_member = {
					limit = {
						# Remove diarchs from the list.
						bannable_serving_diarch_trigger = no
					}
					add_to_list = characters
				}
			}
		}
	}
}

#Extended family of both spouses in a Grand Wedding
activity_invite_spouses_extended_family = {
	effect = {
		var:promised_grand_wedding_marriage_countdown ?= {
			every_extended_family_member = {
				limit = {
					# Remove diarchs from the list.
					bannable_serving_diarch_trigger = no
				}
				add_to_list = characters
			}
			betrothed = {
				every_extended_family_member = {
					limit = {
						# Remove diarchs from the list.
						bannable_serving_diarch_trigger = no
					}
					add_to_list = characters
				}
			}
		}
	}
}

activity_invite_rule_siblings = {
	effect = {
		every_sibling = {
			limit = {
				# Remove diarchs from the list.
				bannable_serving_diarch_trigger = no
			}
			add_to_list = characters
		}
	}	
}

activity_invite_rule_crushes = {
	effect = {
		every_relation = {
			type = crush
			limit = {
				# Remove diarchs from the list.
				bannable_serving_diarch_trigger = no
			}
			add_to_list = characters
		}
	}
}

activity_invite_rule_personal_scheme_targets = {
	effect = {
		every_scheme = {
			limit = {
				OR = {
					scheme_type = befriend
					scheme_type = sway
					scheme_type = learn_language
				}
				# Remove diarchs from the list.
				## I mean they shouldn't ever be in here but on the off chance that they _are_ let's not compound the bugs.
				scheme_target = { bannable_serving_diarch_trigger = no }
			}
			scheme_target ?= { add_to_list = characters }
		}
	}
}

activity_invite_rule_powerful_vassals_children = {
	effect = {
		every_powerful_vassal = { #Prioritize powerful vassal's children, and heirs
			every_child = { add_to_list = characters }
		}
	}
}

# Fellow Vassals
activity_invite_rule_fellow_vassals_children = {
	effect = {
		liege ?= {
			every_vassal = {
				every_child = { add_to_list = characters }
			}
		}
	}
}

activity_invite_rule_vassals_children = {
	effect = {
		every_vassal = {
			limit = {
				NOT = { is_powerful_vassal = yes }
			}
			every_child = { add_to_list = characters }
		}
	}
}

activity_invite_spouses = {
	effect = {
		every_spouse = {
			add_to_list = characters
		}
	}
}

activity_invite_mp = {
	effect = {
		every_player = {
			add_to_list = characters
		}
	}
}
