# The outcome of a court scheme

namespace = court_outcome

# NOTE: To set up a new scheme outcome, make sure that you make an event for the owner and one for the target, and add them to their relevant on_actions.


# 0000-0999: Maintenance events

#Outcome events
# court_outcome.1000 - Wolf attack
# court_outcome.1100 - Defend them from thief! ...or lover


######################################################
# MAINTENANCE EVENTS
# 0000-0999
######################################################

# Player-Only Event: Scheme target selects outcome
#   Can pick soulmate success / kiss success / failure
#   Only successes have an outcome event for player target, failure ends it here for player target

court_outcome.0003 = { #by Mathilda Bjarnehed & Petter Vilberg
	type = character_event
	title = court_outcome.0003.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { exists = scope:scheme_successful }
				desc = court_outcome.0003.success.desc
			}
			desc = court_outcome.0003.failure.desc
		}
	}
	theme = romance_scheme
	left_portrait = scope:owner

	#Success: I want to be your soulmate
	option = {
		trigger = { can_set_relation_soulmate_trigger = { CHARACTER = scope:owner } }
		name = court_outcome.0003.a
		
		custom_tooltip = court_outcome.0003.a.tt

		reverse_add_opinion = {
			target = scope:owner
			modifier = love_opinion
			opinion = 30
		}
		
		
		save_scope_value_as = {
			name = scheme_successful
			value = yes
		}
		
	}

	#Success: Okay, we can kiss, but it ends there
	option = {
		name = {
			trigger = { exists = scope:scheme_successful }
			text = court_outcome.0003.b.success
		}
		name = {
			trigger = { NOT = { exists = scope:scheme_successful } }
			text = court_outcome.0003.b.failure
		}
		custom_tooltip = court_outcome.0003.b.tt

		reverse_add_opinion = {
			target = scope:owner
			modifier = love_opinion
			opinion = 30
		}

		scope:scheme = { #Blocks "become soulmate" option against player characters
			save_scope_value_as = {
				name = no_soulmate
				value = yes
			}
		}
		save_scope_value_as = {
			name = scheme_successful
			value = yes
		}
	}
	
	#Failure
	option = {
		name = court_outcome.0003.c

		save_scope_value_as = {
			name = scheme_successful
			value = no
		}

		scope:scheme = {
			show_as_tooltip = {
				end_scheme = yes
			}
		}
	}

	after = {
		scope:owner = {
			trigger_event = {
				on_action = court_outcome
				days = 1 # Remove this delay after testing
			}
		}
	}
}

scripted_trigger available_other_romance_suitor_trigger = {
	basic_is_available_ai = yes
	NOR = {
		is_consort_of = scope:target
		this = scope:owner
	}
}

scripted_trigger target_has_other_romance_suitor_trigger = {
	scope:target = { is_ai = yes }
	OR = {
		scope:target = {
			OR = {
				any_relation = {
					type = lover
					available_other_romance_suitor_trigger = yes
				}
				any_relation = {
					type = potential_lover
					available_other_romance_suitor_trigger = yes
				}
			}
		}
	}
}


######################################################
# OUTCOME EVENTS
# 1000-1999
######################################################

#####################
# Wolf attack outcome
####################

# OWNER CHOICE
court_outcome.1000 = { #by Mathilda Bjarnehed
	type = character_event
	title = court_outcome.1000.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:target = { is_courtier_of = root } }
				desc = court_outcome.1000.i_invite.desc
			}
			triggered_desc = {
				trigger = { scope:target = { is_ruler = yes } }
				desc = court_outcome.1000.own_invite.desc
			}
			desc = court_outcome.1000.liege_invite.desc
		}
		desc = court_outcome.1000.end.desc
	}
	theme = romance_scheme
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		scope:owner = { prowess > low_skill_rating } # They need to be able to shoot the wolf
	}
	
	immediate = {
		
		if = {
			limit = { exists = scope:target.host }
			scope:target.host = { save_scope_as = target_host }
		}
		if = {
			limit = { NOT = { exists = scope:target_host } }
			scope:target.location.province_owner = { save_scope_as = target_host }
		}
	}

	#Go ahead: save them
	option = {
		name = court_outcome.1000.a
		custom_tooltip = court_outcome.0001.a.tt

		hidden_effect = {
			if = {
				limit = {
					exists = scope:scheme_successful
					exists = scope:target.location
					scope:scheme_successful = yes
				}
				trigger_event = {
					id = court_outcome.1001
					days = 3
				}
			}
			else = {
				random_list = {
					1 = { #Regular failure (they don't need your help)
						trigger_event = {
							id = court_outcome.1002
							days = 2
						}
					}
					2 = { #Other lover failure
						trigger = {
							target_has_other_romance_suitor_trigger = yes
						}
						trigger_event = {
							id = court_outcome.1005
							days = 2
						}
					}
				}
			}		
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
   				ai_boldness = 1
			}
		}
	}

	#Call someone else for help
	option = {
		trigger = { court_allow_owner_opt_out_trigger = yes }
		name = court_outcome.1000.b

		add_prestige = minor_prestige_loss

		scope:scheme = {
			end_scheme = yes
		}

		stress_impact = {
			brave = major_stress_impact_gain
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
   				ai_boldness = -1
			}
			modifier = {
				factor = 0.01
				has_trait = brave
			}
		}
	}

	#That probably was nothing
	option = {
		trigger = {
			court_allow_owner_opt_out_trigger = yes
			scope:target = { is_ai = yes }
		}
		name = court_outcome.1000.c

		scope:scheme = {
			end_scheme = yes
		}

		random_list = {
			1 = {
				desc = court_outcome.1000.b.failure
				send_interface_toast = {
					title = court_outcome.1000.b.failure
					left_icon = scope:target
					scope:target = { increase_wounds_effect = { REASON = hunting_accident } }
				}
			}	
			2 = {
				desc = court_outcome.1000.b.success
				send_interface_toast = {
					title = court_outcome.1000.b.success
					left_icon = scope:target
				}
			}
		}
		ai_chance = {
			base = 25
		}
	}
}


# OWNER SUCCESS: You save target from a wolf!
court_outcome.1001 = { #by Mathilda Bjarnehed
	type = character_event
	title = court_outcome.1000.t
	desc = court_outcome.1001.desc
	theme = romance_scheme
	left_portrait = {
		character = scope:target
		animation = fear
	}

	immediate = {
		play_music_cue = mx_cue_seduction
		court_success_prestige_effect = yes
		dangerous_animal_effect = { CHARACTER = scope:target }
	}
	
	#Consummate love
	option = {
		trigger = {
			can_set_relation_soulmate_trigger = { CHARACTER = scope:target }
			
			# Player target has opted out of being soulmates.
			custom_description = {
				text = does_not_want_to_be_soulmates
				object = scope:target
				NOT = { exists = scope:no_soulmate }
			}
		}
		show_as_unavailable = {
			exists = scope:no_soulmate
		}
		name = court_outcome.1001.a

		save_scope_value_as = {
			name = become_soulmate
			value = yes
		}

		show_as_tooltip = { end_court_scheme_effect = { OUTCOME = success_soulmate REASON = saved_from_wolf } } #Tooltip as this will be executed in target's scope

		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_compassion = low_chance_impact_positive_ai_value #Up to 100 for high compassion
			}
			ai_value_modifier = {
				ai_boldness = low_chance_impact_positive_ai_value #Up to 100 for high boldness
			}
			modifier = {
				num_of_relation_soulmate > 0
				culture = {
					has_cultural_parameter = ai_romance_scheme_increase
				}
				factor = 0.01
			}
		}
	}

	#Just kiss
	option = {
		name = court_outcome.1001.b

		end_court_scheme_effect = { OUTCOME = success_kiss REASON = saved_from_wolf }

		save_scope_value_as = {
			name = become_soulmate
			value = no
		}
		
		ai_chance = {
			base = 100
			modifier = {
				has_trait = lustful
				add = -50
			}
			modifier = {
				scope:target = { is_ai = no } #Players will always get their way
				add = -100
			}
		}
	}

	after = {
		scope:target = { trigger_event = court_outcome.1003 }
	}
}

# OWNER FAILURE: Target was fine without your help
court_outcome.1002 = { #by Mathilda Bjarnehed
	type = character_event
	title = court_outcome.1000.t
	desc = court_outcome.1002.desc
	
	theme = romance_scheme
	left_portrait = {
		character = scope:target
		animation = dismissal
	}

	immediate = {
		play_music_cue = mx_cue_death
	}
	
	option = {
		name = court_outcome.1002.a

		end_court_scheme_effect = { OUTCOME = failure_soft REASON = saved_from_wolf }
	}
}

# OWNER FAILURE: Target has another lover...
scripted_effect court_outcome_1005_targets_lover_effect = {
	#Select a lover
	hidden_effect = {
		scope:target = {
			every_relation = {
				type = potential_lover
				limit = { available_other_romance_suitor_trigger = yes }
				add_to_list = targets_lovers_list
			}
			every_relation = {
				type = lover
				limit = { available_other_romance_suitor_trigger = yes }
				add_to_list = targets_lovers_list
			}
			random_in_list = {
				list = targets_lovers_list
				limit = {
					has_relation_rival = scope:owner
					available_other_romance_suitor_trigger = yes
				}
				alternative_limit = { available_other_romance_suitor_trigger = yes }

				if = {
					limit = {
						has_relation_potential_lover = scope:target
						can_set_relation_lover_trigger = { CHARACTER = scope:target }
					}
					set_relation_lover = { reason = lover_court_scheme_lover target = scope:target involved_character = root }
				}
				save_scope_as = targets_lover
			}
		}
		#We set the potential here, and then you can upgrade it in the option
		if = {
			limit = {
				can_set_relation_potential_rival_trigger = { CHARACTER = scope:targets_lover }
			}
			set_relation_potential_rival = scope:targets_lover
		}
	}
	#Reveal the secret
	scope:target = {
		random_secret = {
			limit = {
				secret_type = secret_lover
				secret_target = scope:targets_lover
			}
			reveal_to = scope:owner
		}
	}
}

court_outcome.1005 = { #by Mathilda Bjarnehed
	type = character_event
	title = court_outcome.1000.t
	desc = court_outcome.1005.desc
	theme = romance_scheme
	left_portrait = {
		character = scope:target
		animation = happiness
		triggered_outfit = {
			remove_default_outfit = yes
			outfit_tags = { no_clothes }
		}
	}
	right_portrait = {
		character = scope:targets_lover
		animation = happiness
		triggered_outfit = {
			remove_default_outfit = yes
			outfit_tags = { no_clothes }
		}
	}

	immediate = {
		play_music_cue = mx_cue_death
		# Selects a lover and reveals secret
		court_outcome_1005_targets_lover_effect = yes
	}
	
	#Leave them with a broken heart
	option = {
		name = court_outcome.1005.a

		end_court_scheme_effect = { OUTCOME = failure_soft REASON = saved_from_wolf }
	
		stress_impact = {
			vengeful = major_stress_impact_gain
			wrathful = medium_stress_impact_gain
			callous = minor_stress_impact_gain
			sadistic = medium_stress_impact_gain
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_compassion = 2
				ai_vengefulness = -2
				ai_boldness = -1
				ai_honor = 2
			}
		}	
	}

	#Nemesis
	option = {
		name = court_outcome.1005.b
		trigger = {
			OR = {
				can_set_relation_rival_trigger = { CHARACTER = scope:targets_lover }
				can_set_relation_nemesis_trigger = { CHARACTER = scope:targets_lover }
			}
		}

		if = {
			limit = { NOT = { has_relation_rival = scope:targets_lover } }
			set_relation_rival = {
				target = scope:targets_lover
				reason = rival_lover_jealousy
			}
		}
		else = {
			set_relation_nemesis = {
				target = scope:targets_lover
				involved_character = scope:target
				copy_reason = rival
				reason = nemesis_lover_jealousy
			}
		}

		end_court_scheme_effect = { OUTCOME = failure_soft REASON = saved_from_wolf }

		stress_impact = {
			forgiving = minor_stress_impact_gain
		}
		ai_chance = {
			base = 100
		}
	}

	#Shoot targets_lover!
	option = {
		name = court_outcome.1005.c

		duel = {
			skill = prowess
			value = average_skill_rating

			25 = { #You hit them, undiscovered
				compare_modifier = {
					value = scope:duel_value
					multiplier = 1.5
				}
				desc = court_outcome.1005.c.murder_undiscovered
				send_interface_toast = {
					title = court_outcome.1005.c.murder_undiscovered
					left_icon = scope:target
					right_icon = scope:targets_lover
					unknown_murder_effect = {
						VICTIM = scope:targets_lover
						MURDERER = scope:owner
						REASON = death_hunting_accident
					}
				}
			}
			25 = { #You hit them, discovered
				compare_modifier = {
					value = scope:duel_value
					multiplier = 1.5
				}
				desc = court_outcome.1005.c.murder_discovered
				send_interface_toast = {
					title = court_outcome.1005.c.murder_discovered
					left_icon = scope:target
					right_icon = scope:targets_lover
					known_murder_effect = {
						VICTIM = scope:targets_lover
						MURDERER = scope:owner
						EXPOSER = scope:target
					}
				}
			}
			50 = { #You miss
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3
				}
				desc = court_outcome.1005.c.murder_attempt
				send_interface_toast = {
					title = court_outcome.1005.c.murder_attempt
					left_icon = scope:target
					right_icon = scope:targets_lover
					add_secret = {
						type = secret_murder_attempt
						target = scope:targets_lover
					}
				}
			}
		}

		end_court_scheme_effect = { OUTCOME = failure_hard REASON = saved_from_wolf }

		stress_impact = {
			forgiving = major_stress_impact_gain
			compassionate = medium_stress_impact_gain
			honest = minor_stress_impact_gain
			craven = minor_stress_impact_gain
			lazy = minor_stress_impact_gain
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_compassion = -2
				ai_vengefulness = 3
				ai_boldness = 1
				ai_honor = -1
			}
		}	
	}

	#Shoot target!
	option = {
		name = court_outcome.1005.d

		duel = {
			skill = prowess
			value = average_skill_rating

			25 = { #You hit them, undiscovered
				compare_modifier = {
					value = scope:duel_value
					multiplier = 1.5
				}
				desc = court_outcome.1005.d.murder_undiscovered
				send_interface_toast = {
					title = court_outcome.1005.d.murder_undiscovered
					left_icon = scope:target
					right_icon = scope:targets_lover
					unknown_murder_effect = {
						VICTIM = scope:target
						MURDERER = scope:owner
						REASON = death_hunting_accident
					}
				}
			}
			25 = { #You hit them, discovered
				compare_modifier = {
					value = scope:duel_value
					multiplier = 1.5
				}
				desc = court_outcome.1005.d.murder_discovered
				send_interface_toast = {
					title = court_outcome.1005.d.murder_discovered
					left_icon = scope:target
					right_icon = scope:targets_lover
					known_murder_effect = {
						VICTIM = scope:target
						MURDERER = scope:owner
						EXPOSER = scope:targets_lover
					}
				}
			}
			50 = { #You miss
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3
				}
				desc = court_outcome.1005.c.murder_attempt
				send_interface_toast = {
					title = court_outcome.1005.c.murder_attempt
					left_icon = scope:target
					right_icon = scope:targets_lover
					add_secret = {
						type = secret_murder_attempt
						target = scope:target
					}
				}
			}
		}

		end_court_scheme_effect = { OUTCOME = failure_hard REASON = saved_from_wolf }

		stress_impact = {
			forgiving = major_stress_impact_gain
			compassionate = medium_stress_impact_gain
			honest = minor_stress_impact_gain
			craven = minor_stress_impact_gain
			lazy = minor_stress_impact_gain
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_compassion = -2
				ai_vengefulness = 4
				ai_boldness = 1
				ai_honor = -1
			}
		}
	}
}


#TARGET SUCCES: is informed about outcome
court_outcome.1003 = { #by Mathilda Bjarnehed
	type = character_event
	title = court_outcome.1003.t
	desc = court_outcome.1004.desc
	
	theme = romance_scheme
	left_portrait = {
		character = scope:owner
		animation = personality_bold
	}

	immediate = {
		play_music_cue = mx_cue_seduction
	}
	
	option = {
		name = {
			trigger = { scope:become_soulmate = yes }
			text = court_outcome.1001.a
		}
		name = {
			trigger = { scope:become_soulmate = no }
			text = court_outcome.1003.b
		}

		if = {
			limit = { scope:become_soulmate = yes }
			end_court_scheme_effect = { OUTCOME = success_soulmate REASON = saved_from_wolf }
		}
		#No need to show kiss outcome as it has no effect for target, it's executed in owner's scope before
	}
}


##################
# Thief outcome
##################


court_outcome.1100 = { #by Mathilda Bjarnehed
	type = character_event
	title = court_outcome.1100.t
	desc = {
		desc = court_outcome.1100.start.desc
		first_valid = {
			triggered_desc = {
				trigger = { scope:target = { is_ruler = yes } }
				desc = court_outcome.1100.targets_residence.desc
			}
			triggered_desc = {
				trigger = { exists = scope:target.host 
					NOT = { scope:owner = scope:target.host }
				}
				desc = court_outcome.1100.targets_host_residence.desc
			}
			desc = court_outcome.1100.my_residence.desc
		}
		desc = court_outcome.1100.end.desc
	}
	theme = romance_scheme
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	immediate = {
		if = {
			limit = { exists = scope:target.host }
			scope:target.host = { save_scope_as = target_host }
		}
		if = {
			limit = {
				NOT = { exists = scope:target_host }
				exists = location
			}
			scope:target.location.province_owner = { save_scope_as = target_host }
		}
	}
	

	#Go ahead: save them
	option = {
		name = court_outcome.1100.a
		custom_tooltip = court_outcome.0001.a.tt

		hidden_effect = {
			if = {
				limit = {
					exists = scope:scheme_successful
					scope:scheme_successful = yes
				}
				trigger_event = {
					id = court_outcome.1101
					days = 3
				}
			}
			else = {
				random_list = {
					1 = { #Regular failure (they don't need your help)
						trigger_event = {
							id = court_outcome.1102
							#days = 2 # let's make this instant
						}
					}
					2 = { #Other lover failure
						trigger = {
							target_has_other_romance_suitor_trigger = yes
						}
						trigger_event = {
							id = court_outcome.1103

						}
					}
				}
			}		
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
   				ai_boldness = 1
			}
		}
	}

	#Call for the guards
	option = {
		trigger = { court_allow_owner_opt_out_trigger = yes }
		name = court_outcome.1100.b

		if = {
			limit = { exists = scope:target_host 
				NOT = { scope:owner = scope:target.host }
			}
			reverse_add_opinion = {
				modifier = suspicion_opinion
				target = scope:target_host
				opinion = -10
			}
		}
		else = {
			reverse_add_opinion = {
				modifier = grateful_opinion
				target = scope:target
				opinion = 10
			}
		}

		scope:scheme = {
			end_scheme = yes
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
   				ai_boldness = -1
			}
			modifier = {
				factor = 0.01
				has_trait = brave
			}
		}
	}

	#That probably was nothing
	option = {
		trigger = {
			court_allow_owner_opt_out_trigger = yes
			scope:target = { is_ai = yes }
		}
		name = court_outcome.1100.c

		scope:scheme = {
			end_scheme = yes
		}

		random_list = {
			1 = {
				desc = court_outcome.1100.b.failure
				send_interface_toast = {
					title = court_outcome.1100.b.failure
					left_icon = scope:target
					scope:target = { increase_wounds_effect = { REASON = mysterious } }
				}
			}	
			2 = {
				desc = court_outcome.1100.b.success
				send_interface_toast = {
					title = court_outcome.1100.b.success
					left_icon = scope:target
				}
			}
		}
		ai_chance = {
			base = 25
		}
	}
}


# OWNER SUCCESS: You save target from the burglar/comfort target!
court_outcome.1101 = { #by Mathilda Bjarnehed
	type = character_event
	title = court_outcome.1100.t
	desc = {
		desc = court_outcome.1101.start.desc
		first_valid = {
			triggered_desc = {
				trigger = { prowess >= scope:target.prowess }
				desc = court_outcome.1101.owner_fights.desc
			}
			desc = court_outcome.1101.target_fights.desc
		}
		desc = court_outcome.1101.end.desc
	}
	theme = romance_scheme
	left_portrait = {
		character = scope:target
		triggered_animation = {
			trigger = { prowess >= scope:target.prowess }
			animation = anger
		}
		triggered_animation = {
			trigger = { always = yes }
			animation = fear
		}
	}

	immediate = {
		play_music_cue = mx_cue_seduction
		court_success_prestige_effect = yes
	}
	
	#Consummate love
	option = {
		trigger = {
			can_set_relation_soulmate_trigger = { CHARACTER = scope:target }
			NOT = { exists = scope:no_soulmate } # Players can always opt out of being soulmates.
		}
		show_as_unavailable = {
			exists = scope:no_soulmate
		}
		name = court_outcome.1101.a

		save_scope_value_as = {
			name = become_soulmate
			value = yes
		}

		show_as_tooltip = { end_court_scheme_effect = { OUTCOME = success_soulmate REASON = saved_from_thief } } #Tooltip as this will be executed in target's scope

		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_compassion = low_chance_impact_positive_ai_value #Up to 100 for high compassion
			}
			ai_value_modifier = {
				ai_boldness = low_chance_impact_positive_ai_value #Up to 100 for high boldness
			}
			modifier = {
				num_of_relation_soulmate > 0
				culture = {
					has_cultural_parameter = ai_romance_scheme_increase
				}
				factor = 0.01
			}
		}
	}

	#Just kiss
	option = {
		name = court_outcome.1001.b

		end_court_scheme_effect = { OUTCOME = success_kiss REASON = saved_from_thief }

		save_scope_value_as = {
			name = become_soulmate
			value = no
		}
		
		ai_chance = {
			base = 100
			modifier = {
				has_trait = lustful
				add = -50
			}
			modifier = {
				scope:target = { is_ai = no } #Players will always get their way
				add = -100
			}
		}
	}

	after = {
		scope:target = { trigger_event = court_outcome.1105 }
	}
}


# OWNER FAILURE: Target was fine without your help/is scared
court_outcome.1102 = { #by Mathilda Bjarnehed
	type = character_event
	title = court_outcome.1100.t
	desc = {
		desc = court_outcome.1101.start.desc
		first_valid = {
			triggered_desc = {
				trigger = { prowess >= scope:target.prowess }
				desc = court_outcome.1101.owner_fights.desc
			}
			desc = court_outcome.1101.target_fights.desc
		}
		desc = court_outcome.1102.end.desc
	}
	
	theme = romance_scheme
	left_portrait = {
		character = scope:target
		animation = rage
	}

	immediate = {
		play_music_cue = mx_cue_death
	}
	
	option = {
		name = court_outcome.1102.a

		end_court_scheme_effect = { OUTCOME = failure_soft REASON = saved_from_thief }
	}
}


# OWNER FAILURE: Target has another lover...
court_outcome.1103 = { #by Mathilda Bjarnehed
	type = character_event
	title = court_outcome.1100.t
	desc = court_outcome.1103.desc
	theme = romance_scheme
	left_portrait = {
		character = scope:target
		animation = flirtation
		triggered_outfit = {
			remove_default_outfit = yes
			outfit_tags = { no_clothes }
		}
	}
	right_portrait = {
		character = scope:targets_lover
		animation = flirtation_left
		triggered_outfit = {
			remove_default_outfit = yes
			outfit_tags = { no_clothes }
		}
	}

	immediate = {
		play_music_cue = mx_cue_death
		# Selects a lover and reveals secret
		court_outcome_1005_targets_lover_effect = yes
	}
	
	#Leave them with a broken heart
	option = {
		name = court_outcome.1005.a

		end_court_scheme_effect = { OUTCOME = failure_soft REASON = saved_from_thief }
	
		stress_impact = {
			vengeful = major_stress_impact_gain
			wrathful = medium_stress_impact_gain
			callous = minor_stress_impact_gain
			sadistic = medium_stress_impact_gain
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_compassion = 2
				ai_vengefulness = -2
				ai_boldness = -1
				ai_honor = 2
			}
		}	
	}

	#Nemesis
	option = {
		name = court_outcome.1005.b
		trigger = {
			OR = {
				can_set_relation_rival_trigger = { CHARACTER = scope:targets_lover }
				can_set_relation_nemesis_trigger = { CHARACTER = scope:targets_lover }
			}
		}

		if = {
			limit = { NOT = { has_relation_rival = scope:targets_lover } }
			set_relation_rival = {
				target = scope:targets_lover
				reason = rival_lover_jealousy
			}
		}
		else = {
			set_relation_nemesis = {
				target = scope:targets_lover
				involved_character = scope:target
				copy_reason = rival
				reason = nemesis_lover_jealousy
			}
		}

		end_court_scheme_effect = { OUTCOME = failure_soft REASON = saved_from_thief }

		stress_impact = {
			forgiving = minor_stress_impact_gain
		}
		ai_chance = {
			base = 100
		}
	}
}

#TARGET SUCCES: is informed about outcome
court_outcome.1105 = { #by Mathilda Bjarnehed
	type = character_event
	title = court_outcome.1105.t
	desc = {
		desc = court_outcome.1105.start.desc
		first_valid = {
			triggered_desc = {
				trigger = { scope:owner = { prowess >= scope:target.prowess } }
				desc = court_outcome.1105.owner_fights.desc
			}
			desc = court_outcome.1105.target_fights.desc
		}
	}
	
	theme = romance_scheme
	left_portrait = {
		character = scope:owner
		animation = worry
	}

	immediate = {
		play_music_cue = mx_cue_seduction
	}
	
	option = {
		name = {
			trigger = { scope:become_soulmate = yes }
			text = court_outcome.1105.a
		}
		name = {
			trigger = { scope:become_soulmate = no }
			text = court_outcome.1003.b
		}

		if = {
			limit = { scope:become_soulmate = yes }
			end_court_scheme_effect = { OUTCOME = success_soulmate REASON = saved_from_thief }
		}
		#No need to show kiss outcome as it has no effect for target, it's executed in owner's scope before
	}
}
