# character just about to die in root scope
# if a killer is known, it's set as scope:killer
#Triggered by code

on_death = {
	effect = {
		play_music_cue = "mx_cue_death"

		add_character_flag = { flag = about_to_die_but_not_dead_yet_flag } # Used in perk calc
		
		# Legend inheritance - removed Warcraft
		# if = {
		# 	limit = {
		# 		has_ce1_dlc_trigger = yes
		# 		is_ai = no
		# 		exists = promoted_legend
		# 	}
		# 	promoted_legend = {
		# 		set_variable = ce1_neverending_story_achievement_possible_legend
		# 	}
		# 	player_heir ?= {
		# 		set_variable = ce1_neverending_story_achievement_possible
		# 	}
		# }
		
		if = { # Inherit Flavorisation
			limit = {
				is_ruler = yes
				exists = primary_heir
				OR = {
					has_variable = flavourise_camp_purpose_mercenaries
					has_variable = flavourise_camp_purpose_wanderers
					has_variable = flavourise_camp_purpose_scholars
					has_variable = flavourise_camp_purpose_explorers
					has_variable = flavourise_camp_purpose_brigands
					has_variable = flavourise_camp_purpose_legitimists
				}
			}
			if = {
				limit = {
					has_variable = flavourise_camp_purpose_mercenaries
				}
				primary_heir ?= { set_variable = flavourise_camp_purpose_mercenaries }
			}
			else_if = {
				limit = {
					has_variable = flavourise_camp_purpose_wanderers
				}
				primary_heir ?= { set_variable = flavourise_camp_purpose_wanderers }
			}
			else_if = {
				limit = {
					has_variable = flavourise_camp_purpose_scholars
				}
				primary_heir ?= { set_variable = flavourise_camp_purpose_scholars }
			}
			else_if = {
				limit = {
					has_variable = flavourise_camp_purpose_explorers
				}
				primary_heir ?= { set_variable = flavourise_camp_purpose_explorers }
			}
			else_if = {
				limit = {
					has_variable = flavourise_camp_purpose_brigands
				}
				primary_heir ?= { set_variable = flavourise_camp_purpose_brigands }
			}
			else_if = {
				limit = {
					has_variable = flavourise_camp_purpose_legitimists
				}
				primary_heir ?= { set_variable = flavourise_camp_purpose_legitimists }
			}
		}
		
		if = { # Inherit Directives
			limit = {
				is_ruler = yes
				is_independent_ruler = no
				exists = primary_heir
				primary_heir = {
					NOR = {
						has_character_flag = vassal_directive_improve_development
						has_character_flag = vassal_directive_train_commanders
						has_character_flag = vassal_directive_build_maa
						has_character_flag = vassal_directive_convert_faith
						has_character_flag = vassal_directive_convert_culture
						has_character_flag = vassal_directive_improve_cultural_acceptance
						has_character_flag = vassal_directive_building_focus_fortification
						has_character_flag = vassal_directive_building_focus_military
						has_character_flag = vassal_directive_building_focus_economy
					}
				}
				OR = {
					has_character_flag = vassal_directive_improve_development
					has_character_flag = vassal_directive_train_commanders
					has_character_flag = vassal_directive_build_maa
					has_character_flag = vassal_directive_convert_faith
					has_character_flag = vassal_directive_convert_culture
					has_character_flag = vassal_directive_improve_cultural_acceptance
					has_character_flag = vassal_directive_building_focus_fortification
					has_character_flag = vassal_directive_building_focus_military
					has_character_flag = vassal_directive_building_focus_economy
				}
			}
			if = {
				limit = {
					has_variable = vassal_directive_improve_development
				}
				primary_heir ?= { set_variable = vassal_directive_improve_development }
			}
			else_if = {
				limit = {
					has_variable = vassal_directive_train_commanders
				}
				primary_heir ?= { set_variable = vassal_directive_train_commanders }
			}
			else_if = {
				limit = {
					has_variable = vassal_directive_build_maa
				}
				primary_heir ?= { set_variable = vassal_directive_build_maa }
			}
			else_if = {
				limit = {
					has_variable = vassal_directive_convert_faith
				}
				primary_heir ?= { set_variable = vassal_directive_convert_faith }
			}
			else_if = {
				limit = {
					has_variable = vassal_directive_convert_culture
				}
				primary_heir ?= { set_variable = vassal_directive_convert_culture }
			}
			else_if = {
				limit = {
					has_variable = vassal_directive_improve_cultural_acceptance
				}
				primary_heir ?= { set_variable = vassal_directive_improve_cultural_acceptance }
			}
			else_if = {
				limit = {
					has_variable = vassal_directive_building_focus_fortification
				}
				primary_heir ?= { set_variable = vassal_directive_building_focus_fortification }
			}
			else_if = {
				limit = {
					has_variable = vassal_directive_building_focus_military
				}
				primary_heir ?= { set_variable = vassal_directive_building_focus_military }
			}
			else_if = {
				limit = {
					has_variable = vassal_directive_building_focus_economy
				}
				primary_heir ?= { set_variable = vassal_directive_building_focus_economy }
			}
		}

		if = {
			limit = {
				has_bp2_dlc_trigger = yes
				prestige_level >= 3 #Illustrious
				player_heir ?= {
					is_child_of = root
					age >= 6 #Can happen as a child, but also as an adult.
					NOT = {
						has_character_flag = bp2_prestige_piety_chain
					}
				}
				NOR = {
					has_character_flag = bp2_prestige_piety_chain
					prestige_level < piety_level #higher stat gives the chain
				}
			}
			save_scope_as = famous_parent
			player_heir = {
				set_variable = {
					name = parent_fame_lvl
					value = scope:famous_parent.prestige_level
				}
				create_character_memory = {
					type = famed_parent_became_very_famous
					participants = {
						famed_parent = scope:famous_parent
					}
				}
				trigger_event = {
					id = bp2_yearly.4010
					days = 5
				}
			}
		}
		if = {
			limit = {
				has_bp2_dlc_trigger = yes
				piety_level >= 3 #Illustrious
				player_heir ?= {
					is_child_of = root
					age >= 6 #Can happen as a child, but also as an adult.
					faith = root.faith
					NOT = {
						has_character_flag = bp2_prestige_piety_chain
					}	
				}
				NOR = {
					has_character_flag = bp2_prestige_piety_chain
					piety_level < prestige_level #higher stat gives the chain
				}
				faith = {
					NOR = {
						trait_is_virtue = humble
						trait_is_virtue = content
					}
				}
			}
			save_scope_as = pious_parent
			player_heir = {
				set_variable = {
					name = parent_piety_lvl
					value = scope:pious_parent.piety_level
				}
				create_character_memory = {
					type = pious_parent_became_very_pious
					participants = {
						pious_parent = scope:pious_parent
					}
				}
				trigger_event = {
					id = bp2_yearly.4020
					days = 10
				}
			}
		}

		if = {
			limit = {
				exists = player_heir
			}
			player_heir = {
				apply_hold_court_grace_effect = yes
			}
			if = {
				limit = {
					is_ai = no
				}
				player_heir = {
					add_character_flag = {
						flag = tutorial_reactive_advice_succession
					}
				}
				if = {
					limit = {
						has_royal_court = yes
						any_sponsored_inspiration = { count >= 1 }
					}
					save_scope_as = old_ruler
					every_sponsored_inspiration = { add_to_list = inherited_inspiration_list }
					player_heir = {
						trigger_event = { id = fund_inspiration.9005 days = 5 }
					}
				}
			}
			
			# Warcraft
		}

		if = {
			limit = {
				exists = player_heir
			}
			trigger_event = {
				id = fp3_yearly.2030
				days = 16
			}
		}
		
		if = { # Lower Grandeur a little bit on death
			limit = {
				has_royal_court = yes
				has_dlc_feature = royal_court
				exists = primary_heir
				primary_heir = {
					has_royal_court = no
				}
			}
			change_current_court_grandeur = grandeur_loss_on_succession_value
		}
		
		if = { # Grandeur in elective realms
			limit = {
				has_royal_court = yes
				has_dlc_feature = royal_court
				exists = primary_heir
				primary_heir = {
					has_royal_court = no
				}
				primary_title = {
					has_order_of_succession = election
				}
			}
			primary_heir = {
				set_variable = {
					name = previous_holder_grandeur_value
					value = prev.court_grandeur_current
				}
			}
		}

		# Warcraft
		if = {
			limit = { has_global_variable = custom_leader global_var:custom_leader = root has_variable = this_union }
			random_in_global_list = {
				variable = all_unions
				limit = { var:this_union = flag:custom }
				every_in_list = {
					variable = union_members
					limit = { is_alive = yes NOT = { this = root } }
					try_to_transfer_this_union_custom_name_effect = { PREV_HOLDER = root }
				}
			}
			if = {
				limit = { exists = primary_heir }
				primary_heir = { try_to_transfer_this_union_custom_name_effect = { PREV_HOLDER = root } }
			}
		}
		
		if = {
			limit = { exists = scope:killer }
			hurt_scourge_jailor_consequences_effect = { HURT_JAILOR = root SCOURGE = scope:killer }
		}

		# Warcraft
		# if = {
			# limit = {
				# exists = global_var:mongol_empire_was_broken_up
				# exists = global_var:handed_out_mongolia_in_mongol_succession # If Mongolia wasn't properly granted, something has gone wrong, and the primary_heir should receive the Mongol Empire as expected
				# any_held_title = {
					# this = title:e_mongol_empire
				# }
			# }
			# destroy_title = title:e_mongol_empire
		# }


		# Diarchies
		## Handle regency loyalties.
		if = {
			limit = {
				# We only want to hand this to children.
				primary_heir ?= { is_adult = no }
				# Now, what type of regent are we checking?
				## An actual regency.
				trigger_if = {
					limit = {
						has_active_diarchy = yes
						has_diarchy_active_parameter = diarchy_is_regency
					}
					diarch = { regent_would_remain_loyal_after_death_trigger = yes }
				}
				## An organised would-be regency.
				trigger_else_if = {
					limit = { exists = designated_diarch }
					designated_diarch = { regent_would_remain_loyal_after_death_trigger = yes }
				}
				## Otherwise, stop the flow.
				trigger_else = { always = no }
			}
			# Nab our affected character.
			## Actual regents.
			if = {
				limit = {
					has_active_diarchy = yes
					has_diarchy_active_parameter = diarchy_is_regency
				}
				diarch = { save_scope_as = liege_loyalist }
			}
			## Designated regents.
			else = {
				designated_diarch = { save_scope_as = liege_loyalist }
			}
			# Now, give 'em a hook that'll last till their 20th birthday.
			primary_heir ?= {
				if = {
					limit = { is_alive = yes }

					add_hook = {
						type = predecessor_loyalty_hook
						target = scope:liege_loyalist
						years = regent_loyal_after_death_hook_duration_years_value
					}
					reverse_add_opinion = {
						target = scope:liege_loyalist
						modifier = promise_to_predecessor
						opinion = 50
					}
					# Plus remember who the promise was made to.
					set_variable = {
						name = promise_to_predecessor
						value = root
						years = regent_loyal_after_death_hook_duration_years_value
					}
				}
			}
		}
		## Transfer co-monarchies.
		if = {
			limit = {
				has_active_diarchy = yes
				has_diarchy_active_parameter = diarchy_is_co_rulership
				primary_heir ?= {
					highest_held_title_tier < root.highest_held_title_tier
					NOR = {
						this = root.diarch
						AND = {
							has_active_diarchy = yes
							has_diarchy_active_parameter = diarchy_is_co_rulership
						}
					}
				}
			}
			# Register our current diarch.
			diarch = { save_scope_as = co_ruler }
			# Register our current SoP swing, minus a little for the death.
			save_scope_value_as = {
				name = sop_swing
				value = {
					add = diarchy_swing
					add = -20
					min = 0
				}
			}
			# Aaaand check what type of diarchy we want.
			if = {
				limit = { has_diarchy_active_parameter = diarchy_type_is_junior_emperorship }
				save_scope_value_as = {
					name = diarchy_type
					value = flag:junior_emperorship
				}
			}
			else_if = {
				limit = { has_diarchy_active_parameter = diarchy_type_is_co_emperorship }
				save_scope_value_as = {
					name = diarchy_type
					value = flag:co_emperorship
				}
			}
			else = {
				save_scope_value_as = {
					name = diarchy_type
					value = flag:co_monarchy
				}
			}
			# Cue up our event.
			primary_heir ?= {
				trigger_event = {
					id = diarchy.0024
					delayed = yes
				}
			}
		}

		invalidate_claimant_factions_on_death_effect = yes

		# EP2 - Handle Grand Wedding betrothals
		if = {
			limit = {
				is_ai = no
				has_variable = promised_grand_wedding_marriage_countdown
				exists = player_heir
			}
			var:promised_grand_wedding_marriage_countdown = { save_scope_as = temp_marriage_scope }
			player_heir = {
				set_variable = {
					name = promised_grand_wedding_marriage_countdown
					value = prev.var:promised_grand_wedding_marriage_countdown
					years = grand_wedding_timeout_alt
				}
				# Notification that the countdown has expired (one day before, to avoid getting the variable deleted before we have used it)
				trigger_event = {
					id = ep2_wedding.0001
					days = grand_wedding_timeout_notification_alt
				}
			}
		}
		if = {
			limit = {
				is_ai = no
				has_variable = promised_grand_wedding_marriage_countdown
				exists = primary_heir
				NOT = {
					primary_heir = {
						has_variable = promised_grand_wedding_marriage_countdown
					}
				}
			}
			var:promised_grand_wedding_marriage_countdown = { save_scope_as = temp_marriage_scope }
			primary_heir = {
				set_variable = {
					name = promised_grand_wedding_marriage_countdown
					value = prev.var:promised_grand_wedding_marriage_countdown
					years = grand_wedding_timeout_alt
				}
				# Notification that the countdown has expired (one day before, to avoid getting the variable deleted before we have used it)
				trigger_event = {
					id = ep2_wedding.0001
					days = grand_wedding_timeout_notification_alt
				}
			}
		}
		if = {
			limit = {
				# You are a spouse to be
				has_variable = promised_grand_wedding_by
				# your Grand Wedding has not been organized yet
				NOR = {
					exists = involved_activity
					involved_activity ?= {
						has_activity_type = activity_wedding
						OR = {
							special_guest:spouse_1 ?= root
							special_guest:spouse_2 ?= root
						}
					}
				}
			}
			save_scope_as = dead_spouse
			# Free the betrothed
			betrothed = {
				save_scope_as = alive_spouse
				trigger_event = ep2_wedding.0003
			}
			# Free the host if they were not the betrothed themselves
			if = {
				limit = {
					NOT = { betrothed = { has_variable = promised_grand_wedding_marriage_countdown } }
				}
				var:promised_grand_wedding_by = { trigger_event = ep2_wedding.0002 }
			}
		}

		# EP2 - Complete murder intents
		# Complete activity intent if relevant
		if = {
			limit = {
				exists = involved_activity
				scope:killer.involved_activity ?= root.involved_activity
				scope:killer = {
					has_activity_intent = murder_attendee_intent
					intent_target = root
				}
			}
			scope:killer = {
				save_scope_as = intent_completer
				send_interface_toast = {
					type = event_toast_effect_good
					title = activity_intent_complete_toast
					left_icon = root
					complete_activity_intent = yes
				}
				# Achievements.
				# if = {
				# 	limit = {
				# 		is_ai = no
				# 		exists = global_var:started_hunting_accident_achievement
				# 	}
				# 	set_global_variable = {
				# 		name = finished_hunting_accident_achievement
				# 		value = yes
				# 	}
				# }
			}
		}

		# EP2 - Death while traveling 
		# Send relevant event to player heir 
		if = {
			limit = {
				exists = player_heir
				exists = involved_activity
				is_travelling = yes 
				# Tour has their own death invalidation event
				trigger_if = {
					limit = {
						involved_activity ?= {
							has_activity_type = activity_tour
						}
					}
				}
				# Hunt has their own death invalidation event at actual hunt
				NAND = {
					involved_activity ?= { has_activity_type = activity_hunt }
					location = involved_activity.activity_location
				}
			}
			# Save a couple things for loc
			save_scope_as = predecessor
			scope:predecessor.location = { save_scope_as = predecessor_location }
			involved_activity.activity_location = { save_scope_as = travel_destination }
			# Figure out if we were heading to or home from an activity
			if = {
				limit = { exists = involved_activity }
				if = {
					limit = {
						exists = scope:predecessor_location
						scope:predecessor_location = scope:travel_destination
					}
					save_scope_as = at_destination
				}
				else = {
					save_scope_as = to_activity
				}
			}
			# Fire event for player heir
			player_heir = {
				if = {
					limit = { is_available = yes }
					trigger_event = {
						id = travel_events.0010
						days = 1
					}
				}
				else_if = {
					limit = {
						NOT = { location ?= scope:predecessor_location }
					}
					trigger_event = {
						id = travel_events.0011
						days = 1
					}
				}
			}
		}

		#EP2 - Death on a Pilgrimage
		#Did we like our predecessor?
		player_heir ?= {
			if = {
				limit = {
					OR = {
						opinion = {
							target = root
							value > 10
						}
						has_any_good_relationship_with_root_trigger = yes
					}
					is_alive = yes #if the predecessor died during a murder feast/bloody wedding is quite likely that the heir would've died too
				}
				add_character_flag = pilgrimage_liked_my_predecessor
			}
		}

		# Event Setup
		## FP1: Rumoured Draugr - fp1_yearly.0051
		# Warcraft

		## EP1: Might later be rumored to haunt the location in a court event
		if = {
			limit = {
				OR = {
					AND = {
						exists = capital_province
						location = capital_province
						exists = player_heir
						OR = {
							any_close_family_member = { this = root.player_heir }
							any_spouse = { this = root.player_heir }
						}
					}
					AND = {
						exists = court_owner
						court_owner = {
							is_ai = no
							exists = capital_province
						}
						location = court_owner.capital_province
						OR = {
							any_close_family_member = { this = root.court_owner }
							any_spouse = { this = root.court_owner }
						}
					}
				}
			}
			location = {
				set_variable = {
					name = possible_haunting
					value = prev
					years = 100
				}
			}
		}

		if = {
			limit = { has_royal_court = yes }
			# Clear pay homage once-per-liege grace
			every_vassal = {
				if = {
					limit = { has_variable = homage_type }
					remove_variable = homage_type
				}
			}
			# Check equipped artifacts
			if = {
				limit = {
					any_equipped_character_artifact = { ep1_artifact_is_court_artifact_trigger = yes }
				}
				every_equipped_character_artifact = {
					limit = { ep1_artifact_is_court_artifact_trigger = yes }
					set_variable = equipped_court_succession
				}
			}
		}

		# Ritual best friends have a bad, bad, *bad* time.
		if = {
			limit = {
				valid_ritualised_best_friendship_one_way_trigger = { ACTOR_FRIEND = root }
			}
			random_relation = {
				type = best_friend
				limit = { culture_valid_for_ritualised_best_friends_trigger = yes }
				# Save a flag for the death management event's ease.
				add_character_flag = dead_ritual_best_friend
			}
		}
		# Best friend loses synergy
		if = {
			limit = { has_any_best_friend_synergy_bonus_modifier_trigger = yes }
			remove_every_best_friend_synergy_bonus_modifier_effect = yes
		}
		random_relation = {
			type = best_friend
			if = {
				limit = { has_any_best_friend_synergy_bonus_modifier_trigger = yes }
				remove_every_best_friend_synergy_bonus_modifier_effect = yes
			}
		}

		# Warcraft
		# Struggle Catalyst
		# End of Warcraft
		every_close_family_member = {
			create_character_memory = {
				type = relative_died
		
				participants = {
					dead_relation = root
				}
			}
			if = {
				limit = {
					is_adult = no
				}
				scope:new_memory = {
					set_variable = {
						name = childhood_memory
					}
				}
			}
		}

		every_spouse = {
			limit = {
				NOR = {
					has_relation_friend = root
					has_relation_rival = root
					has_relation_lover = root
					is_close_family_of = root
				}
			}
			create_character_memory = {
				type = spouse_died
		
				participants = {
					dead_relation = root
				}
			}
		}

		# Tournament
		tournament_versus_qualifier_death_effect = yes

		# Family Feud
		if = {
			limit = {
				has_bp1_dlc_trigger = yes
				exists = house.house_head
				exists = scope:killer.house.house_head
			}
			# Notifications
			# Inform victim house that they have lost score
			if = {
				limit = {
					# Victim's House targets killer's House
					existing_feud_against_target_trigger = { TARGET = scope:killer }
				}
				house = {
					house_head = {
						random_owned_story = {
							limit = { story_type = story_cycle_house_feud }
							save_scope_as = house_feud_story
							change_variable = {
								name = house_feud_death_counter
								add = house_feud_medium_counter_value
							}
						}
					}
					every_house_member = {
						limit = { is_ai = no }
						send_interface_message = {
							type = house_feud_kill_us_message
							left_icon = root
							right_icon = scope:killer
							custom_tooltip = house_feud_tipped_scales_neg_medium
						}
					}
				}
			}
			if = {
				limit = {
					# Victim's House is targeted by killer's House
					scope:killer = {
						existing_feud_against_target_trigger = { TARGET = root }
					}
				}
				# Inform killer house that they have gained score
				scope:killer.house = {
					house_head = {
						random_owned_story = {
							limit = { story_type = story_cycle_house_feud }
							save_scope_as = house_feud_story
							change_variable = {
								name = house_feud_kill_counter
								add = house_feud_medium_counter_value
							}
						}
					}
					every_house_member = {
						limit = { is_ai = no }
						send_interface_message = {
							type = house_feud_kill_them_message
							left_icon = scope:killer
							right_icon = root
							custom_tooltip = house_feud_tipped_scales_pos_medium
						}
					}
				}
			}
			# Events
			# Fire Feud start event for victim house
			if = {
				limit = {
					# Feud won't start if House Head was rival of victim
					NOT = {
						has_any_bad_relationship_with_character_trigger = { CHARACTER = root.house.house_head }
					}
					house.house_head = {
						house_head_can_start_feud_against_trigger = { TARGET = scope:killer }
					}
				}
				save_scope_as = house_feud_victim
				scope:killer = { house_feud_save_head_and_attacker_effect = yes }
				house.house_head = {
					random = {
						chance = 50
						modifier = {
							add = 25
							has_trait = vengeful
						}
						modifier = {
							add = -25
							has_trait = forgiving
						}
						modifier = {
							add = 25
							has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:killer }
						}
						trigger_event = {
							id = bp1_house_feud.0005
							days = { 5 15 }
						}
					}
				}
			}
			# Fire Feud revenge event for killer house
			if = {
				limit = {
					scope:killer.house.house_head = {
						any_owned_story = {
							story_type = story_cycle_house_feud
							exists = var:house_feud_reason
							OR = {
								var:house_feud_reason = flag:head_killed
								var:house_feud_reason = flag:family_killed
							}
							exists = var:house_feud_attacker							
							var:house_feud_attacker = root
						}
					}
				}
				scope:killer.house.house_head = {
					trigger_event = { id = bp1_house_feud.7001 days = 15 }
				}
			}
		}
		#Petition liege invalidation
		if = {
			limit = {
				any_vassal = { var:petition_liege_scope ?= root }
			}
			every_vassal = {
				limit = { var:petition_liege_scope ?= root }
				trigger_event = { on_action = petition_liege_travel_planner_exit }
				current_travel_plan = { cancel_travel_plan = yes }
			}
		}
		#Pay homage invalidation
		if = {
			limit = {
				any_vassal = { var:homage_liege_scope ?= root }
			}
			every_vassal = {
				limit = { var:homage_liege_scope ?= root }
				trigger_event = { on_action = pay_homage_travel_planner_exit }
				current_travel_plan = { cancel_travel_plan = yes }
			}
		}

		# Court position boon invalidation
		if = {
			limit = { exists = var:booner_target }
			employed_booner_invalidation_effect = { EMPLOYEE = root LIEGE = root.employer }
		}
		# Cleanup booner focus on dead courtiers
		employer ?= {
			every_court_position_holder = {
				limit = { var:booner_target ?= root }
				remove_variable = booner_target
			}
		}

		# Ward travel invalidation
		if = {
			limit = {
				exists = var:ward_travelling_to_guardian
				is_travelling = yes
			}
			save_scope_as = ward
			var:ward_travelling_to_guardian = {
				save_scope_as = guardian
				liege ?= { save_scope_as = guardian_liege }
			}
			var:character_making_education_request ?= { save_scope_as = ward_liege }
			# Inform Guardian
			scope:guardian ?= {
				send_interface_toast = {
					type = event_toast_effect_neutral
					title = ward_invalidated_during_travel_title
					left_icon = scope:ward
					right_icon = scope:ward_liege
					show_as_tooltip = {
						scope:ward = { override_death_effect = { death_reason = death_fight } }
					}
				}
			}
			# Inform Liege
			scope:ward_liege ?= {
				send_interface_toast = {
					type = event_toast_effect_neutral
					title = ward_invalidated_during_travel_title
					left_icon = scope:ward
					right_icon = scope:guardian
					show_as_tooltip = {
						scope:ward = { override_death_effect = { death_reason = death_fight } }
					}
				}
			}
			# Inform Guardian Liege
			if = {
				limit = {
					exists = scope:guardian_liege
					NOT = { scope:guardian_liege = scope:guardian }
				}
				scope:guardian_liege = {
					send_interface_toast = {
						type = event_toast_effect_neutral
						title = ward_invalidated_during_travel_title
						left_icon = scope:ward
						right_icon = scope:guardian
						show_as_tooltip = {
							scope:ward = { override_death_effect = { death_reason = death_fight } }
						}
					}
				}
			}
		}
		# Guardian travel invalidation
		else_if = {
			limit = {
				exists = var:guardian_travelling_to_ward
				is_travelling = yes
			}
			save_scope_as = guardian
			liege ?= { save_scope_as = guardian_liege }
			var:guardian_travelling_to_ward = {
				save_scope_as = ward
				var:character_making_education_request ?= { save_scope_as = ward_liege }
			}
			scope:ward = {
				send_interface_toast = {
					type = event_toast_effect_neutral
					title = guardian_invalidated_during_travel_title
					left_icon = scope:guardian
					show_as_tooltip = {
						scope:guardian = { override_death_effect = { death_reason = death_fight } }
					}
				}
			}
			if = {
				limit = {
					exists = scope:ward_liege
					NOT = { scope:ward_liege = scope:ward }
				}
				scope:ward_liege = {
					send_interface_toast = {
						type = event_toast_effect_neutral
						title = guardian_invalidated_during_travel_title
						left_icon = scope:guardian
						right_icon = scope:ward
						show_as_tooltip = {
							scope:guardian = { override_death_effect = { death_reason = death_fight } }
						}
					}
				}
			}
			if = {
				limit = {
					exists = scope:guardian_liege
					NOT = { scope:guardian_liege = scope:guardian }
				}
				scope:guardian_liege = {
					send_interface_toast = {
						type = event_toast_effect_neutral
						title = guardian_invalidated_during_travel_title
						left_icon = scope:guardian
						right_icon = scope:ward
						show_as_tooltip = {
							scope:guardian = { override_death_effect = { death_reason = death_fight } }
						}
					}
				}
			}
		}

		# BP2
		if = { # Hostage travel
			limit = {
				exists = var:hostage_travelling_to_warden
				is_travelling = yes
			}
			save_scope_as = hostage
			liege = {
				send_interface_toast = {
					type = event_toast_effect_neutral
					title = hostage_invalidated_during_travel_title
					left_icon = scope:hostage
					right_icon = scope:hostage.var:hostage_travelling_to_warden
					show_as_tooltip = {
						scope:hostage = {
							override_death_effect = { death_reason = death_fight }
						}
					}
				}
			}
			var:hostage_travelling_to_warden = {
				save_scope_as = warden
				send_interface_toast = {
					type = event_toast_effect_neutral
					title = hostage_invalidated_during_travel_title
					left_icon = scope:hostage
					right_icon = scope:hostage.liege
					show_as_tooltip = {
						scope:hostage = {
							override_death_effect = { death_reason = death_fight }
						}
					}
				}
			}
		}
		if = {
			limit = { is_hostage = yes }
			save_scope_as = hostage
			home_court = {
				save_scope_as = hostage_home_court
				set_variable = {
					name = let_my_hostage_die
					value = scope:hostage.warden
				}
			}
			warden = {
				set_variable = {
					name = hostage_died
					value = scope:hostage_home_court
				}
				save_scope_as = hostage_warden
				trigger_event = { id = bp2_hostage_system.0300 days = 1 }
				if = {
					limit = {
						NOT = { is_close_family_of = scope:hostage }
					}
					create_character_memory = {
						type = hostage_died
				
						participants = {
							home_court = scope:hostage.home_court
							hostage = scope:hostage
						}
					}
				}
			}
		}
		
		# Clan Succession effects
		if = {
			limit = {
				government_has_flag = government_is_clan
				house ?= {
					OR = {
						has_house_unity_stage = competitive
						has_house_unity_stage = antagonistic
					}
				}
			}
			every_vassal = {
				limit = { house ?= root.house }
				add_unpressed_claim = root.primary_title
			}
		}

		# When the house head of a clan dies, they have an impact on their house's unity
		# Effect of reducing the house unity has to be delayed in death_management.0100 so that your succession laws don't change from lowered house unity before the succession happens
		if = {
			limit = {
				government_has_flag = government_is_clan
				exists = house
				house = {
					house_head = root
					NOT = { has_house_unity_stage = impassive }
				}
				primary_title.title_held_years >= 1
			}
			#calculate the unity value you should lose on this character and save it to pass it to the add_unity_value effect in the death_management.0100 event
			save_scope_value_as = {
				name = unity_change
				value = {
					value = 10
					add = root.primary_title.title_held_years
					multiply = -1
					min = -50
				}
			}
			save_scope_as = dead_house_head
			#trigger the death_management.0100 event that will remove the unity after succession happens
			if = {
				limit = {
					exists = player_heir
				}
				player_heir = {
					trigger_event = {
						id = death_management.0100
						delayed = yes
					}
				}
			}
		}

		# If someone has set out a revenge quest on you, give them an event
		if = {
			limit = {
				exists = var:8180_marked_for_death
			}
			var:8180_marked_for_death = {
				trigger_event = {
					id = legend_spread_events.8181
					weeks = 1
				}
			}
		}

		if = { # Add Legitimacy Legacy Level 2
			limit = { 
				dynasty ?= {
					has_dynasty_perk = ce1_legitimacy_legacy_2
				}
				exists = player_heir
			}				
			player_heir = {
				add_character_modifier = {
					modifier = ce1_lasting_line
					years = 10
				}
			}
		}
		# In Admin Realms, you inherit a portion of your predecessor's Influence on succession
		if = {
			limit = {
				government_allows = administrative
				influence > 0
				exists = house
				player_heir ?= { # Let's make sure we don't give Influence to anyone that shouldn't get it
					exists = house
					house = root.house
				}
			}
			player_heir ?= {
				change_influence = {
					value = root.influence
					multiply = {
						value = 0.2 # Default value
						if = {
							limit = {
								root = { domicile ?= { has_domicile_parameter = estate_inherit_influence_large_bonus } }
							}
							add = influence_inherit_large_bonus_value
						}
						else_if = {
							limit = {
								root = { domicile ?= { has_domicile_parameter = estate_inherit_influence_medium_bonus } }
							}
							add = influence_inherit_medium_bonus_value
						}
						else_if = {
							limit = {
								root = { domicile ?= { has_domicile_parameter = estate_inherit_influence_small_bonus } }
							}
							add = influence_inherit_small_bonus_value
						}
					}
				}
			}
		}

		# EP3 - Become Adventurer - Succession
		trigger_event = ep3_laamps.0012

		# EP3 - Adventurer support invalidation
		ep3_laamp_supporter_invalidated_effect = yes

		# EP3 - Varangian Palace Pillaging
		# if = {
		# 	limit = {
		# 		OR = {
		# 			number_maa_regiments_of_type = {
		# 				type = varangian_guards
		# 				value >= 1
		# 			}
		# 			number_title_maa_regiments_of_type = {
		# 				type = varangian_guards
		# 				value >= 1
		# 			}
		# 			AND = {
		# 				any_court_position_holder = {
		# 					type = akolouthos_court_position
		# 					ep3_varangian_trigger = yes
		# 				}
		# 			}
		# 		}
		# 		primary_title = title:e_byzantium
		# 	}
		# 	save_scope_as = dead_emperor
		# 	if = {
		# 		limit = {
		# 			number_maa_soldiers_of_type = {
		# 				type = varangian_guards
		# 				value > 0
		# 				value <= 100
		# 			}
		# 		}
		# 		primary_heir = {
		# 			set_variable = {
		# 				name = varangian_regiments
		# 				value = 1
		# 			}
		# 		}
		# 	}
		# 	else_if = {
		# 		limit = {
		# 			number_maa_soldiers_of_type = {
		# 				type = varangian_guards
		# 				value > 100
		# 				value <= 200
		# 			}
		# 		}
		# 		primary_heir = {
		# 			set_variable = {
		# 				name = varangian_regiments
		# 				value = 2
		# 			}
		# 		}
		# 	}
		# 	else_if = {
		# 		limit = {
		# 			number_maa_soldiers_of_type = {
		# 				type = varangian_guards
		# 				value > 200
		# 				value <= 300
		# 			}
		# 		}
		# 		primary_heir = {
		# 			set_variable = {
		# 				name = varangian_regiments
		# 				value = 3
		# 			}
		# 		}
		# 	}
		# 	else_if = {
		# 		limit = {
		# 			number_maa_soldiers_of_type = {
		# 				type = varangian_guards
		# 				value > 300
		# 				value <= 400
		# 			}
		# 		}
		# 		primary_heir = {
		# 			set_variable = {
		# 				name = varangian_regiments
		# 				value = 4
		# 			}
		# 		}
		# 	}
		# 	else_if = {
		# 		limit = {
		# 			number_maa_soldiers_of_type = {
		# 				type = varangian_guards
		# 				value > 400
		# 				value <= 500
		# 			}
		# 		}
		# 		primary_heir = {
		# 			set_variable = {
		# 				name = varangian_regiments
		# 				value = 5
		# 			}
		# 		}
		# 	}
		# 	else_if = {
		# 		limit = {
		# 			number_maa_soldiers_of_type = {
		# 				type = varangian_guards
		# 				value > 500
		# 				value <= 600
		# 			}
		# 		}
		# 		primary_heir = {
		# 			set_variable = {
		# 				name = varangian_regiments
		# 				value = 6
		# 			}
		# 		}
		# 	}
		# 	else_if = {
		# 		limit = {
		# 			number_maa_soldiers_of_type = {
		# 				type = varangian_guards
		# 				value > 600
		# 				value <= 700
		# 			}
		# 		}
		# 		primary_heir = {
		# 			set_variable = {
		# 				name = varangian_regiments
		# 				value = 7
		# 			}
		# 		}
		# 	}
		# 	else_if = {
		# 		limit = {
		# 			number_maa_soldiers_of_type = {
		# 				type = varangian_guards
		# 				value > 700
		# 				value <= 800
		# 			}
		# 		}
		# 		primary_heir = {
		# 			set_variable = {
		# 				name = varangian_regiments
		# 				value = 8
		# 			}
		# 		}
		# 	}
		# 	else_if = {
		# 		limit = {
		# 			number_maa_soldiers_of_type = {
		# 				type = varangian_guards
		# 				value > 800
		# 				value <= 900
		# 			}
		# 		}
		# 		primary_heir = {
		# 			set_variable = {
		# 				name = varangian_regiments
		# 				value = 9
		# 			}
		# 		}
		# 	}
		# 	else = {
		# 		primary_heir = {
		# 			set_variable = {
		# 				name = varangian_regiments
		# 				value = 10
		# 			}
		# 		}
		# 	}
		# 	primary_heir = {
		# 		trigger_event = {
		# 			id = ep3_emperor_yearly.3000
		# 			days = { 10 20 }
		# 		}
		# 	}
		# }

		# EP3 - Grand Ambitions Story Cycle
		if = {
			limit = {
				any_targeting_scheme = {
					scheme_type = depose
					scheme_owner = {
						any_owned_story = {
							story_type = grand_ambitions_story_cycle
							var:target_char ?= root
						}
					}
				}
			}
			save_scope_as = previous_story_target
			# Get the scope of the story owner
			random_targeting_scheme = {
				limit = {
					scheme_type = depose
					scheme_owner = {
						any_owned_story = {
							story_type = grand_ambitions_story_cycle
							var:target_char ?= root
						}
					}
				}
				# Fire an event to the story owner letting them know that their target is dead and letting them choose if they should continue their story and start a new scheme against the heir
				scheme_owner = { trigger_event = grand_ambitions.0500 }
			}
		}

		# # EP3, Hasan story cycle stuff
		# if = {
		# 	limit = {
		# 		root = character:3096
		# 	}
		# 	save_scope_as = ismaili_caliph
		# 	character:41702 ?= {
		# 		trigger_event = {
		# 			id = hasan_sabbah.1030
		# 			days = 1
		# 		}
		# 	}
		# }
		# if = {
		# 	limit = {
		# 		character:41702 ?= {
		# 			any_owned_story = {
		# 				story_type = story_hasan
		# 				var:ultimate_foe ?= root
		# 			}
		# 		}
		# 	}
		# 	character:41702 = {
		# 		random_owned_story = {
		# 			limit = { story_type = story_hasan }
		# 			if = {
		# 				limit = {
		# 					scope:killer = character:41702
		# 				}
		# 				hasan_sabbah_end_war = {
		# 					HASAN = character:41702
		# 					SELJUK = root
		# 				}
		# 			}
		# 			else = {
		# 				set_variable = {
		# 					name = ultimate_foe
		# 					value = root.player_heir
		# 				}
		# 			}
		# 		}
		# 	}
		# }

		if = {
			limit = {
				is_diarch = yes
				liege = { has_diarchy_active_parameter = diarchy_is_co_rulership }
			}
			end_diarchy = yes
		}

		# # EP3, Wallada transfers possessions to her heir
		# if = {
		# 	limit = {
		# 		root = character:andalusian_0003
		# 		exists = player_heir
		# 	}
		# 	# save Wallada's scope
		# 	save_scope_as = wallada
		# 	random_artifact = {
		# 		limit = {
		# 			has_artifact_modifier = double_moon_modifier
		# 		}
		# 		set_owner = scope:wallada.primary_heir
		# 		save_scope_as = double_moon_book
		# 	}
		# 	primary_heir = {
		# 		trigger_event = {
		# 			id = ep3_story_cycle_violet_poet.0004
		# 			days = 1
		# 		}
		# 	}
		# }

		# Populate new contracts for laamp heirs.
		player_heir ?= {
			trigger_event = {
				id = ep3_laamps.9982
				days = 1
			}
		}

		# EP3, Legitimist supporter payment inheritance
		if = {
			limit = {
				has_variable_list = legitimist_supporters
			}
			every_in_list = {
				variable = legitimist_supporters
				limit = {
					NOT = {
						is_target_in_variable_list = {
							name = legitimist_payed_supporters
							target = this
						}
					}
					is_alive = yes
					has_variable = legitimist_obligations_left
				}
				save_scope_as = petitioned_ruler
				root = {
					save_scope_as = previous_ruler
					player_heir ?= {
						trigger_event = {
							id = ep3_laamps.8109
							months = { 1 6 }
						}
					}
				}
			}
		}

		# Additional Flavor Titles
		additional_flavor_check_death_effect = yes
		
		# Warcraft
		wc_spell_death_maintenence_effect = yes
		
		if = {
			limit = {
				has_variable = block_union
				var:block_union_inherit = yes
				current_year < var:block_union_year
			}
			primary_heir = {
				set_variable = block_union
				set_variable = {
					name = block_union_inherit
					value = root.var:block_union_inherit
				}
				set_variable = {
					name = block_union_year
					value = root.var:block_union_year
				}

				really_block_character_unions_effect = yes
			}

			remove_block_character_unions_effect = yes
		}
	}
	events = {
		death_management.0096	# Updates marriage opinions of other spouses if relevant.
		death_management.0097	# Sets a flag if the dead one was someone you loved (to make suicide available)
		death_management.0098 	# Removes rejected_from_marriage_bed_modifier if spouse dies
		death_management.0099 	# If spouse is pregnant, save as variable
		death_management.0001 	# Finds characters which would care about death for notifications etc.
		intrigue_dread.4012		# Interrupts this event chain for the imprisoner when their prisoner dies.
		stewardship_duty.1065 	# Removes the patron buff from their employer when this character dies.
		stewardship_duty.1067 	# When you die removes your clients fron your court.
		great_holy_war.0024		# Replace recipient for ongoing GHW.
		great_holy_war.0028 	# Beneficiary died, reset and replace.
		great_holy_war.0080 	# ghw_sponsor died, replace.
		great_holy_war.0083		# ghw fallback beneficiary dies.
		religious_decision.0301 # ancestor died and needs to be buried.
		religious_decision.0311 # Dynasty member has died and you can raise a runestone
		game_rule.2				# Exclave Independence
		martial_authority.2057	# Right-Hand Person Dies 
		martial_authority.2055  # Right-handed Person (person with right-hand) Died
		fp1_yearly.0052			# FP1: Rumoured Draugr
		fp1_yearly.1061			# FP1: Ship Burial
		fp1_other_decisions.0062	# FP1: someone intending to HumSac you has died
		fp1_other_decisions.0063	# FP1: designated HumSac has died
		fp1_other_decisions.0064	# FP1: remove counties offended by HumSac modifier
		bp1_house_feud.9000 	# BP1: save rivals on death and fire inheritance on action
	}
}
# Warcraft
# character just about to die in root scope
# if a killer is know, it's set as scope:killer
on_demon_death = {
	effect = {
		if = {
			limit = { exists = scope:killer }
			hurt_scourge_jailor_consequences_effect = { HURT_JAILOR = root SCOURGE = scope:killer }
		}
	}
	events = {
		WCBEI.100	# Return to the Twisting Nether
	}
}

# Root = character
# Triggered when someone is about to die from a natural death but is given a second chance by meeting
# the has_natural_death_second_chance scripted rule
on_natural_death_second_chance = {
	effect = {
		add_character_flag = {
			flag = know_thyself_perk_delay_period
			days = 390
		}
		add_character_flag = know_thyself_has_triggered_delay
		trigger_event = death_management.9998
		trigger_event = {
			id = death_management.9999
			days = { 340 380 }
		}
	}
}
