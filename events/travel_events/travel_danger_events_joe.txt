namespace = travel_danger_events

scripted_effect travel_danger_events_6000_beast_duel_effect = {
	$FIGHTER$ = {
		duel = {
			skill = prowess
			value = high_skill_rating
			5 = {
				desc = travel_danger_events.6000.success
				compare_modifier = {
					value = scope:duel_value
					multiplier = 1
					min = -49
				}
				if = {
					limit = { this = root }
					root = {
						send_interface_toast = {
							title = travel_danger_events.6000.success_root
							left_icon = $FIGHTER$
							add_prestige = medium_prestige_gain
						}
					}
				}
				else = { 
					root = {
						send_interface_toast = {
							title = travel_danger_events.6000.success
							left_icon = $FIGHTER$
							$FIGHTER$ = { add_prestige = medium_prestige_gain }
						}
					}
				}
				min = 1
			}
			15 = {
				desc = travel_danger_events.6000.wound
				trigger = {
					NOT = {
						has_trait_rank = {
							trait = wounded
							rank > 1
						}
					}
				}
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				if = {
					limit = { this = root }
					root = {
						send_interface_toast = {
							title = travel_danger_events.6000.wound_root
							left_icon = $FIGHTER$
							hunt_animal_wound_effect = { VARIABLE = root.var:animal_type }
						}
					}
				}
				else = { 
					root = {
						send_interface_toast = {
							title = travel_danger_events.6000.wound
							left_icon = $FIGHTER$
							$FIGHTER$ = {
								hunt_animal_wound_effect = { VARIABLE = root.var:animal_type }
							}
						}
					}
				}
				min = 3
			}
			10 = {
				desc = travel_danger_events.6000.failure
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				if = {
					limit = { this = root }
					root = {
						send_interface_toast = {
							title = travel_danger_events.6000.failure_root
							left_icon = $FIGHTER$
							hunt_animal_death_effect = { VAR = root.var:animal_type }
						}
					}
				}
				else = { 
					root = {
						send_interface_toast = {
							title = travel_danger_events.6000.failure
							left_icon = $FIGHTER$
							$FIGHTER$ = {
								hunt_animal_death_effect = { VAR = root.var:animal_type }
							}
						}
					}
				}
				min = 2
			}
		}
	}
}

travel_danger_events.6000 = { #Animal attack
	type = character_event
	title = travel_danger_events.6000.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { has_character_flag = had_travel_danger_event_6000_twice_recently }
				desc = travel_danger_events.6000.desc.seriously
			}
			triggered_desc = {
				trigger = { has_character_flag = had_travel_danger_event_6000_recently }
				desc = travel_danger_events.6000.desc.again
			}
			desc = travel_danger_events.6000.desc
		}
		desc = travel_danger_events.6000.body
		triggered_desc = {
			trigger = { exists = scope:beast_victim }
			desc = travel_danger_events.6000.victim
		}
	}
	theme = travel_danger
	left_portrait = {
		character = root
		animation = shock
	}
	right_portrait = {
		character = scope:beast_victim
		animation = fear
	}
	lower_left_portrait = {
		trigger = { exists = scope:travel_leader }
		character = scope:travel_leader
	}

	trigger = {
		is_location_valid_for_travel_event_on_land = yes
		location = {
			exists = province_owner
			OR = {
				travel_danger_type = {
					travel_plan = root.current_travel_plan
					terrain = jungle
				}
				travel_danger_type = {
					travel_plan = root.current_travel_plan
					terrain = forest
				}
			}
		}
		current_travel_plan = {
			any_entourage_character = { count >= 1 }
		}
	}
	cooldown = { months = 1 }

	weight_multiplier = {
		base = 1
	}

	immediate = {
		mp_delay_travel_plan = { DAYS = 90 }
		save_scope_as = root_scope
		save_scope_as = big_local_game
		hunt_activity_dangerous_game_effect = { PROVINCE = location }
		current_travel_plan = {
			random_entourage_character = {
				limit = {
					can_be_combatant_based_on_gender_trigger = { ARMY_OWNER = root }
				}
				alternative_limit = { always = yes }
				weight = {
					base = 1
					modifier = { add = prowess }
					modifier = {
						add = 10
						has_court_position = bodyguard_court_position
					}  # Warcraft - Remove
					# modifier = {
					# 	add = 10
					# 	has_court_position = akolouthos_court_position
					# }
					modifier = {
						add = 10
						is_knight_of = root
					}
				}
				save_scope_as = beast_victim
			}
			#Save travel leader
			if = {
				limit = {
					exists = travel_leader
					NOT = { travel_leader ?= scope:beast_victim }
				}
				travel_leader ?= { save_scope_as = travel_leader }
			}
			#Save destination scope 
			next_destination_province = { save_scope_as = destination }
		}
		traveler_danger_xp_effect = {
			MIN = 3
			MAX = 6
		}
	}

	option = { #Fight it
		name = {
			text = {
				first_valid = {
					triggered_desc = {
						trigger = { has_character_flag = had_travel_danger_event_6000_twice_recently }
						desc = travel_danger_events.6000.a_seriously
					}
					triggered_desc = {
						trigger = {
							NOT = { has_character_flag = had_travel_danger_event_6000_twice_recently }
							has_character_flag = had_travel_danger_event_6000_recently
						}
						desc = travel_danger_events.6000.a_again
					}
					desc = travel_danger_events.6000.a
				}
			}
		}
		save_scope_as = fighter
		stress_impact = {
			craven = medium_stress_gain
		}
		travel_danger_events_6000_beast_duel_effect = { FIGHTER = root }
		
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				has_trait = craven
			}
		}
		
	}

	option = { #Distract with someone else
		name = {
			text = {
				first_valid = {
					triggered_desc = {
						trigger = { has_character_flag = had_travel_danger_event_6000_twice_recently }
						desc = travel_danger_events.6000.b_seriously
					}
					triggered_desc = {
						trigger = {
							NOT = { has_character_flag = had_travel_danger_event_6000_twice_recently }
							has_character_flag = had_travel_danger_event_6000_recently
						}
						desc = travel_danger_events.6000.b_again
					}
					desc = travel_danger_events.6000.b
				}
			}
		}
		trigger = { exists = scope:beast_victim }
		travel_danger_events_6000_beast_duel_effect = { FIGHTER = scope:beast_victim }
		stress_impact = {
			compassionate = medium_stress_impact_gain
			brave = minor_stress_impact_gain
		}
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				has_trait = compassionate
			}
		}
	}

	option = { #Run!
		name = travel_danger_events.6000.c
		add_prestige = minor_prestige_loss
		current_travel_plan = { 
			delay_travel_plan = { days = 10 }
		}
		stress_impact = {
			base = minor_stress_impact_gain
			craven = minor_stress_impact_gain
		}
		stress_impact = {
			brave = medium_stress_impact_gain
			craven = minor_stress_impact_loss
		}
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				has_trait = brave
			}
		}
	}

	after = {
		mp_resume_travel_plan = yes
		#Second time getting the event in a short while
		if = {
			limit = { 
				is_alive = yes
				has_character_flag = had_travel_danger_event_6000_recently
				NOT = { has_character_flag = had_travel_danger_event_6000_twice_recently }
			}
			add_character_flag = {
				flag = had_travel_danger_event_6000_twice_recently
				months = 6 #Smaller time window to get the third flavor desc
			}
		}
		#First time getting the event
		else_if = {
			limit = {
				is_alive = yes
				NOT = { has_character_flag = had_travel_danger_event_6000_recently }
			}
			add_character_flag = {
				flag = had_travel_danger_event_6000_recently
				years = 1
			}
		}	
	}
}

scripted_effect travel_danger_events_6010_imprison_effect = {
	$TARGET$.current_travel_plan = { cancel_travel_plan = yes }
	$IMPRISONER$ = {
		send_interface_toast = {
			title = travel_danger_events.6010.capture_toast
			left_icon = $IMPRISONER$
			right_icon = $TARGET$
			hidden_effect = {
				rightfully_imprison_character_effect = {
					TARGET = $TARGET$
					IMPRISONER = $IMPRISONER$
				}
			}
			show_as_tooltip = {
				imprison = { target = $TARGET$ type = house_arrest }
			}
		}
	}
	hidden_effect = {
		send_interface_toast = {
			title = travel_danger_events.6010.a.failure
			left_icon = $TARGET$
			right_icon = $IMPRISONER$
			show_as_tooltip = {
				$IMPRISONER$ = {
					imprison = { target = $TARGET$ type = house_arrest }
				}
			}
		}
	}
}

travel_danger_events.6010 = { #Siege
	type = character_event
	title = travel_danger_events.6010.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:siege_army = { is_raid_army = yes }
				}
				desc = travel_danger_events.6010.raid
			}
			desc = travel_danger_events.6010.siege
		}
		first_valid = {
			triggered_desc = {
				trigger = { this = scope:siege_victim }
				desc = travel_danger_events.6010.victim
			}
			triggered_desc = {
				trigger = { is_at_war_with = scope:siege_owner }
				desc = travel_danger_events.6010.war_owner
			}
			triggered_desc = {
				trigger = { is_at_war_with = scope:siege_victim }
				desc = travel_danger_events.6010.war_victim
			}
			triggered_desc = {
				trigger = { is_allied_to = scope:siege_owner }
				desc = travel_danger_events.6010.ally_owner
			}
			triggered_desc = {
				trigger = { is_allied_to = scope:siege_victim }
				desc = travel_danger_events.6010.ally_victim
			}
			triggered_desc = {
				trigger = { has_relation_to = scope:siege_owner }
				desc = travel_danger_events.6010.relation_owner
			}
			triggered_desc = {
				trigger = { has_relation_to = scope:siege_victim }
				desc = travel_danger_events.6010.relation_victim
			}
			desc = travel_danger_events.6010.peace
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:siege_army = { is_raid_army = yes }
				}
				desc = travel_danger_events.6010.raid_end
			}
			desc = travel_danger_events.6010.siege_end
		}
	}
	theme = travel_danger
	override_background = {
		trigger = {
			scope:siege_army = { is_raid_army = yes }
		}
		reference = burning_building
	}
	left_portrait = {
		character = root
		animation = worry
	}
	right_portrait = {
		character = scope:soldier
		triggered_animation = {
			trigger = {
				scope:siege_army = { is_raid_army = yes }
			}
			animation = throne_room_one_handed_passive_2
		}
		animation = throne_room_one_handed_passive_1
	}
	lower_left_portrait = scope:siege_victim
	lower_center_portrait = {
		trigger = {
			NOT = { scope:siege_commander ?= scope:siege_owner }
		}
		character = scope:siege_commander
	}
	lower_right_portrait = scope:siege_owner
	cooldown = { months = 1 }

	trigger = {
		is_location_valid_for_travel_event_on_land = yes
		location = {
			exists = province_owner
			OR = {
				travel_danger_type = {
					travel_plan = root.current_travel_plan
					type = siege
				}
				travel_danger_type = {
					travel_plan = root.current_travel_plan
					type = raid
				}
			}
			NOT = {
				any_army_in_location = { army_owner = root }
			}
			any_army_in_location = {
				OR = {
					is_army_in_siege = yes
					is_army_in_raid = yes
				}
				exists = army_commander
				save_temporary_scope_as = battle_army_1_temp
			}
		}
	}
	
	weight_multiplier = {
		base = 1
	}

	immediate = {
		mp_delay_travel_plan = { DAYS = 90 }
		location = {
			province_owner = { save_scope_as = siege_victim }
			ordered_army_in_location = {
				limit = {
					OR = {
						is_army_in_siege = yes
						is_army_in_raid = yes
					}
					exists = army_commander
				}
				order_by = army_size
				save_scope_as = siege_army
				army_owner = {
					save_scope_as = siege_owner
					if = {
						limit = { is_at_war_with = scope:siege_victim }
						random_character_war = {
							limit = {
								any_war_participant = { this = scope:siege_victim }
							}
							save_scope_as = siege_war
						}
					}
				}
				army_commander = { save_scope_as = siege_commander }
			}
		}
		current_travel_plan = {
			#Save travel leader
			travel_leader ?= { save_scope_as = travel_leader }
			#Save destination scope 
			next_destination_province = { save_scope_as = destination }
		}
		traveler_danger_xp_effect = {
			MIN = 3
			MAX = 6
		}
		create_character = {
			template = bandit_character
			culture = scope:siege_owner.culture
			faith = scope:siege_owner.faith
			location = root.location
			dynasty = none
			save_scope_as = soldier
		}
		scope:soldier = { add_character_flag = need_military_outfit }
	}

	option = { #Sneak
		name = travel_danger_events.6010.a
		duel = {
			skill = intrigue
			value = decent_skill_rating
			10 = {
				desc = travel_danger_events.6010.a.success
				compare_modifier = {
					value = scope:duel_value
					multiplier = 1
					min = -49
				}
				send_interface_toast = {
					title = travel_danger_events.6010.a.failure
					left_icon = root
					add_prestige = minor_prestige_loss
				}
				min = 1
			}
			10 = {
				desc = travel_danger_events.6010.a.failure
				min = 3
				compare_modifier = {
					value = scope:duel_value
					multiplier = -1
					min = -49
				}
				if = {
					limit = { is_at_war_with = scope:siege_owner }
					travel_danger_events_6010_imprison_effect = {
						IMPRISONER = scope:siege_owner
						TARGET = root
					}
				}
				else = { remove_short_term_gold = minor_gold_value }
			}
		}
		stress_impact = {
			arrogant = minor_stress_impact_gain
			brave = minor_stress_impact_gain
		}
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				has_trait = brave
			}
		}	
	}

	option = { #Impress
		name = {
			text = travel_danger_events.6010.b.friend
			trigger = {
				has_any_good_relationship_with_character_trigger = { CHARACTER = scope:siege_commander }
			}
		}
		name = {
			text = travel_danger_events.6010.b
			trigger = {
				NOT = {
					has_any_good_relationship_with_character_trigger = { CHARACTER = scope:siege_commander }
				}
			}
		}
		flavor = travel_danger_events.6010.b.flavor
		duel = {
			skill = diplomacy
			value = decent_skill_rating
			10 = {
				desc = travel_danger_events.6010.b.success
				compare_modifier = {
					value = scope:duel_value
					multiplier = 1
					min = -49
				}
				modifier = { # Rank
					add = {
						value = primary_title.tier
						multiply = 2
					}
				}
				modifier = { # Fame
					add = {
						value = prestige_level
						multiply = 2
					}
				}
				modifier = { # Hierachy
					add = 5
					any_vassal_or_below = { this = scope:siege_owner }
				}
				modifier = { # Hierachy
					add = 5
					any_vassal_or_below = { this = scope:siege_commander }
				}
				modifier = { # Relations
					add = 10
					has_any_good_relationship_with_character_trigger = { CHARACTER = scope:siege_commander }
				}
				modifier = { # Relations
					add = 10
					is_close_family_of = scope:siege_commander
				}
				opinion_modifier = { # Opinion
					who = scope:siege_commander
					opinion_target = root
					multiplier = 0.5
				}
				send_interface_toast = {
					title = travel_danger_events.6010.b.failure
					left_icon = root
					add_prestige = minor_prestige_gain
				}
			}
			10 = {
				desc = travel_danger_events.6010.b.failure
				min = 3
				compare_modifier = {
					value = scope:duel_value
					multiplier = -1
					min = -49
				}
				modifier = {
					add = 5
					is_at_war_with = scope:siege_owner
				}
				modifier = {
					add = 5
					has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:siege_commander }
				}
				opinion_modifier = {
					who = scope:siege_commander
					opinion_target = root
					multiplier = 0.5
				}
				if = {
					limit = { is_at_war_with = scope:siege_owner }
					travel_danger_events_6010_imprison_effect = {
						IMPRISONER = scope:siege_owner
						TARGET = root
					}
				}
				else = { remove_short_term_gold = minor_gold_value }
			}
		}
		stress_impact = {
			compassionate = medium_stress_impact_gain
			brave = minor_stress_impact_gain
		}
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				has_trait = humble
			}
		}
	}

	option = { #Intimidate
		name = travel_danger_events.6010.c
		duel = {
			skills = { martial prowess }
			value = decent_skill_rating
			10 = {
				desc = travel_danger_events.6010.c.success
				compare_modifier = {
					value = scope:duel_value
					multiplier = 1
					min = -49
				}
				modifier = { add = current_travel_plan.num_entourage_characters }
				modifier = { 
					add = {
						value = current_travel_plan.travel_safety
						divide = 20
					} 
				}
				modifier = {
					add = {
						value = dread
						divide = 4
					}
				}
				send_interface_toast = {
					title = travel_danger_events.6010.c.success
					left_icon = root
					add_prestige = medium_prestige_gain
				}
			}
			10 = {
				desc = travel_danger_events.6010.c.failure
				min = 3
				compare_modifier = {
					value = scope:duel_value
					multiplier = -1
					min = -49
				}
				if = {
					limit = { is_at_war_with = scope:siege_owner }
					travel_danger_events_6010_imprison_effect = {
						IMPRISONER = scope:siege_owner
						TARGET = root
					}
				}
				else = { remove_short_term_gold = minor_gold_value }
				current_travel_plan = {
					if = {
						limit = {
							any_entourage_character = { is_adult = yes }
						}
						random = {
							chance = 50
							custom_tooltip = travel_danger_events.6010.c.wound
							hidden_effect = {
								random_entourage_character = {
									limit = { is_adult = yes }
									weight = {
										base = 1
										modifier = { add = prowess }
										modifier = {
											add = 10
											has_court_position = bodyguard_court_position
										}  # Warcraft - Remove
										# modifier = {
										# 	add = 10
										# 	has_court_position = akolouthos_court_position
										# }
										modifier = {
											add = 10
											is_knight_of = root
										}
									}
									save_scope_as = woundee
								}
								root = {
									send_interface_toast = {
										title = travel_danger_events.6010.c.wound
										left_icon = scope:woundee
										scope:woundee = {
											increase_wounds_effect = { REASON = battle }
										}
									}
								}
							}
						}
					}
				}
			}
		}
		stress_impact = {
			craven = medium_stress_impact_gain
			lazy = minor_stress_impact_gain
		}
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				has_trait = craven
			}
		}
	}

	option = { #Bribe
		name = travel_danger_events.6010.d
		pay_short_term_gold = {
			target = scope:soldier
			gold = medium_gold_value
		}
		add_to_entourage_court_and_activity_effect = { 
			CHAR_TO_ADD = scope:soldier 
			NEW_COURT_OWNER = root 
		}
		stress_impact = {
			greedy = medium_stress_impact_gain
			brave = minor_stress_impact_gain
			arrogant = minor_stress_impact_gain
		}
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				has_trait = greedy
			}
			modifier = {
				factor = 0
				gold <= major_gold_value
			}
		}
	}

	after = {
		mp_resume_travel_plan = yes
		if = {
			limit = {
				NOT = {
					current_travel_plan = {
						any_entourage_character = { this = scope:soldier }
					}
				}
			}
			scope:soldier = { silent_disappearance_effect = yes }
		}
	}
}

travel_danger_events.6011 = { #Battal
	type = character_event
	title = travel_danger_events.6011.t
	desc = {
		desc = travel_danger_events.6011.intro
		first_valid = {
			triggered_desc = {
				trigger = {
					is_at_war_with = scope:battle_owner_1
					is_at_war_with = scope:battle_owner_2
				}
				desc = travel_danger_events.6011.battle_both
			}
			triggered_desc = {
				trigger = { is_at_war_with = scope:battle_owner_1 }
				desc = travel_danger_events.6011.war_battle_1
			}
			triggered_desc = {
				trigger = { is_at_war_with = scope:battle_owner_2 }
				desc = travel_danger_events.6011.war_battle_2
			}
			triggered_desc = {
				trigger = { is_allied_to = scope:battle_owner_1 }
				desc = travel_danger_events.6011.ally_battle_1
			}
			triggered_desc = {
				trigger = { is_allied_to = scope:battle_owner_2 }
				desc = travel_danger_events.6011.ally_battle_2
			}
			triggered_desc = {
				trigger = { has_relation_to = scope:battle_owner_1 }
				desc = travel_danger_events.6011.relation_battle_1
			}
			triggered_desc = {
				trigger = { has_relation_to = scope:battle_owner_2 }
				desc = travel_danger_events.6011.relation_battle_2
			}
			desc = travel_danger_events.6011.peace
		}
		first_valid = {
			triggered_desc = {
				trigger = { exists = scope:battle_war }
				desc = travel_danger_events.6011.war
			}
			triggered_desc = {
				trigger = {
					scope:battle_army_1 = { is_army_in_raid = yes }
					scope:battle_army_2 = { is_army_in_raid = yes }
				}
				desc = travel_danger_events.6011.raid_both
			}
			triggered_desc = {
				trigger = {
					OR = {
						scope:battle_army_1 = { is_army_in_raid = yes }
						scope:battle_army_2 = { is_army_in_raid = yes }
					}
				}
				desc = travel_danger_events.6011.raid
			}
			desc = travel_danger_events.6011.hostile
		}
		desc = travel_danger_events.6011.end
	}
	theme = travel_danger
	left_portrait = {
		character = root
		animation = worry
	}
	right_portrait = {
		character = scope:soldier
		triggered_animation = {
			trigger = {
				OR = {
					scope:battle_army_1 = { is_raid_army = yes }
					scope:battle_army_2 = { is_raid_army = yes }
				}
			}
			animation = throne_room_one_handed_passive_2
		}
		animation = throne_room_one_handed_passive_1
	}
	lower_left_portrait = scope:battle_commander_1
	lower_right_portrait = scope:battle_commander_2
	cooldown = { months = 1 }

	trigger = {
		is_location_valid_for_travel_event_on_land = yes
		location = {
			exists = province_owner
			travel_danger_type = {
				travel_plan = root.current_travel_plan
				type = battle
			}
			NOT = {
				any_army_in_location = { army_owner = root }
			}
			any_army_in_location = {
				is_army_in_combat = yes
				exists = army_commander
				save_temporary_scope_as = battle_army_1_temp
			}
			any_army_in_location = {
				NOT = { this = scope:battle_army_1_temp }
				is_army_in_combat = yes
				exists = army_commander
				army_owner ?= {
					OR = {
						is_at_war_with = scope:battle_army_1_temp.army_owner
						any_hostile_raider = { this = scope:battle_army_1_temp.army_owner }
					}
				}
			}
		}
	}
	
	weight_multiplier = {
		base = 1
	}

	immediate = {
		mp_delay_travel_plan = { DAYS = 90 }
		location = {
			ordered_army_in_location = {
				limit = { is_army_in_combat = yes }
				order_by = army_size
				save_scope_as = battle_army_1
				army_owner = { save_scope_as = battle_owner_1 }
				army_commander = { save_scope_as = battle_commander_1 }
			}
			ordered_army_in_location = {
				limit = {
					is_army_in_combat = yes
					army_owner ?= {
						OR = {
							is_at_war_with = scope:battle_owner_1
							any_hostile_raider = { this = scope:battle_owner_1 }
						}
					}
				}
				order_by = army_size
				save_scope_as = battle_army_2
				army_owner = {
					save_scope_as = battle_owner_2
					if = {
						limit = { is_at_war_with = scope:battle_owner_1 }
						random_character_war = {
							limit = {
								any_war_participant = { this = scope:battle_owner_1 }
							}
							save_scope_as = battle_war
						}
					}
				}
				army_commander = { save_scope_as = battle_commander_2 }
			}
		}
		current_travel_plan = {
			#Save travel leader
			travel_leader ?= { save_scope_as = travel_leader }
			#Save destination scope 
			next_destination_province = { save_scope_as = destination }
		}
		traveler_danger_xp_effect = {
			MIN = 3
			MAX = 6
		}
		hidden_effect = {
			random_list = {
				10 = {
					scope:battle_owner_1.culture = { save_scope_as = bandit_culture }
					scope:battle_owner_1.faith = { save_scope_as = bandit_faith }
				}
				10 = {
					scope:battle_owner_2.culture = { save_scope_as = bandit_culture }
					scope:battle_owner_2.faith = { save_scope_as = bandit_faith }
				}
			}
		}
		create_character = {
			template = bandit_character
			culture = scope:bandit_culture
			faith = scope:bandit_faith
			location = root.location
			dynasty = none
			save_scope_as = soldier
		}
		scope:soldier = { add_character_flag = need_military_outfit }
	}

	option = { #Sneak
		name = travel_danger_events.6010.a
		duel = {
			skill = intrigue
			value = decent_skill_rating
			10 = {
				desc = travel_danger_events.6010.a.success
				compare_modifier = {
					value = scope:duel_value
					multiplier = 1
					min = -49
				}
				send_interface_toast = {
					title = travel_danger_events.6010.a.failure
					left_icon = root
					add_prestige = minor_prestige_loss
				}
				min = 1
			}
			10 = {
				desc = travel_danger_events.6010.a.failure
				min = 3
				compare_modifier = {
					value = scope:duel_value
					multiplier = -1
					min = -49
				}
				if = {
					limit = { is_at_war_with = scope:battle_owner_1 }
					travel_danger_events_6010_imprison_effect = {
						IMPRISONER = scope:battle_owner_1
						TARGET = root
					}
				}
				else_if = {
					limit = { is_at_war_with = scope:battle_owner_2 }
					travel_danger_events_6010_imprison_effect = {
						IMPRISONER = scope:battle_owner_2
						TARGET = root
					}
				}
				else = { remove_short_term_gold = minor_gold_value }
			}
		}
		stress_impact = {
			arrogant = minor_stress_impact_gain
			brave = minor_stress_impact_gain
		}
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				has_trait = brave
			}
		}	
	}

	option = { #Impress
		name = travel_danger_events.6011.b
		flavor = travel_danger_events.6010.b.flavor
		duel = {
			skill = diplomacy
			value = decent_skill_rating
			10 = {
				desc = travel_danger_events.6010.b.success
				compare_modifier = {
					value = scope:duel_value
					multiplier = 1
					min = -49
				}
				modifier = {
					add = {
						value = primary_title.tier
						multiply = 2
					}
				}
				modifier = {
					add = {
						value = prestige_level
						multiply = 2
					}
				}
				modifier = {
					add = 5
					any_vassal_or_below = { this = scope:battle_commander_1 }
				}
				modifier = {
					add = 5
					any_vassal_or_below = { this = scope:battle_commander_2 }
				}
				modifier = {
					add = 5
					any_vassal_or_below = { this = scope:battle_owner_1 }
				}
				modifier = {
					add = 5
					any_vassal_or_below = { this = scope:battle_owner_2 }
				}
				modifier = { # Relations
					add = 10
					has_any_good_relationship_with_character_trigger = { CHARACTER = scope:battle_commander_1 }
				}
				modifier = { # Relations
					add = 10
					has_any_good_relationship_with_character_trigger = { CHARACTER = scope:battle_commander_2 }
				}
				modifier = { # Relations
					add = 10
					is_close_family_of = scope:battle_commander_1
				}
				modifier = { # Relations
					add = 10
					is_close_family_of = scope:battle_commander_2
				}
				opinion_modifier = {
					who = scope:battle_commander_1
					opinion_target = root
					multiplier = 0.25
				}
				opinion_modifier = {
					who = scope:battle_commander_2
					opinion_target = root
					multiplier = 0.25
				}
				send_interface_toast = {
					title = travel_danger_events.6010.b.failure
					left_icon = root
					add_prestige = minor_prestige_gain
				}
			}
			10 = {
				desc = travel_danger_events.6010.b.failure
				min = 3
				compare_modifier = {
					value = scope:duel_value
					multiplier = -1
					min = -49
				}
				modifier = {
					add = 5
					is_at_war_with = scope:battle_owner_1
				}
				modifier = {
					add = 5
					is_at_war_with = scope:battle_owner_2
				}
				modifier = {
					add = 5
					has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:battle_commander_1 }
				}
				modifier = {
					add = 5
					has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:battle_commander_2 }
				}
				opinion_modifier = {
					who = scope:battle_commander_1
					opinion_target = root
					multiplier = -0.25
				}
				opinion_modifier = {
					who = scope:battle_commander_2
					opinion_target = root
					multiplier = -0.25
				}
				if = {
					limit = { is_at_war_with = scope:battle_owner_1 }
					travel_danger_events_6010_imprison_effect = {
						IMPRISONER = scope:battle_owner_1
						TARGET = root
					}
				}
				else_if = {
					limit = { is_at_war_with = scope:battle_owner_2 }
					travel_danger_events_6010_imprison_effect = {
						IMPRISONER = scope:battle_owner_2
						TARGET = root
					}
				}
				else = { remove_short_term_gold = minor_gold_value }
			}
		}
		stress_impact = {
			compassionate = medium_stress_impact_gain
			brave = minor_stress_impact_gain
		}
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				has_trait = humble
			}
		}
	}

	option = { #Intimidate
		name = travel_danger_events.6010.c
		duel = {
			skills = { martial prowess }
			value = decent_skill_rating
			10 = {
				desc = travel_danger_events.6010.c.success
				compare_modifier = {
					value = scope:duel_value
					multiplier = 1
					min = -49
				}
				modifier = { add = current_travel_plan.num_entourage_characters }
				modifier = { 
					add = {
						value = current_travel_plan.travel_safety
						divide = 20
					} 
				}
				modifier = {
					add = {
						value = dread
						divide = 4
					}
				}
				send_interface_toast = {
					title = travel_danger_events.6010.c.success
					left_icon = root
					add_prestige = medium_prestige_gain
				}
			}
			10 = {
				desc = travel_danger_events.6010.c.failure
				min = 3
				compare_modifier = {
					value = scope:duel_value
					multiplier = -1
					min = -49
				}
				if = {
					limit = { is_at_war_with = scope:battle_owner_1 }
					travel_danger_events_6010_imprison_effect = {
						IMPRISONER = scope:battle_owner_1
						TARGET = root
					}
				}
				else_if = {
					limit = { is_at_war_with = scope:battle_owner_2 }
					travel_danger_events_6010_imprison_effect = {
						IMPRISONER = scope:battle_owner_2
						TARGET = root
					}
				}
				else = { remove_short_term_gold = minor_gold_value }
				random = {
					chance = 50
					custom_tooltip = travel_danger_events.6010.c.wound
					hidden_effect = {
						current_travel_plan = {
							random_entourage_character = {
								limit = { is_adult = yes }
								weight = {
									base = 1
									modifier = { add = prowess }
									modifier = {
										add = 10
										has_court_position = bodyguard_court_position
									}
									# modifier = {
									# 	add = 10
									# 	has_court_position = akolouthos_court_position
									# }
									modifier = {
										add = 10
										is_knight_of = root
									}
								}
								save_scope_as = woundee
							}
						}
						send_interface_toast = {
							title = travel_danger_events.6010.c.wound
							left_icon = scope:woundee
							scope:woundee = {
								increase_wounds_effect = { REASON = battle }
							}
						}
					}
				}
			}
		}
		stress_impact = {
			craven = medium_stress_impact_gain
			lazy = minor_stress_impact_gain
		}
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				has_trait = craven
			}
		}
	}

	option = { #Bribe
		name = travel_danger_events.6011.d
		pay_short_term_gold = {
			target = scope:soldier
			gold = medium_gold_value
		}
		add_to_entourage_court_and_activity_effect = { 
			CHAR_TO_ADD = scope:soldier 
			NEW_COURT_OWNER = root 
		}
		stress_impact = {
			greedy = medium_stress_impact_gain
			brave = minor_stress_impact_gain
			arrogant = minor_stress_impact_gain
		}
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				has_trait = greedy
			}
			modifier = {
				factor = 0
				gold <= major_gold_value
			}
		}
	}

	after = {
		mp_resume_travel_plan = yes
		if = {
			limit = {
				NOT = {
					current_travel_plan = {
						any_entourage_character = { this = scope:soldier }
					}
				}
			}
			scope:soldier = { silent_disappearance_effect = yes }
		}
	}
}

travel_danger_events.6012 = { #Army
	type = character_event
	title = travel_danger_events.6012.t
	desc = {
		desc = travel_danger_events.6012.intro
		first_valid = {
			triggered_desc = {
				trigger = { is_at_war_with = scope:army_owner }
				desc = travel_danger_events.6012.war
			}
			triggered_desc = {
				trigger = { is_allied_to = scope:army_owner }
				desc = travel_danger_events.6012.ally
			}
			triggered_desc = {
				trigger = { has_relation_to = scope:army_owner }
				desc = travel_danger_events.6012.relation
			}
			desc = travel_danger_events.6012.peace
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:army = { is_raid_army = yes }
				}
				desc = travel_danger_events.6012.raid
			}
			desc = travel_danger_events.6012.other
		}
		desc = travel_danger_events.6012.end
	}
	theme = travel_danger
	left_portrait = {
		character = root
		animation = worry
	}
	right_portrait = {
		character = scope:soldier
		triggered_animation = {
			trigger = {
				scope:army = { is_raid_army = yes }
			}
			animation = throne_room_one_handed_passive_2
		}
		animation = throne_room_one_handed_passive_1
	}
	lower_right_portrait = scope:army_owner
	lower_center_portrait = {
		trigger = {
			NOT = { scope:army_commander ?= scope:army_owner }
		}
		character = scope:army_commander
	}
	cooldown = { months = 1 }

	trigger = {
		is_location_valid_for_travel_event_on_land = yes
		location = {
			exists = province_owner
			travel_danger_type = {
				travel_plan = root.current_travel_plan
				type = army
			}
			NOR = {
				travel_danger_type = {
					travel_plan = root.current_travel_plan
					type = siege
				}
				travel_danger_type = {
					travel_plan = root.current_travel_plan
					type = raid
				}
				travel_danger_type = {
					travel_plan = root.current_travel_plan
					type = battle
				}
			}
			any_army_in_location = {
				exists = army_owner
				exists = army_commander
			}
			NOT = {
				any_army_in_location = { army_owner = root }
			}
		}
	}
	
	weight_multiplier = {
		base = 1
	}

	immediate = {
		mp_delay_travel_plan = { DAYS = 90 }
		location = {
			ordered_army_in_location = {
				order_by = army_size
				save_scope_as = army
				army_owner = { save_scope_as = army_owner }
				army_commander = { save_scope_as = army_commander }
			}
		}
		current_travel_plan = {
			#Save travel leader
			travel_leader ?= { save_scope_as = travel_leader }
			#Save destination scope 
			next_destination_province = { save_scope_as = destination }
		}
		traveler_danger_xp_effect = {
			MIN = 3
			MAX = 6
		}
		create_character = {
			template = bandit_character
			dynasty = none
			culture = scope:army_owner.culture
			faith = scope:army_owner.faith
			location = root.location
			save_scope_as = soldier
		}
		scope:soldier = { add_character_flag = need_military_outfit }
	}

	option = { #Sneak
		name = travel_danger_events.6010.a
		duel = {
			skill = intrigue
			value = decent_skill_rating
			10 = {
				desc = travel_danger_events.6010.a.success
				compare_modifier = {
					value = scope:duel_value
					multiplier = 1
					min = -49
				}
				send_interface_toast = {
					title = travel_danger_events.6010.a.failure
					left_icon = root
					add_prestige = minor_prestige_loss
				}
				min = 1
			}
			10 = {
				desc = travel_danger_events.6010.a.failure
				min = 3
				compare_modifier = {
					value = scope:duel_value
					multiplier = -1
					min = -49
				}
				if = {
					limit = { is_at_war_with = scope:army_owner }
					travel_danger_events_6010_imprison_effect = {
						IMPRISONER = scope:army_owner
						TARGET = root
					}
				}
				else = { remove_short_term_gold = minor_gold_value }
			}
		}
		stress_impact = {
			arrogant = minor_stress_impact_gain
			brave = minor_stress_impact_gain
		}
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				has_trait = brave
			}
		}	
	}

	option = { #Impress
		name = travel_danger_events.6010.b
		flavor = travel_danger_events.6010.b.flavor
		duel = {
			skill = diplomacy
			value = decent_skill_rating
			10 = {
				desc = travel_danger_events.6010.b.success
				compare_modifier = {
					value = scope:duel_value
					multiplier = 1
					min = -49
				}
				modifier = {
					add = {
						value = primary_title.tier
						multiply = 2
					}
				}
				modifier = {
					add = {
						value = prestige_level
						multiply = 2
					}
				}
				modifier = {
					add = 5
					any_vassal_or_below = { this = scope:army_commander }
				}
				modifier = {
					add = 5
					any_vassal_or_below = { this = scope:army_owner }
				}
				modifier = { # Relations
					add = 10
					has_any_good_relationship_with_character_trigger = { CHARACTER = scope:army_commander }
				}
				modifier = { # Relations
					add = 10
					is_close_family_of = scope:army_commander
				}
				opinion_modifier = {
					who = scope:army_commander
					opinion_target = root
					multiplier = 0.5
				}
				send_interface_toast = {
					title = travel_danger_events.6010.b.failure
					left_icon = root
					add_prestige = minor_prestige_gain
				}
			}
			10 = {
				desc = travel_danger_events.6010.b.failure
				min = 3
				compare_modifier = {
					value = scope:duel_value
					multiplier = -1
					min = -49
				}
				modifier = {
					add = 5
					is_at_war_with = scope:army_owner
				}
				modifier = {
					add = 5
					has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:army_commander }
				}
				opinion_modifier = {
					who = scope:army_commander
					opinion_target = root
					multiplier = -0.5
				}
				if = {
					limit = { is_at_war_with = scope:army_owner }
					travel_danger_events_6010_imprison_effect = {
						IMPRISONER = scope:army_owner
						TARGET = root
					}
				}
				else = { remove_short_term_gold = minor_gold_value }
			}
		}
		stress_impact = {
			compassionate = medium_stress_impact_gain
			brave = minor_stress_impact_gain
		}
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				has_trait = humble
			}
		}
	}

	option = { #Intimidate
		name = travel_danger_events.6010.c
		duel = {
			skills = { martial prowess }
			value = decent_skill_rating
			10 = {
				desc = travel_danger_events.6010.c.success
				compare_modifier = {
					value = scope:duel_value
					multiplier = 1
					min = -49
				}
				modifier = { add = current_travel_plan.num_entourage_characters }
				modifier = { 
					add = {
						value = current_travel_plan.travel_safety
						divide = 20
					} 
				}
				modifier = {
					add = {
						value = dread
						divide = 4
					}
				}
				send_interface_toast = {
					title = travel_danger_events.6010.c.success
					left_icon = root
					add_prestige = medium_prestige_gain
				}
			}
			10 = {
				desc = travel_danger_events.6010.c.failure
				min = 3
				compare_modifier = {
					value = scope:duel_value
					multiplier = -1
					min = -49
				}
				if = {
					limit = { is_at_war_with = scope:army_owner }
					travel_danger_events_6010_imprison_effect = {
						IMPRISONER = scope:army_owner
						TARGET = root
					}
				}
				else = { remove_short_term_gold = minor_gold_value }
				if = {
					limit = {
						current_travel_plan = { 
							any_entourage_character = {
								is_adult = yes
							}
						}
					}
					random = {
						chance = 50
						custom_tooltip = travel_danger_events.6010.c.wound
						hidden_effect = {
							current_travel_plan = {
								random_entourage_character = {
									limit = { is_adult = yes }
									weight = {
										base = 1
										modifier = { add = prowess }
										modifier = {
											add = 10
											has_court_position = bodyguard_court_position
										}
										# modifier = {
										# 	add = 10
										# 	has_court_position = akolouthos_court_position
										# }
										modifier = {
											add = 10
											is_knight_of = root
										}
									}
									save_scope_as = woundee
								}
							}
							send_interface_toast = {
								title = travel_danger_events.6010.c.wound
								left_icon = scope:woundee
								scope:woundee = {
									increase_wounds_effect = { REASON = battle }
								}
							}
						}
					}
				}
			}
		}
		stress_impact = {
			craven = medium_stress_impact_gain
			lazy = minor_stress_impact_gain
		}
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				has_trait = craven
			}
		}
	}

	option = { #Bribe
		name = travel_danger_events.6010.d
		pay_short_term_gold = {
			target = scope:soldier
			gold = medium_gold_value
		}
		add_to_entourage_court_and_activity_effect = { 
			CHAR_TO_ADD = scope:soldier 
			NEW_COURT_OWNER = root 
		}
		stress_impact = {
			greedy = medium_stress_impact_gain
			brave = minor_stress_impact_gain
			arrogant = minor_stress_impact_gain
		}
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				has_trait = greedy
			}
			modifier = {
				factor = 0
				gold <= major_gold_value
			}
		}
	}

	after = {
		mp_resume_travel_plan = yes
		if = {
			limit = {
				NOT = {
					current_travel_plan = {
						any_entourage_character = { this = scope:soldier }
					}
				}
			}
			scope:soldier = { silent_disappearance_effect = yes }
		}
	}
}

travel_danger_events.6013 = { #Occupation
	type = character_event
	title = travel_danger_events.6013.t
	desc = {
		desc = travel_danger_events.6013.intro
		first_valid = {
			triggered_desc = {
				trigger = { is_at_war_with = scope:occupy_owner }
				desc = travel_danger_events.6013.war_owner
			}
			triggered_desc = {
				trigger = { is_at_war_with = scope:occupy_victim }
				desc = travel_danger_events.6013.war_victim
			}
			triggered_desc = {
				trigger = { is_allied_to = scope:occupy_owner }
				desc = travel_danger_events.6013.ally_owner
			}
			triggered_desc = {
				trigger = { is_allied_to = scope:occupy_victim }
				desc = travel_danger_events.6013.ally_victim
			}
			triggered_desc = {
				trigger = { has_relation_to = scope:occupy_owner }
				desc = travel_danger_events.6013.relation_owner
			}
			triggered_desc = {
				trigger = { has_relation_to = scope:occupy_victim }
				desc = travel_danger_events.6013.relation_victim
			}
			desc = travel_danger_events.6013.peace
		}
		first_valid = {
			triggered_desc = {
				trigger = { exists = scope:occupy_war }
				desc = travel_danger_events.6013.war
			}
			desc = travel_danger_events.6013.hostile
		}
		desc = travel_danger_events.6013.end
	}
	theme = travel_danger
	left_portrait = {
		character = root
		animation = worry
	}
	right_portrait = {
		character = scope:soldier
		triggered_animation = {
			trigger = {
				scope:siege_army = { is_raid_army = yes }
			}
			animation = throne_room_one_handed_passive_2
		}
		animation = throne_room_one_handed_passive_1
	}
	lower_right_portrait = scope:occupy_owner
	lower_left_portrait = scope:occupy_victim
	cooldown = { months = 1 }

	trigger = {
		is_location_valid_for_travel_event_on_land = yes
		location = {
			exists = province_owner
			province_owner != barony.barony_controller
			travel_danger_type = {
				travel_plan = root.current_travel_plan
				type = occupation
			}
			NOR = {
				barony.barony_controller ?= root
				any_army_in_location = { army_owner = root }
			}
		}
	}
	
	weight_multiplier = {
		base = 1
	}

	immediate = {
		mp_delay_travel_plan = { DAYS = 90 }
		location = {
			barony.barony_controller = { save_scope_as = occupy_owner }
			province_owner = {
				save_scope_as = occupy_victim
				if = {
					limit = { is_at_war_with = scope:occupy_owner }
					random_character_war = {
						limit = {
							any_war_participant = { this = scope:occupy_owner }
						}
						save_scope_as = occupy_war
					}
				}
			}
		}
		current_travel_plan = {
			#Save travel leader
			travel_leader ?= { save_scope_as = travel_leader }
			#Save destination scope 
			next_destination_province = { save_scope_as = destination }
		}
		traveler_danger_xp_effect = {
			MIN = 3
			MAX = 6
		}
		create_character = {
			template = bandit_character
			dynasty = none
			culture = scope:occupy_owner.culture
			faith = scope:occupy_owner.faith
			location = root.location
			save_scope_as = soldier
		}
		scope:soldier = { add_character_flag = need_military_outfit }
	}

	option = { #Sneak
		name = travel_danger_events.6010.a
		duel = {
			skill = intrigue
			value = decent_skill_rating
			10 = {
				desc = travel_danger_events.6010.a.success
				compare_modifier = {
					value = scope:duel_value
					multiplier = 1
					min = -49
				}
				send_interface_toast = {
					title = travel_danger_events.6010.a.failure
					left_icon = root
					add_prestige = minor_prestige_loss
				}
				min = 1
			}
			10 = {
				desc = travel_danger_events.6010.a.failure
				min = 3
				compare_modifier = {
					value = scope:duel_value
					multiplier = -1
					min = -49
				}
				if = {
					limit = { is_at_war_with = scope:occupy_owner }
					travel_danger_events_6010_imprison_effect = {
						IMPRISONER = scope:occupy_owner
						TARGET = root
					}
				}
				else = { remove_short_term_gold = minor_gold_value }
			}
		}
		stress_impact = {
			arrogant = minor_stress_impact_gain
			brave = minor_stress_impact_gain
		}
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				has_trait = brave
			}
		}	
	}

	option = { #Impress
		name = travel_danger_events.6010.b
		flavor = travel_danger_events.6010.b.flavor
		duel = {
			skill = diplomacy
			value = decent_skill_rating
			10 = {
				desc = travel_danger_events.6010.b.success
				compare_modifier = {
					value = scope:duel_value
					multiplier = 1
					min = -49
				}
				modifier = {
					add = {
						value = primary_title.tier
						multiply = 2
					}
				}
				modifier = {
					add = {
						value = prestige_level
						multiply = 2
					}
				}
				modifier = {
					add = 5
					any_vassal_or_below = { this = scope:occupy_owner }
				}
				modifier = { # Relations
					add = 10
					has_any_good_relationship_with_character_trigger = { CHARACTER = scope:occupy_owner }
				}
				modifier = { # Relations
					add = 10
					is_close_family_of = scope:occupy_owner
				}
				opinion_modifier = {
					who = scope:occupy_owner
					opinion_target = root
					multiplier = 0.25
				}
				send_interface_toast = {
					title = travel_danger_events.6010.b.failure
					left_icon = root
					add_prestige = minor_prestige_gain
				}
			}
			10 = {
				desc = travel_danger_events.6010.b.failure
				min = 3
				compare_modifier = {
					value = scope:duel_value
					multiplier = -1
					min = -49
				}
				modifier = {
					add = 5
					is_at_war_with = scope:occupy_owner
				}
				modifier = {
					add = 5
					has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:occupy_owner }
				}
				opinion_modifier = {
					who = scope:occupy_owner
					opinion_target = root
					multiplier = -0.25
				}
				if = {
					limit = { is_at_war_with = scope:occupy_owner }
					travel_danger_events_6010_imprison_effect = {
						IMPRISONER = scope:occupy_owner
						TARGET = root
					}
				}
				else = { remove_short_term_gold = minor_gold_value }
			}
		}
		stress_impact = {
			compassionate = medium_stress_impact_gain
			brave = minor_stress_impact_gain
		}
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				has_trait = humble
			}
		}
	}

	option = { #Intimidate
		name = travel_danger_events.6010.c
		duel = {
			skills = { martial prowess }
			value = decent_skill_rating
			10 = {
				desc = travel_danger_events.6010.c.success
				compare_modifier = {
					value = scope:duel_value
					multiplier = 1
					min = -49
				}
				modifier = { add = current_travel_plan.num_entourage_characters }
				modifier = { 
					add = {
						value = current_travel_plan.travel_safety
						divide = 20
					} 
				}
				modifier = {
					add = {
						value = dread
						divide = 4
					}
				}
				send_interface_toast = {
					title = travel_danger_events.6010.c.success
					left_icon = root
					add_prestige = medium_prestige_gain
				}
			}
			10 = {
				desc = travel_danger_events.6010.c.failure
				min = 3
				compare_modifier = {
					value = scope:duel_value
					multiplier = 1
					min = -49
				}
				if = {
					limit = { is_at_war_with = scope:occupy_owner }
					travel_danger_events_6010_imprison_effect = {
						IMPRISONER = scope:occupy_owner
						TARGET = root
					}
				}
				else = { remove_short_term_gold = minor_gold_value }
				if = {
					limit = {
						current_travel_plan = {
							any_entourage_character = {
								is_adult = yes
							}
						}
					}
					random = {
						chance = 50
						custom_tooltip = travel_danger_events.6010.c.wound
						hidden_effect = {
							current_travel_plan = {
								random_entourage_character = {
									limit = { is_adult = yes }
									weight = {
										base = 1
										modifier = { add = prowess }
										modifier = {
											add = 10
											has_court_position = bodyguard_court_position
										}
										# modifier = {
										# 	add = 10
										# 	has_court_position = akolouthos_court_position
										# }
										modifier = {
											add = 10
											is_knight_of = root
										}
									}
									save_scope_as = woundee
								}
							}
							send_interface_toast = {
								title = travel_danger_events.6010.c.wound
								left_icon = scope:woundee
								scope:woundee = {
									increase_wounds_effect = { REASON = battle }
								}
							}
						}
					}
				}
			}
		}
		stress_impact = {
			craven = medium_stress_impact_gain
			lazy = minor_stress_impact_gain
		}
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				has_trait = craven
			}
		}
	}

	option = { #Bribe
		name = travel_danger_events.6010.d
		pay_short_term_gold = {
			target = scope:soldier
			gold = medium_gold_value
		}
		add_to_entourage_court_and_activity_effect = { 
			CHAR_TO_ADD = scope:soldier 
			NEW_COURT_OWNER = root 
		}
		stress_impact = {
			greedy = medium_stress_impact_gain
			brave = minor_stress_impact_gain
			arrogant = minor_stress_impact_gain
		}
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				has_trait = greedy
			}
			modifier = {
				factor = 0
				gold <= major_gold_value
			}
		}
	}

	after = {
		mp_resume_travel_plan = yes
		if = {
			limit = {
				NOT = {
					current_travel_plan = {
						any_entourage_character = { this = scope:soldier }
					}
				}
			}
			scope:soldier = { silent_disappearance_effect = yes }
		}
	}
}

scripted_trigger travel_danger_events_6020_flavor_trigger = {
	always = no #WARCRAFT
	#NOR = {
		#scope:hugger ?= this
		#scope:prayer ?= this
		#scope:diver ?= this
	#}
}

# travel_danger_events.6020 = { #Craig
# 	type = character_event
# 	title = travel_danger_events.6020.t
# 	desc = {
# 		desc = travel_danger_events.6020.desc
# 		first_valid = {
# 			triggered_desc = {
# 				trigger = { exists = scope:hugger }
# 				desc = travel_danger_events.6020.hugger
# 			}
# 			triggered_desc = {
# 				trigger = { exists = scope:prayer }
# 				desc = travel_danger_events.6020.prayer
# 			}
# 			triggered_desc = {
# 				trigger = { exists = scope:diver }
# 				desc = travel_danger_events.6020.diver
# 			}
# 			triggered_desc = {
# 				trigger = { exists = scope:director }
# 				desc = travel_danger_events.6020.director
# 			}
# 			desc = travel_danger_events.6020.fallback
# 		}
# 	}
# 	theme = travel_danger
# 	override_background = { reference = ocean }
# 	left_portrait = {
# 		character = root
# 		animation = fear
# 		animate_if_dead = yes
# 	}
# 	right_portrait = {
# 		character = scope:hugger
# 		animation = shock
# 		animate_if_dead = yes
# 	}
# 	lower_left_portrait = scope:prayer
# 	lower_center_portrait = scope:diver
# 	lower_right_portrait = scope:director
# 	cooldown = { months = 1 }

# 	trigger = {
# 		current_travel_plan.days_travelled >= 15
# 		location = {
# 			OR = {
# 				travel_danger_type = {
# 					travel_plan = root.current_travel_plan
# 					terrain = sea
# 				}
# 				travel_danger_type = {
# 					travel_plan = root.current_travel_plan
# 					terrain = coastal_sea
# 				}
# 			}
# 		}
# 		# Warcraft - So important character dont die first 5 years after game start
# 		NOT = { has_character_modifier = important_lore_character }
# 	}
	
# 	weight_multiplier = {
# 		base = 1
# 		modifier = {
# 			factor = 0.25
# 			location = {
# 				travel_danger_type = {
# 					travel_plan = root.current_travel_plan
# 					terrain = coastal_sea
# 				}
# 			}
# 		}
# 	}

# 	immediate = {
# 		mp_delay_travel_plan = { DAYS = 90 }
# 		current_travel_plan = {
# 			#Save travel leader
# 			travel_leader ?= { save_scope_as = travel_leader }
# 			#Save destination scope 
# 			next_destination_province = { save_scope_as = destination }
# 			random_entourage_character = {
# 				weight = {
# 					base = 1
# 					is_of_minor_interest_to_weight_up_modifier = { CHARACTER = root }
# 					is_of_major_interest_to_weight_up_modifier = { CHARACTER = root }
# 				}
# 				save_scope_as = hugger
# 			}
# 			random_entourage_character = {
# 				limit = { travel_danger_events_6020_flavor_trigger = yes }
# 				weight = {
# 					base = 1
# 					modifier = { add = ai_zeal }
# 				}
# 				save_scope_as = prayer
# 			}
# 			random_entourage_character = {
# 				limit = { travel_danger_events_6020_flavor_trigger = yes }
# 				weight = {
# 					base = 1
# 					modifier = {
# 						add = {
# 							value = 0
# 							subtract = ai_rationality
# 						}
# 					}
# 				}
# 				save_scope_as = diver
# 			}
# 			random_entourage_character = {
# 				limit = { travel_danger_events_6020_flavor_trigger = yes }
# 				weight = {
# 					base = 1
# 					modifier = { add = ai_boldness }
# 				}
# 				save_scope_as = director
# 			}
# 		}
# 		# Warcraft
# 		# For correct order
# 		show_as_tooltip = {
# 			override_death_effect = { death_reason = death_sea_storm }
# 		}
# 		current_travel_plan = {
# 			every_entourage_character = {
# 				override_death_effect = { death_reason = death_sea_storm }
# 			}
# 		}
# 		hidden_effect = {
# 			override_death_effect = { death_reason = death_sea_storm }
# 		}
# 	}

# 	option = { #CRAIG
# 		name = travel_danger_events.6020.a	
# 	}

# 	after = {
# 		mp_resume_travel_plan = yes	
# 	}
# }

travel_danger_events.6030 = { #Spoiled food
	type = character_event
	title = travel_danger_events.6030.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { exists = scope:travel_leader }
				desc = travel_danger_events.6030.leader
			}
			desc = travel_danger_events.6030.fallback
		}
		desc = travel_danger_events.6030.desc
	}
	theme = travel_danger
	left_portrait = {
		character = root
		animation = disapproval
	}
	right_portrait = {
		character = scope:travel_leader
		animation = stress
	}
	cooldown = { months = 6 }

	trigger = {
		current_travel_plan.days_travelled >= 15
		is_adult = yes
		current_travel_plan = {
			any_entourage_character = {
				is_adult = yes
				NOT = { this = root }
			}
		}
		location = {
			is_sea_province = no
		}
	}
	
	weight_multiplier = {
		base = 1
		modifier = { #Less likely if you have a logistician
			add = -0.75
			current_travel_plan = {
				any_entourage_character = {
					has_trait = logistician
				}
			}
		}
	}

	immediate = {
		mp_delay_travel_plan = { DAYS = 90 }
		current_travel_plan = {
			#Save travel leader
			#Mainly used for narrative
			if = {
				limit = { exists = travel_leader }
				travel_leader ?= { save_scope_as = travel_leader }
			}
			else = {
				random_entourage_character = {
					limit = {
						is_adult = yes
						is_courtier_of = root
					}
					alternative_limit = { is_adult = yes }
					save_scope_as = travel_leader
				}
			}
			#Save highest learning character - used for foraging
			ordered_entourage_character = {
				limit = {
					is_adult = yes
					NOT = { this = root }
				}
				order_by = learning
				save_scope_as = highest_learning_entourage_member
			}
			#Save destination scope 
			next_destination_province = { save_scope_as = destination }
		}
	}

	option = { #Eat
		name = travel_danger_events.6030.a
		domicile ?= {
			change_provisions = minor_provisions_loss
		}
		if = {
			limit = {
				NOT = { has_trait = ill }
			}
			random = {
				chance = 40
				modifier = {
					has_trait = strong
					add = -10
				}
				modifier = {
					has_trait = physique_good_1
					add = -5
				}
				modifier = {
					has_trait = physique_good_2
					add = -10
				}
				modifier = {
					has_trait = physique_good_3
					add = -15
				}
				modifier = {
					current_travel_plan = {
						any_entourage_character = {
							has_trait = lifestyle_herbalist
						}
					}
					add = -10
				}
				contract_disease_effect = { DISEASE = ill TREATMENT_EVENT = yes }
			}
		}
		else = {
			random = {
				chance = 50
				modifier = {
					has_trait = strong
					add = -10
				}
				modifier = {
					has_trait = physique_good_1
					add = -5
				}
				modifier = {
					has_trait = physique_good_2
					add = -10
				}
				modifier = {
					has_trait = physique_good_3
					add = -15
				}
				modifier = {
					current_travel_plan = {
						any_entourage_character = {
							has_trait = logistician
						}
					}
					add = -10
				}
				modifier = {
					current_travel_plan = {
						any_entourage_character = {
							has_trait = lifestyle_herbalist
						}
					}
					add = -10
				}
				add_character_modifier = {
					modifier = bad_soup_modifier
					years = 5
				}
			}
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = 0.5
				ai_rationality = -0.5
			}
		}
	}

	option = { #Forage
		name = travel_danger_events.6030.b
		skill = learning
		if = {
			limit = {
				exists = scope:highest_learning_entourage_member
				scope:highest_learning_entourage_member.learning > learning
			}
			scope:highest_learning_entourage_member = {
				duel = {
					skill = learning
					value = medium_skill_rating
					15 = { # Find something
						desc = travel_danger_events.6030.b.success
						compare_modifier = {
							value = scope:duel_value
							multiplier = 1
							min = -49
						}
						modifier = {
							add = {
								value = root.learning
								divide = 2
							}
						}
						modifier = {
							location = {
								OR = {
									terrain = jungle
									terrain = mountains
									terrain = desert
									terrain = desert_mountains
								}
							}
							add = -10
						}
						modifier = {
							has_trait_xp = {
								trait = lifestyle_traveler
								track = danger
								value > 50
							}
							add = 10
						}
						modifier = {
							location = {
								OR = {
									terrain = sea
									terrain = coastal_sea
									terrain = farmlands
								}
							}
							add = 20
						}
						modifier = {
							current_travel_plan = {
								any_entourage_character = {
									has_trait = lifestyle_hunter
								}
							}
							add = 10
						}
						modifier = {
							OR = {
								AND = {
									location = {
										OR = {
											terrain = forest
											terrain = taiga
										}
									}
									OR = {
										has_trait = forest_fighter
										root = { has_trait = forest_fighter }
									}
								}
								AND = {
									location = {
										OR = {
											terrain = plains
											terrain = steppe
										}
									}
									OR = {
										has_trait = forest_fighter
										root = { has_trait = forest_fighter }
									}
									has_trait = forest_fighter
								}
								AND = {
									location = {
										OR = {
											terrain = hills
											terrain = mountains
											terrain = wetlands
										}
									}
									OR = {
										has_trait = rough_terrain_expert
										root = { has_trait = rough_terrain_expert }
									}
								}
								AND = {
									location = {
										OR = {
											terrain = drylands
											terrain = desert
											terrain = desert_mountains
											terrain = oasis
										}
									}
									OR = {
										has_trait = desert_warrior
										root = { has_trait = desert_warrior }
									}
								}
								AND = {
									location = { terrain = jungle }
									OR = {
										has_trait = jungle_stalker
										root = { has_trait = jungle_stalker }
									}
								}
							}
							add = 20
						}
						min = 1
						domicile ?= {
							change_provisions = minor_provisions_loss
						}
					}
					5 = { # Poison self
						desc = travel_danger_events.6030.b.critical
						min = 1
						compare_modifier = {
							value = scope:duel_value
							multiplier = -1
							min = -49
						}

						modifier = {
							current_travel_plan = {
								any_entourage_character = {
									has_trait = lifestyle_herbalist
								}
							}
							add = -10
						}
						root = {
							contract_disease_effect = { DISEASE = ill TREATMENT_EVENT = yes }
							domicile ?= {
								change_provisions = medium_provisions_loss
							}
						}
					}
					1 = { # Poison self real bad
						desc = travel_danger_events.6030.b.death
						min = 1
						trigger = {
							is_location_valid_for_travel_event_on_land = yes }
						#Chances of finding a deadly poisonous fish on the game map is low
						compare_modifier = {
							value = scope:duel_value
							multiplier = -1
							min = -49
						}
						modifier = {
							current_travel_plan = {
								any_entourage_character = {
									has_trait = lifestyle_herbalist
								}
							}
							add = -10
						}
						modifier = {
							root = { has_trait = strong }
							add = -2
						}
						modifier = {
							root = { has_trait = physique_good_1 }
							add = -2
						}
						modifier = {
							root = { has_trait = physique_good_2 }
							add = -2
						}
						modifier = {
							root = { has_trait = physique_good_3 }
							add = -2
						}
						root = {
							override_death_effect = { death_reason = death_poisonous_forage }  # Warcraft
							domicile ?= {
								change_provisions = medium_provisions_loss
							}
						}
					}
				}
			}
		}
		else = {
			duel = {
				skill = learning
				value = medium_skill_rating
				15 = { # Find something
					desc = travel_danger_events.6030.b.success
					compare_modifier = {
						value = scope:duel_value
						multiplier = 1
						min = -49
					}
					modifier = {
						exists = scope:highest_learning_entourage_member
						add = {
							value = scope:highest_learning_entourage_member.learning
							divide = 2
						}
					}
					modifier = {
						location = {
							OR = {
								terrain = sea
								terrain = coastal_sea
								terrain = farmlands
							}
						}
						add = 20
					}
					modifier = {
						has_trait_xp = {
							trait = lifestyle_traveler
							track = danger
							value > 50
						}
						add = 10
					}
					modifier = {
						location = {
							OR = {
								terrain = jungle
								terrain = mountains
								terrain = desert
								terrain = desert_mountains
							}
						}
						add = -10
					}
					modifier = {
						current_travel_plan = {
							any_entourage_character = {
								has_trait = lifestyle_hunter
							}
						}
						add = 10
					}
					modifier = {
						OR = {
							AND = {
								location = {
									OR = {
										terrain = forest
										terrain = taiga
									}
								}
								OR = {
									has_trait = forest_fighter
									scope:travel_leader = { has_trait = forest_fighter }
								}
							}
							AND = {
								location = {
									OR = {
										terrain = plains
										terrain = steppe
										terrain = farmlands
									}
								}
								OR = {
									has_trait = open_terrain_expert
									scope:travel_leader = { has_trait = open_terrain_expert }
								}
							}
							AND = {
								location = {
									OR = {
										terrain = hills
										terrain = mountains
										terrain = wetlands
									}
								}
								OR = {
									has_trait = rough_terrain_expert
									scope:travel_leader = { has_trait = rough_terrain_expert }
								}
							}
							AND = {
								location = {
									OR = {
										terrain = drylands
										terrain = desert
										terrain = desert_mountains
										terrain = oasis
									}
								}
								OR = {
									has_trait = desert_warrior
									scope:travel_leader = { has_trait = desert_warrior }
								}
							}
							AND = {
								location = { terrain = jungle }
								OR = {
									has_trait = jungle_stalker
									scope:travel_leader = { has_trait = jungle_stalker }
								}
							}
						}
						add = 20
					}
					min = 1
					domicile ?= {
						change_provisions = minor_provisions_loss
					}
				}
				5 = { # Poison self
					desc = travel_danger_events.6030.b.critical
					min = 1
					compare_modifier = {
						value = scope:duel_value
						multiplier = -1
						min = -49
					}

					modifier = {
						current_travel_plan = {
							any_entourage_character = {
								has_trait = lifestyle_herbalist
							}
						}
						add = -10
					}

					contract_disease_effect = { DISEASE = ill TREATMENT_EVENT = yes }
					domicile ?= {
						change_provisions = medium_provisions_loss
					}
				}
				1 = { # Poison self real bad
					desc = travel_danger_events.6030.b.death
					min = 1
					trigger = {
						is_location_valid_for_travel_event_on_land = yes
					} #Chances of finding a deadly poisonous fish on the game map is low
					compare_modifier = {
						value = scope:duel_value
						multiplier = -1
						min = -49
					}
					modifier = {
						current_travel_plan = {
							any_entourage_character = {
								has_trait = lifestyle_herbalist
							}
						}
						add = -10
					}
					modifier = {
						has_trait = strong
						add = -2
					}
					modifier = {
						has_trait = physique_good_1
						add = -2
					}
					modifier = {
						has_trait = physique_good_2
						add = -2
					}
					modifier = {
						has_trait = physique_good_3
						add = -2
					}
					override_death_effect = { death_reason = death_poisonous_forage } # Warcraft
					domicile ?= {
						change_provisions = medium_provisions_loss
					}
				}
			}
		}
		ai_chance = {
			base = 10 #Ai more reluctant to pick things that have a chance of killing them.
			ai_value_modifier = {
				ai_energy = 0.5
				ai_rationality = 0.5
			}
		}
	}

	option = { #Steal
		name = travel_danger_events.6030.c
		add_prestige = minor_prestige_loss
		trigger = {
			is_location_valid_for_travel_event_on_land = yes #No one to steal from at sea
		}
		domicile ?= {
			change_provisions = minor_provisions_loss
		}
		if = {
			limit = {
				exists = location.province_owner
				location.province_owner.top_liege = root.top_liege
			}
			location = {
				if = {
					limit = {
						NOT = { province_owner = root }
					}
					province_owner = {
						add_opinion = {
							target = root
							modifier = annoyed_opinion
							opinion = -10
						}
					}
				}
				county = {
					add_county_modifier = {
						modifier = travel_stealing_food_modifier
						years = 5
					}
				}
			}
		}
		else = {
			random = {
				chance = 50
				modifier = {
					NOT = { exists = location.province_owner }
					add = -15 #Easier to steal from locals if they don't have anyone protecting them.
				}
				custom_tooltip = travel_danger_events.6010.c.wound
				hidden_effect = {
					current_travel_plan = {
						random_entourage_character = {
							limit = { is_adult = yes }
							weight = {
								base = 1
								modifier = { add = prowess }
								modifier = {
									add = 10
									has_court_position = bodyguard_court_position
								}  # Warcraft - Remove
								# modifier = {
								# 	add = 10
								# 	has_court_position = akolouthos_court_position
								# }
								modifier = {
									add = 10
									is_knight_of = root
								}
							}
							save_scope_as = woundee
						}
					}
					send_interface_toast = {
						title = travel_danger_events.6010.c.wound
						left_icon = scope:woundee
						scope:woundee = {
							increase_wounds_effect = { REASON = battle }
						}
					}
				}
			}
		}
		stress_impact = {
			just = minor_stress_impact_gain
			generous = minor_stress_impact_gain
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_energy = -0.5
				ai_honor = -0.5
			}
			modifier = {
				prestige <= minor_prestige_value
				factor = 0
			}
		}
	}

	after = {
		mp_resume_travel_plan = yes	
		traveler_danger_xp_effect = {
			MIN = 3
			MAX = 6
		}
	}
}

travel_danger_events.6040 = { #Disease
	type = character_event
	title = travel_danger_events.6040.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					location = {
						OR = {
							travel_danger_type = {
								travel_plan = root.current_travel_plan
								terrain = wetlands
							}
							travel_danger_type = {
								travel_plan = root.current_travel_plan
								terrain = jungle
							}
						}
					}
				}
				desc = travel_danger_events.6040.wet
			}
			desc = travel_danger_events.6040.war
		}
		desc = travel_danger_events.6040.desc
	}
	theme = travel_danger
	left_portrait = {
		character = root
		animation = sick
	}
	right_portrait = {
		character = scope:travel_leader
		animation = worry
	}
	lower_right_portrait = {
		character = scope:physician
		trigger = {
			NAND = {
				exists = scope:travel_leader
				scope:physician ?= scope:travel_leader
			}
		}
	}
	cooldown = { months = 6 }

	trigger = {
		current_travel_plan.days_travelled >= 15
		is_adult = yes
		is_healthy = yes
		NOR = {
			has_trait = ill
			has_trait = leper
			has_trait = cancer
		}
		location = {
			exists = province_owner
			OR = {
				travel_danger_type = { travel_plan = root.current_travel_plan terrain = wetlands }
				travel_danger_type = { travel_plan = root.current_travel_plan terrain = jungle }
				travel_danger_type = { travel_plan = root.current_travel_plan type = occupation }
				travel_danger_type = { travel_plan = root.current_travel_plan type = army }
				travel_danger_type = { travel_plan = root.current_travel_plan type = siege }
				travel_danger_type = { travel_plan = root.current_travel_plan type = battle }
			}
		}
		trigger_if = {
			limit = {
				exists = involved_activity
			}
			NOT = {
				involved_activity.activity_host = root
			}
		}
	}
	
	weight_multiplier = {
		base = 1
	}

	immediate = {
		mp_delay_travel_plan = { DAYS = 90 }
		current_travel_plan = {
			#Save travel leader
			travel_leader ?= { save_scope_as = travel_leader }
			#Save destination scope 
			next_destination_province = { save_scope_as = destination }
		}
		if = { #add a physician if you have one 
			limit = { court_physician_available_trigger = yes }
			save_court_physician_as_effect = { SCOPE_NAME = physician }
		}
		hidden_effect = {
			random_list = {
				15 = { save_scope_as = ill }
				5 = {
					trigger = {
						location = {
							NOR = {
								travel_danger_type = { travel_plan = root.current_travel_plan terrain = wetlands }
								travel_danger_type = { travel_plan = root.current_travel_plan terrain = jungle }
							}
						}
					}
					save_scope_as = typhus
				}
				5 = {
					trigger = {
						location = {
							OR = {
								travel_danger_type = { travel_plan = root.current_travel_plan terrain = wetlands }
								travel_danger_type = { travel_plan = root.current_travel_plan terrain = jungle }
							}
						}
					}
					save_scope_as = consumption
				}
				1 = { save_scope_as = smallpox }
			}
		}
		switch = {
			trigger = exists
			scope:ill = {
				contract_disease_effect = { DISEASE = ill TREATMENT_EVENT = yes }
			}
			scope:typhus = {
				contract_disease_effect = { DISEASE = typhus TREATMENT_EVENT = yes }
			}
			scope:consumption = {
				contract_disease_effect = { DISEASE = consumption TREATMENT_EVENT = yes }
			}
			scope:smallpox = {
				contract_disease_effect = { DISEASE = smallpox TREATMENT_EVENT = yes }
			}
		}
	}

	option = { #Go home
		name = travel_danger_events.6040.a
		trigger = {
			NOT = { current_travel_plan.next_destination_province = root.capital_province }
		}
		current_travel_plan = { cancel_travel_plan = yes }
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_boldness = 0.5
				ai_energy = -0.5
				ai_rationality = -0.5
			}
			modifier = {
				factor = 0
				is_landless_adventurer = yes
			}
		}
	}

	option = { #Treatment
		name = travel_danger_events.6040.b
		trigger = {
			custom_tooltip = {
				text = court_physician_not_employed_or_away_tt
				court_physician_available_trigger = yes
			}
		}
		show_as_unavailable = { always = yes }
		safe_disease_treatment_effect = { PATIENT = root TREATMENT_PICKER = root }
		ai_chance = {
			base = 500
		}
	}

	option = { #Press on
		name = travel_danger_events.6040.c
		trigger = { court_physician_available_trigger = no }
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_boldness = 0.5
				ai_energy = -0.5
				ai_rationality = -0.5
			}
			modifier = {
				add = 100
				is_landless_adventurer = yes
			}
		}
	}

	after = {
		mp_resume_travel_plan = yes	
	}
}


