types ToolsProperyTypes
{
	type tools_property = flowcontainer {
		tooltipwidget = {
			using = dockable_tooltip
		}

		spacing = 4
		
		layoutpolicy_horizontal = preferred
		layoutpolicy_vertical = preferred

		tooltip = "[ToolProperty.GetTooltip]"
		tooltip_widgetanchor = bottom|left

		block "content"
		{
		}
	}
	
	type tools_property_bool = tools_property {
		blockoverride "content"
		{
			checkbutton = {
				gfxtype = checkbuttongfx
				shaderfile = "gfx/FX/pdxgui_pushbutton.shader"
				texture = "gfx/editor_gui/editor_checkbox.dds"
				framesize = { 16 16 }
				enabled = "[ToolProperty.IsActive]"
				checked = "[ToolPropertyBool.IsEnabled]"
				onclick = "[ToolPropertyBool.SetEnabled(Not(ToolPropertyBool.IsEnabled))]"
			}
		}
	}

	type tools_property_string = tools_property {
		blockoverride "content"
		{
			editor_textinput = {
				size = { 48 16 }
				fontsize = 10
				text = "[ToolPropertyString.GetString]"
				oneditingfinished_with_changes = "[ToolPropertyString.SetString]"
			}
		}
	}
		
	type tools_property_cstring = tools_property {
		blockoverride "content"
		{
			editor_textinput = {
				size = { 48 16 }
				fontsize = 10
				text = "[ToolPropertyCString.GetString]"
				oneditingfinished_with_changes = "[ToolPropertyCString.SetString]"
			}
		}
	}

	type tools_property_float = tools_property {
		blockoverride "content"
		{
			editor_textinput = {
				size = { 48 16 }
				fontsize = 10
				text = "[ToolPropertyFloat.GetFloat]"
				oneditingfinished_with_changes = "[ToolPropertyFloat.SetFloat]"
			}
		}
	}
	
	type tools_property_int8 = tools_property {
		blockoverride "content"
		{
			editor_textinput = {
				size = { 48 16 }
				fontsize = 10
				text = "[ToolPropertyInt8.GetInt8]"
				oneditingfinished_with_changes = "[ToolPropertyInt8.SetInt8]"
			}
		}
	}
	
	type tools_property_uint8 = tools_property {
		blockoverride "content"
		{
			editor_textinput = {
				size = { 48 16 }
				fontsize = 10
				text = "[ToolPropertyUint8.GetUint8]"
				oneditingfinished_with_changes = "[ToolPropertyUint8.SetUint8]"
			}
		}
	}
	
	type tools_property_int16 = tools_property {
		blockoverride "content"
		{
			editor_textinput = {
				size = { 48 16 }
				fontsize = 10
				text = "[ToolPropertyInt16.GetInt16]"
				oneditingfinished_with_changes = "[ToolPropertyInt16.SetInt16]"
			}
		}
	}
	
	type tools_property_uint16 = tools_property {
		blockoverride "content"
		{
			editor_textinput = {
				size = { 48 16 }
				fontsize = 10
				text = "[ToolPropertyUint16.GetUint16]"
				oneditingfinished_with_changes = "[ToolPropertyUint16.SetUint16]"
			}
		}
	}
	
	type tools_property_int = tools_property {
		blockoverride "content"
		{
			editor_textinput = {
				size = { 48 16 }
				fontsize = 10
				text = "[ToolPropertyInt.GetInt]"
				oneditingfinished_with_changes = "[ToolPropertyInt.SetInt]"
			}
		}
	}
	
	type tools_property_uint = tools_property {
		blockoverride "content"
		{
			editor_textinput = {
				size = { 48 16 }
				fontsize = 10
				text = "[ToolPropertyUint.GetUint]"
				oneditingfinished_with_changes = "[ToolPropertyUint.SetUint]"
			}
		}
	}
	
	type tools_property_enum = tools_property {
		blockoverride "content"
		{
			dropdown = {
				name = "tools_property_enum_dropdown"
				using = settings_dropdown
				datamodel = "[CPdxEnumValue.GetDropdownEntries]"
				onselectionchanged = "[CPdxEnumValue.SetDropdownValueIndex]"
				selectedindex = "[CPdxEnumValue.GetDropdownValueIndex]"
				blockoverride "dropdown_item_size" { size = { 220 20 } }
				blockoverride "dropdown_list_position" { position = { 0 20 } }
				blockoverride "dropdown_gridbox_size" { addcolumn = 220  addrow = 20 }
				blockoverride "dropdown_item_text" { text = "[CString.GetString]" }
			}
		}
	}

	type tools_property_color = tools_property {
		blockoverride "content"
		{
			tools_colorpicker = {
				color = "[ToolPropertyColor.GetColor]"
				#oncoloredited = "[ToolPropertyColor.SetColor]"
				oneditingfinished_with_changes = "[ToolPropertyColor.SetColor]"
			}
		}
	}
	
	type tools_property_curve = tools_property {
		blockoverride "content"
		{
			widget = {
				using = tools_property_curve
			}
		}
	}
	
	type tools_property_ccolor = tools_property {
		blockoverride "content"
		{
			tools_colorpicker = {
				color = "[ToolPropertyCColor.GetCColor]"
				#oncoloredited = "[ToolPropertyCColor.SetColor]"
				oneditingfinished_with_changes = "[ToolPropertyCColor.SetCColor]"
			}
		}
	}
	
	type tools_property_vec4i = tools_property {
		blockoverride "content"
		{
			editor_textinput = {
				size = { 48 16 }
				fontsize = 10
				text = "[ToolPropertyVec4i.GetX]"
				oneditingfinished_with_changes = "[ToolPropertyVec4i.SetX]"
			}
			
			editor_textinput = {
				size = { 48 16 }
				fontsize = 10
				text = "[ToolPropertyVec4i.GetY]"
				oneditingfinished_with_changes = "[ToolPropertyVec4i.SetY]"
			}
			
			editor_textinput = {
				size = { 48 16 }
				fontsize = 10
				text = "[ToolPropertyVec4i.GetZ]"
				oneditingfinished_with_changes = "[ToolPropertyVec4i.SetZ]"
			}
			
			editor_textinput = {
				size = { 48 16 }
				fontsize = 10
				text = "[ToolPropertyVec4i.GetW]"
				oneditingfinished_with_changes = "[ToolPropertyVec4i.SetW]"
			}
		}
	}
	
	type tools_property_vec3f = tools_property {
		blockoverride "content"
		{
			editor_textinput = {
				size = { 48 16 }
				fontsize = 10
				text = "[ToolPropertyVec3f.GetX]"
				oneditingfinished_with_changes = "[ToolPropertyVec3f.SetX]"
			}
			
			editor_textinput = {
				size = { 48 16 }
				fontsize = 10
				text = "[ToolPropertyVec3f.GetY]"
				oneditingfinished_with_changes = "[ToolPropertyVec3f.SetY]"
			}
			
			editor_textinput = {
				size = { 48 16 }
				fontsize = 10
				text = "[ToolPropertyVec3f.GetZ]"
				oneditingfinished_with_changes = "[ToolPropertyVec3f.SetZ]"
			}
		}
	}
	
	type tools_property_vec3i = tools_property {
		blockoverride "content"
		{
			editor_textinput = {
				size = { 48 16 }
				fontsize = 10
				text = "[ToolPropertyVec3i.GetX]"
				oneditingfinished_with_changes = "[ToolPropertyVec3i.SetX]"
			}
			
			editor_textinput = {
				size = { 48 16 }
				fontsize = 10
				text = "[ToolPropertyVec3i.GetY]"
				oneditingfinished_with_changes = "[ToolPropertyVec3i.SetY]"
			}
			
			editor_textinput = {
				size = { 48 16 }
				fontsize = 10
				text = "[ToolPropertyVec3i.GetZ]"
				oneditingfinished_with_changes = "[ToolPropertyVec3i.SetZ]"
			}
		}
	}
	
	type tools_property_vec2f = tools_property {
		blockoverride "content"
		{
			editor_textinput = {
				size = { 48 16 }
				fontsize = 10
				text = "[ToolPropertyVec2f.GetX]"
				oneditingfinished_with_changes = "[ToolPropertyVec2f.SetX]"
			}
			
			editor_textinput = {
				size = { 48 16 }
				fontsize = 10
				text = "[ToolPropertyVec2f.GetY]"
				oneditingfinished_with_changes = "[ToolPropertyVec2f.SetY]"
			}
		}
	}
	
	type tools_property_vec2i = tools_property {
		blockoverride "content"
		{
			editor_textinput = {
				size = { 48 16 }
				fontsize = 10
				text = "[ToolPropertyVec2i.GetX]"
				oneditingfinished_with_changes = "[ToolPropertyVec2i.SetX]"
			}
			
			editor_textinput = {
				size = { 48 16 }
				fontsize = 10
				text = "[ToolPropertyVec2i.GetY]"
				oneditingfinished_with_changes = "[ToolPropertyVec2i.SetY]"
			}
		}
	}
		
	
	type tools_property_searchlist = tools_property {
		blockoverride "content"
		{
			editor_toolbar_button = {
				size = { 120 16 }
				text = "[ToolPropertySearchList.GetSelectedText]"
				onclick = "[ToolPropertySearchList.OpenSearchList]"
				elide = right
			}
		}
	}

	type tools_property_undoable_searchlist = tools_property_searchlist { }
	
	type editor_property_list = flowcontainer {
		layoutpolicy_horizontal = preferred
		layoutpolicy_vertical = preferred
		
		checkbutton = {
			checked = "[ToolPropertyList.IsExpanded]"
			onclick = "[ToolPropertyList.SetExpanded(Not(ToolPropertyList.IsExpanded))]"
			texture = "gfx/editor_gui/editor_entry_header.dds"
			layoutpolicy_horizontal = preferred
			
			spriteborder = { 5 5 }
			spriteType = CorneredStretched
			framesize = { 16 16 }
			
			hbox = {
				margin_left = 5
				margin_bottom = 2
				margin_right = 5
				
				editor_textbox = {
					raw_text = "#BOLD;COLOR:{0.72,0.72,0.15} [ToolPropertyList.GetLabel] #!"
					fontsize = 10
					autoresize = yes
				}
				
				widget = {
					layoutpolicy_horizontal = preferred
				}
				
				checkbutton = {
					gfxtype = checkbuttongfx
					shaderfile = "gfx/FX/pdxgui_pushbutton.shader"
					texture = "gfx/editor_gui/editor_expand_checkbox.dds"
					framesize = { 16 16 }
					size = { 8 8 }
					checked = "[ToolPropertyList.IsExpanded]"
					onclick = "[ToolPropertyList.SetExpanded(Not(ToolPropertyList.IsExpanded))]"
				}
			}
		}
		
		flowcontainer = {
			name = "list"
			margin_top = 2
			spacing = 2
			layoutpolicy_horizontal = preferred
			layoutpolicy_vertical = preferred
			visible = "[ToolPropertyList.IsExpanded]"
		}
	}
	
	type editor_property_categories = flowcontainer {
		spacing = 4
		
		layoutpolicy_horizontal = preferred
	}
	
	type editor_dockable_properties = vbox {
		spacing = 4
		editor_property_categories = {}
	}

	type tools_property_filterable_property_list = vbox {
		using = filterable_property_list_properties
	}
}

template filterable_property_list_properties
{
	layoutpolicy_horizontal = expanding
	layoutpolicy_vertical = expanding
	margin = { 12 12 }
	spacing = 8

	hbox = {
		spacing = 8
		layoutpolicy_vertical = shrinking
		layoutpolicy_horizontal = expanding

		editor_textbox = {
			margin_right = 5
			layoutpolicy_horizontal = shrinking
			size = { 0 30 }
			raw_text = "Search:"
			autoresize = yes
			align = left|nobaseline
		}
		
		editor_editbox = {
			margin_left = 6
			using = tools_editbox
			align = left|nobaseline
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = fixed
			# ontextchanged = "[FilterablePropertyList.Search]"
			alwaystransparent = no
			# text = "[FilterablePropertyList.GetSearchText]"
			size = { 0 25 }
			fontsize = 14

			editor_button = {
				raw_tooltip = "Clear Text"
				# onclick = "[FilterablePropertyList.ClearSearchText]"
				alpha = 0.4
				position = { -3 0 }
				parentanchor = vcenter|right
				size = { 16 16 }
				texture = "gfx/editor_gui/editor_layout_window_close.dds"
				tooltipwidget = {
					using = dockable_tooltip
				}
			}
		}
	}

	editor_frame = {
		layoutpolicy_vertical = expanding
		layoutpolicy_horizontal = preferred
		
		blockoverride "label" {
			# text = "[FilterablePropertyList.GetPropertiesLabel]"
		}

		blockoverride "content" {
			editor_scrollarea = {
				blockoverride "content"
				{
					vbox = {
						using = tools_spacing
						layoutpolicy_horizontal = preferred
						layoutpolicy_vertical = preferred
						vbox = {
							spacing = 5
							margin_right = 20
							name = "list" #don't change
							layoutpolicy_horizontal = preferred
						}

						widget = {
							layoutpolicy_vertical = preferred
						}
					}
				}
			}
		}
	}
}

template tools_property_curve
{
	size = { 128 88 }
	vbox = {
		icon = {
			name = "preview"
			texture = "[ToolPropertyCurve.GetPreviewTexture( '(int32)256', '(int32)128', '(hex)66272A33', '(hex)FFA1A1A1' )]" # Use 2x bigger preview icon in compare to the widget size, for Super Sampling effect. 3rd and 4th args is ColorA and ColorB in ARGB format.
			size = { 128 64 }
		}
		editor_toolbar_button = {
			raw_text = "Edit curve"
			#fontcolor = { 0 0 0 1 }
			size = { 128 24 }
			onclick = "[ToolPropertyCurve.OpenCurveEditor]"
			enabled = "[Not(ToolPropertyCurve.HasCurveEditor)]"
			tooltip = "[ToolProperty.GetTooltip]"
		}
	}
}