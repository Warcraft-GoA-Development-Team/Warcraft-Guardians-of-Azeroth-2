######################
# FEAST STUFF
######################
standard_feast_cooldown_time = {
	value = 1825
	if = {
		limit = {
			root.culture = {
				has_cultural_parameter = more_frequent_feasts
			}
		}
		multiply = 0.5
	}
}

minor_feast_cost = 10
medium_feast_cost = 50
major_feast_cost = 300
min_default_feast_events = 2
max_default_feast_events = 3
chance_of_extra_feast_events = 25

feast_initial_event_delay = 3
min_feast_event_spacing = 10
max_feast_event_spacing = 15

max_feast_duration = {
	value = max_feast_event_spacing
	multiply = {
		value = max_default_feast_events
		subtract = 1 # The first one starts quickly, as specified by feast_initial_event_delay
	}
	add = feast_initial_event_delay
	add = 1 # To be sure no values get set on the last tick
}

feast_activity_cost = {
	value = 0
	add = standard_activity_cost
	if = {
		limit = {
			culture = {
				has_cultural_parameter = more_expensive_feasts
			}
		}
		multiply = 2
	}
	if = {
		limit = {
			exists = var:protected_alcohol_stores
			var:protected_alcohol_stores > 0
		}
		multiply = 0.5
	}
}

######################
# HUNT STUFF
######################
hunt_activity_cost = {
	value = 0
	add = standard_activity_cost
	divide = 1.5
	if = {
		limit = {
			has_character_flag = free_hunt
		}
		multiply = 0
	}
	if = {
		limit = {
			has_character_modifier = peregrine_falcon
		}
		multiply = 0.9
	}
	# Done like this so that it stacks
	if = {
		limit = {
			has_character_modifier = master_of_hunt_activity_bonus
		}
		multiply = 0.9
	}
}
standard_hunting_cooldown_time = {
	value = 1825
	if = {
		limit = {
			root.culture = {
				has_cultural_parameter = more_frequent_hunts
			}
		}
		multiply = 0.5
	}
}

hunt_secondary_outcome = 1
hunt_participants = 10

hunt_event_delay_min = 25
hunt_event_delay_max = 35


standard_activity_cost = {
	value = 50
	multiply = {
		value = root.primary_title.tier
		subtract = 1
		min = 1
	}
	if = {
		limit = {
			root.primary_title.tier > tier_duchy
		}
		add = 50
	}
	if = {
		limit = {
			root= {
				exists = dynasty
				dynasty = {
					has_dynasty_perk = law_legacy_1
				}
			}
		}
		multiply = law_legacy_cost_reduction_mult
	}
	if = {
		limit = {
			root= {
				has_government = tribal_government
			}
		}
		multiply = 0.5
	}
}

law_legacy_cost_reduction_mult = 0.7

hunt_prestige_gain_value = {
	# Standard value for most chars.
	value = medium_prestige_gain

	# Royal court using chars have a value dependent on their servant amenity, though.
	if = {
		limit = {
			has_royal_court = yes
			NOT = { has_government = tribal_government }
		}
		# If we didn't have a successful hunt...
		if = {
			limit = { var:hunt_outcome < 0 }
			# ... and we've got the minimum amount of servants, lose quite a chunk of prestige from the gain.
			if = {
				limit = {
					amenity_level = {
						type = court_servants
						value <= low_amenity_level
					}
				}
				multiply = 0.3
			}
			# ... and we've got less than a medium amount of servants, lose a small chunk of prestige from the gain.
			else_if = {
				limit = {
					amenity_level = {
						type = court_servants
						value <= medium_amenity_level
					}
				}
				multiply = 0.6
			}
		}
		# Whereas if we *did* have a successful hunt...
		if = {
			limit = { var:hunt_outcome > 0 }
			# ... and we've got the maximum amount of servants, gain essentially double prestige.
			if = {
				limit = {
					amenity_level = {
						type = court_servants
						value >= max_amenity_level
					}
				}
				multiply = 1.75
			}
			# ... and we've got more than a medium amount of servants, add a small chunk of prestige to the gain.
			else_if = {
				limit = {
					amenity_level = {
						type = court_servants
						value >= very_high_amenity_level
					}
				}
				multiply = 1.5
			}
		}
		# Finally, if we're anything other than a neutral hunt, round the number.
		if = {
			limit = {
				NOT = { var:hunt_outcome = 0 }
			}
			divide = 10
			round = yes
			multiply = 10
		}
		# Edge-case draws get the default value, so we don't worry about them at all.
	}
}

######################
# PLAYDATE STUFF
######################
standard_playdate_cooldown_time = 1095

playdate_participants = 10
min_default_playdate_events = 3
min_playdate_event_spacing = 5
max_playdate_event_spacing = 10
playdate_initial_event_delay = 3

max_playdate_duration = {
	value = max_playdate_event_spacing
	multiply = {
		value = min_default_playdate_events
		subtract = 1
	}
	add = playdate_initial_event_delay
	add = 1 # To be sure no values get set on the last tick
}

standard_playdate_activity_cost = {
	value = 10
	multiply = {
		value = root.primary_title.tier
		subtract = 1
		min = 1
	}
	if = {
		limit = {
			root = {
				exists = dynasty
				dynasty = {
					has_dynasty_perk = law_legacy_1
				}
			}
			root.primary_title.tier > tier_duchy
		}
		multiply = law_legacy_cost_reduction_mult
	}
	if = {
		limit = {
			root.primary_title.tier > tier_duchy
		}
		add = 25
	}
	if = {
		limit = {
			root= {
				has_government = tribal_government
			}
		}
		multiply = 0.5
	}
}


activity_medium_gold_value = {
	value = medium_gold_value
}

activity_minor_gold_value = {
	value = minor_gold_value
	if = {
		limit = {
			root = {
				exists = dynasty
				dynasty = {
					has_dynasty_perk = law_legacy_1
				}
			}
			root = {
				has_government = tribal_government
			}
		}
		multiply = law_legacy_cost_reduction_mult
		multiply = 0.5
	}
}

######################
# HOLD COURT STUFF
######################
standard_hold_court_cooldown_time = 1825

######################
# ADVENTURE STUFF
######################
# Using the same measure of distances as pilgrimage
long_adventure_max_length = 5000000 # 5M Over this distance, it will be an exceptionally long pilgrimage 
medium_adventure_max_length = 1000000 # 1M, slightly larger than 1 'holy roman empire' away 
short_adventure_max_length = 100000 # 100K, slightly larger than 1 'ireland' away. 

very_long_adventure_var = 5
long_adventure_var = 4
medium_adventure_var = 3
short_adventure_var = 2

######################
# PETITION STUFF
######################

standard_petition_liege_cooldown_time = 1825
petition_liege_gold_bribe_value = scope:petition_vassal.medium_gold_value
petition_liege_refusal_tyranny_value = 1

### Council

# For checking if petitioner is significantly better than current councillor
councillor_diplomacy_threshold_value = { # Petitioner's diplomacy - 3
	value = scope:petition_vassal.diplomacy
	subtract = 3
}

councillor_martial_threshold_value = { # Petitioner's martial - 3
	value = scope:petition_vassal.martial
	subtract = 3
}

councillor_stewardship_threshold_value = { # Petitioner's stewardship - 3
	value = scope:petition_vassal.stewardship
	subtract = 3
}

councillor_intrigue_threshold_value = { # Petitioner's intrigue - 3
	value = scope:petition_vassal.intrigue
	subtract = 3
}

councillor_learning_threshold_value = { # Petitioner's learning - 3
	value = scope:petition_vassal.learning
	subtract = 3
}

### Debt

# Amount liege needs to pay to get petioner out of debt
petitioner_debt_positivization_value = { 
	value = 0
	add = scope:petition_vassal.gold
	multiply = -1
}

petitioner_debt_positivization_root_value = { 
	value = 0
	add = root.gold
	multiply = -1
}

### War Aid

#Amount of levies liege will grant
petitioner_war_aid_levies_value = { 
	value = 0
	add = scope:petition_vassal.petition_war_aid_strongest_enemy_strength_value
	subtract = scope:petition_vassal.petition_war_aid_vassal_strength_value
	multiply = 2
	min = 500
	max = scope:petition_liege.max_military_strength
}

petitioner_war_aid_levies_cost_value = { 
	value = petitioner_war_aid_levies_value
	divide = 20

}

petitioner_war_aid_levies_cost_threshold_value = { 
	value = petitioner_war_aid_levies_cost_value
	multiply = 2
}

### Control

county_control_scaling_cost_value = {
	value = 0
	scope:petition_vassal = {
		every_held_title = {
			limit = {
				tier = tier_county
				county_control < medium_county_control
			}
			add = 25
		}
	}
	min = 50
	max = 150
}

petition_liege_county_control_count_value = {
	value = 0
	every_in_list = {
		list = petition_liege_county_control_list
		add = 1
	}
}

petition_liege_county_convert_modifier_value = {
	value = 0
	add = marshal_increase_control_base_total
	multiply = 0.1
}

### Convert

petition_liege_county_convert_count_value = {
	value = 0
	every_in_list = {
		list = petition_liege_county_convert_list
		add = 1
	}
}

petition_liege_county_convert_modifier_value = {
	value = 0
	add = court_chaplain_conversion_base_total
	multiply = 0.1
}

### Opinion

petition_liege_county_opinion_count_value = {
	value = 0
	every_in_list = {
		list = petition_liege_county_opinion_list
		add = 1
	}
}

### Fortify

petition_liege_fortify_border_count_value = {
	value = 0
	every_in_list = {
		list = petition_liege_fortify_border_list
		add = 1
	}
}

### Development

# Amount of development difference of liege's capital
petitioner_development_difference_decision_value = { 
	value = 0
	add = capital_province.county.development_level
	multiply = 1.5
}

# Amount of development difference of liege's capital
petitioner_development_difference_value = { 
	value = 0
	add = scope:petition_vassal.capital_province.county.development_level
	multiply = 1.5
}

### Petition Parameters

# War Aid War Score
petition_war_aid_score_value = {
	value = 25
}

petition_liege_defender_strength_value = {
	value = 0
	every_war_defender = {
		add = max_military_strength
		every_hired_mercenary = { add = max_military_strength }
	}
}

petition_liege_attacker_strength_value = {
	value = 0
	every_war_attacker = {
		add = max_military_strength
		every_hired_mercenary = { add = max_military_strength }
	}
}

# War Aid Liege Strength Min
petition_war_aid_strongest_enemy_strength_value = {
	value = 0
	if = {
		limit = {
			any_character_war = {
				root = { is_leader_in_war = prev }
				root = { is_attacker_in_war = prev }
				defender_war_score >= petition_war_aid_score_value
			}
		}
		ordered_character_war = {
			limit = {
				root = { is_leader_in_war = prev }
				root = { is_attacker_in_war = prev }
				defender_war_score >= petition_war_aid_score_value
			}
			order_by = petition_liege_defender_strength_value
			add = petition_liege_defender_strength_value
		}
	}
	else_if = {
		limit = {
			any_character_war = {
				root = { is_leader_in_war = prev }
				root = { is_defender_in_war = prev }
				attacker_war_score >= petition_war_aid_score_value
			}
		}
		ordered_character_war = {
			limit = {
				root = { is_leader_in_war = prev }
				root = { is_defender_in_war = prev }
				attacker_war_score >= petition_war_aid_score_value
			}
			order_by = petition_liege_attacker_strength_value
			add = petition_liege_attacker_strength_value
		}
	}
}

petition_war_aid_vassal_strength_value = {
	value = 0
	if = {
		limit = {
			any_character_war = {
				root = { is_leader_in_war = prev }
				root = { is_attacker_in_war = prev }
				defender_war_score >= petition_war_aid_score_value
			}
		}
		ordered_character_war = {
			limit = {
				root = { is_leader_in_war = prev }
				root = { is_attacker_in_war = prev }
				defender_war_score >= petition_war_aid_score_value
			}
			order_by = petition_liege_defender_strength_value
			add = petition_liege_attacker_strength_value
		}
	}
	else_if = {
		limit = {
			any_character_war = {
				root = { is_leader_in_war = prev }
				root = { is_defender_in_war = prev }
				attacker_war_score >= petition_war_aid_score_value
			}
		}
		ordered_character_war = {
			limit = {
				root = { is_leader_in_war = prev }
				root = { is_defender_in_war = prev }
				attacker_war_score >= petition_war_aid_score_value
			}
			order_by = petition_liege_attacker_strength_value
			add = petition_liege_defender_strength_value
		}
	}
}

petition_war_aid_vassal_liege_combined_value = {
	value = petition_war_aid_vassal_strength_value
	add = petition_war_aid_liege_merc_value
}

petition_war_aid_difference_value = {
	value = petition_war_aid_strongest_enemy_strength_value
	subtract = petition_war_aid_vassal_liege_combined_value
}

petition_county_opinion_value = {
	value = -25
}

petition_war_aid_liege_ally_value = {
	value = 0
	root.liege = {
		add = max_military_strength
		if = {
			limit = {
				any_ally = {
					NOT = { is_vassal_of = root.liege }
				}
			}
			every_ally = {
				limit = {
					NOT = { is_vassal_of = root.liege }
				}
				add = max_military_strength
			}
		}
		every_hired_mercenary = { add = max_military_strength }
	}
}

petition_war_aid_liege_merc_value = {
	value = 0
	scope:petition_liege = {
		add = max_military_strength
		every_hired_mercenary = { add = max_military_strength }
	}
}

petition_war_aid_liege_ally_advantage_value = {
	value = petition_war_aid_liege_ally_value
	multiply = 2
}

petition_war_aid_rebels_value = {
	value = 0
	liege = {
		if = {
			limit = {
				any_character_war = {
					primary_defender = root.liege
					OR = {
						using_cb = peasant_war
						using_cb = independence_faction_war
						using_cb = liberty_faction_war
						using_cb = populist_war
						using_cb = claimant_faction_war
						using_cb = depose_war
						using_cb = refused_liege_demand_war
						using_cb = independence_war
					}
				}
			}
			every_character_war = {
				limit = {
					primary_defender = root.liege
					OR = {
						using_cb = peasant_war
						using_cb = independence_faction_war
						using_cb = liberty_faction_war
						using_cb = populist_war
						using_cb = claimant_faction_war
						using_cb = depose_war
						using_cb = refused_liege_demand_war
						using_cb = independence_war
					}
				}
				add = petition_liege_attacker_strength_value
			}
		}
	}
	multiply = 2
}

petition_war_aid_external_value = {
	value = 0
	liege = {
		if = {
			limit = {
				any_character_war = {
					root.liege = { is_leader_in_war = prev }
					trigger_if = {
						limit = {
							root.liege = { is_defender_in_war = prev }
						}
						OR = {
							primary_attacker.primary_title.tier = root.liege.primary_title.tier
							petition_liege_attacker_strength_value > petition_war_aid_liege_ally_value
						}
					}
					trigger_else = {
						limit = {
							root.liege = { is_defender_in_war = prev }
						}
						OR = {
							primary_attacker.primary_title.tier = root.liege.primary_title.tier
							petition_liege_attacker_strength_value > petition_war_aid_liege_ally_value
						}
					}
				}
			}
			ordered_character_war = {
				limit = {
					root.liege = { is_leader_in_war = prev }
					trigger_if = {
						limit = {
							root.liege = { is_defender_in_war = prev }
						}
						OR = {
							primary_attacker.primary_title.tier = root.liege.primary_title.tier
							petition_liege_attacker_strength_value > petition_war_aid_liege_ally_value
						}
					}
					trigger_else = {
						limit = {
							root.liege = { is_defender_in_war = prev }
						}
						OR = {
							primary_attacker.primary_title.tier = root.liege.primary_title.tier
							petition_liege_defender_strength_value > petition_war_aid_liege_ally_value
						}
					}
				}
				add = petition_liege_attacker_strength_value
			}
		}
	}
	multiply = 2
}

petition_liege_war_aid_ongoing_count_trigger = {
	value = 0
	every_character_war = { subtract = 25 }
}

#Adventurers:

adventure_progress_chance_svalue = {
	value = 30
	if = {
		limit = {
			exists = scope:inspiration_owner.activity.var:adventure_distance
			scope:inspiration_owner.activity.var:adventure_distance = short_adventure_var
		}
		subtract = 5
	}
	else_if = {
		limit = {
			exists = scope:inspiration_owner.activity.var:adventure_distance
			scope:inspiration_owner.activity.var:adventure_distance = medium_adventure_var
		}
		subtract = 10
	}
	else_if = {
		limit = {
			exists = scope:inspiration_owner.activity.var:adventure_distance
			scope:inspiration_owner.activity.var:adventure_distance = long_adventure_var
		}
		subtract = 15
	}
	else_if = {
		limit = {
			exists = scope:inspiration_owner.activity.var:adventure_distance
			scope:inspiration_owner.activity.var:adventure_distance = very_long_adventure_var
		}
		subtract = 20
	}
	multiply = {
		value = scope:inspiration_owner.adventure_inspiration_average_skill_value
		divide = 10
		min = 1
	}
}
