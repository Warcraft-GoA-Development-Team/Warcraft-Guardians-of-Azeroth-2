namespace = travel_danger_events

#valid danger types: default, battle, raid, siege, army, occupation, county_control, county_opinion, owner_opinion

#########################################
# Travel Danger Terrain Events			#
# travel_danger_events.5000-5999		#
# by Chad Uhl							#
#########################################

travel_danger_events.5000 = { # Entourage Members Fighting
	type = character_event
	title = travel_danger_events.5000.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					location = { is_sea_province = yes }
				}
				desc = travel_danger_events.5000.intro.sea
			}
			desc = travel_danger_events.5000.intro.land
		}
		first_valid = { # Get an argument based on which traits the characters have
			triggered_desc = {
				trigger = { # Entourage
					scope:opposed_personality_trait = trait:craven
				}
				desc = travel_danger_events.5000.craven
			}
			triggered_desc = {
				trigger = { # Entourage
					scope:opposed_personality_trait = trait:brave
				}
				desc = travel_danger_events.5000.brave
			}
			triggered_desc = {
				trigger = { # Entourage
					scope:opposed_personality_trait = trait:chaste
				}
				desc = travel_danger_events.5000.chaste
			}
			triggered_desc = {
				trigger = { # Entourage
					scope:opposed_personality_trait = trait:stubborn
				}
				desc = travel_danger_events.5000.stubborn
			}
			triggered_desc = {
				trigger = { # Entourage
					scope:opposed_personality_trait = trait:generous
				}
				desc = travel_danger_events.5000.generous
			}
			triggered_desc = {
				trigger = { # Entourage
					scope:opposed_personality_trait = trait:gregarious
				}
				desc = travel_danger_events.5000.gregarious
			}
			triggered_desc = {
				trigger = { # Entourage
					scope:opposed_personality_trait = trait:shy
				}
				desc = travel_danger_events.5000.shy
			}
			triggered_desc = {
				trigger = { # Entourage
					scope:opposed_personality_trait = trait:just
				}
				desc = travel_danger_events.5000.just
			}
			triggered_desc = {
				trigger = { # Entourage
					scope:opposed_personality_trait = trait:patient
				}
				desc = travel_danger_events.5000.patient
			}
			triggered_desc = {
				trigger = { # Entourage
					scope:opposed_personality_trait = trait:impatient
				}
				desc = travel_danger_events.5000.impatient
			}
			triggered_desc = {
				trigger = { # Entourage
					scope:opposed_personality_trait = trait:temperate
				}
				desc = travel_danger_events.5000.temperate
			}
			triggered_desc = {
				trigger = { # Entourage
					scope:opposed_personality_trait = trait:paranoid
				}
				desc = travel_danger_events.5000.paranoid
			}
			triggered_desc = {
				trigger = { # Entourage
					scope:opposed_personality_trait = trait:zealous
				}
				desc = travel_danger_events.5000.zealous
			}
			desc = travel_danger_events.5000.fallback
		}
	}
	theme = travel_danger
	left_portrait = {
		character = scope:entourage_member_one
		triggered_animation = {
			trigger = {
				OR = {
					scope:opposed_personality_trait = trait:brave
					scope:opposed_personality_trait = trait:stubborn
					scope:opposed_personality_trait = trait:shy
					scope:opposed_personality_trait = trait:generous
				}
			}
			animation = anger
		}
		triggered_animation = {
			trigger = { scope:opposed_personality_trait = trait:craven }
			animation = fear
		}
		triggered_animation = {
			trigger = { scope:opposed_personality_trait = trait:just }
			animation = laugh
		}
		triggered_animation = {
			trigger = { scope:opposed_personality_trait = trait:patient }
			animation = boredom
		}
		triggered_animation = {
			trigger = { scope:opposed_personality_trait = trait:gregarious }
			animation = worry 
		}
		triggered_animation = {
			trigger = { scope:opposed_personality_trait = trait:chaste }
			animation = grief 
		}
		triggered_animation = {
			trigger = { scope:opposed_personality_trait = trait:paranoid }
			animation = paranoia 
		}
		triggered_animation = {
			trigger = { scope:opposed_personality_trait = trait:zealous }
			animation = chaplain
		}
		animation = anger
	}
	right_portrait = {
		character = scope:entourage_member_two
		triggered_animation = {
			trigger = { scope:opposed_personality_trait = trait:brave }
			animation = fear
		}
		triggered_animation = {
			trigger = {
				OR = {
					scope:opposed_personality_trait = trait:craven
					scope:opposed_personality_trait = trait:patient
					scope:opposed_personality_trait = trait:chaste
					scope:opposed_personality_trait = trait:zealous
				}
			}
			animation = eyeroll
		}
		triggered_animation = {
			trigger = { scope:opposed_personality_trait = trait:just }
			animation = anger
		}
		triggered_animation = {
			trigger = {
				OR = {
					scope:opposed_personality_trait = trait:shy
					scope:opposed_personality_trait = trait:chaste
				}
			}
			animation = schadenfreude
		}
		triggered_animation = {
			trigger = { scope:opposed_personality_trait = trait:gregarious }
			animation = stress
		}
		triggered_animation = {
			trigger = { scope:opposed_personality_trait = trait:paranoid }
			animation = worry 
		}
		triggered_animation = {
			trigger = { scope:opposed_personality_trait = trait:generous }
			animation = disgust
		}
		animation = eyeroll
	}
	
	trigger = {
		is_available_travelling_adult = yes
		current_travel_plan = {
			any_entourage_character = {
				is_physically_able_adult = yes
				NOT = { is_spouse_of = root }
				save_temporary_scope_as = e1
			}
			any_entourage_character = {
				NOR = {
					this = scope:e1
					is_spouse_of = root
				}
				is_physically_able_adult = yes
				number_of_opposing_personality_traits = {
					target = scope:e1
					value >= 1
				}
			}
		}
	}

	cooldown = { months = 2 }

	immediate = {
		mp_delay_travel_plan = { DAYS = 90 }
		location = {
			save_scope_as = location
		}
		current_travel_plan = {
			next_destination_province = { save_scope_as = next_destination }
			random_visited_location = { save_scope_as = random_visited_province }
			save_scope_as = travel_plan_scope
			# pick a random entourage member 
			random_entourage_character = {
				limit = {
					save_temporary_scope_as = ec1
					is_physically_able_adult = yes
					NOT = { is_spouse_of = root }
					scope:travel_plan_scope = {
						any_entourage_character = {
							NOR = {
								this = scope:ec1
								is_spouse_of = root
							}
							is_physically_able_adult = yes
							number_of_opposing_personality_traits = {
								target = scope:ec1
								value >= 1
							}
						}
					}
				}
				save_scope_as = entourage_member_one
			}
			# find an entourage member that has an opposing trait
			random_entourage_character = {
				limit = {
					NOR = {
						this = scope:entourage_member_one
						is_spouse_of = root 
					}
					is_physically_able_adult = yes 
					number_of_opposing_personality_traits = {
						target = scope:entourage_member_one
						value >= 1
					}
				}
				weight = {
					base = 1 
					modifier = {
						add = 10 
						has_relation_rival = scope:entourage_member_one
					}
					modifier = {
						add = 20 
						has_relation_nemesis = scope:entourage_member_one
					}
				}
				save_scope_as = entourage_member_two
			}
		}
		# Uses scripted effect to save a scope with a trait value indicating which trait they have that's being countered by entourage_member_two
		get_diametrically_opposed_trait_trigger = {
			CHARACTER_1 = scope:entourage_member_one
			CHARACTER_2 = scope:entourage_member_two
		}

		traveler_danger_xp_effect = {
			MIN = 3
			MAX = 6
		}
	}

	option = { # Try to make them make amends
		name = travel_danger_events.5000.a

		duel = {
			skill = diplomacy
			value = medium_skill_rating
			# Victory! they settle their differences
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				modifier = {
					add = 15
					has_trait_xp = {
						trait = lifestyle_traveler
						track = danger
						value >= 50
					}
				}
				desc = travel_danger_events.5000.a.success
				send_interface_toast = {
					title = travel_danger_events.5000.a.success
					left_icon = scope:entourage_member_one
					right_icon = scope:entourage_member_two
					add_diplomacy_lifestyle_xp = medium_lifestyle_xp
					add_prestige = minor_prestige_gain
					traveler_danger_xp_effect = {
						MIN = 3
						MAX = 6
					}
					if = {
						limit = {
							NOT = { has_character_modifier = entourage_mediator_modifier }
						}
						add_character_modifier = {
							modifier = entourage_mediator_modifier
							years = 10
						}
					}
				}
				
			}
			# Defeat! someone leaves
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = travel_danger_events.5000.a.failure
				random_list = {
					1 = {
						show_chance = no 
						desc = entourage_member_one_leaves.tt
						send_interface_toast = {
							title = entourage_member_one_leaves.tt
							left_icon = scope:entourage_member_one

							scope:entourage_member_one = {
								add_opinion = {
									target = root 
									modifier = hate_opinion
									opinion = -50
								}
							}
							current_travel_plan = { remove_character = scope:entourage_member_one }
						}
					}
					1 = {
						show_chance = no 
						desc = entourage_member_two_leaves.tt
						send_interface_toast = {
							title = entourage_member_two_leaves.tt
							left_icon = scope:entourage_member_two
							
							scope:entourage_member_two = {
								add_opinion = {
									target = root 
									modifier = hate_opinion
									opinion = -50
								}
							}
							current_travel_plan = { remove_character = scope:entourage_member_two }
						}
					}
				}
			}
		}
		
		stress_impact = {
			impatient = miniscule_stress_impact_gain
			callous = minor_stress_impact_gain
		}

		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				OR = {
					has_trait = impatient
					has_trait = callous
				}
			}
		}
	}

	option = { # Disregard their petty squabling
		name = travel_danger_events.5000.b
		scope:entourage_member_one = {
			add_opinion = {
				target = root 
				opinion = -10
				modifier = angry_opinion
			}
		}
		scope:entourage_member_two = {
			add_opinion = {
				target = root 
				opinion = -10
				modifier = angry_opinion
			}
		}
		current_travel_plan = {
			add_travel_plan_modifier = quarreling_entourage_modifier
		}

		stress_impact = {
			compassionate = minor_stress_impact_gain
		}

		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				NOR = {
					has_trait = compassionate
				}
			}
		}
	}

	option = { # Make them duel (dread)
		name = travel_danger_events.5000.c
		trigger = {
			OR = {
				has_trait = sadistic
				has_trait = wrathful
				has_trait = callous
			}
		}
		add_dread = minor_dread_gain
		
		scope:entourage_member_one = {
			duel = {
				skill = prowess
				target = scope:entourage_member_two
				# Victory!
				50 = {
					compare_modifier = {
						value = scope:duel_value
						multiplier = 3.5
						min = -49
					}
					desc = travel_danger_events.5000.c.success
					root = {
						send_interface_toast = {
							title = travel_danger_events.5000.c.success
							left_icon = scope:entourage_member_one
							right_icon = scope:entourage_member_two
							scope:entourage_member_two = {
								increase_wounds_no_death_effect = { REASON = fight } 
							}
						}
					}
					
				}
				# Defeat!
				50 = {
					compare_modifier = {
						value = scope:duel_value
						multiplier = -3.5
						min = -49
					}
					desc = travel_danger_events.5000.c.failure
					root = {
						send_interface_toast = {
							title = travel_danger_events.5000.c.failure
							left_icon = scope:entourage_member_one
							right_icon = scope:entourage_member_two
							scope:entourage_member_one = {
								increase_wounds_no_death_effect = { REASON = fight } 
							}
						}
					}
				}
			}
		}
	}

	after = {
		mp_resume_travel_plan = yes
	}
}


travel_danger_events.5010 = { # Pariah Event - Not allowed in any inns in your rival/nemesis' realm
	type = character_event
	title = travel_danger_events.5010.t
	desc = {
		desc = travel_danger_events.5010.desc.intro
		first_valid = {
			triggered_desc = {
				trigger = { has_character_flag = had_travel_danger_event_5010_twice_recently }
				desc = travel_danger_events.5010.desc.seriously
			}
			triggered_desc = {
				trigger = {
					NOT = { has_character_flag = had_travel_danger_event_5010_twice_recently }
					has_character_flag = had_travel_danger_event_5010_recently
				}
				desc = travel_danger_events.5010.desc.again
			}
			desc = travel_danger_events.5010.desc
		}
	} 
	theme = travel_danger

	left_portrait = {
		character = root 
		animation = worry
	}
	right_portrait = {
		character = scope:travel_leader
		animation = personality_rational
	}
	lower_center_portrait = scope:angry_char

	override_background = { reference = bp1_crossroads_inn }

	cooldown = { months = 1 }

	weight_multiplier = {
		base = 1
	}

	trigger = {
		location = {
			travel_danger_type = {
				travel_plan = root.current_travel_plan
				type = owner_opinion
			}
			exists = province_owner
			province_owner = {
				OR = {
					has_any_bad_relationship_with_root_trigger = yes 
					liege ?= {
						has_any_bad_relationship_with_root_trigger = yes 
					}
				}
			}
		}
	}	

	immediate = {
		mp_delay_travel_plan = { DAYS = 90 } 
		current_travel_plan = {
			current_location = {
				save_scope_as = location
				province_owner = { save_scope_as = province_owner }
			}
			travel_leader ?= { save_scope_as = travel_leader }
			if = {
				limit = { NOT = { exists = scope:travel_leader } }
				random_entourage_character = {
					save_scope_as = travel_leader
				}
			}
			next_destination_province = { save_scope_as = destination }
		}
		if = {
			limit = {
				scope:province_owner = {
					has_any_bad_relationship_with_root_trigger = yes 
				}
			}
			scope:province_owner = { save_scope_as = angry_char }
		}
		else_if = {
			limit = {
				scope:province_owner.liege = {
					has_any_bad_relationship_with_root_trigger = yes 
				}
			}
			scope:province_owner.liege = { save_scope_as = angry_char }
		}
	}

	option = {
		name = {
			text = {
				first_valid = {
					triggered_desc = {
						trigger = { has_character_flag = had_travel_danger_event_5010_twice_recently }
						desc = travel_danger_events.5010.a_seriously
					}
					triggered_desc = {
						trigger = {
							NOT = { has_character_flag = had_travel_danger_event_5010_twice_recently }
							has_character_flag = had_travel_danger_event_5010_recently
						}
						desc = travel_danger_events.5010.a_again
					}
					desc = travel_danger_events.5010.a
				}
			}
		}
		current_travel_plan = {
			delay_travel_plan = { days = 10 }
		}
		if = {
			limit = {
				has_character_flag = had_travel_danger_event_5010_twice_recently
				house_head_can_start_feud_against_trigger = { TARGET = scope:angry_char }
			}
			house_feud_start_effect = {
				# Feuding House Head
				ACTOR = root
				# Target House Head
				TARGET = scope:angry_char
				# Feud Reason
				REASON = head_rivalry
				# House Member attacker if relevant 
				ATTACKER = root
				# House Member victim if relevant
				VICTIM = scope:angry_char
			}
		}
	}
	option = { # Force your way in 
		name = {
			text = {
				first_valid = {
					triggered_desc = {
						trigger = { has_character_flag = had_travel_danger_event_5010_twice_recently }
						desc = travel_danger_events.5010.b_seriously
					}
					desc = travel_danger_events.5010.b
				}
			}
		}
		flavor = travel_danger_events.5010.b.flavor
		duel = {
			skills = { martial prowess }
			value = medium_skill_rating
			# Victory! you get to stay
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = travel_danger_events.5010.b.success
				send_interface_toast = {
					title = travel_danger_events.5010.b.success
					left_icon = scope:province_owner
					add_dread = medium_dread_gain
					traveler_danger_xp_effect = {
						MIN = 3
						MAX = 6
					}
				}
			}
			# Defeat! you get a travel delay
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = travel_danger_events.5010.b.failure
				send_interface_toast = {
					title = travel_danger_events.5010.b.failure
					left_icon = scope:province_owner
					current_travel_plan = { delay_travel_plan = { days = 15 } }
				}
			}
		}
	}
	option = { # Convince the innkeeper to let you stay
		name = travel_danger_events.5010.c
		flavor = travel_danger_events.5010.c.flavor
		duel = {
			skill = diplomacy
			value = medium_skill_rating
			# Victory! you get to stay
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = travel_danger_events.5010.c.success
				send_interface_toast = {
					title = travel_danger_events.5010.c.success
					left_icon = scope:province_owner
					add_diplomacy_lifestyle_xp = medium_lifestyle_xp
					traveler_danger_xp_effect = {
						MIN = 3
						MAX = 6
					}
				}
			}
			# Defeat! you get a travel delay
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = travel_danger_events.5010.c.failure
				send_interface_toast = {
					title = travel_danger_events.5010.c.failure
					left_icon = scope:province_owner
					current_travel_plan = { delay_travel_plan = { days = 15 } }
				}
			}
		}
	}

	after = {
		if = {
			limit = {
				NOR = {
					has_character_flag = had_travel_danger_event_5010_recently
					has_character_flag = had_travel_danger_event_5010_twice_recently
				}
			}
			add_character_flag = {
				flag = had_travel_danger_event_5010_recently
				months = 6
			}
		}
		else_if = {
			limit = {
				NOT = { has_character_flag = had_travel_danger_event_5010_twice_recently }
				has_character_flag = had_travel_danger_event_5010_recently
			}
			add_character_flag = {
				flag = had_travel_danger_event_5010_twice_recently
				years = 1 
			}
		}
		mp_resume_travel_plan = yes
	}

}
