wc_learn_spell_effect = {
    if = {
        limit = {
            NOT = {
                is_known_spell_trigger = {
                    SPELL = flag:$SPELL$
                }
            }
        }
        add_to_variable_list = {
            name = known_spells
            target = flag:$SPELL$
        }
        if = {
            limit = {
                NOT = {
                    has_variable = known_spells_count
                }
            }
            set_variable = {
                name = known_spells_count
                value = 0
            }
        }
        change_variable = {
            name = known_spells_count
            add = 1
        }
    }
}
# Just like learn spell effect, but doing it via execute_scoped_spell_effect
wc_learn_spell_effect_external = {
    wc_learn_spell_effect = {
        SPELL = $SPELL$
    }
    if = { limit = { $RANK$ = 2 } } # error suppression
    if = { limit = { flag:$TYPE$ = flag:poop } } # error suppression
}

# Like the above, but for elemental spells
wc_learn_spell_effect_external_elemental = {
    wc_learn_spell_effect_external = { SPELL = $SPELL$ TYPE = $TYPE$ RANK = $RANK$ }
}

learn_spell_rank_effect = {
    add_to_variable_list = {
        name = known_rank_$RANK$_spells
        target = flag:$SPELL$
    }
}

# change_elemental_favour_effect = {
# 	if = {
# 		limit = {
# 			has_variable = wc_$TYPE$_favour_variable
# 		}
# 		# nothing
# 	}
# 	else = {
# 		set_variable = {
# 			name = wc_$TYPE$_favour_variable
# 			value = wc_$TYPE$_favour_current_value
# 		}
# 	}
# 	change_variable = {
# 		name = wc_$TYPE$_favour_variable
# 		$CHANGE$ = $VALUE$
# 	}
# 	# TODO : recalculate traits / secrets

# }

show_spell_tt_effect = {
    spell_execute = { EFFECT = cast_$SPELL$_effect }
    if = { # Chance to double cast if you have Evocation
        limit = {
            has_character_modifier = wc_evocation_character_modifier
            NOT = {
                spell_is_ritual_trigger = { SPELL = flag:$SPELL$ }
            }
        }
        random_list = {
            50 = {
                custom_tooltip = evocation_double_cast_tt
                spell_execute = { EFFECT = cast_$SPELL$_effect }
            }
            50 = {

            }
        }
    }

    # Chance to expose secret
    wc_expose_magic_effect = { MAGIC = $TYPE$ SPELL = $SPELL$ }

    if = { limit = { $RANK$ = 2 } } # error suppression
}

show_spell_tt_effect_elemental = {
    show_spell_tt_effect = { SPELL = $SPELL$ TYPE = $TYPE$ RANK = $RANK$ }
    if = {
        limit = { # Change elemental disposition
            spell_is_elemental_trigger = { SPELL = flag:$SPELL$ }
            OR = {
                exists = var:$SPELL$_type
                exists = var:elemental_type
            }
        }
        if = {
            limit = {
                NOT = {
                    spell_is_ritual_trigger = {
                        SPELL = flag:$SPELL$
                    }
                }
            }
            save_scope_value_as = {
                name = elemental_favour_change
                value = {
                    add = wc_spell_$SPELL$_cost_mana_value
                    divide = 2
                }
            }
        }
        else = {
            save_scope_value_as = {
                name = elemental_favour_change
                value = {
                    add = wc_spell_$SPELL$_cost_mana_value
                    divide = 4
                }
            }
        }

        if = {
            limit = {
                OR = {
                    AND = {
                        exists = var:$SPELL$_type
                        NOT = { exists = var:elemental_type }
                        var:$SPELL$_type = flag:spirit
                    }
                    AND = {
                        exists = var:elemental_type
                        var:elemental_type = flag:spirit
                    }
                }
            }
            wc_change_amount_element_favour_effect = {
                ELEMENT = $TYPE$
                CHANGE = add
                VALUE = scope:elemental_favour_change
            }
        }
        else_if = {
            limit = {
                OR = {
                    AND = {
                        exists = var:$SPELL$_type
                        NOT = { exists = var:elemental_type }
                        var:$SPELL$_type = flag:decay
                    }
                    AND = {
                        exists = var:elemental_type
                        var:elemental_type = flag:decay
                    }
                }
            }
            wc_change_amount_element_favour_effect = {
                ELEMENT = $TYPE$
                CHANGE = subtract
                VALUE = scope:elemental_favour_change
            }
        }
    }
}

execute_scoped_spell_effect = {
    if = { limit = { NOT = { has_variable = current_spell_rank } } set_variable = { name = current_spell_rank value = 1 }  }
    switch = {
        trigger = $SPELL$
        # Elemental Fire
        flag:backdraft = { $EFFECT$_elemental = { SPELL = backdraft RANK = var:current_spell_rank TYPE = elemental_fire } }
        flag:summon_fire_elemental = { $EFFECT$_elemental = { SPELL = summon_fire_elemental RANK = var:current_spell_rank TYPE = elemental_fire } }
        flag:lava_lash = { $EFFECT$_elemental = { SPELL = lava_lash RANK = var:current_spell_rank TYPE = elemental_fire } }
        flag:flame_wall = { $EFFECT$_elemental = { SPELL = flame_wall RANK = var:current_spell_rank TYPE = elemental_fire } }
        flag:flame_shock = { $EFFECT$_elemental = { SPELL = flame_shock RANK = var:current_spell_rank TYPE = elemental_fire } }
        flag:burnout = { $EFFECT$_elemental = { SPELL = burnout RANK = var:current_spell_rank TYPE = elemental_fire } }
        flag:planar_fire = { $EFFECT$_elemental = { SPELL = planar_fire RANK = var:current_spell_rank TYPE = elemental_fire } }
        flag:cauterize_wound = { $EFFECT$_elemental = { SPELL = cauterize_wound RANK = var:current_spell_rank TYPE = elemental_fire } }
        flag:vernal_solstice = { $EFFECT$_elemental = { SPELL = vernal_solstice RANK = var:current_spell_rank TYPE = elemental_fire } }

        # Order
        flag:polymorph = { $EFFECT$ = { SPELL = polymorph RANK = var:current_spell_rank TYPE = order } }
        flag:counterspell = { $EFFECT$ = { SPELL = counterspell RANK = var:current_spell_rank TYPE = order } }
        flag:spellsteal = { $EFFECT$ = { SPELL = spellsteal RANK = var:current_spell_rank TYPE = order } }
        flag:scry = { $EFFECT$ = { SPELL = scry RANK = var:current_spell_rank TYPE = order } }
        flag:haste = { $EFFECT$ = { SPELL = haste RANK = var:current_spell_rank TYPE = order } }
        flag:conjure_refreshment = { $EFFECT$ = { SPELL = conjure_refreshment RANK = var:current_spell_rank TYPE = order } }
        flag:chronomancy = { $EFFECT$ = { SPELL = chronomancy RANK = var:current_spell_rank TYPE = order } }
        flag:evocation = { $EFFECT$ = { SPELL = evocation RANK = var:current_spell_rank TYPE = order } }
        flag:arcane_dome = { $EFFECT$ = { SPELL = arcane_dome RANK = var:current_spell_rank TYPE = order } }

        ## Fire
        flag:scorch = { $EFFECT$ = { SPELL = scorch RANK = var:current_spell_rank TYPE = order } }
        flag:pyroblast = { $EFFECT$ = { SPELL = pyroblast RANK = var:current_spell_rank TYPE = order } }
        flag:flamestrike = { $EFFECT$ = { SPELL = flamestrike RANK = var:current_spell_rank TYPE = order } }
        flag:fire_shield = { $EFFECT$ = { SPELL = fire_shield RANK = var:current_spell_rank TYPE = order } }

        ## Frost
        flag:frostbolt = { $EFFECT$ = { SPELL = frostbolt RANK = var:current_spell_rank TYPE = order } }
        flag:frost_nova = { $EFFECT$ = { SPELL = frost_nova RANK = var:current_spell_rank TYPE = order } }
        flag:frost_armor = { $EFFECT$ = { SPELL = frost_armor RANK = var:current_spell_rank TYPE = order } }
        flag:blizzard = { $EFFECT$ = { SPELL = blizzard RANK = var:current_spell_rank TYPE = order } }

        ## Both
        flag:frostfire_bolt = { $EFFECT$ = { SPELL = frostfire_bolt RANK = var:current_spell_rank TYPE = order } }

        ## Light
        flag:flash_of_light = { $EFFECT$ = { SPELL = flash_of_light RANK = var:current_spell_rank TYPE = light } }
        flag:dispel = { $EFFECT$ = { SPELL = dispel RANK = var:current_spell_rank TYPE = light } }
        flag:holy_fire = { $EFFECT$ = { SPELL = holy_fire RANK = var:current_spell_rank TYPE = light } }
        flag:lightwell = { $EFFECT$ = { SPELL = lightwell RANK = var:current_spell_rank TYPE = light } }
        flag:judgement = { $EFFECT$ = { SPELL = judgement RANK = var:current_spell_rank TYPE = light } }
        flag:exorcism = { $EFFECT$ = { SPELL = exorcism RANK = var:current_spell_rank TYPE = light } }
        flag:expulsion = { $EFFECT$ = { SPELL = expulsion RANK = var:current_spell_rank TYPE = light } }
        flag:avenging_wrath = { $EFFECT$ = { SPELL = avenging_wrath RANK = var:current_spell_rank TYPE = light } }
        flag:salvation = { $EFFECT$ = { SPELL = salvation RANK = var:current_spell_rank TYPE = light } }
        flag:bless = { $EFFECT$ = { SPELL = bless RANK = var:current_spell_rank TYPE = light } }
        flag:divine_shield = { $EFFECT$ = { SPELL = divine_shield RANK = var:current_spell_rank TYPE = light } }
        flag:consecration = { $EFFECT$ = { SPELL = consecration RANK = var:current_spell_rank TYPE = light } }
        flag:rebuke = { $EFFECT$ = { SPELL = rebuke RANK = var:current_spell_rank TYPE = light } }
        flag:divine_storm = { $EFFECT$ = { SPELL = divine_storm RANK = var:current_spell_rank TYPE = light } }
        flag:blessed_bastion = { $EFFECT$ = { SPELL = blessed_bastion RANK = var:current_spell_rank TYPE = light } }
    }
}



every_spell_modifier_effect = {
    $EFFECT$ = { MODIFIER = wc_frost_armor SPELL = frost_armor TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_summon_fire_elemental SPELL = summon_fire_elemental TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_empowered_fire_elemental SPELL = summon_fire_elemental TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_animate_rage SPELL = none TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_backdraft_proc SPELL = backdraft TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_flame_wall_good SPELL = flame_wall TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_pyromania SPELL = none TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_cauterized_wound SPELL = cauterize_wound TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_counterspell SPELL = counterspell TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_scry SPELL = scry TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_empowered_scry SPELL = scry TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_haste SPELL = haste TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_conjure_food SPELL = conjure_refreshment TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_conjure_feast SPELL = conjure_refreshment TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_conjure_drink SPELL = conjure_refreshment TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_fire_shield SPELL = fire_shield TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_frostfire_bolt_good SPELL = frostfire_bolt TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_elemental_fire_minor_protection SPELL = planar_fire TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_elemental_fire_major_protection SPELL = planar_fire TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_elemental_fire_minor_efficiency SPELL = planar_fire TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_elemental_fire_major_efficiency SPELL = planar_fire TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_elemental_fire_major_companionship SPELL = planar_fire TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_elemental_fire_minor_companionship SPELL = planar_fire TYPE = positive }
    # $EFFECT$ = { MODIFIER = wc_elemental_fire_fear_me SPELL = planar_fire TYPE = positive }
    # $EFFECT$ = { MODIFIER = wc_elemental_fire_love_me SPELL = planar_fire TYPE = positive }
    # $EFFECT$ = { MODIFIER = wc_hearth_blessing SPELL = iforgot TYPE = positive } #
    $EFFECT$ = { MODIFIER = wc_elemental_fire_planar_fire SPELL = planar_fire TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_fire_magic_blessing SPELL = planar_fire TYPE = positive }
    # Unused
    $EFFECT$ = { MODIFIER = wc_elemental_fire_learning_boost SPELL = none TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_elemental_air_learning_boost SPELL = none TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_elemental_water_learning_boost SPELL = none TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_elemental_earth_learning_boost SPELL = none TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_light_learning_boost SPELL = none TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_shadow_learning_boost SPELL = none TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_life_learning_boost SPELL = none TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_death_learning_boost SPELL = none TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_order_learning_boost SPELL = none TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_disorder_learning_boost SPELL = none TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_fire_magic_offensive_force SPELL = none TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_fire_magic_defensive_force SPELL = none TYPE = positive }
    # End Unused
    $EFFECT$ = { MODIFIER = wc_fire_decay_ritual_feed SPELL = planar_fire TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_elemental_fire_planar_fire_decay_win SPELL = planar_fire TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_quickening SPELL = none TYPE = positive }
    # $EFFECT$ = { MODIFIER = wc_evocation_character SPELL = iforgot TYPE = positive } # Only applied when inside specific location
    $EFFECT$ = { MODIFIER = wc_flamestrike SPELL = flamestrike TYPE = negative }
    $EFFECT$ = { MODIFIER = wc_flame_wall_bad SPELL = flame_wall TYPE = negative }
    $EFFECT$ = { MODIFIER = wc_frostfire_bolt_bad SPELL = frostfire_bolt TYPE = negative }
    $EFFECT$ = { MODIFIER = wc_frostbolt SPELL = frostbolt TYPE = negative }
    $EFFECT$ = { MODIFIER = wc_frost_nova SPELL = frost_nova TYPE = negative }
    # $EFFECT$ = { MODIFIER = wc_blizzard_character SPELL = iforgot TYPE = negative } # Only applied when inside specific location
    $EFFECT$ = { MODIFIER = wc_slow SPELL = haste TYPE = negative }
    # $EFFECT$ = { MODIFIER = wc_arcane_dome_character SPELL = iforgot TYPE = negative } # Only applied when inside specific location
    $EFFECT$ = { MODIFIER = wc_exorcism SPELL = exorcism TYPE = negative }
    $EFFECT$ = { MODIFIER = wc_lightwell SPELL = lightwell TYPE = positive }
    $EFFECT$ = { MODIFIER = wc_holy_fire SPELL = holy_fire TYPE = negative }
    # $EFFECT$ = { MODIFIER = wc_saved_with_salvation SPELL = salvation TYPE = negative } Ritual modifier #
    # $EFFECT$ = { MODIFIER = wc_salvation SPELL = salvation TYPE = positive } Ritual modifier #
    $EFFECT$ = { MODIFIER = wc_rebuke SPELL = none TYPE = negative }
    $EFFECT$ = { MODIFIER = wc_divine_storm_character SPELL = divine_storm TYPE = negative }
    $EFFECT$ = { MODIFIER = wc_blessed_bastion SPELL = blessed_bastion TYPE = positive }
}

record_spell_stats_effect = {
    if = {
        limit = {
            NOT = {
                has_variable = $SPELL$_cast_count
            }
        }
        set_variable = {
            name = $SPELL$_cast_count
            value = 0
        }
    }
    change_variable = {
        name = $SPELL$_cast_count
        add = 1
    }
    get_or_set_top_casted_spell_effect = { SPELL = $SPELL$ }
    if = { limit = { $RANK$ = 2 } } # error suppression
    if = { limit = { flag:$TYPE$ = flag:none } } # error suppression
}

record_spell_stats_effect_elemental = {
    record_spell_stats_effect = { SPELL = $SPELL$ RANK = $RANK$ TYPE = $TYPE$ }
}

get_or_set_top_casted_spell_effect = {
    if = {
        limit = {
            NOT = {
                has_variable = top_casted_spell
            }
        }
        set_variable = {
            name = top_casted_spell
            value = flag:$SPELL$
        }
        set_variable = {
            name = top_casted_spell_cast_count
            value = var:$SPELL$_cast_count
        }
    }
    if = {
        limit = {
            has_variable = top_casted_spell
            var:$SPELL$_cast_count > var:top_casted_spell_cast_count
        }
        set_variable = {
            name = top_casted_spell
            value = flag:$SPELL$
        }
        set_variable = {
            name = top_casted_spell_cast_count
            value = var:$SPELL$_cast_count
        }
    }
}
set_spell_mana_cost_variable_effect = { # not actually used in casting, just for triggers
    set_variable = {
        name = current_spell_mana_cost
        value = wc_spell_$SPELL$_cost_mana_value
    }
    if = { limit = { $RANK$ = 2 } } # error suppression
    if = { limit = { flag:$TYPE$ = flag:none } } # error suppression
}

set_spell_mana_cost_variable_effect_elemental = { # not actually used in casting, just for triggers
    set_spell_mana_cost_variable_effect = { SPELL = $SPELL$ RANK = $RANK$ TYPE = $TYPE$ }
}

spell_cast_effect = {
    set_variable = {
        name = $SPELL$_cost
        value = wc_spell_$SPELL$_cost_mana_value
    }

    trigger_event = {
        on_action = wc_on_spell_cast_started
    }

    wc_change_mana_by_value_effect = { # Remove mana
        CHANGE = subtract
        VALUE = wc_spell_$SPELL$_cost_mana_value
    }


    # Save Variables so when the event triggers they wont be lost
    set_variable = {
        name = $SPELL$_rank
        value = $RANK$
    }
    if = {
        limit = {
            exists = var:spell_recipient
        }
        set_variable = {
            name = $SPELL$_recipient
            value = var:spell_recipient
        }
    }

    else_if = {
        limit = {
            has_variable_list = spell_targets_list
        }
        every_in_list = {
            variable = spell_targets_list
            save_scope_as = new_target
            root = {
                add_to_variable_list = {
                    name = $SPELL$_targets_list
                    target = scope:new_target
                }
            }
        }
    }

    if = {
        limit = { has_variable = elemental_type }
        set_variable = {
            name = $SPELL$_type
            value = var:elemental_type
        }
    }

    set_variable = {
        name = $SPELL$_class
        value = flag:$TYPE$
    }

    set_variable = {
        name = $SPELL$_progress
        value = 0
    }

    set_variable = {
        name = $SPELL$_target_type
        value = var:current_target_type
    }

    if = {
        limit = {
            exists = var:original_recipient
        }
        set_variable = {
            name = $SPELL$_original_recipient
            value = var:original_recipient
        }
    }

    set_variable = {
        name = $SPELL$_progress_percent
        value = 0
    }

    set_variable = {
        name = $SPELL$_progress_remaining
        value = wc_spell_$SPELL$_cast_time_value
    }

    if = { # start the loop if its not on already
        limit = {
            NOT = { exists = var:spell_loop_on }
        }
        trigger_event = { on_action = wc_on_spell_progression days = 1 }
    }

    add_to_variable_list = { # add to loop
        name = current_spells_casting
        target = flag:$SPELL$
    }

    if = { # friendly fire warning
        limit = {
            spell_is_harmful_trigger = {
                SPELL = flag:$SPELL$
            }
        }
        if = {
            limit = {
                var:current_target_type = flag:character
                exists = var:spell_recipient
                OR = {
                    AND = {
                        var:spell_recipient = root
                        NOT = { spell_is_harmful_trigger_not_self = { SPELL = flag:$SPELL$ } }
                    }
                    var:spell_recipient = {
                        is_vassal_or_below_of = root
                    }
                }
            }
            custom_tooltip = friendly_fire_warning
        }
    }


    if = {
        limit = {
            spell_is_helpful_trigger = {
                SPELL = flag:$SPELL$
            }
            spell_adds_opinion_trigger = { SPELL = flag:$SPELL$ }
        }

        if = {
            limit = {
                var:current_target_type = flag:character
                exists = var:spell_recipient
                NOT = { this = var:spell_recipient }
                NOT = { 
                    spell_is_harmful_trigger_not_self = { SPELL = flag:$SPELL$ }
                    spell_is_helpful_trigger_self = { SPELL = flag:$SPELL$ }
                }
            }
            if = {
                limit = {
                    spell_is_ritual_trigger = {
                        SPELL = flag:$SPELL$
                    }
                }
                var:spell_recipient = {
                    add_opinion = { modifier = wc_casted_helpful_spell target = root opinion = 20 }
                }
            }
            else = {
                var:spell_recipient = {
                    add_opinion = { modifier = wc_casted_helpful_spell target = root }
                }
            }
        }
        else_if = {
            limit = {
                var:current_target_type = flag:title
                exists = var:spell_recipient.holder
                NOT = { this = var:spell_recipient.holder }
                NOT = { 
                    spell_is_harmful_trigger_not_self = { SPELL = flag:$SPELL$ }
                    spell_is_helpful_trigger_self = { SPELL = flag:$SPELL$ }
                }
            }
            if = {
                limit = {
                    exists = var:spell_recipient.holder.liege
                    NOT = { var:spell_recipient.holder.liege = var:spell_recipient.holder }
                    NOT = { var:spell_recipient.holder.liege = root }
                }
                if = {
                    limit = {
                        spell_is_ritual_trigger = {
                            SPELL = flag:$SPELL$
                        }
                    }
                    var:spell_recipient.holder.liege = {
                        add_opinion = { modifier = wc_casted_helpful_spell target = root opinion = 20 }
                    }
                }
                else = {
                    var:spell_recipient.holder.liege = {
                        add_opinion = { modifier = wc_casted_helpful_spell target = root }
                    }
                }
            }
            else = {
                if = {
                    limit = {
                        spell_is_ritual_trigger = {
                            SPELL = flag:$SPELL$
                        }
                    }
                    var:spell_recipient.holder = {
                        add_opinion = { modifier = wc_casted_helpful_spell target = root opinion = 20 }
                    }
                }
                else = {
                    var:spell_recipient.holder = {
                        add_opinion = { modifier = wc_casted_helpful_spell target = root }
                    }
                }
            }
        }
        else_if = {
            limit = {
                var:current_target_type = flag:character_list
                has_variable_list = spell_targets_list
                NOT = { 
                    spell_is_harmful_trigger_not_self = { SPELL = flag:$SPELL$ }
                    spell_is_helpful_trigger_self = { SPELL = flag:$SPELL$ }
                }
            }
            every_in_list = {
                variable = spell_targets_list
                save_scope_as = new_target
                if = {
                    limit = {
                        NOT = { scope:new_target = root }
                    }
                    if = {
                        limit = {
                            spell_is_ritual_trigger = {
                                SPELL = flag:$SPELL$
                            }
                        }
                        scope:new_target = {
                            add_opinion = { modifier = wc_casted_helpful_spell target = root opinion = 20 }
                        }
                    }
                    else = {
                        scope:new_target = {
                            add_opinion = { modifier = wc_casted_helpful_spell target = root }
                        }
                    }
                }
            }
        }
        else_if = {
            limit = {
                var:current_target_type = flag:title_list
                has_variable_list = spell_targets_list
                NOT = { 
                    spell_is_harmful_trigger_not_self = { SPELL = flag:$SPELL$ }
                    spell_is_helpful_trigger_self = { SPELL = flag:$SPELL$ }
                }
            }
            every_in_list = {
                variable = spell_targets_list
                save_scope_as = new_target
                if = {
                    limit = {
                        NOT = { scope:new_target.holder = root }
                    }
                    if = {
                        limit = {
                            spell_is_ritual_trigger = {
                                SPELL = flag:$SPELL$
                            }
                        }
                        scope:new_target.holder = {
                            add_opinion = { modifier = wc_casted_helpful_spell target = root opinion = 20 }
                        }
                    }
                    else = {
                        scope:new_target.holder  = {
                            add_opinion = { modifier = wc_casted_helpful_spell target = root }
                        }
                    }
                    if = {
                        limit = {
                            exists = scope:new_target.holder.liege
                            NOT = { scope:new_target.holder.liege = root }
                        }
                        if = {
                            limit = {
                                spell_is_ritual_trigger = {
                                    SPELL = flag:$SPELL$
                                }
                            }
                            scope:new_target.holder.liege = {
                                add_opinion = { modifier = wc_casted_helpful_spell target = root opinion = 20 }
                            }
                        }
                        else = {
                            scope:new_target.holder.liege = {
                                add_opinion = { modifier = wc_casted_helpful_spell target = root }
                            }
                        }
                    }
                }
            }
        }
        else_if = {
            limit = {
                var:current_target_type = flag:friendly_army
            }
            if = {
                limit = {
                    exists = var:spell_recipient
                    NOT = { this = var:spell_recipient }
                }
                var:spell_recipient.army_commander = {
                    add_opinion = { modifier = wc_casted_helpful_spell target = root }
                }
            }
        }
        else_if = { # Both type of army
            limit = {
                var:current_target_type = flag:army
            }
            if = {
                limit = {
                    exists = var:spell_recipient
                    NOT = { this = var:spell_recipient }
                }
                if = {
                    limit = {
                        target_is_friendly_commander_trigger = { TARGET = var:spell_recipient }
                    }
                    var:spell_recipient.army_commander = {
                        add_opinion = { modifier = wc_casted_helpful_spell target = root }
                    }
                }
            }
        }
    }

    if = {
        limit = {
            spell_is_harmful_trigger = { SPELL = flag:$SPELL$ }
            spell_adds_opinion_trigger = { SPELL = flag:$SPELL$ }
        }
        if = {
            limit = {
                var:current_target_type = flag:character
                exists = var:spell_recipient
                NOT = { this = var:spell_recipient }
            }
            if = {
                limit = {
                    spell_is_ritual_trigger = {
                        SPELL = flag:$SPELL$
                    }
                }
                var:spell_recipient = {
                    add_opinion = { modifier = wc_casted_harmful_spell target = root opinion = -20 }
                }
            }
            else = {
                var:spell_recipient  = {
                    add_opinion = { modifier = wc_casted_harmful_spell target = root }
                }
            }
        }
        else_if = {
            limit = {
                var:current_target_type = flag:title
                exists = var:spell_recipient.holder
                NOT = { this = var:spell_recipient.holder }
            }
            if = {
                limit = {
                    spell_is_ritual_trigger = {
                        SPELL = flag:$SPELL$
                    }
                }
                var:spell_recipient.holder  = {
                    add_opinion = { modifier = wc_casted_harmful_spell target = root opinion = -20 }
                }
            }
            else = {
                var:spell_recipient.holder  = {
                    add_opinion = { modifier = wc_casted_harmful_spell target = root }
                }
            }
            if = {
                limit = {
                    exists = var:spell_recipient.holder.liege
                    NOT = { var:spell_recipient.holder.liege = var:spell_recipient.holder }
                    NOT = { var:spell_recipient.holder.liege = root }
                }
                if = {
                    limit = {
                        spell_is_ritual_trigger = {
                            SPELL = flag:$SPELL$
                        }
                    }
                    var:spell_recipient.holder.liege  = {
                        add_opinion = { modifier = wc_casted_harmful_spell target = root opinion = -20 }
                    }
                }
                else = {
                    var:spell_recipient.holder.liege   = {
                        add_opinion = { modifier = wc_casted_harmful_spell target = root }
                    }
                }
            }
        }
        else_if = {
            limit = {
                var:current_target_type = flag:character_list
                has_variable_list = spell_targets_list
            }
            every_in_list = {
                variable = spell_targets_list
                save_scope_as = new_target
                if = {
                    limit = {
                        NOT = { scope:new_target = root }
                    }
                    if = {
                        limit = {
                            spell_is_ritual_trigger = {
                                SPELL = flag:$SPELL$
                            }
                        }
                        scope:new_target  = {
                            add_opinion = { modifier = wc_casted_harmful_spell target = root opinion = -20 }
                        }
                    }
                    else = {
                        scope:new_target  = {
                            add_opinion = { modifier = wc_casted_harmful_spell target = root }
                        }
                    }
                }
            }
        }
        else_if = {
            limit = {
                var:current_target_type = flag:title_list
                has_variable_list = spell_targets_list
            }
            every_in_list = {
                variable = spell_targets_list
                save_scope_as = new_target
                if = {
                    limit = {
                        NOT = { scope:new_target.holder = root }
                    }
                    if = {
                        limit = {
                            spell_is_ritual_trigger = {
                                SPELL = flag:$SPELL$
                            }
                        }
                        scope:new_target.holder = {
                            add_opinion = { modifier = wc_casted_harmful_spell target = root opinion = -20 }
                        }
                    }
                    else = {
                        scope:new_target.holder   = {
                            add_opinion = { modifier = wc_casted_harmful_spell target = root }
                        }
                    }
                }
                if = {
                    limit = {
                        exists = scope:new_target.holder.liege
                        NOT = { scope:new_target.holder.liege = root }
                    }
                    if = {
                        limit = {
                            spell_is_ritual_trigger = {
                                SPELL = flag:$SPELL$
                            }
                        }
                        scope:new_target.holder.liege = {
                            add_opinion = { modifier = wc_casted_harmful_spell target = root opinion = -20 }
                        }
                    }
                    else = {
                        scope:new_target.holder.liege  = {
                            add_opinion = { modifier = wc_casted_harmful_spell target = root }
                        }
                    }
                }
            }
        }
        else_if = {
            limit = {
                var:current_target_type = flag:enemy_army
            }
            if = {
                limit = {
                    exists = var:spell_recipient
                    NOT = { this = var:spell_recipient }
                }
                var:spell_recipient.army_commander = {
                    add_opinion = { modifier = wc_casted_harmful_spell target = root }
                }
            }
        }
        else_if = { # Both type of army
            limit = {
                var:current_target_type = flag:army
            }
            if = {
                limit = {
                    exists = var:spell_recipient
                    NOT = { this = var:spell_recipient }
                }
                if = {
                    limit = {
                        target_is_enemy_commander_trigger = { TARGET = var:spell_recipient }
                    }
                    var:spell_recipient.army_commander = {
                        add_opinion = { modifier = wc_casted_harmful_spell target = root }
                    }
                }
            }
        }
    }

    if = { limit = { flag:$TYPE$ = flag:none } } # error suppression
}

spell_cast_effect_elemental = {
    spell_cast_effect = { SPELL = $SPELL$ RANK = $RANK$ TYPE = $TYPE$ }
}

update_spell_cooldown_effect = {
    if = {
        limit = {
            var:$SPELL$_cd > 0
        }
        change_variable = {
            name = $SPELL$_cd
            add = -1
        }
        set_variable = {
            name = $SPELL$_cd_percent_first # for gui
            value = {
                add = 1
                add = {
                    value = {
                        add = var:$SPELL$_cd # e.g. 80 days left
                        divide = wc_spell_$SPELL$_cooldown_value # 80 / 120 = 0.66 left
                        multiply = -1 # 1 - 0.66 = 0.33
                    }
                }
                multiply = 100 # 0.33 * 100 = 33% done, 66% remaning.
            }
        }
        set_variable = {
            name = $SPELL$_cd_percent
            value = {
                add = 100
                subtract = var:$SPELL$_cd_percent_first
            }
        }
        remove_variable = $SPELL$_cd_percent_first
    }
    else = {
        remove_variable = $SPELL$_cd
        remove_variable = $SPELL$_cd_percent
        remove_list_variable = {
            name = spells_cd
            target = flag:$SPELL$
        }
    }
    if = { limit = { $RANK$ = 2 } } # error suppression
    if = { limit = { flag:$TYPE$ = flag:none } } # error suppression
}
update_spell_cooldown_effect_elemental = {
    update_spell_cooldown_effect = { SPELL = $SPELL$ RANK = $RANK$ TYPE = $TYPE$ }
}

add_spell_progression_effect = {
    if = {
        limit = {
            var:$SPELL$_progress < wc_spell_$SPELL$_cast_time_value
        }
        change_variable = {
            name = $SPELL$_progress
            add = 1
        }
        set_variable = {
            name = $SPELL$_progress_remaining
            value = {
                add = wc_spell_$SPELL$_cast_time_value
                subtract = var:$SPELL$_progress
            }
        }
        set_variable = {
            name = $SPELL$_progress_percent
            value = {
                add = var:$SPELL$_progress
                divide = wc_spell_$SPELL$_cast_time_value
                multiply = 100
            }
        }
    }
    else = {
        remove_list_variable = {
            name = current_spells_casting
            target = flag:$SPELL$
        }

        set_variable = spell_complete

        set_variable = {
            name = casted_spell
            value = flag:$SPELL$
        }

        set_variable = {
            name = casted_cost
            value = var:$SPELL$_cost
        }

        if = {
            limit = {
                exists = var:$SPELL$_recipient
            }
            set_variable = {
                name = casted_recipient
                value = var:$SPELL$_recipient
            }
        }

        if = {
            limit = {
                has_variable_list = $SPELL$_targets_list
            }
            every_in_list = {
                variable = $SPELL$_targets_list
                save_scope_as = new_target
                root = {
                    add_to_variable_list = {
                        name = casted_targets_list
                        target = scope:new_target
                    }
                }
            }
        }

        set_variable = {
            name = casted_rank
            value = var:$SPELL$_rank
        }

        if = {
            limit = {
                exists = var:$SPELL$_type
            }
            set_variable = {
                name = casted_type
                value = var:$SPELL$_type
            }
        }

        set_variable = {
            name = casted_target_type
            value = var:$SPELL$_target_type
        }

        if = {
            limit = {
                exists = var:$SPELL$_original_recipient
            }
            set_variable = {
                name = casted_original_recipient
                value = var:$SPELL$_original_recipient
            }
        }

        set_variable = {
            name = casted_class
            value = var:$SPELL$_class
        }

        ## trigger on_action
        trigger_event = {
            on_action = wc_on_spell_cast_before_cast
        }

        if = {
            limit = {
                has_variable = should_reflect
                var:should_reflect = yes
            }
            if = {
                limit = {
                    var:$SPELL$_target_type = flag:character
                }
                set_variable = {
                    name = $SPELL$_recipient
                    value = root
                }
                set_variable = {
                    name = casted_recipient
                    value = root
                }
            }
            else_if = {
                limit = {
                    var:$SPELL$_target_type = flag:character_list
                }
                add_to_variable_list = {
                    name = $SPELL$_targets_list
                    target = root
                }
                add_to_variable_list = {
                    name = casted_targets_list
                    target = root
                }
            }
        }

        if = {
            limit = {
                has_variable_list = $SPELL$_targets_list
            }
            every_in_list = {
                variable = $SPELL$_targets_list
                if = {
                    limit = {
                        NOT = {
                            OR = {
                                NOT = {
                                    has_variable = should_include
                                }
                                var:should_include = yes
                            }
                        }
                    }
                    save_scope_as = new_target
                    remove_list_variable = { name = $SPELL$_targets_list target = scope:new_target }
                    remove_list_variable = { name = casted_targets_list target = scope:new_target }
                }
                remove_variable = should_include
            }
        }

        if = {
            limit = {
                OR = {
                    NOT = {
                        has_variable = should_cast
                    }
                    var:should_cast = yes
                }
            }
            remove_variable = should_cast
            # actually cast
            spell_execute = { EFFECT = cast_$SPELL$_effect }
            if = { # Chance to double cast if you have Evocation
                limit = {
                    has_character_modifier = wc_evocation_character_modifier
                    NOT = {
                        spell_is_ritual_trigger = { SPELL = flag:$SPELL$ }
                    }
                }
                random_list = {
                    50 = {
                        spell_execute = { EFFECT = cast_$SPELL$_effect }
                    }
                    50 = {

                    }
                }
            }
        }

        #put the spell on cooldown
        put_spell_on_cooldown_effect = {
            SPELL = $SPELL$
            RANK = 1
            TYPE = $TYPE$
        }

        # Chance to expose secret
        wc_expose_magic_effect = { MAGIC = $TYPE$ SPELL = $SPELL$ }

        ## trigger on_action
        trigger_event = {
            on_action = wc_on_spell_cast_finish
        }

        clear_variable_list = $SPELL$_targets_list
        clear_variable_list = casted_targets_list
        remove_variable = should_cast
        remove_variable = should_reflect
        remove_variable = $SPELL$_progress
        remove_variable = $SPELL$_recipient
        remove_variable = $SPELL$_rank
        remove_variable = $SPELL$_progress_percent
        remove_variable = $SPELL$_progress_remaining
        remove_variable = $SPELL$_type
        remove_variable = $SPELL$_class
        remove_variable = $SPELL$_target_type
        remove_variable = $SPELL$_original_recipient
        remove_variable = elemental_favour_change
        remove_variable = casted_rank
        remove_variable = casted_type
        remove_variable = casted_spell
        remove_variable = casted_recipient
        remove_variable = casted_class
        remove_variable = casted_target_type
    }
    if = { limit = { $RANK$ = 2 } } # error suppression
    if = { limit = { flag:$TYPE$ = flag:spoon } } # error suppression
}

add_spell_progression_effect_elemental = {
    remove_variable = spell_complete
    add_spell_progression_effect = { SPELL = $SPELL$ RANK = $RANK$ TYPE = $TYPE$ }
    if = {
        limit = { # Change elemental disposition
            has_variable = spell_complete
            spell_is_elemental_trigger = { SPELL = flag:$SPELL$ }
            OR = {
                exists = var:$SPELL$_type
                exists = var:elemental_type
            }
        }
        if = {
            limit = {
                NOT = {
                    spell_is_ritual_trigger = {
                        SPELL = flag:$SPELL$
                    }
                }
            }
            save_scope_value_as = {
                name = elemental_favour_change
                value = {
                    add = wc_spell_$SPELL$_cost_mana_value
                    divide = 2
                }
            }
        }
        else = {
            save_scope_value_as = {
                name = elemental_favour_change
                value = {
                    add = wc_spell_$SPELL$_cost_mana_value
                    divide = 4
                }
            }
        }

        if = {
            limit = {
                OR = {
                    AND = {
                        exists = var:$SPELL$_type
                        var:$SPELL$_type = flag:spirit
                    }
                    AND = {
                        exists = var:elemental_type
                        var:elemental_type = flag:spirit
                    }
                }
            }
            wc_change_amount_element_favour_effect = {
                ELEMENT = $TYPE$
                CHANGE = add
                VALUE = scope:elemental_favour_change
            }
        }
        else_if = {
            limit = {
                OR = {
                    AND = {
                        exists = var:$SPELL$_type
                        var:$SPELL$_type = flag:decay
                    }
                    AND = {
                        exists = var:elemental_type
                        var:elemental_type = flag:decay
                    }
                }
            }
            wc_change_amount_element_favour_effect = {
                ELEMENT = $TYPE$
                CHANGE = subtract
                VALUE = scope:elemental_favour_change
            }
        }
        remove_variable = spell_complete
    }
}

wc_spell_death_maintenence_effect = {
    set_variable = {
        name = on_death_maint
        value = yes
    }
    ### BURNOUT
    clear_burnout_effect = yes
    ### Ret aura
    if = {
        limit = {
            any_close_or_extended_family_member = {
                has_character_flag = wc_retribution_aura_flag 
            }
        }
        every_close_or_extended_family_member = {
            limit = {
                has_character_flag = wc_retribution_aura_flag 
                NOT = { has_character_modifier = wc_retribution_aura_modifier }
            }
            add_character_modifier = {
                modifier = wc_retribution_aura_modifier
                months = 6
            }
        }
    }
    ### Final Stand 
    if = {
        limit = {
            has_perk = light_magic_tree_3_perk_8
        }
        primary_heir ?= {
            send_interface_message = {
                title = wc_final_stand_title
                final_stand_effect = yes
            }
        }
        designated_heir ?= {
            send_interface_message = {
                title = wc_final_stand_title
                final_stand_effect = yes
            }
        }
    }
}


spell_execute = {
    $EFFECT$ = yes
}

magic_buff_maintenance_effect = { # Monthly Maint
    if = { # referesh modifier
        limit = {
            has_character_modifier = wc_hearth_blessing_modifier
        }
        remove_character_modifier = wc_hearth_blessing_modifier
        add_character_modifier = {
            modifier = wc_hearth_blessing_modifier
        }
    }
    if = {
        limit = {
            has_character_modifier = wc_diplo_range_from_mp_modifier
        }
        remove_character_modifier = wc_diplo_range_from_mp_modifier
    }
    add_character_modifier = {
        modifier = wc_diplo_range_from_mp_modifier
    }
}

put_spell_on_cooldown_effect = {
    if = {
        limit = {
            NOT = {
                spell_on_cooldown_trigger = {
                    SPELL = flag:$SPELL$
                }
            }
        }

        add_to_variable_list = {
            name = spells_cd
            target = flag:$SPELL$
        }

        if = {
            limit = {
                spell_is_ritual_trigger = {
                    SPELL = flag:$SPELL$
                }
            }
            add_character_flag = {
                flag = any_ritual_cd
                days = wc_spell_cooldown_ritual
            }
        }

        set_variable = {
            name = $SPELL$_cd
            value = wc_spell_$SPELL$_cooldown_value
        }
    }

    if = { limit = { $RANK$ = 2 } } # error suppression

    if = { limit = { flag:$TYPE$ = flag:poop } } # error suppression
}

put_spell_on_cooldown_effect_elemental = {
    put_spell_on_cooldown_effect = { SPELL = $SPELL$ RANK = $RANK$ TYPE = $TYPE$ }
}

remove_spell_cooldown_effect = {
    if = {
        limit = {
            has_variable = $SPELL$_cd
            var:$SPELL$_cd > 0
        }
        remove_variable = $SPELL$_cd
        remove_variable = $SPELL$_cd_percent
        remove_list_variable = {
            name = spells_cd
            target = flag:$SPELL$
        }
    }
}

set_spell_secondary_interaction_effect = {
    switch = {
        trigger = $SPELL$

        flag:fire_shield = {
            if = {
                limit = {
                    has_perk = order_magic_tree_4_perk_7
                }
            }
            set_variable = { name = current_secondary_interaction value = flag:wc_magic_fire_shield_interaction }
        }

        fallback = { remove_variable = current_secondary_interaction }
    }
}

wc_halve_cooldown_effect = {
    change_variable = {
        name = $SPELL$_cd
        multiply = 0.5
    }

    set_variable = {
        name = $SPELL$_cd_percent # for gui
        value = {
            add = 1
            add = {
                value = {
                    add = var:$SPELL$_cd # e.g. 80 days left
                    divide = wc_spell_$SPELL$_cooldown_value # 80 / 120 = 0.66 left
                    multiply = -1 # 1 - 0.66 = 0.33
                }
            }
            multiply = 100 # 0.33 * 100 = 33% done, 66% remaning.
        }
    }
    if = { limit = { $RANK$ = 2 } } # error suppression
    if = { limit = { flag:$TYPE$ = flag:poop } } # error suppression
}

wc_halve_cooldown_effect_elemental = {
    wc_halve_cooldown_effect = { SPELL = $SPELL$ RANK = $RANK$ TYPE = $TYPE$ }
}

wc_reverse_causality_effect = {
    #put the spell on cooldown
    put_spell_on_cooldown_effect = {
        SPELL = $SPELL$
        RANK = 1
        TYPE = $TYPE$
    }
    var:$SPELL$_cd = {
        save_scope_as = duration
    }
    set_variable = {
        name = reverse_causality_mult
        value = {
            add = {
                value = var:$SPELL$_cd
                divide = 365
            }
        }
        days = wc_current_spell_duration
    }
    if = { limit = { $RANK$ = 2 } } # error suppression
}

wc_reverse_causality_effect_elemental = {
    wc_reverse_causality_effect = { SPELL = $SPELL$ RANK = $RANK$ TYPE = $TYPE$ }
}

create_spell_types_effect = {
    add_to_variable_list = { name = spell_types target = flag:light }
    add_to_variable_list = { name = spell_types target = flag:shadow }
    add_to_variable_list = { name = spell_types target = flag:life }
    add_to_variable_list = { name = spell_types target = flag:death }
    add_to_variable_list = { name = spell_types target = flag:order }
    add_to_variable_list = { name = spell_types target = flag:disorder }
    add_to_variable_list = { name = spell_types target = flag:elemental_earth }
    add_to_variable_list = { name = spell_types target = flag:elemental_air }
    add_to_variable_list = { name = spell_types target = flag:elemental_fire }
    add_to_variable_list = { name = spell_types target = flag:elemental_water }
}

get_top_spell_class_by_cast_effect = {
    # this is so cringe yall
    set_variable = {
        name = first_place_spell_class
        value = flag:none
    }
    set_variable = {
        name = first_place_spell_class_count
        value = 0
    }
    if = {
        limit = {
            has_variable = elemental_fire_cast_count
        }
        set_variable = {
            name = first_place_spell_class
            value = flag:elemental_fire
        }
        set_variable = {
            name = first_place_spell_class_count
            value = var:elemental_fire_cast_count
        }
    }
    if = {
        limit = {
            has_variable = elemental_water_cast_count
            var:elemental_water_cast_count > var:first_place_spell_class_count
        }
        set_variable = {
            name = first_place_spell_class
            value = flag:elemental_water
        }
        set_variable = {
            name = first_place_spell_class_count
            value = var:elemental_water_cast_count
        }
    }
    if = {
        limit = {
            has_variable = elemental_air_cast_count
            var:elemental_air_cast_count > var:first_place_spell_class_count
        }
        set_variable = {
            name = first_place_spell_class
            value = flag:elemental_air
        }
        set_variable = {
            name = first_place_spell_class_count
            value = var:elemental_air_cast_count
        }
    }
    if = {
        limit = {
            has_variable = elemental_earth_cast_count
            var:elemental_earth_cast_count > var:first_place_spell_class_count
        }
        set_variable = {
            name = first_place_spell_class
            value = flag:elemental_earth
        }
        set_variable = {
            name = first_place_spell_class_count
            value = var:elemental_earth_cast_count
        }
    }
    if = {
        limit = {
            has_variable = life_cast_count
            var:life_cast_count > var:first_place_spell_class_count
        }
        set_variable = {
            name = first_place_spell_class
            value = flag:life
        }
        set_variable = {
            name = first_place_spell_class_count
            value = var:life_cast_count
        }
    }
    if = {
        limit = {
            has_variable = death_cast_count
            var:death_cast_count > var:first_place_spell_class_count
        }
        set_variable = {
            name = first_place_spell_class
            value = flag:death
        }
        set_variable = {
            name = first_place_spell_class_count
            value = var:death_cast_count
        }
    }
    if = {
        limit = {
            has_variable = order_cast_count
            var:order_cast_count > var:first_place_spell_class_count
        }
        set_variable = {
            name = first_place_spell_class
            value = flag:order
        }
        set_variable = {
            name = first_place_spell_class_count
            value = var:order_cast_count
        }
    }
    if = {
        limit = {
            has_variable = disorder_cast_count
            var:disorder_cast_count > var:first_place_spell_class_count
        }
        set_variable = {
            name = first_place_spell_class
            value = flag:disorder
        }
        set_variable = {
            name = first_place_spell_class_count
            value = var:displace_cast_count
        }
    }
    if = {
        limit = {
            has_variable = light_cast_count
            var:light_cast_count > var:first_place_spell_class_count
        }
        set_variable = {
            name = first_place_spell_class
            value = flag:light
        }
        set_variable = {
            name = first_place_spell_class_count
            value = var:light_cast_count
        }
    }
    if = {
        limit = {
            has_variable = shadow_cast_count
            var:shadow_cast_count > var:first_place_spell_class_count
        }
        set_variable = {
            name = first_place_spell_class
            value = flag:shadow
        }
        set_variable = {
            name = first_place_spell_class_count
            value = var:shadow_cast_count
        }
    }
}
## root is the caster
### upon finishing the spell cast, after setting cd and everything ###
### Variable prefix: casted_
### Variables: spell, recipient, targets_list (variable list), rank, type (for elemental type), class (spell class), target_type, cost
### e.g. var:casted_spell = flag:lava_lash
record_magic_stats_effect = {
    ### MAGIC STATS RECORDING ###
    set_variable = {
        name = last_spell_casted
        value = var:casted_spell
    }

    set_variable = {
        name = last_spell_casted_class
        value = var:casted_class
    }

    if = {
        limit = {
            NOT = { has_variable = casts_completed }
        }
        set_variable = { name = casts_completed value = 0 }
    }
    change_variable = { name = casts_completed add = 1 }

    switch = {
        trigger = var:casted_class
        flag:elemental_fire = {
            if = {
                limit = { NOT = { has_variable = elemental_fire_cast_count } }
                set_variable = { name = elemental_fire_cast_count value = 0 }
            }
            change_variable = { name = elemental_fire_cast_count add = 1 }
        }
        flag:elemental_water = {
            if = {
                limit = { NOT = { has_variable = elemental_water_cast_count } }
                set_variable = { name = elemental_water_cast_count value = 0 }
            }
            change_variable = { name = elemental_water_cast_count add = 1 }
        }
        flag:elemental_air = {
            if = {
                limit = { NOT = { has_variable = elemental_air_cast_count } }
                set_variable = { name = elemental_air_cast_count value = 0 }
            }
            change_variable = { name = elemental_air_cast_count add = 1 }
        }
        flag:elemental_earth = {
            if = {
                limit = { NOT = { has_variable = elemental_earth_cast_count } }
                set_variable = { name = elemental_earth_cast_count value = 0 }
            }
            change_variable = { name = elemental_earth_cast_count add = 1 }
        }
        flag:disorder = {
            if = {
                limit = { NOT = { has_variable = disorder_cast_count } }
                set_variable = { name = disorder_cast_count value = 0 }
            }
            change_variable = { name = disorder_cast_count add = 1 }
        }
        flag:order = {
            if = {
                limit = { NOT = { has_variable = order_cast_count } }
                set_variable = { name = order_cast_count value = 0 }
            }
            change_variable = { name = order_cast_count add = 1 }
        }
        flag:life = {
            if = {
                limit = { NOT = { has_variable = life_cast_count } }
                set_variable = { name = life_cast_count value = 0 }
            }
            change_variable = { name = life_cast_count add = 1 }
        }
        flag:death = {
            if = {
                limit = { NOT = { has_variable = death_cast_count } }
                set_variable = { name = death_cast_count value = 0 }
            }
            change_variable = { name = death_cast_count add = 1 }
        }
        flag:light = {
            if = {
                limit = { NOT = { has_variable = light_cast_count } }
                set_variable = { name = light_cast_count value = 0 }
            }
            change_variable = { name = light_cast_count add = 1 }
        }
        flag:shadow = {
            if = {
                limit = { NOT = { has_variable = shadow_cast_count } }
                set_variable = { name = shadow_cast_count value = 0 }
            }
            change_variable = { name = shadow_cast_count add = 1 }
        }
    }

    execute_scoped_spell_effect = {
        SPELL = var:casted_spell
        EFFECT = record_spell_stats_effect
    }

    get_top_spell_class_by_cast_effect = yes

    ### MAGIC STATS RECORDING ###
}
## root is the caster
### upon finishing the spell cast, after setting cd and everything ###
### Variable prefix: casted_
### Variables: spell, recipient, targets_list (variable list), rank, type (for elemental type), class (spell class), target_type, cost
### e.g. var:casted_spell = flag:lava_lash
wc_on_spell_cast_finish_effect = {
    # Send interface message to caster
    send_interface_message = {
        title = spell_cast_complete_title
        custom_tooltip = spell_cast_complete_desc
    }


    if = { # automatically used
        limit = {
            has_character_modifier = wc_backdraft_proc_modifier
        }
        remove_character_modifier = wc_backdraft_proc_modifier
    }

    if = {
        limit = {
            has_variable = casted_target_type
            var:casted_target_type = flag:character
            has_variable = casted_recipient
        }
        var:casted_recipient = {
            save_scope_as = current_target_character
            root = {
                trigger_event = {
                    on_action = wc_on_spell_cast_finish_character
                }
            }
        }
    }
    else_if = {
        limit = {
            has_variable = casted_target_type
            var:casted_target_type = flag:character_list
            has_variable = casted_targets_list
        }

        every_in_list = {
            variable = casted_targets_list
            save_scope_as = current_target_character
            root = {
                trigger_event = {
                    on_action = wc_on_spell_cast_finish_character
                }
            }
        }
    }
    else_if = {
        limit = {
            has_variable = casted_target_type
            var:casted_target_type = flag:title
            has_variable = casted_recipient
        }
        var:casted_recipient = {
            save_scope_as = current_target_title
            root = {
                trigger_event = {
                    on_action = wc_on_spell_cast_finish_title
                }
            }
        }
    }
    else_if = {
        limit = {
            has_variable = casted_target_type
            var:casted_target_type = flag:title_list
            has_variable = casted_targets_list
        }

        every_in_list = {
            variable = casted_targets_list
            save_scope_as = current_target_title
            root = {
                trigger_event = {
                    on_action = wc_on_spell_cast_finish_title
                }
            }
        }
    }

    # Send interface message to target
    if = {
        limit = {
            exists = var:casted_recipient
            OR = {
                var:casted_target_type = flag:army
                var:casted_target_type = flag:friendly_army
                var:casted_target_type = flag:enemy_army
            }
            NOT = { var:casted_recipient.army_owner = root }
        }
        var:casted_recipient.army_owner = {
            save_temporary_scope_as = castee
        }
        scope:castee = {
            root = {
                save_temporary_scope_as = caster
            }
            set_variable = {
                name = on_casted_spell
                value = root.var:casted_spell
            }
            send_interface_message = {
                title = spell_cast_on_you_title
                custom_tooltip = spell_cast_on_you_desc
            }
        }
    }

    ## PYROMANIA
    if = {
        limit = {
            has_perk = elemental_fire_magic_tree_1_perk_2
        }
        if = {
            limit = {
                var:casted_class = flag:elemental_fire
            }
            random_list = {
                75 = {}
                25 = {
                    send_interface_message = {
                        title = wc_pyromania_title
                        add_character_modifier = {
                            modifier = wc_pyromania_modifier
                            days = 365
                        }
                    }
                }
            }
        }
        else_if = {
            limit = {
                has_character_modifier = wc_pyromania_modifier
            }
            # Remove modifier
            send_interface_message = {
                title = wc_pyromania_title_lost
                remove_all_character_modifier_instances = wc_pyromania_modifier
            }
        }
    }

    ## BURNOUT
    clear_burnout_effect = yes

    # Burn caster when target has Fire Shield
    if = {
        limit = {
            exists = var:casted_recipient
            OR = {
                var:casted_target_type = flag:army
                var:casted_target_type = flag:friendly_army
                var:casted_target_type = flag:enemy_army
            }
            NOT = { var:casted_recipient.army_owner = root }
            NOT = { var:casted_recipient.army_commander = root }
            var:casted_recipient.army_commander = {
                has_character_modifier = wc_fire_shield_modifier
                has_perk = order_magic_tree_4_perk_6
            }
            spell_is_harmful_trigger = {
                SPELL = var:casted_spell
            }
        }

        root = {
            add_or_increase_burned_effect = yes

            send_interface_toast = {
                title = wc_spell_reflected
                left_icon = root
                right_icon = var:casted_recipient
                custom_tooltip = wc_fire_shield_reflect_tt
            }
        }
    }

    # Frost Synergy and Icy Veins
    if = {
        limit = {
            spell_is_arcane_frost = {
                SPELL = var:casted_spell
            }
        }

        remove_character_flag = flame_synergy

        if = {
            limit = {
                has_perk = order_magic_tree_4_perk_5
            }
            add_character_flag = frost_synergy
        }

        if = {
            limit = {
                has_perk = order_magic_tree_5_perk_4
                NOT = {
                    var:casted_spell = flag:frostbolt
                }
            }
            add_character_flag = icy_veins
        }
        else = {
            remove_character_flag = icy_veins
        }
    }
    else_if = {
        limit = {
            has_perk = order_magic_tree_5_perk_6
            spell_is_arcane_fire = {
                SPELL = var:casted_spell
            }
        }

        add_character_flag = flame_synergy
    }

    # Freeze time
    if = {
        limit = {
            spell_is_arcane_chronomancy_trigger = { SPELL = var:casted_spell }
            has_variable = freeze_time_mult
        }
        remove_variable = freeze_time_mult
    }

    if = {
        limit = {
            var:casted_class = flag:order
            has_perk = order_magic_tree_1_perk_4
            OR = {
                has_perk = order_magic_tree_1_perk_7
                NOR = {
                    spell_is_arcane_frost = {
                        SPELL = var:casted_spell
                    }
                    spell_is_arcane_fire = {
                        SPELL = var:casted_spell
                    }
                }
            }
        }

        add_character_modifier = {
            modifier = wc_quickening_modifier
            months = 1
        }
        if = {
            limit = {
                NOT = {
                    has_variable = quickening_count
                }
            }
            set_variable = { name = quickening_count value = 1 }
        }
        else = {
            change_variable = { name = quickening_count add = 1 }
        }
        trigger_event = {
            on_action = remove_quickening
            months = 1
        }
    }

    if = {
        limit = {
            var:casted_class = flag:light
            has_perk = light_magic_tree_2_perk_4
        }
        random_list = {
            90 = { }
            10 = {
                send_interface_message = {
                    title = wc_seal_of_command_title
                    add_legitimacy = 10
                }
            }
        }
    }
}

cancel_cast_effect = {
    remove_list_variable = {
        name = current_spells_casting
        target = flag:$SPELL$
    }

    set_variable = {
        name = cancelled_spell
        value = flag:$SPELL$
    }

    if = {
        limit = {
            exists = var:$SPELL$_recipient
        }
        set_variable = {
            name = cancelled_recipient
            value = var:$SPELL$_recipient
        }
    }

    if = {
        limit = {
            has_variable_list = $SPELL$_targets_list
        }
        every_in_list = {
            variable = $SPELL$_targets_list
            save_scope_as = new_target
            root = {
                add_to_variable_list = {
                    name = cancelled_targets_list
                    target = scope:new_target
                }
            }
        }
    }

    set_variable = {
        name = cancelled_rank
        value = var:$SPELL$_rank
    }

    set_variable = {
        name = cancelled_cost
        value = var:$SPELL$_cost
    }

    set_variable = {
        name = cancelled_type
        value = var:$SPELL$_type
    }

    set_variable = {
        name = cancelled_target_type
        value = var:$SPELL$_target_type
    }

    if = {
        limit = {
            exists = var:$SPELL$_original_recipient
        }
        set_variable = {
            name = cancelled_original_recipient
            value = var:$SPELL$_original_recipient
        }
    }

    set_variable = {
        name = cancelled_class
        value = var:$SPELL$_class
    }

    # send interface message
    send_interface_message = {
        title = spell_cast_cancel_title
        custom_tooltip = spell_cast_cancel_desc
    }

    ## trigger on_action
    trigger_event = {
        on_action = wc_on_spell_cast_cancelled
    }

    # remove vars
    clear_variable_list = $SPELL$_targets_list
    clear_variable_list = cancelled_targets_list
    remove_variable = should_cast
    remove_variable = $SPELL$_progress
    remove_variable = $SPELL$_recipient
    remove_variable = $SPELL$_rank
    remove_variable = $SPELL$_cost
    remove_variable = $SPELL$_progress_percent
    remove_variable = $SPELL$_progress_remaining
    remove_variable = $SPELL$_type
    remove_variable = $SPELL$_class
    remove_variable = $SPELL$_target_type
    remove_variable = $SPELL$_original_recipient
    remove_variable = cancelled_rank
    remove_variable = cancelled_cost
    remove_variable = cancelled_type
    remove_variable = cancelled_spell
    remove_variable = cancelled_recipient
    remove_variable = cancelled_class
    remove_variable = cancelled_target_type

    if = { limit = { $RANK$ = 2 } } # error suppression
    if = { limit = { flag:$TYPE$ = flag:none } } # error suppression
}

cancel_cast_effect_elemental = {
    cancel_cast_effect = { SPELL = $SPELL$ RANK = $RANK$ TYPE = $TYPE$ }
}

# Prio for removing debuffs -> Magic Illness > Magic Injury > Major Illness > Major Injury > Illness > Injury
# Remove a magic disease
remove_magic_illness_effect = {
    random_character_trait = {
        limit = {
            has_trait_flag = magic_illness
        }
        save_scope_as = target_trait
    }
    remove_trait = scope:target_trait
    add_character_flag = {
        flag = wc_recently_dispelled_flag
        days = wc_spell_cooldown_dispel_personal_short
    }
}

remove_illness_effect = {
    random_character_trait = {
        limit = {
            has_trait_flag = illness
            NOT = { has_trait_flag = debilitating_illness }
            NOT = { has_trait_flag = magic_illness }
        }
        save_scope_as = target_trait
    }
    remove_trait = scope:target_trait
    add_character_flag = {
        flag = wc_recently_dispelled_flag
        days = wc_spell_cooldown_dispel_personal_short
    }
}

remove_major_illness_effect = {
    random_character_trait = {
        limit = {
            has_trait_flag = debilitating_illness
            NOT = { has_trait_flag = magic_illness }
        }
        save_scope_as = target_trait
    }
    remove_trait = scope:target_trait
    add_character_flag = {
        flag = wc_recently_dispelled_flag
        days = wc_spell_cooldown_dispel_personal_short
    }
}

remove_physical_injury_effect = {
    random_character_trait = {
        limit = {
            has_trait_flag = injury
            NOT = { has_trait_flag = major_injury }
            NOT = { has_trait_flag = magic_injury }
        }
        save_scope_as = target_trait
    }
    remove_trait = scope:target_trait
    add_character_flag = {
        flag = wc_recently_dispelled_flag
        days = wc_spell_cooldown_dispel_personal_short
    }
}

remove_major_injury_effect = {
    random_character_trait = {
        limit = {
            has_trait_flag = major_injury
        }
        save_scope_as = target_trait
    }
    remove_trait = scope:target_trait
    add_character_flag = {
        flag = wc_recently_dispelled_flag
        days = wc_spell_cooldown_dispel_personal_short
    }
}

remove_magic_injury_effect = {
    if = {
        limit = {
            $REDUCE_SEVERITY$ = yes
        }
        if = {
            limit = {
                OR = {
                    has_trait = burned_3
                    has_trait = burned_2
                }
            }
            change_trait_rank = { trait = burned rank = -1 }
        }
        else_if = {
            limit = {
                OR = {
                    has_trait = frostbite_2
                    has_trait = frostbite_3
                }
            }
            change_trait_rank = { trait = frostbite rank = -1}
        }
        else_if = {
            limit = {
                OR = {
                    has_trait = frostbite_1
                    has_trait = burned_1
                    has_trait = holy_wrath
                }
            }
            random_character_trait = {
                limit = {
                    has_trait_flag = magic_injury
                }
                save_scope_as = target_trait
            }
            remove_trait = scope:target_trait
        }
    }
    else = {
        random_character_trait = {
            limit = {
                has_trait_flag = magic_injury
            }
            save_scope_as = target_trait
        }
        remove_trait = scope:target_trait
    }
    add_character_flag = {
        flag = wc_recently_dispelled_flag
        days = wc_spell_cooldown_dispel_personal_short
    }
}

remove_injury_effect = {
    if = {
        limit = {
            $REDUCE_SEVERITY$ = yes
        }
        if = {
            limit = {
                OR = {
                    has_trait = wounded_2
                    has_trait = wounded_3
                }
            }
            change_trait_rank = { trait = wounded rank = -1 }
        }
        else_if = {
            limit = {
                OR = {
                    has_trait = maimed_2
                    has_trait = maimed_3
                }
            }
            change_trait_rank = { trait = maimed rank = -1 }
        }
        else_if = {
            limit = {
                OR = {
                    has_trait = maimed_1
                    has_trait = wounded_1
                }
            }
            random_character_trait = {
                limit = {
                    has_trait_flag = injury
                    NOT = { has_trait_flag = major_injury }
                    NOT = { has_trait_flag = magic_injury }
                }
                save_scope_as = target_trait
            }
            remove_trait = scope:target_trait
        }
    }
    else = {
        random_character_trait = {
            limit = {
                has_trait_flag = injury
                NOT = { has_trait_flag = major_injury }
                NOT = { has_trait_flag = magic_injury }
            }
            save_scope_as = target_trait
        }
        remove_trait = scope:target_trait
    }
    add_character_flag = {
        flag = wc_recently_dispelled_flag
        days = wc_spell_cooldown_dispel_personal_short
    }
}

remove_psych_illness_effect = {
    random_character_trait = {
        limit = {
            has_trait_flag = psych_illness
        }
        save_scope_as = target_trait
    }
    remove_trait = scope:target_trait
    add_character_flag = {
        flag = wc_recently_dispelled_flag
        days = wc_spell_cooldown_dispel_personal_short
    }
}

remove_poison_effect = {
    random_character_trait = {
        limit = {
            has_trait_flag = psych_illness
        }
        save_scope_as = target_trait
    }
    remove_trait = scope:target_trait
    add_character_flag = {
        flag = wc_recently_dispelled_flag
        days = wc_spell_cooldown_dispel_personal_short
    }
}
