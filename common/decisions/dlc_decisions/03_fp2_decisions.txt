# No lists or indexes, only chaos. Keep scrolling down and thou shalt find them.

#############################################
# Hostility Ending					    	#
# by Joe Parkin								#
#############################################
# Warcraft
#struggle_iberia_ending_hostility_decision = {}

#############################################
# Compromise Ending					    	#
# by Joe Parkin								#
#############################################
# Warcraft
#struggle_iberia_ending_compromise_decision = {}

#############################################
# Conciliation Ending					    #
# by Joe Parkin								#
#############################################
# Warcraft
#struggle_iberia_ending_conciliation_decision = {}



###################################
# Secure the Mediterranean
# By Hugo Cortell
###################################
# Warcraft
#secure_mediterranean_decision = {}

#############################################
# Eat a Cheese
# by Daniel "yes I know what exciting content is stop bullying me" Moore
###########################################################################
#eat_cheese_decision = {
#	picture = "gfx/interface/illustrations/decisions/decision_personal_religious.dds"
#	desc = eat_cheese_decision_desc
#
#	is_shown = {
#		any_character_artifact = {
#			has_variable = has_cheese_artifact
#		}
#	}
#
#	effect = {
#
#		custom_tooltip = eat_cheese_effect_tt
#
#		trigger_event = fp2_yearly.1008
#	
#	}
#
#	ai_check_interval = 60
#	
#	ai_potential = {
#
#	}
#
#	ai_will_do = {
#		base = 100
#	}
#}

###################################
# Sponsor Jewish Sciences
# By Hugo Cortell
###################################
# Warcraft - Can be adapted
#golden_age_jewish_science_in_iberia_decision = {
#	picture = "gfx/interface/illustrations/decisions/decision_golden_age.dds"
#	desc = golden_age_jewish_science_in_iberia_decision_desc
#
#	is_shown = {
#		has_fp2_dlc_trigger = yes
#		top_liege = root
#		is_independent_ruler = yes # (Redundancy check)
#		AND = {
#			exists = struggle:iberian_struggle
#			any_character_struggle = {
#				involvement = involved
#				has_struggle_phase_parameter = unlocks_golden_age_jewish_science_decision
#			}
#		}
#	}
#
#	is_valid = {
#		OR = { # Either the var does not exist (no current golden age) or you are not the sponsor of the current golden age
#			NOT = { exists = global_var:fp2_current_jewish_science_sponsor }
#			trigger_if = {
#				limit = { exists = global_var:fp2_current_jewish_science_sponsor }
#				custom_tooltip = { 
#					text = golden_age_jewish_science_in_iberia_decision_hardcoded_trigger_text.b 
#					NOT = { root = global_var:fp2_current_jewish_science_sponsor }
#					is_ai = no # Prevents the AI from stealing the golden age, players can steal each other's golden age
#				}
#			}
#		}
#		trigger_if = { # If you are not your culture's head, you must earn their approval
#			limit = { 
#				exists = culture.culture_head # Redundancy check!
#				NOT = { culture.culture_head = root } 
#			}
#			custom_tooltip = { 
#				text = golden_age_jewish_science_in_iberia_decision_hardcoded_trigger_text.a 
#				culture.culture_head = {
#					save_temporary_opinion_value_as = {
#						name = target_opinion
#						target = root
#					}
#					scope:target_opinion > 0
#				}
#			}
#		}
#	}
#
#	effect = {
#		hidden_effect = { # Prevent any case in which modifiers could be stacked
#			struggle:iberian_struggle = {
#				every_involved_ruler = {
#					remove_character_modifier = fp2_sponsored_golden_age_modifier
#					remove_character_modifier = fp2_part_of_golden_age_modifier
#				}
#			}
#		}
#
#		send_interface_toast = {
#			type = event_toast_effect_good
#			title = golden_age_jewish_science_in_iberia_decision.player_notif.t
#			right_icon = root
#			play_music_cue = mx_cue_meadandwine
#			
#			add_character_modifier = {
#				modifier = fp2_sponsored_golden_age_modifier
#				years = 120
#			}
#			capital_county = {
#				add_county_modifier = {
#					modifier = fp2_epicenter_of_golden_age_modifier
#					years = 60
#				}
#			}
#		}
#		culture = { add_to_list = already_involved_cultures } # Ensures that only one top ruler for each involved culture is picked
#		struggle:iberian_struggle = {
#			every_involved_ruler = {
#				custom = fp2_one_independent_ruler_of_each_culture_notifier
#				limit = { 
#					culture = { save_temporary_scope_as = current_culture }
#					NOT = { # Checks that it is not in the list of "I am already benefiting from this"
#						this = root # (Also must not be root)
#						any_in_list = {
#							list = already_involved_cultures
#							this = scope:current_culture
#						}
#					} 
#					is_independent_ruler = yes	# Redundancy checks, vital to ensuring this has a 110% success rate
#					top_liege = this			# Redundancy check
#				}
#				if = {
#					limit = { NOT = { has_character_modifier = fp2_part_of_golden_age_modifier } }
#					culture = { add_to_list = already_involved_cultures }
#					send_interface_toast = {
#						type = event_toast_effect_good
#						title = golden_age_jewish_science_in_iberia_decision.player_notif.t
#						right_icon = root # Showing root is WAD, lets other players know who started it
#
#						add_character_modifier = {
#							modifier = fp2_part_of_golden_age_modifier
#							years = 120
#						}
#					}
#				}
#			}
#		}
#
#		hidden_effect = {
#			# TODO_CD_FP2 Here will go the "getting more cool courtiers/guests"
#
#			random_list = {
#				100 = {
#					trigger_event = { # Translator/book retailer event
#						id = iberia_north_africa.2001
#						days = { 4 32 }
#					}
#				}
#				110 = {
#					trigger_event = { # Cataract Surgery event
#						id = iberia_north_africa.2002
#						days = { 4 32 }
#					}
#				}
#				90 = {
#					trigger_event = { # Bickering scholars event
#						id = iberia_north_africa.2003
#						days = { 4 32 }
#					}
#				}
#			}
#		}
#
#		set_global_variable = { 
#			name = fp2_current_jewish_science_sponsor 
#			value = root 
#			years = 120
#		}
#	}
#
#	cost = {
#		gold = {
#			value = major_gold_value
#			multiply = 2.25
#			round = yes
#		}
#	}
#
#	ai_check_interval = 730
#	
#	ai_potential = {}
#
#	ai_will_do = {
#		base = 0
#		modifier = {
#			add = {
#				value = learning
#				multiply = 5
#				round = yes
#			}
#			always = yes
#		}
#	}
#}
#
#############################################
# Convene Council of Toledo					#
# by Joe Parkin and Ola Jentzsch			#
#############################################
# Warcraft
#council_of_toledo_decision = {}

#############################################
# Secure Iberian Foothold
# by Joe Parkin and Ola Jentzsch
#############################################
# Warcraft
#secure_iberian_foothold_decision = {}

###################################
# Build Pilgrim Roads
# By Hugo Cortell
###################################
# Warcraft - can be adapted
#build_holy_pilgrim_roads_decision = {
#	picture = "gfx/interface/illustrations/decisions/fp2_decision_struggle_opening.dds"
#	sort_order = 300 # Note: in [ROOT.Char.GetFaith.GetAdherentNameNoTooltip|L] and [ROOT.Char.GetFaith.GetAdherentNamePluralNoTooltip|L] both [NoTooltip] and [L] are ignored
#
#	is_shown = {
#		faith = {
#			any_holy_site = {
#				holder.top_liege = root
#				count > 0
#			}
#		}
#		any_character_struggle = {
#			involvement = involved
#			has_struggle_phase_parameter = unlocks_build_pilgrim_roads_decision
#		}
#	}
#
#	is_valid = {
#		custom_tooltip = {
#			text = build_holy_pilgrim_roads_decision_hardcoded_trigger_text.a
#			faith = {
#				any_holy_site = {
#					holder.top_liege = root
#					NOT = { county = { has_county_modifier = fp2_pilgrim_roads_modifier } }
#					count > 0
#				}
#			}
#		}
#	}
#
#	effect = {
#		hidden_effect = {
#			faith = {
#				random_holy_site = {
#					limit = {
#						holder.top_liege = root
#						NOT = { county = { has_county_modifier = fp2_pilgrim_roads_modifier } }
#					}
#					save_scope_as = chosen_holy_site_for_pilgrim_roads
#					county = {
#						save_scope_as = chosen_location_for_pilgrim_roads
#						add_county_modifier = {
#							modifier = fp2_pilgrim_roads_modifier
#							years = 50
#						}
#					}
#				}
#			}
#		}
#		send_interface_toast = {
#			type = event_learning_good_with_text
#			title = build_holy_pilgrim_roads_decision_construction_notif.t
#			desc = build_holy_pilgrim_roads_decision_construction_notif.desc
#
#			add_piety = major_piety_gain
#			show_as_tooltip = {
#				scope:chosen_location_for_pilgrim_roads = {
#					add_county_modifier = {
#						modifier = fp2_pilgrim_roads_modifier
#						years = 50
#					}
#				}
#			}
#		}
#
#		if = { # QA QoL
#			limit = { debug_only = yes }
#			custom_tooltip = debug_generic_option_shortened_trigger_can_disable
#			hidden_effect = {
#				random_list = {
#					1 = {
#						trigger_event = {
#							id = iberia_north_africa.2011
#							days = 4
#						}
#					}
#					1 = {
#						trigger_event = {
#							id = iberia_north_africa.2012
#							days = 4
#						}
#					}
#					1 = {
#						trigger_event = {
#							id = iberia_north_africa.2013
#							days = 4
#						}
#					}
#				}
#			}
#		}
#		else = {
#			hidden_effect = {
#				random_list = {
#					1 = {
#						trigger_event = {
#							id = iberia_north_africa.2011
#							days = { 32 2048 }
#						}
#					}
#					1 = {
#						trigger_event = {
#							id = iberia_north_africa.2012
#							days = { 32 2048 }
#						}
#					}
#					1 = {
#						trigger_event = {
#							id = iberia_north_africa.2013
#							days = { 32 2048 }
#						}
#					}
#				}
#			}
#		}
#	}
#
#	cost = { gold = massive_gold_value }
#
#	ai_check_interval = 730
#	ai_potential = {}
#	ai_will_do = {
#		base = 50
#		modifier = {
#			add = learning
#			always = yes
#		}
#		modifier = {
#			add = -50
#			has_trait = cynical
#		}
#		modifier = {
#			add = 10
#			has_trait = zealous
#		}
#		modifier = {
#			add = -40
#			short_term_gold < massive_gold_value
#		}
#	}
#}

#############################################
# Found Kingdom of Toledo
# by Joe Parkin
#############################################
# Warcraft
#found_kingdom_toledo_decision = {}

#############################################
# Develop a city
# by Maxence Voleau
#############################################
improve_city_province_decision = {
	title = improve_city_province_decision_name
	picture = "gfx/interface/illustrations/decisions/decision_misc.dds"
	desc = improve_city_province_decision_desc
	selection_tooltip = improve_city_province_decision_tooltip
	cooldown = { years = 50 }
	major = no
	sort_order = 90

	is_shown = {
		exists = dynasty
		dynasty = {
			has_dynasty_perk = fp2_urbanism_legacy_5
		}
	}

	is_valid_showing_failures_only = {
		custom_tooltip = {
			text = improve_city_province_decision_at_least_one_city_tt
			any_sub_realm_county = {
				count > 0
				holder = root
				any_county_province = {
					building_slots <= 5
					has_holding_type = city_holding
				}
			}
		}
	}

	effect = {

		#Generate intelligible effect
		if = {
			limit = {
				any_sub_realm_county = {
					count > 0
					holder = root
					any_county_province = {
						building_slots <= 5
						has_holding_type = city_holding
					}
				}
			}
			every_sub_realm_county = {
				# only county directly own by the character
				limit = { holder = root }
				every_county_province = {
					limit = {
						has_holding_type = city_holding
						building_slots <= 5
					}
					save_scope_as = current_province
					prev.holder = {
						send_interface_toast = {
							type = event_generic_good
							title = city_gained_building_slots
							left_icon = scope:current_province.barony

							scope:current_province = {
								add_province_modifier = extra_building_slot
							}
						}
					}

				}
			}
		}
		else = {
			custom_tooltip = improve_city_province_decision_decision_no_effect
		}
	}

	cost = {
		gold = {
			value = improve_city_province_decision_cost
			multiply = {
				value = 1
				every_sub_realm_county = {
					# only county directly own by the character
					limit = { holder = root }
					every_county_province = {
						limit = {
							building_slots <= 5
							has_holding_type = city_holding
						}
						add = 1
					}
				}
			}
		}
	}

	ai_check_interval = 120

	ai_potential = {
		is_at_war = no
		# Has enough gold.
		short_term_gold >= ai_war_chest_desired_gold_value
		NOR = {
			has_trait = lazy
			has_trait = callous
		}
	}

	ai_will_do = {
		base = 100
	}
}
