has_being_trait_trigger = {
	OR = {
		has_trait = being_undead
		has_trait = being_demon
		has_trait = being_void
		has_trait = being_life
		has_trait = being_order
		has_trait = being_light
	}
}
valid_being_notification_target_trigger = {
	NOR = {
		this = scope:lost_character
		is_in_list = being_notified_list
		has_trait = being_undead
	}
	trait_is_shunned_or_criminal_in_faith_trigger = { TRAIT = being_undead FAITH = faith GENDER_CHARACTER = scope:lost_character }
}

is_criminal_being_trigger = {
	trigger_if = {
		limit = { has_trait = being_undead }
		trait_is_shunned_or_criminal_in_faith_trigger = { TRAIT = being_undead FAITH = $FAITH$ GENDER_CHARACTER = this }
	}
	trigger_else = {
		always = no
	}
}

can_become_undead_trigger = {
	has_being_trait_trigger = no

	age >= undead_age_value
	
	is_humanoid_trigger = yes
}
game_start_undead_trigger = {
	can_become_undead_trigger = yes
	
	OR = {
		AND = {
			exists = liege_or_court_owner
			liege_or_court_owner = { has_government = necro_government }
		}
		AND = {
			exists = location.province_owner
			location.province_owner = { has_government = necro_government } # For game_rule_create_spouse_and_children since there's no liege
		}
	}
}
undead_county_trigger = {
	culture = { has_cultural_pillar = heritage_undead }
}

return_to_twisting_nether_trigger = {
	has_trait = being_demon
	NOT = { has_trait = in_twisting_nether }
	NOR = {
		scope:death_reason = flag:death_vanished # May be not dead
		scope:death_reason = flag:death_suicide	# Do it willingly
		scope:death_reason = flag:death_sacrificed_to_gods # Soul is trapped
		scope:death_reason = flag:death_fear # Scared away
		scope:death_reason = flag:death_disappearance # May be not dead
	}
}

is_in_twisting_nether_trigger = {
	has_trait = in_twisting_nether
}

is_being_gene_trigger = {
	trigger_if = {
		limit = { has_being_trait_trigger = yes }
		has_trait = $BEING$
	}
	trigger_else_if = {
		limit = { is_from_ruler_designer = yes }
		has_gene = {
			category = gene_being
			template = $BEING$
		}
	}
	trigger_else = {
		trigger_if = {
			limit = {
				exists = culture
				NOT = { exists = scope:culture }
			}
			culture = { save_temporary_scope_as = culture }
		}
		
		trigger_if = {
			limit = { exists = scope:culture }
			scope:culture = { has_clothing_gfx = $BEING$_gfx }
		}
		trigger_else = {
			always = no
		}
	}
}