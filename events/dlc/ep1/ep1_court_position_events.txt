namespace = court_position



################################
# FLAVOR EVENTS
# 1001 - 8999
################################



#############################
# MURDER SAVE EVENTS
# 9001 - 9199
# by Linnéa Thimrén
#############################

###############
# SAVED BY FOOD TASTER

# FOR MURDERER: Saved from poisoned food by food taster
# by Linnéa Thimrén
court_position.9001 = {
	type = character_event
	title = court_position.9001.t
	desc = {
		desc = court_position.9001.desc
		triggered_desc = {
			trigger = { exists = local_var:food_taster_dies }
			desc = court_position.9001.food_taster_dies
		}
	}
	
	theme = murder_scheme
	override_background = { event_background = feast }
	left_portrait = {
		character = scope:target
		animation = shock
	}
	right_portrait = {
		character = scope:food_taster
		animation = poison
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = {
		scope:murder_method = flag:used_poison
		scope:target = {
			employs_court_position = food_taster_court_position
			any_court_position_holder = {
		        type = food_taster_court_position
		        is_physically_able = yes
		    }
			NOT = { has_character_flag = recently_saved_by_food_taster }
		}
	}

	immediate = {
		save_scope_value_as = {
			name = murder_saved
			value = flag:food_taster_poison_save
		}
		scope:target = {
			random_court_position_holder = {
				type = food_taster_court_position
				limit = { is_physically_able = yes }
				save_scope_as = food_taster
			}
		}
		murder_failure_effect = yes # Fires the response for the target
		hidden_effect = {
			random = {
				chance = 75
				set_local_variable = {
					name = food_taster_dies
					value = yes
				}
			}
		}
	}

	option = {
		name = murder_save.0001.a
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			scope:scheme = {
				end_scheme = yes
			}
		}
		ai_chance = {
			base = 100
		}
	}

	option = {
		name = murder_save.0001.b
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			start_scheme = {
				type = murder
				target = scope:target
			}
		}
		hidden_effect = {
			save_scope_value_as = {
				name = restart_scheme
				value = yes
			}
		}
		ai_chance = {
			base = 0
		}
	}

	after = {
		if = {
			limit = { exists = local_var:food_taster_dies }
			show_as_tooltip = {
				if = {
					limit = {
						exists = scope:scheme_discovered
					}
					known_murder_effect = {
						VICTIM = scope:food_taster
						MURDERER = root
						EXPOSER = scope:target
					}
				}
				else = {
					unknown_murder_effect = {
						VICTIM = scope:food_taster
						MURDERER = root
						REASON = death_poison
					}
				}
			}
		}
		hidden_effect = {
			trigger_event = murder_outcome.9999
		}
	}
}

# FOR TARGET: Food taster dies to poison
court_position.9002 = {
	type = character_event
	title = court_position.9001.t
	desc = {
		desc = court_position.9002.desc
		triggered_desc = {
			trigger = { exists = local_var:food_taster_dies }
			desc = court_position.9002.food_taster_dies
		}
		triggered_desc = {
			trigger = { exists = scope:scheme_discovered }
			desc = court_position.9002.owner_discovered
		}
	}
	left_portrait = {
		character = root
		animation = grief
	}
	right_portrait = {
		character = scope:food_taster
		animation = poison
	}
	lower_left_portrait = scope:owner_revealed
	theme = intrigue

	trigger = {
		exists = scope:murder_saved
		scope:murder_saved = flag:food_taster_poison_save
		scope:target = {
			NOT = { has_character_flag = recently_saved_by_food_taster }
		}
	}

	immediate = {
		set_variable = {
			name = block_death_event_from
			value = scope:food_taster
			days = 3
		}
		add_character_flag = {
			flag = recently_saved_by_food_taster
			years = 10
		}
		# Handle the death of the food taster, if necessary
		if = {
			limit = { exists = local_var:food_taster_dies }
			if = {
				limit = {
					exists = scope:scheme_discovered
				}
				known_murder_effect = {
					VICTIM = scope:food_taster
					MURDERER = root
					EXPOSER = scope:target
				}
			}
			else = {
				unknown_murder_effect = {
					VICTIM = scope:food_taster
					MURDERER = root
					REASON = death_poison
				}
			}
		}
	}

	option = { #Who could do such a thing?
		name = murder_save.1001.a
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	option = { #Vengeance!
		name = murder_save.1001.b
		trigger = {
			exists = scope:scheme_discovered
		}
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	after = {
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
	}
}


###############
# SAVED BY CUP-BEARER

# FOR MURDERER: Saved from poisoned drink by cup-bearer
# by Linnéa Thimrén
court_position.9011 = {
	type = character_event
	title = court_position.9011.t
	desc = {
		desc = court_position.9011.desc
		triggered_desc = {
			trigger = { exists = local_var:cupbearer_dies }
			desc = court_position.9011.cupbearer_dies
		}
	}
	
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = shock
	}
	right_portrait = {
		character = scope:cupbearer
		animation = poison
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = {
		scope:murder_method = flag:used_poisoned_drink
		scope:target = {
			employs_court_position = cupbearer_court_position
			any_court_position_holder = {
		        type = cupbearer_court_position
		        is_physically_able = yes
		    }
			NOT = { has_character_flag = recently_saved_by_cupbearer }
		}
	}

	immediate = {
		save_scope_value_as = {
			name = murder_saved
			value = flag:cupbearer_poison_save
		}
		scope:target = {
			random_court_position_holder = {
				type = cupbearer_court_position
				limit = { is_physically_able = yes }
				save_scope_as = cupbearer
			}
		}
		murder_failure_effect = yes # Fires the response for the target
		hidden_effect = {
			random = {
				chance = 75
				set_local_variable = {
					name = cupbearer_dies
					value = yes
				}
			}
		}
	}

	option = {
		name = murder_save.0001.a
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			scope:scheme = {
				end_scheme = yes
			}
		}
		ai_chance = {
			base = 100
		}
	}

	option = {
		name = murder_save.0001.b
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			start_scheme = {
				type = murder
				target = scope:target
			}
		}
		hidden_effect = {
			save_scope_value_as = {
				name = restart_scheme
				value = yes
			}
		}
		ai_chance = {
			base = 0
		}
	}

	after = {
		if = {
			limit = { exists = local_var:cupbearer_dies }
			show_as_tooltip = {
				if = {
					limit = {
						exists = scope:scheme_discovered
					}
					known_murder_effect = {
						VICTIM = scope:cupbearer
						MURDERER = root
						EXPOSER = scope:target
					}
				}
				else = {
					unknown_murder_effect = {
						VICTIM = scope:cupbearer
						MURDERER = root
						REASON = death_poison
					}
				}
			}
		}
		hidden_effect = {
			trigger_event = murder_outcome.9999
		}
	}
}


# FOR TARGET: Cup-bearer dies to poison
court_position.9012 = {
	type = character_event
	title = court_position.9011.t
	desc = {
		desc = court_position.9012.desc
		triggered_desc = {
			trigger = { exists = local_var:cupbearer_dies }
			desc = court_position.9012.cupbearer_dies
		}
		triggered_desc = {
			trigger = { exists = scope:scheme_discovered }
			desc = court_position.9002.owner_discovered
		}
	}
	left_portrait = {
		character = root
		animation = grief
	}
	right_portrait = {
		character = scope:cupbearer
		animation = poison
	}
	lower_left_portrait = scope:owner_revealed
	theme = intrigue

	trigger = {
		exists = scope:murder_saved
		scope:murder_saved = flag:cupbearer_poison_save
		scope:target = {
			NOT = { has_character_flag = recently_saved_by_cupbearer }
		}
	}

	immediate = {
		set_variable = {
			name = block_death_event_from
			value = scope:cupbearer
			days = 3
		}
		add_character_flag = {
			flag = recently_saved_by_cupbearer
			years = 10
		}
		# Handle the death of the food taster, if necessary
		if = {
			limit = { exists = local_var:cupbearer_dies }
			if = {
				limit = {
					exists = scope:scheme_discovered
				}
				known_murder_effect = {
					VICTIM = scope:cupbearer
					MURDERER = root
					EXPOSER = scope:target
				}
			}
			else = {
				unknown_murder_effect = {
					VICTIM = scope:cupbearer
					MURDERER = root
					REASON = death_poison
				}
			}
		}
	}

	option = { #Who could do such a thing?
		name = murder_save.1001.a
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	option = { #Vengeance!
		name = murder_save.1001.b
		trigger = {
			exists = scope:scheme_discovered
		}
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	after = {
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
	}
}


###############
# SAVED BY BODYGUARD

# FOR MURDERER: Saved from assassin by bodyguard
# by Linnéa Thimrén
court_position.9021 = {
	type = character_event
	title = court_position.9021.t
	desc = {
		desc = court_position.9021.desc
		triggered_desc = {
			trigger = { exists = local_var:bodyguard_dies }
			desc = court_position.9021.bodyguard_dies
		}
	}
	
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = shock
	}
	right_portrait = {
		character = scope:bodyguard
		animation = poison
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = {
		scope:murder_method = flag:hired_assassin
		scope:target = {
			employs_court_position = bodyguard_court_position
			any_court_position_holder = {
		        type = bodyguard_court_position
		        is_physically_able = yes
		    }
			NOT = { has_character_flag = recently_saved_by_bodyguard }
		}
	}

	immediate = {
		save_scope_value_as = {
			name = murder_saved
			value = flag:bodyguard_save
		}
		scope:target = {
			random_court_position_holder = {
				type = bodyguard_court_position
				limit = { is_physically_able = yes }
				save_scope_as = bodyguard
			}
		}
		murder_failure_effect = yes # Fires the response for the target
		hidden_effect = {
			random = {
				chance = 75
				set_local_variable = {
					name = bodyguard_dies
					value = yes
				}
			}
		}
	}

	option = {
		name = murder_save.0001.a
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			scope:scheme = {
				end_scheme = yes
			}
		}
		ai_chance = {
			base = 100
		}
	}

	option = {
		name = murder_save.0001.b
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			start_scheme = {
				type = murder
				target = scope:target
			}
		}
		hidden_effect = {
			save_scope_value_as = {
				name = restart_scheme
				value = yes
			}
		}
		ai_chance = {
			base = 0
		}
	}

	after = {
		if = {
			limit = { exists = local_var:bodyguard_dies }
			show_as_tooltip = {
				if = {
					limit = {
						exists = scope:scheme_discovered
					}
					known_murder_effect = {
						VICTIM = scope:bodyguard
						MURDERER = root
						EXPOSER = scope:target
					}
				}
				else = {
					unknown_murder_effect = {
						VICTIM = scope:bodyguard
						MURDERER = root
						REASON = death_duel
					}
				}
			}
		}
		hidden_effect = {
			trigger_event = murder_outcome.9999
		}
	}
}

# FOR TARGET: Bodyguard dies to poison
court_position.9022 = {
	type = character_event
	title = court_position.9021.t
	desc = {
		desc = court_position.9022.desc
		triggered_desc = {
			trigger = { exists = local_var:bodyguard_dies }
			desc = court_position.9022.bodyguard_dies
		}
		triggered_desc = {
			trigger = { exists = scope:scheme_discovered }
			desc = court_position.9002.owner_discovered
		}
	}
	left_portrait = {
		character = root
		animation = grief
	}
	right_portrait = {
		character = scope:bodyguard
		animation = poison
	}
	lower_left_portrait = scope:owner_revealed
	theme = intrigue

	trigger = {
		exists = scope:murder_saved
		scope:murder_saved = flag:bodyguard_save
		scope:target = {
			NOT = { has_character_flag = recently_saved_by_bodyguard }
		}
	}

	immediate = {
		set_variable = {
			name = block_death_event_from
			value = scope:bodyguard
			days = 3
		}
		add_character_flag = {
			flag = recently_saved_by_bodyguard
			years = 10
		}
		# Handle the death of the bodyguard, if necessary
		if = {
			limit = { exists = local_var:bodyguard_dies }
			if = {
				limit = {
					exists = scope:scheme_discovered
				}
				known_murder_effect = {
					VICTIM = scope:bodyguard
					MURDERER = root
					EXPOSER = scope:target
				}
			}
			else = {
				unknown_murder_effect = {
					VICTIM = scope:bodyguard
					MURDERER = root
					REASON = death_duel
				}
			}
		}
	}

	option = { #Who could do such a thing?
		name = murder_save.1001.a
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	option = { #Vengeance!
		name = murder_save.1001.b
		trigger = {
			exists = scope:scheme_discovered
		}
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	after = {
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
	}
}
