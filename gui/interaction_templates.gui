types CharacterInteraction
{
	type icon_character_interaction = icon {
		name = "interaction_icon"
		position = { 0 -5 }
		size = { 60 60 }
		texture = "[CharacterInteractionConfirmationWindow.GetInteraction.GetIcon]"
	}

	type vbox_sender_portrait_message = vbox {
		margin = { 15 20 }
		using = Background_Letter
		datacontext = "[CharacterInteractionNotificationWindow.GetSender]"

		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 15

			block "portrait_shoulders" {
				portrait_head = {
					name = "sender_portrait"
				}
			}

			### TEXT ###
			vbox = {
				layoutpolicy_horizontal = expanding

				text_multi = {
					name = "description"
					max_width = 480
					autoresize = yes
					text = "[CharacterInteractionNotificationWindow.GetNotificationText]"
					default_format = "#light_background"
					using = Font_Size_Medium
					format_override = { high light_background }
				}

				hbox = {
					name = "signature"
					layoutpolicy_horizontal = expanding
					margin = { 20 0 }

					expand = {}

					vbox = {
						margin = { 20 0 }

						text_single = {
							name = "signed_text"
							layoutpolicy_horizontal = expanding
							text = "[CharacterInteractionNotificationWindow.GetSigned]"
							using = Font_Type_Flavor
							align = right
							default_format = "#light_background"
						}

						text_single = {
							name = "signature"
							layoutpolicy_horizontal = expanding
							text = "[CharacterInteractionNotificationWindow.GetSignature]"
							align = right
							default_format = "#light_background"
							using = Font_Type_Flavor
						}
					}

					coa_character_sigil = {}
				}
			}

		}
	}

	type vbox_arrangement_interaction_send_offer = 	vbox {
		name = "send_offer_window"

		vbox_interaction_options = {
			blockoverride "margin"
			{
				margin_top = 4
			}
			layoutpolicy_horizontal = expanding
		}

		hbox_character_interaction_acceptance = {
			layoutpolicy_horizontal = expanding
		}

		text_multi_on_decline_summary = {}

		button_primary = {
			size = { 400 42 }
			block "button_content" {}
			onclick = "[MatchmakerInteractionWindow.Send]"
			enabled = "[CharacterInteractionConfirmationWindow.CanSend]"
			tooltip = "[CharacterInteractionConfirmationWindow.GetCanSendDescription]"
			clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_confirm"
		}
	}

	type vbox_marriage_interaction_marriage_details = vbox {
		margin = { 8 8 }

		background = {
			using = Background_Area
		}

		hbox = {
			name = "children_info"
			layoutpolicy_horizontal = expanding

			margin = {4 4}
			# Dynasty
			hbox = {
				layoutpolicy_horizontal = expanding

				spacing = 8

				icon = {
					name = "marriage_type"
					block "icon_frame"
					{
						visible = "[MatchmakerInteractionWindow.HasPickedCharacters]"
					}

					texture = "gfx/interface/icons/marriage_types.dds"
					framesize = { 60 60 }
					size = { 60 60 }
					frame = "[MarriageInfo.GetMarriageIconFrame]"
				}

				vbox = {
					spacing = 2

					text_multi = {
						name = "children_house_info"
						visible = "[And( StringIsEmpty( MarriageInfo.GetMatrilinealDesc ), Not( MatchOffer.IsSameSex ) )]"
						max_width = 240
						min_width = 240
						autoresize = yes
						text = "MARRIAGE_CHILDREN_HOUSE_INFO"
					}

					text_multi = {
						name = "matrilineal_desc"
						visible = "[Not( MatchOffer.IsSameSex )]"
						max_width = 240
						min_width = 240
						autoresize = yes
						text = "[MarriageInfo.GetMatrilinealDesc]"
					}

					text_multi = {
						name = "children_chance_info"
						max_width = 240
						min_width = 240
						autoresize = yes
						text = "MARRIAGE_CHILDREN_CHANCE_INFO"
						tooltip = "[MatchOffer.GetChanceOfChildrenTooltip]"
					}

					text_multi = {
						name = "inbreeding_risk"
						visible = "[MatchOffer.HasInbreedingRisk]"
						max_width = 240
						min_width = 240
						autoresize = yes
						text = "MATCH_OFFER_INBREEDING_WARNING"
					}

				}

				expand = {}
			}

			divider_light = {
				layoutpolicy_vertical = expanding
			}


			### Traits
			vbox = {
				layoutpolicy_horizontal = expanding
				margin = { 4 4 }
				margin_left = 8
				spacing = 4
				visible = "[Not( MatchOffer.IsSameSex )]"

				hbox = {
					layoutpolicy_horizontal = expanding

					text_label_left = {
						name = "traits_header"
						visible = "[MatchOffer.HasInheritableTraits]"
						text = "INHERITABLE_TRAITS"
					}

					expand = {}
				}

				text_single = {
					name = "no_traits"
					visible = "[Not(MatchOffer.HasInheritableTraits)]"
					text = "NO_INHERITABLE_TRAITS"
					align = nobaseline
					default_format = "#low;italic"
					margin = { 4 16 }
				}

				overlappingitembox = {
					size = { 240 55}

					name = "traits"
					datamodel = "[MatchOffer.GetInheritableTraitItems]"
					visible = "[Not(IsDataModelEmpty(MatchOffer.GetInheritableTraitItems))]"

					item = {
						container = {
							datacontext = "[MatchmakerTraitInfo.GetTrait]"
							datacontext = "[MatchmakerTraitInfo.GetCharacter]"
							
							icon_trait = {
								blockoverride "actual_description_text"
								{
									text = "TRAIT_ENTRY_INHERITANCE_INFO"
								}

								highlight_icon = {
									name = "guaranteed"
									visible = "[And( MatchmakerTraitInfo.IsGuaranteed, Not(MatchmakerTraitInfo.CanUpgrade) )]"
									position = { 27 28 }
									texture = "gfx/interface/icons/symbols/icon_check.dds"
									size = { 25 25 }
								}

								highlight_icon = {
									name = "upgrade"
									visible = "[MatchmakerTraitInfo.CanUpgrade]"
									texture = "gfx/interface/icons/symbols/icon_arrow_green_down.dds"
									mirror = vertical
									position = { 29 24 }
									size = { 25 25 }
								}
							}
						}
					}
				}
			}
		}


		divider_light = {
			layoutpolicy_horizontal = expanding
		}


		vbox = {
			visible = "[MarriageInfo.HasAlliances]"
			layoutpolicy_horizontal = expanding
			margin = { 4 4 }

			text_label_center = {
				name = alliances_label
				text = "[alliances|E]"
			}

			vbox = {
				name = "alliance_grid"
				datamodel = "[MarriageInfo.GetAllianceItems]"
				layoutpolicy_horizontal = expanding

				item = {
					hbox = {
						layoutpolicy_horizontal = expanding
						portrait_head_small = {
							datacontext = "[AllianceInfo.GetCharacter]"
							name = "ally_portrait"
							blockoverride "opinion_box" {}
							blockoverride "status_icons" {}
						}

						strength_balance = {
							datacontext = "[AllianceInfo.GetMilitaryInfo]"
							blockoverride "StrengthBalanceAllies" {}
						}

						expand = {}
					}
				}
			}
		}

		text_single = {
			visible = "[Not(MarriageInfo.HasAlliances)]"

			text = "MATCH_OFFER_NO_ALLIANCES"
			default_format = "#weak"
			align = nobaseline
			margin = {8 8}
		}

		block "marriage_details_after"
		{

		}



		expand = {}
	}

	type vbox_concubine_interaction_details = vbox {
		margin = { 15 15 }

		background = {
			using = Background_Area
		}

		text_multi = {
			name = "children_house_info"
			layoutpolicy_horizontal = expanding
			max_width = 510
			autoresize = yes
			text = "[MatchOffer.GetChanceOfChildrenDesc]"
			tooltip = "[MatchOffer.GetChanceOfChildrenTooltip]"
		}

		text_multi = {
			name = "children_chance_info"
			visible = "[Not( MatchOffer.IsSameSex )]"
			layoutpolicy_horizontal = expanding
			max_width = 510
			autoresize = yes
			text = "CONCUBINE_CHILDREN_HOUSE"
		}

		### Traits
		vbox = {
			margin = { 5 10 }
			spacing = 5
			visible = "[Not( MatchOffer.IsSameSex )]"

			text_label_center = {
				name = "traits_header"
				visible = "[MatchOffer.HasInheritableTraits]"
				#	layoutpolicy_horizontal = expanding
				text = "INHERITABLE_TRAITS"
			}

			text_single = {
				name = "no_traits"
				visible = "[Not(MatchOffer.HasInheritableTraits)]"
				text = "NO_INHERITABLE_TRAITS"
				default_format = "#low;italic"
			}

			hbox = {
				name = "traits"
				datamodel = "[MatchOffer.GetInheritableTraitItems]"
				visible = "[Not(IsDataModelEmpty(MatchOffer.GetInheritableTraitItems))]"

				item = {
					container = {
						datacontext = "[MatchmakerTraitInfo.GetTrait]"
						datacontext = "[MatchmakerTraitInfo.GetCharacter]"

						icon_trait = {
							blockoverride "actual_description_text"
							{
								text = "TRAIT_ENTRY_INHERITANCE_INFO"
							}

							highlight_icon = {
								name = "guaranteed"
								visible = "[And( MatchmakerTraitInfo.IsGuaranteed, Not(MatchmakerTraitInfo.CanUpgrade) )]"
								position = { 28 30 }
								texture = "gfx/interface/icons/symbols/icon_check.dds"
								size = { 25 25 }
							}

							highlight_icon = {
								name = "upgrade"
								visible = "[MatchmakerTraitInfo.CanUpgrade]"
								texture = "gfx/interface/icons/symbols/icon_arrow_green_down.dds"
								mirror = vertical
								position = { 5 28 }
								size = { 25 25 }
							}
						}
					}
				}
			}

			text_single = {
				name = "inbreeding_risk"
				visible = "[MatchOffer.HasInbreedingRisk]"
				max_width = 510
				text = "MATCH_OFFER_INBREEDING_WARNING"
				default_format = "#low"
			}
		}

		divider_light = {
			layoutpolicy_horizontal = expanding
		}

		expand = {}
	}

	type vbox_list_interaction_title_selection = vbox {
		name = "titles_grid"
		datamodel = "[CharacterInteractionConfirmationWindow.GetTitles]"
		layoutpolicy_horizontal = expanding
		spacing = 3

		item = {
			widget = {
				name = "title_list_item"
				layoutpolicy_horizontal = expanding
				size = { 0 45 }

				button_standard = {
					name = "title_button"
					datacontext = "[InteractionTitleItem.GetTitle]"
					size = "[InteractionTitleItem.GetSize]"
					onclick = "[InteractionTitleItem.OnClick]"
					onrightclick = "[InteractionTitleItem.OnRightClick]"
					button_ignore = none
					down = "[InteractionTitleItem.IsSelected]"
					enabled = "[InteractionTitleItem.IsSelectable]"
					tooltip = "[InteractionTitleItem.GetTooltip]"
					using = tooltip_es
					parentanchor = right

					block "button_toggles" {
						enabled = "[InteractionTitleItem.IsSelectable]"
					}

					coa_title_tiny_crown = {
						position = { 0 -8 }
					}

					hbox = {
						margin_left = 45
						margin_right = 5

						text_single = {
							name = "text"
							layoutpolicy_horizontal = expanding
							text = "[InteractionTitleItem.GetTitle.GetNameNoTooltip]"
						}

						icon = {
							name = "pressed_claim"
							visible = "[GetPlayer.HasPressedClaimOnTitle( Title.Self )]"
							size = { 24 24 }
							texture = "gfx/interface/icons/title_status/icon_claim_pressed.dds"
							tooltip = "REVOKE_TITLE_PRESSED_CLAIM"
						}

						icon = {
							name = "unpressed_claim"
							visible = "[And(GetPlayer.HasClaimOnTitle( Title.Self ), Not(GetPlayer.HasPressedClaimOnTitle( Title.Self )))]"
							size = { 24 24 }
							texture = "gfx/interface/icons/title_status/icon_claim_unpressed.dds"
							tooltip = "REVOKE_TITLE_UNPRESSED_CLAIM"
						}

						icon = {
							name = "leased_out"
							visible = "[Title.HasLeasedOutVassal]"
							size = { 36 39 }
							texture = "gfx/interface/icons/icon_holding_church.dds"
							tooltip = "GRANT_TITLE_LEASED_OUT_VASSAL"
						}

						block "extra_title_items" {}
					}
				}
			}
		}
	}

	type vbox_list_interaction_artifact_selection = vbox {
		name = "artifacts_grid"
		datamodel = "[CharacterInteractionConfirmationWindow.GetArtifacts]"
		layoutpolicy_horizontal = expanding
		spacing = 10

		item = {
			widget = {
				name = "artifact_list_item"
				layoutpolicy_horizontal = expanding
				size = { 360 80 }

				button_standard = {
					name = "artifact_button"
					size = { 100% 100% }

					onclick = "[CharacterInteractionConfirmationWindow.SetSelectedArtifact( Artifact.Self )]"
					onclick = "[GetVariableSystem.Toggle( 'character_interaction_change_artifact' )]"
					down = "[ObjectsEqual( CharacterInteractionConfirmationWindow.GetSelectedArtifact, Artifact.Self )]"

					tooltipwidget = {
						artifact_tooltip = {}
					}

					hbox = {

						widget = {
							size = { 80 80 }
							alwaystransparent = yes

							button_artifact = {
								size = { 100% 100% }
							}

							tooltipwidget = {
								artifact_tooltip = {}
							}
						}
						vbox = {
							text_multi = {
								name = "text"
								layoutpolicy_horizontal = expanding
								text = "[Artifact.GetNameNoTooltip]"
								max_width = 250
								default_format = "#clickable"
								autoresize = yes
							}

							text_multi = {
								visible = "[GetPlayer.GetInventory.IsEquipped( Artifact.Self )]"
								name = "equipped_status"
								layoutpolicy_horizontal = expanding
								text = "GIFT_EQUIPPED_ARTIFACT"
								max_width = 250
								default_format = "#weak"
								autoresize = yes
							}
						}
						expand = {}
					}

				}
			}
		}
	}

	type vbox_character_interaction_three_characters = vbox {
		margin = { 10 10 }

		background = {
			texture = "gfx/interface/illustrations/event_scenes/study.dds"
			alpha = 0.5
			fittype = centercrop
			using = Mask_Rough_Edges
		}

		hbox = {
			layoutpolicy_horizontal = expanding

			### Left
			portrait_shoulders = {
				name = "left_background_portrait"
				datacontext = "[CharacterInteractionConfirmationWindow.GetActor]"
				visible = "[Character.IsValid]"
			}

			vbox = {
				visible = "[CharacterInteractionConfirmationWindow.ShouldPickSecondaryActor]"
				layoutpolicy_vertical = expanding
				margin = { 10 10 }

				expand = {}

				portrait_head = {
					datacontext = "[CharacterInteractionConfirmationWindow.GetSecondaryActor]"
				}
			}

			### Right
			vbox = {
				visible = "[CharacterInteractionConfirmationWindow.ShouldShowSecondaryRecipient]"
				layoutpolicy_vertical = expanding
				margin = { 10 10 }

				expand = {}

				portrait_head = {
					datacontext = "[CharacterInteractionConfirmationWindow.GetSecondaryRecipient]"
				}
			}

			portrait_shoulders = {
				name = "right_background_portrait"
				datacontext = "[CharacterInteractionConfirmationWindow.GetRecipient]"
				visible = "[And( Character.IsValid, Not( ObjectsEqual( CharacterInteractionConfirmationWindow.GetActor, CharacterInteractionConfirmationWindow.GetRecipient ) ) )]"

			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 10
			allow_outside = yes

			text_label_center = {
				text = "INTERACTION_SENDER"
				min_width = 100
			}

			text_label_center = {
				visible = "[CharacterInteractionConfirmationWindow.ShouldPickSecondaryActor]"
				text = "[CharacterInteractionConfirmationWindow.GetActorSecondaryLabel]"
				min_width = 100
				allow_outside = yes

				change_revert_buttons = {
					parentanchor = vcenter
					position = { 60 -1 }

					blockoverride "ReplaceClick"
					{
						onclick = "[CharacterInteractionConfirmationWindow.OnChangeOrRevertActorCharacter]"
					}
					blockoverride "ReplaceVisible"
					{
						visible = "[CharacterInteractionConfirmationWindow.CanChangeActorCharacter]"
					}
					blockoverride "RevertClick"
					{
						onclick = "[CharacterInteractionConfirmationWindow.OnChangeOrRevertActorCharacter]"
					}
					blockoverride "RevertVisible"
					{
						visible = "[CharacterInteractionConfirmationWindow.CanRevertActorCharacter]"
					}
				}
			}

			text_label_center = {
				visible = "[CharacterInteractionConfirmationWindow.ShouldShowSecondaryRecipient]"
				text = "[CharacterInteractionConfirmationWindow.GetRecipientSecondaryLabel]"
				min_width = 100
				allow_outside = yes

				change_revert_buttons = {
					parentanchor = vcenter
					position = { 60 0 }

					blockoverride "ReplaceClick"
					{
						onclick = [CharacterInteractionConfirmationWindow.OnChangeOrRevertRecipientCharacter]
					}
					blockoverride "ReplaceVisible"
					{
						visible = [CharacterInteractionConfirmationWindow.CanChangeRecipientCharacter]
					}
					blockoverride "RevertClick"
					{
						onclick = [CharacterInteractionConfirmationWindow.OnChangeOrRevertRecipientCharacter]
					}
					blockoverride "RevertVisible"
					{
						visible = [CharacterInteractionConfirmationWindow.CanRevertRecipientCharacter]
					}
				}
			}

			text_label_center = {
				visible = "[Not( ObjectsEqual( CharacterInteractionConfirmationWindow.GetActor, CharacterInteractionConfirmationWindow.GetRecipient ) )]"
				text = "INTERACTION_RECIPIENT"
				min_width = 100
			}

		}
	}

	type widget_character_interaction_four_characters = widget {
		layoutpolicy_horizontal = expanding
		size = { 0 330 }

		block "bg_illustration_datacontext" {}

		# Temp background
		background = {
			alpha = 0.7
			fittype = centercrop

			using = Mask_Rough_Edges

			block "bg_illustration"
			{
				texture = "gfx/interface/illustrations/event_scenes/sittingroom.dds"
			}
		}

		### LEFT
		flowcontainer = {
			parentanchor = top|left
			position = { 20 20 }
			direction = vertical

			block "left_small_portrait"
			{
				datacontext = "[CharacterInteractionConfirmationWindow.GetActor]"
				visible = "[Character.IsValid]"
			}

			portrait_head = {
				name = "left_background_portrait"
				tooltip_visible = "[Character.IsValid]"
			}

			text_label_center = {
				parentanchor = hcenter
				text = "INTERACTION_SENDER"
			}
		}

		widget = {
			position = { -110 0 }
			parentanchor = bottom|hcenter

			portrait_body = {
				name = "left_main_portrait"
				resizeparent = yes

				block "left_portrait"
				{
					datacontext = "[CharacterInteractionConfirmationWindow.GetSecondaryActor]"
				}

				tooltip_visible = "[Character.IsValid]"

				blockoverride "status_icons" {}

				blockoverride "coa"
				{
					coa_realm_small_crown = {
						position = { -14 -40 }
						visible = "[Character.HasLandedTitles]"
						parentanchor = bottom
					}
				}

				blockoverride "portrait_button"
				{
					portrait_texture = "[Character.GetAnimatedPortrait('environment_body', 'camera_body', 'idle', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
					mask = "gfx/portraits/portrait_mask_council.dds"
				}

				blockoverride "position_portrait_opinion_body" {
					position = { 0 -40 }
				}

				blockoverride "portrait_glow" {}

				background = {
					using = Background_Portrait_Glow
					color = { 0.8 0.7 0.5 0.6 }

					block "left_interaction_portrait_glow"
					{
						visible = "[CharacterInteractionConfirmationWindow.IsPickingSecondaryActor]"
					}
				}
			}

			text_label_center = {
				parentanchor = bottom|hcenter
				position = { 0 -13 }
				allow_outside = yes

				block "left_character_label"
				{
					text = "[CharacterInteractionConfirmationWindow.GetActorSecondaryLabel]"
				}

				container = {
					name = "tutorial_highlight_change_left_character"
					parentanchor = vcenter
					position = { -50 0 }

					button_round = {
						name = "tutorial_highlight_change_left_character"
						alwaystransparent = no
						tooltip = "CHANGE_CHARACTER"
						using = tooltip_below

						using = Animation_ShowHide_Quick


						block "button_left_change"
						{
							visible = "[CharacterInteractionConfirmationWindow.CanChangeActorCharacter]"
							onclick = "[CharacterInteractionConfirmationWindow.OnChangeOrRevertActorCharacter]"
						}

						button_replace = {
							parentanchor = center
							alwaystransparent = yes
						}
					}

					button_round = {
						name = "revert_left_character"
						alwaystransparent = no
						tooltip = "CANCEL"
						using = tooltip_below

						using = Animation_ShowHide_Quick


						block "button_left_revert"
						{
							visible = "[CharacterInteractionConfirmationWindow.CanRevertActorCharacter]"
							onclick = "[CharacterInteractionConfirmationWindow.OnChangeOrRevertActorCharacter]"
						}

						button_cancel = {
							parentanchor = center
							alwaystransparent = yes
						}
					}
				}
			}
		}

		### RIGHT
		flowcontainer = {
			parentanchor = top|right
			position = { -20 20 }
			direction = vertical

			block "right_small_portrait"
			{
				datacontext = "[CharacterInteractionConfirmationWindow.GetRecipient]"
				visible = "[Character.IsValid]"
			}

			portrait_head = {
				name = "right_background_portrait"
				tooltip_visible = "[Character.IsValid]"

				blockoverride "portrait_transformation"
				{
					portrait_scale = { -1 1 }
					portrait_offset = { 1 0 }
				}

				blockoverride "status_icons" {}
			}

			text_label_center = {
				parentanchor = hcenter
				text = "INTERACTION_RECIPIENT"
			}
		}

		widget = {
			position = { 110 0 }
			parentanchor = bottom|hcenter

			portrait_body = {
				name = "right_main_portrait"
				tooltip_visible = "[Character.IsValid]"
				resizeparent = yes

				block "right_portrait"
				{
					datacontext = "[CharacterInteractionConfirmationWindow.GetSecondaryRecipient]"
				}

				blockoverride "portrait_transformation"
				{
					portrait_scale = { -1 1 }
					portrait_offset = { 1 0 }
				}

				blockoverride "status_icons" {}

				blockoverride "coa" {
					coa_realm_small_crown = {
						position = { 14 -40 }
						visible = "[Character.HasLandedTitles]"
						parentanchor = bottom|right
					}
				}

				blockoverride "portrait_button"
				{
					portrait_texture = "[Character.GetAnimatedPortrait('environment_body', 'camera_body', 'idle', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
					mask = "gfx/portraits/portrait_mask_council.dds"
				}

				blockoverride "position_portrait_opinion_body" {
					position = { 0 -40 }
				}

				blockoverride "portrait_glow" {}

				background = {
					using = Background_Portrait_Glow
					color = { 0.8 0.7 0.5 0.6 }

					block "right_interaction_portrait_glow"
					{
						visible = "[CharacterInteractionConfirmationWindow.IsPickingSecondaryRecipient]"
					}
				}

				blockoverride "glow_flip" {
					mirror = horizontal
				}
			}

			text_label_center = {
				parentanchor = bottom|hcenter
				position = { 0 -13 }
				allow_outside = yes

				block "right_character_label"
				{
					text = "INTERACTION_RECIPIENT"
				}

				container = {
					name = "tutorial_highlight_change_right_character"
					parentanchor = right|vcenter
					position = { 50 0 }

					button_round = {
						name = "change_right_character"
						alwaystransparent = no
						tooltip = "CHANGE_CHARACTER"
						using = tooltip_below

						using = Animation_ShowHide_Quick

						block "button_right_change"
						{
							visible = "[CharacterInteractionConfirmationWindow.CanChangeRecipientCharacter]"
							onclick = "[CharacterInteractionConfirmationWindow.OnChangeOrRevertRecipientCharacter]"
						}

						button_replace = {
							parentanchor = center
							alwaystransparent = yes
						}
					}

					button_round = {
						name = "revert_right_character"
						alwaystransparent = no
						tooltip = "CANCEL"
						using = tooltip_below

						using = Animation_ShowHide_Quick


						block "button_right_revert"
						{
							visible = "[CharacterInteractionConfirmationWindow.CanRevertActorCharacter]"
							onclick = "[CharacterInteractionConfirmationWindow.OnChangeOrRevertActorCharacter]"
						}

						button_cancel = {
							parentanchor = center
							alwaystransparent = yes
						}
					}
				}
			}
		}

		### CLEAR BUTTON
		container = {
			position = { 0 -6 }
			parentanchor = bottom|hcenter

			button_round = {
				name = "clear_marry_off_character"
				alwaystransparent = no
				tooltip = "CLEAR_MARRIED_CHARACTER"
				using = tooltip_below

				block "button_clear"
				{
					visible = "[CharacterInteractionConfirmationWindow.CanChangeActorCharacter]"
					enabled = "[CharacterInteractionConfirmationWindow.CanClear]"
					onclick = "[CharacterInteractionConfirmationWindow.OnClear]"
				}

				button_clear = {
					alwaystransparent = yes
					parentanchor = center
				}
			}
		}
	}

	type vbox_character_interaction_effects_contents = vbox {
		name = "affected_characters_accept"
		layoutpolicy_horizontal = expanding
		spacing = 5
		
		datacontext = "[InteractionEffectsDescription.GetDisplayedEffects]"

		# Duplicate recipient if it's player - player info should go first
		vbox_character_interaction_effects_me = {
			datacontext = "[InteractionEffectsDescription.GetRecipient]"
			visible = "[And( Character.IsLocalPlayer, DisplayedInteractionEffects.HasRecipientEffects )]"
			layoutpolicy_horizontal = expanding

			blockoverride "EffectFromIntermediaryText" {
				text = "[DisplayedInteractionEffects.GetEffectFromIntermediary.GetRecipientEffect]"
			}

			blockoverride "EffectText" {
				text = "[DisplayedInteractionEffects.GetMainEffect.GetRecipientEffect]"
			}
		}

		# Duplicate intermediary if it's player - player info should go first
		vbox_character_interaction_effects_me = {
			datacontext = "[InteractionEffectsDescription.GetIntermediary]"
			visible = "[And( Character.IsLocalPlayer, DisplayedInteractionEffects.HasIntermediaryEffects )]"
			layoutpolicy_horizontal = expanding

			blockoverride "EffectFromIntermediaryText" {
				text = "[DisplayedInteractionEffects.GetEffectFromIntermediary.GetIntermediaryEffect]"
			}

			blockoverride "EffectText" {
				text = "[DisplayedInteractionEffects.GetMainEffect.GetIntermediaryEffect]"
			}
		}

		### Actor
		vbox_character_interaction_effects_me = {
			datacontext = "[InteractionEffectsDescription.GetActor]"
			visible = "[DisplayedInteractionEffects.HasActorEffects]"
			layoutpolicy_horizontal = expanding

			blockoverride "EffectFromIntermediaryText" {
				text = "[DisplayedInteractionEffects.GetEffectFromIntermediary.GetActorEffect]"
			}

			blockoverride "EffectText" {
				text = "[DisplayedInteractionEffects.GetMainEffect.GetActorEffect]"
			}
		}

		### Intermediary
		vbox_character_interaction_effects_other = {
			datacontext = "[InteractionEffectsDescription.GetIntermediary]"
			visible = "[And( Not( Character.IsLocalPlayer ), DisplayedInteractionEffects.HasIntermediaryEffects )]"
			layoutpolicy_horizontal = expanding

			blockoverride "EffectFromIntermediaryText" {
				text = "[DisplayedInteractionEffects.GetEffectFromIntermediary.GetIntermediaryEffect]"
			}

			blockoverride "EffectText" {
				text = "[DisplayedInteractionEffects.GetMainEffect.GetIntermediaryEffect]"
			}
		}

		### Recipient
		vbox_character_interaction_effects_other = {
			datacontext = "[InteractionEffectsDescription.GetRecipient]"
			visible = "[And( Not( Character.IsLocalPlayer ), DisplayedInteractionEffects.HasRecipientEffects )]"
			layoutpolicy_horizontal = expanding

			blockoverride "EffectFromIntermediaryText" {
				text = "[DisplayedInteractionEffects.GetEffectFromIntermediary.GetRecipientEffect]"
			}

			blockoverride "EffectText" {
				text = "[DisplayedInteractionEffects.GetMainEffect.GetRecipientEffect]"
			}
		}

		### Others
		vbox_character_interaction_other_effects = {
			datamodel = "[DisplayedInteractionEffects.GetEffectFromIntermediary.GetOtherEffects]"
			layoutpolicy_horizontal = expanding
		}

		### Others
		vbox_character_interaction_other_effects = {
			datamodel = "[DisplayedInteractionEffects.GetMainEffect.GetOtherEffects]"
			layoutpolicy_horizontal = expanding
		}
	}

	# All the interaction effects on you and on other character
	type vbox_character_interaction_effects = vbox {
		name = "effects"
		spacing = 10

		hbox = {
			name = "interaction_effects_tabs"
			visible = "[And(InteractionEffectsDescription.IsMaybeAnswer,InteractionEffectsDescription.HasRejectionEffect)]"
			layoutpolicy_horizontal = expanding

			button_tab = {
				name = "show_accept_effects"
				layoutpolicy_horizontal = expanding
				text = "INTERACTION_SHOW_ACCEPT_EFFECTS"
				onclick = "[InteractionEffectsDescription.ShowOnAcceptEffect]"
				down = "[InteractionEffectsDescription.IsShowingOnAcceptEffects]"
				tooltip = "INTERACTION_SHOW_ACCEPT_EFFECTS_TT"
				using = tooltip_ne
			}

			button_tab = {
				name = "show_intermediary_decline_effects"
				layoutpolicy_horizontal = expanding
				visible = "[InteractionEffectsDescription.IsIntermediaryVisible]"
				text = "INTERACTION_SHOW_INTERMEDIARY_DECLINE_EFFECTS"
				onclick = "[InteractionEffectsDescription.ShowIntermediaryDeclineEffect]"
				down = "[InteractionEffectsDescription.IsShowingIntermediaryDeclineEffect]"
				tooltip = "INTERACTION_SHOW_INTERMEDIARY_DECLINE_EFFECTS_TT"
				using = tooltip_ne
			}

			button_tab = {
				name = "show_decline_effects"
				layoutpolicy_horizontal = expanding
				text = "INTERACTION_SHOW_DECLINE_EFFECTS"
				onclick = "[InteractionEffectsDescription.ShowRecipientDeclineEffect]"
				down = "[InteractionEffectsDescription.IsShowingRecipientDeclineEffect]"
				tooltip = "INTERACTION_SHOW_DECLINE_EFFECTS_TT"
				using = tooltip_ne
			}
		}


		container = {
			scrollbox = {
				name = "effects_scrollarea"
				autoresizescrollarea = yes
				datacontext = "[InteractionEffectsDescription.GetDisplayedEffects]"
				visible = "[DisplayedInteractionEffects.HasAnyEffects]"
				scissor = yes

				block "maximumsize" {
					maximumsize = { -1 420 }
				}

				blockoverride "scrollbox_content"
				{
					set_parent_size_to_minimum = yes

					block "minimumsize" {
						minimumsize = { 640 0 }
					}

					vbox_character_interaction_effects_contents = {}
				}
			}
		}
	}

	# All the interaction effects on you and on other character, simpler version without portraits
	type vbox_character_interaction_effects_simple = vbox {
		name = "effects"
		spacing = 10

		hbox = {
			visible = "[And(InteractionEffectsDescription.IsMaybeAnswer,InteractionEffectsDescription.HasRejectionEffect)]"
			layoutpolicy_horizontal = expanding

			button_tab = {
				name = "show_accept_effects"
				layoutpolicy_horizontal = expanding
				text = "INTERACTION_SHOW_ACCEPT_EFFECTS"
				onclick = "[InteractionEffectsDescription.ShowOnAcceptEffect]"
				down = "[InteractionEffectsDescription.IsShowingOnAcceptEffects]"
				tooltip = "INTERACTION_SHOW_ACCEPT_EFFECTS_TT"
				using = tooltip_ne
			}

			button_tab = {
				name = "show_intermediary_decline_effects"
				layoutpolicy_horizontal = expanding
				text = "INTERACTION_SHOW_INTERMEDIARY_DECLINE_EFFECTS"
				onclick = "[InteractionEffectsDescription.ShowIntermediaryDeclineEffect]"
				down = "[InteractionEffectsDescription.IsShowingIntermediaryDeclineEffect]"
				tooltip = "INTERACTION_SHOW_INTERMEDIARY_DECLINE_EFFECTS_TT"
				using = tooltip_ne
			}

			button_tab = {
				name = "show_decline_effects"
				layoutpolicy_horizontal = expanding
				text = "INTERACTION_SHOW_DECLINE_EFFECTS"
				onclick = "[InteractionEffectsDescription.ShowRecipientDeclineEffect]"
				down = "[InteractionEffectsDescription.IsShowingRecipientDeclineEffect]"
				tooltip = "INTERACTION_SHOW_DECLINE_EFFECTS_TT"
				using = tooltip_ne
			}
		}

		scrollbox = {
			name = "effects_scrollarea"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			size = { 0 170 }

			blockoverride "scrollbox_content"
			{
				margin = { 0 10 }

				text_multi = {
					visible = "[InteractionEffectsDescription.IsShowingOnAcceptEffects]"
					name = "accept_effects_info"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					autoresize = yes
					max_width = 435
					margin = { 5 0 }
					text = "[InteractionEffectsDescription.GetAcceptEffectDescription]"
				}

				text_multi = {
					visible = "[InteractionEffectsDescription.IsShowingIntermediaryDeclineEffect]"
					name = "intermediary_decline_effects_info"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					autoresize = yes
					max_width = 435
					margin = { 5 0 }
					text = "[InteractionEffectsDescription.GetIntermediaryRejectionEffectDescription]"
				}

				text_multi = {
					visible = "[InteractionEffectsDescription.IsShowingRecipientDeclineEffect]"
					name = "decline_effects_info"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					autoresize = yes
					max_width = 435
					margin = { 5 0 }
					text = "[InteractionEffectsDescription.GetRejectionEffectDescription]"
				}

				block "extra_content" {}
			}

		}


	}

	# Interaction effects on me
	type vbox_character_interaction_effects_me = vbox {
		name = "me"
		margin_bottom = 5

		background = {
			using = Background_Area_With_Header
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 5
			margin_left = 6

			vbox = {
				layoutpolicy_vertical = expanding

				portrait_head = {
					blockoverride "opinion_box" {}
				}

				expand = {}
			}

			vbox = {
				layoutpolicy_vertical = expanding
				margin = { 5 0 }
				spacing = 5

				text_single = {
					text = "EFFECTS_ON_ME"
					layoutpolicy_horizontal = expanding
					margin = { 0 4 }
				}

				text_multi = {
					name = "intermediary_effects_info"
					layoutpolicy_horizontal = expanding
					autoresize = yes
					max_width = 450
					block "EffectFromIntermediaryText" {
						text = ""
					}
				}

				text_multi = {
					name = "effects_info"
					layoutpolicy_horizontal = expanding
					autoresize = yes
					max_width = 450
					block "EffectText" {}
				}

				expand = {}
			}

			expand = {}
		}
	}

	# Interaction effects on the other character
	type vbox_character_interaction_effects_other = vbox {
		name = "recipient"
		margin_bottom = 5

		background = {
			using = Background_Area_With_Header
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 5
			#margin_left = 10
			#margin_right = 6

			vbox = {
				layoutpolicy_vertical = expanding
				margin = { 15 0 }
				spacing = 5

				text_single = {
					text = "EFFECTS_ON_ME"
					layoutpolicy_horizontal = expanding
					margin = { 0 4 }
				}

				text_multi = {
					name = "intermediary_effects_info"
					layoutpolicy_horizontal = expanding
					autoresize = yes
					max_width = 440
					block "EffectFromIntermediaryText" {
						text = ""
					}
				}

				text_multi = {
					name = "effects_info"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					autoresize = yes
					max_width = 440
					block "EffectText" {}
				}

				expand = {}
			}

			expand = {}

			vbox = {
				layoutpolicy_vertical = expanding

				portrait_head = {
					blockoverride "opinion_box" {}
					blockoverride "portrait_transformation"
					{
						portrait_scale = { -1 1 }
						portrait_offset = { 1 0 }
					}
				}

				expand = {}
			}
		}
	}

	# Interaction effects on third party characters
	type vbox_character_interaction_other_effects = vbox {
		name = "other_effects"

		item = {
			hbox = {
				layoutpolicy_horizontal = expanding
				#margin = { 0 5 }
				spacing = 5

				portrait_head = {
					name = "portrait"
					datacontext = "[InteractionOtherEffect.GetCharacter]"
					visible = "[InteractionOtherEffect.HasCharacter]"
				}

				container = {
					ignoreinvisible = yes
					icon = {
						position = { 16 0 }
						size = { 50 50 }
						texture = "gfx/interface/icons/icon_group_of_characters.dds"
						visible = "[InteractionOtherEffect.IsList]"
						tooltip = "[InteractionOtherEffect.GetListTooltip]"
					}
				}

				text_multi = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					autoresize = yes
					max_width = 450
					text = "[InteractionOtherEffect.GetEffect]"
					align = left|vcenter
				}

				expand = {}
			}
		}
	}

	type hbox_character_interaction_acceptance = hbox {
		name = "acceptance"
		visible = "[CharacterInteractionConfirmationWindow.ShouldShowAnswer]"
		margin = { 0 8 }

		widget = {
			name = "answer_chance"
			size = { 330 46 }
			tooltip = "[CharacterInteractionConfirmationWindow.GetAnswerReason]"

			background = {
				using = Background_Area_Dark
			}

			hbox = {
				visible = "[CharacterInteractionConfirmationWindow.IsForcedToAccept]"
				parentanchor = center
				layoutpolicy_horizontal = expanding

				maximumsize = { 330 46 }
				margin = { 16 0 }
				spacing = 4

				expand = {}

				icon = {
					texture = "gfx/interface/icons/symbols/icon_check.dds"
					size = { 30 30 }
					visible = "[CharacterInteractionConfirmationWindow.IsAnswerPositive]"
				}

				text_single = {
					name = "answer"
					text = "ANSWER_REASON_AUTO_ACCEPT"
					default_format = "#color_green"
					using = Font_Size_Medium
					align = nobaseline
				}

				expand = {}
			}

			hbox = {
				visible = "[Not( CharacterInteractionConfirmationWindow.IsForcedToAccept )]"
				parentanchor = center
				layoutpolicy_horizontal = expanding
				maximumsize = { 330 46 }
				margin = { 16 0 }
				spacing = 4

				expand = {}

				icon = {
					texture = "gfx/interface/icons/symbols/icon_cross.dds"
					size = { 30 30 }
					visible = "[Not( CharacterInteractionConfirmationWindow.IsAnswerPositive )]"
				}

				icon = {
					texture = "gfx/interface/icons/symbols/icon_check.dds"
					size = { 30 30 }
					visible = "[CharacterInteractionConfirmationWindow.IsAnswerPositive]"
				}

				text_single = {
					name = "answer"
					text = "[CharacterInteractionConfirmationWindow.GetAnswer]"
					default_format = "#high"
					using = Font_Size_Medium
					align = nobaseline
				}

				text_single = {
					name = "answer_score"
					visible = "[And( Not( CharacterInteractionConfirmationWindow.IsAiMaybe ), Not( CharacterInteractionConfirmationWindow.GetRecipient.IsPlayer ) )]"

					text = "INTERACTION_ACCEPTANCE_SCORE"
					using = Font_Size_Medium
					align = nobaseline
				}

				text_single = {
					name = "answer_chance"
					visible = "[And( And( CharacterInteractionConfirmationWindow.IsAiMaybe, Not( CharacterInteractionConfirmationWindow.GetRecipient.IsPlayer ) ), Or( Not( CharacterInteractionConfirmationWindow.IsAiAcceptNegotiation ), GreaterThan_int32( CharacterInteractionConfirmationWindow.GetAnswerScore, '(int32)0' ) ) )]"

					text = "INTERACTION_ACCEPTANCE_CHANCE"
					using = Font_Size_Medium
					align = nobaseline
				}

				expand = {}
			}

			progressbar_standard = {
				position = { 0 3 }
				size = { 324 10 }
				parentanchor = bottom|hcenter
				visible = "[And( And( CharacterInteractionConfirmationWindow.IsAiMaybe, Not( CharacterInteractionConfirmationWindow.GetRecipient.IsPlayer ) ), Or( Not( CharacterInteractionConfirmationWindow.IsAiAcceptNegotiation ), GreaterThan_int32( CharacterInteractionConfirmationWindow.GetAnswerScore, '(int32)0' ) ) )]"
				value = "[CharacterInteractionConfirmationWindow.GetAnswerProgress]"
			}
		}
	}

	type text_multi_on_decline_summary = text_multi {
		autoresize = yes
		max_width = 500
		visible = "[CharacterInteractionConfirmationWindow.HasOnDeclineSummary]"
		text = "[CharacterInteractionConfirmationWindow.GetOnDeclineSummary]"
	}

	type hbox_interaction_option_levels = hbox
	{
		datamodel = "[RepeatedItem( Add_int32( OptionItem.GetNumLevels, '(int32)1' ) )]"

		item = {
			button_radio = {
				size = { 30 30 }
				frame = "[BoolTo1And2( EqualTo_int32( OptionItem.GetCurrentLevel, int32.GetInt ) ) )]"
				onclick = "[OptionItem.SetLevel( int32.GetInt )]"
				enabled = "[And( OptionItem.IsValid, And( OptionItem.CanBeChanged, OptionItem.CanSetLevel( int32.GetInt ) ) )]"
				tooltip = "[OptionItem.GetLevelTooltip( int32.GetInt )]"

				block "level_button"
				{
				}
			}
		}
	}

	# Options to consider before accepting and interaction
	type vbox_interaction_options = vbox {
		name = "options_grid"
		visible = "[CharacterInteractionConfirmationWindow.HasOptions]"
		spacing = 4

		block "margin"
		{
			margin = { 0 10 }
		}

		text_label_center = {
			visible = "[Not( StringIsEmpty(CharacterInteractionConfirmationWindow.GetOptionsHeading) )]"
			layoutpolicy_horizontal = expanding
			text = "[CharacterInteractionConfirmationWindow.GetOptionsHeading]"
			align = center|nobaseline
		}

		vbox = {
			name = "multiple_selection_options"
			visible = "[And(Not( CharacterInteractionConfirmationWindow.HasExclusiveOptions ), Not( GreaterThan_CFixedPoint( GetPlayer.MakeScope.Var('hide_ui_character_info').GetValue, '(CFixedPoint)0' ) ))]"
			layoutpolicy_horizontal = expanding
			datamodel = "[CharacterInteractionConfirmationWindow.GetOptionItems]"

			item = {
				widget = {
					visible = "[OptionItem.IsShown]"
					layoutpolicy_horizontal = expanding
					size = { 480 40 }

					background = {
						using = Background_Area_Border
					}

					hbox = {
						layoutpolicy_horizontal = expanding

						margin = { 16 0 }
						spacing = 8

						tooltip = "[OptionItem.GetTooltip]"
						using = tooltip_below

						background = {
							visible = "[OptionItem.HasFlag( 'grand_wedding_promise' )]"

							margin_right = 40
							margin_left = -2
							texture = "gfx/interface/colors/white.dds"
							alpha = 0.15
							margin_top = -2

							modify_texture = {
								texture = "gfx/interface/component_masks/patterns/mask_pattern_01.dds"
								spriteType = corneredtiled
								blend_mode = alphamultiply
								texture_density = 0.76
							}

							modify_texture = {
								texture = "gfx/interface/colors/colors_textured.dds"
								blend_mode = normal
								framesize = { 96 96 }
								frame = 7
							}

							modify_texture = {
								texture = "gfx/interface/component_masks/mask_clouds.dds"
								blend_mode = alphamultiply
								spriteType = corneredTiled
								alpha = 0.5
							}

							modify_texture = {
								texture = "gfx/interface/component_masks/mask_scratches.dds"
								blend_mode = alphamultiply
								spriteType = corneredTiled
							}

							modify_texture = {
								texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
								blend_mode = alphamultiply
							}
						}

						button_checkbox = {
							size = { 30 30 }
							checked = "[OptionItem.HasOption]"
							onclick = "[OptionItem.OnClick]"
							enabled = "[And(OptionItem.IsValid, OptionItem.CanBeChanged)]"
							visible = "[EqualTo_int32( OptionItem.GetNumLevels, '(int32)0' )]"
						}

						hbox_interaction_option_levels = {
							visible = "[GreaterThan_int32( OptionItem.GetNumLevels, '(int32)1' )]"
						}

						text_single = {
							text = "[OptionItem.GetName]"
							align = nobaseline
						}

						icon = {
							visible = "[OptionItem.HasFlag( 'grand_wedding_promise' )]"
							size = { 30 30 }
							texture = "gfx/interface/icons/activities/activity_wedding.dds"
						}

						expand = {}
					}
				}
			}
		}

		vbox = {
			name = "exclusive_options"
			visible = "[CharacterInteractionConfirmationWindow.HasExclusiveOptions]"
			layoutpolicy_horizontal = expanding

			hbox = {
				name = "single_option"
				layoutpolicy_horizontal = expanding
				margin = { 10 0 }
				visible = "[EqualTo_int32( CharacterInteractionConfirmationWindow.GetVisibleOptionsCount, '(int32)1' )]"

				datacontext_from_model = {
					datamodel = "[CharacterInteractionConfirmationWindow.GetOptionItems]"
				}

				background = {
					using = Background_Area_Border
				}

				tooltip = "[OptionItem.GetTooltip]"
				using = tooltip_below

				text_single = {
					text = "[OptionItem.GetName]"
				}
			}

			vbox = {
				name = "multiple_options"
				layoutpolicy_horizontal = expanding
				datamodel = "[CharacterInteractionConfirmationWindow.GetOptionItems]"

				item = {
					widget = {
						visible = "[OptionItem.IsShown]"
						layoutpolicy_horizontal = expanding
						size = { 480 40 }

						background = {
							using = Background_Area_Border
						}

						hbox = {
							margin = { 16 0 }
							spacing = 8

							# Warcraft
							tooltip = "[Select_CString(Not(GetScriptedGui('wc_show_character_interaction_traits_sgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', CharacterInteractionConfirmationWindow.GetRecipient.MakeScope).End)), OptionItem.GetTooltip, GetTrait(OptionItem.GetName).GetFullDescription( CharacterInteractionConfirmationWindow.GetRecipient, CharacterInteractionConfirmationWindow.GetRecipient.GetFaith ))]"
							using = tooltip_below

							button_radio = {
								size = { 30 30 }
								frame = "[BoolTo1And2( OptionItem.HasOption )]"
								onclick = "[OptionItem.OnClick]"
								enabled = "[And(OptionItem.IsValid, And(OptionItem.CanBeChanged, Not(OptionItem.HasOption)))]"
							}

							# Warcraft
							text_single = {
								visible = "[Not(GetScriptedGui('wc_show_character_interaction_traits_sgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', CharacterInteractionConfirmationWindow.GetRecipient.MakeScope).End))]"
								layoutpolicy_horizontal = expanding
								text = "[OptionItem.GetName]"
								align = nobaseline
							}

							icon = {
								visible = "[GetScriptedGui('wc_show_character_interaction_traits_sgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', CharacterInteractionConfirmationWindow.GetRecipient.MakeScope).End)]"
								name = "trait_icon"
								using = Animation_Glow_Pulse

								block "icon_size"
								{
									size = { 35 35 }
								}
								block "glow"
								{

								}

								texture = "[GetTrait(OptionItem.GetName).GetIcon(GetPlayer)]"
							}

							text_single = {
								visible = "[GetScriptedGui('wc_show_character_interaction_traits_sgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', CharacterInteractionConfirmationWindow.GetRecipient.MakeScope).End)]"
								layoutpolicy_horizontal = expanding
								text = "[Localize(Concatenate('trait_', OptionItem.GetName))]"
								align = nobaseline
							}
							# End Warcraft
						}
					}
				}
			}
		}
	}

	type vbox_scheme_info = vbox {
		name = "scheme_info"
		margin = {3 10 }

		hbox = {
			layoutpolicy_horizontal = expanding

			vbox = {
				layoutpolicy_horizontal = expanding
				margin = { 0 10 }

				# # text_single = {
				# # 	text = "INTERACTION_START_SCHEME"
				# # 	default_format = "#low"
				# # }

				text_label_center = {
					text = "SCHEME_PREDICTION_NAME"
					using = Font_Size_Medium
					default_format = "#high"
				}

				# text_single = {
				# 	text = "[InteractionSchemeInfo.GetEstimatedTime]"
				# 	tooltip = "SCHEME_PREDICTION_ESTIMATED_TIME_TT"
				# }

				text_single = {
					visible = "[InteractionSchemeInfo.GetScheme.UsesAgents]"
					text = "SCHEME_PREDICTION_AGENTS"
					tooltip = "SCHEME_PREDICTION_AGENTS_TT"
				}

			}

		}


		hbox = {
			name = "on_success"
			visible = "[InteractionSchemeInfo.HasSuccessDesc]"
			layoutpolicy_horizontal = expanding

			background = {
				using = Background_Area
			}

			hbox = {
				layoutpolicy_vertical = expanding
				min_width = 135
				margin_left = 25
				spacing = 10
				tooltip = "SCHEME_PREDICTION_SUCCESS_TT"

				background = {
					using = Background_Area
				}

				icon = {
					name = "success_icon"
					size = { 30 30 }
					texture = "gfx/interface/icons/schemes/icon_scheme_success.dds"
				}

				text_single = {
					name = "success"
					text = "SCHEME_PREDICTION_SUCCESS_CHANCE"
					using = Font_Size_Medium
					align = nobaseline
				}

				expand = {}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				margin = { 10 15 }
				spacing = 3

				text_single = {
					layoutpolicy_horizontal = expanding
					text = "SCHEME_PREDICTION_ON_SUCCESS"
					default_format = "#weak"
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					text_multi = {
						layoutpolicy_horizontal = expanding
						max_width = 380
						autoresize = yes
						text = "[InteractionSchemeInfo.GetSuccessDesc]"
					}

					expand = {}
				}
			}

			vbox = {
				margin_right = 5
				margin_top = -60

				portrait_shoulders = {
					datacontext = "[InteractionSchemeInfo.GetTarget]"
					using = tooltip_es
				}
			}

		}

		hbox = {
			name = "on_discovery"
			visible = "[InteractionSchemeInfo.HasDiscoveryDesc]"
			layoutpolicy_horizontal = expanding

			background = {
				using = Background_Area
			}

			hbox = {
				layoutpolicy_vertical = expanding
				visible = "[InteractionSchemeInfo.IsSecret]"
				min_width = 135
				margin_left = 25
				spacing = 10
				tooltip = "SCHEME_PREDICTION_SECRECY_TT"

				background = {
					using = Background_Area
				}

				icon = {
					name = "secrecy_icon"
					size = { 30 30 }
					texture = "gfx/interface/icons/schemes/icon_secrecy.dds"
				}

				text_single = {
					name = "secrecy"
					size = { 40 28 }
					autoresize = no
					text = "[InteractionSchemeInfo.GetSecrecy|%/V]"
					using = Font_Size_Medium
					align = nobaseline
				}

				expand = {}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				margin = { 10 15 }
				spacing = 3

				text_single = {
					layoutpolicy_horizontal = expanding

					text = "SCHEME_PREDICTION_ON_DISCOVERY"

					default_format = "#weak"
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					text_multi = {
						layoutpolicy_horizontal = expanding
						autoresize = yes
						max_width = 600
						text = "[InteractionSchemeInfo.GetDiscoveryDesc]"
					}

					expand = {}
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding

			background = {
				using = Background_Area
			}

			hbox = {
				name = "expected_time"
				layoutpolicy_vertical = expanding
				min_width = 135
				margin_left = 25
				spacing = 10

				background = {
					using = Background_Area
				}

				icon = {
					name = "time"
					size = { 32 32 }
					texture = "gfx/interface/icons/schemes/icon_scheme_power.dds"
				}

				text_single = {
					text = "[InteractionSchemeInfo.GetEstimatedTime]"
					align = nobaseline
					tooltip = "SCHEME_PREDICTION_ESTIMATED_TIME_TT"
				}

				expand = {}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				margin = { 10 15 }
				spacing = 3

				text_single = {
					layoutpolicy_horizontal = expanding

					text = "SCHEME_PREDICTION_EXPECTED_TIME"

					default_format = "#weak"
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					text_multi = {
						layoutpolicy_horizontal = expanding
						autoresize = yes
						max_width = 500
						text = "SCHEME_PREDICTION_EXPECTED_TIME_TEXT"
					}

					expand = {}
				}
			}
		}


		text_single = {
			visible = "[LessThanOrEqualTo_int32( InteractionSchemeInfo.GetSuccessChance, '(int32)0' )]"
			layoutpolicy_horizontal = expanding
			margin = { 0 10 }
			text = "SCHEME_PREDICTION_NO_SUCCESS"
			tooltip = "SCHEME_PREDICTION_SUCCESS_TT"
			using = Font_Size_Medium
			align = center|nobaseline

			background = {
				using = Background_Area
			}
		}

		text_single = {
			visible = "[InteractionSchemeInfo.IsReplace]"
			text = "INTERACTION_REPLACE_SCHEME"
			layoutpolicy_horizontal = expanding
			margin = { 0 10 }
			align = center|nobaseline

			background = {
				using = Background_Area
			}
		}
	}

	########################################
	type change_revert_buttons = vbox {
		button_round = {
			name = "change"
			alwaystransparent = no
			tooltip = "CHANGE_CHARACTER"
			using = tooltip_below

			block "ReplaceVisible"
			{
				visible = yes
			}

			button_replace = {
				parentanchor = center

				block "ReplaceClick"
				{
					onclick = [CharacterInteractionConfirmationWindow.OnChangeOrRevertActorCharacter]
				}
			}
		}
		button_round = {
			name = "revert"
			alwaystransparent = no
			tooltip = "CANCEL"
			using = tooltip_below

			button_cancel = {
				parentanchor = center

				block "RevertClick"
				{
					# onclick = ?
				}
			}

			block "RevertVisible"
			{
				visible = yes
			}
		}
	}

	type dynamicgridbox_interaction_list = dynamicgridbox {
		name = "interaction_list"

		item = {
			container = {
				name = "interaction_widget"
				ignoreinvisible = yes

				button_standard_hover = {
					name = "interaction_button"
					visible = "[Not(InteractionItem.IsMarriageSetting)]"
					enabled = "[InteractionItem.IsValid]"
					onclick = "[InteractionItem.OnClick]"

					disableframe = 8
					blockoverride "disabled" {}
					size = { 317 30 }

					tooltip = "[InteractionItem.GetTooltip]"
					using = tooltip_es

					hbox = {
						margin = { 10 0 }
						spacing = 5

						background = {
							name = "interaction_glow"
							visible = "[InteractionItem.IsHighlighted]"
							texture = "gfx/interface/component_tiles/tile_selected.dds"
							spriteType = corneredtiled
							spriteborder = { 25 25 }
						}

						icon = {
							visible = "[InteractionItem.IsCharacterInteraction]"
							name = "interaction_icon"
							size = { 30 30 }
							texture = "[InteractionItem.GetCharacterInteraction.GetIcon]"
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							alwaystransparent = yes
							raw_text = "[Select_CString( InteractionItem.IsValid, '#clickable', '#weak' )] [InteractionItem.GetName]#!"
							align = nobaseline
							autoresize = no
						}

						hbox = {
							icon = {
								size = { 30 30 }
								name = "extra_icon"
								texture = "[InteractionItem.GetExtraIcon]"
								visible = "[InteractionItem.ShouldUseExtraIcon]"
							}

							icon = {
								name = "dont_accept"
								visible = "[And(Not(InteractionItem.IsMore),Not(InteractionItem.IsPotentialAccept))]"
								size = { 30 30 }
								texture = "gfx/interface/icons/symbols/icon_cross.dds"
							}

							warning_icon = {
								name = "warning_icon"
								size = { 25 25 }
								visible = "[InteractionItem.HasWarningIcon]"
								tooltip = "[InteractionItem.GetWarningTooltipDesc]"
							}
						}
					}
				}

				button_standard_hover = {
					visible = "[InteractionItem.IsMarriageSetting]"
					tooltip = "[InteractionItem.GetCheckboxTooltip]"
					onclick = "[InteractionItem.OnClickCheckbox]"
					size = { 317 30 }

					hbox = {
						margin_left = 10

						button_checkbox_label = {
							alwaystransparent = yes
							name = "button"
							size = { 30 30 }
							enabled = "[InteractionItem.CheckboxEnabled]"
							blockoverride "checkbox"
							{
								alwaystransparent = yes
								checked = "[EqualTo_int32(InteractionItem.GetCheckboxFrame, '(int32)2')]"
							}
							blockoverride "text"
							{
								text = "CHARACTER_INTERACTION_ALLOWED_TO_MARRY"
							}
						}
						expand = {}
					}
				}
			}
		}
	}

	type flowcontainer_category_group = flowcontainer {
		visible = "[InteractionCategoryItem.IsVisible]"
		direction = vertical

		flowcontainer = {
			direction = vertical
			margin = { 10 3 }

			background = {
				# Debug background
				visible = "[InteractionCategoryItem.GetCharacterInteractionCategory.HasBackground]"
				texture = "[InteractionCategoryItem.GetCharacterInteractionCategory.GetBackground]"
			}

			background = {
				using = Background_Area
				alpha = 0.6
			}

			flowcontainer = {
				name = "category_gridbox_container"
				ignoreinvisible = yes
				maximumsize = { 320 30 }
				spacing = 5

				icon = {
					size = { 30 30 }
					texture = "[InteractionCategoryItem.GetCharacterInteractionCategory.GetIcon]"
					visible = "[InteractionCategoryItem.GetCharacterInteractionCategory.HasIcon]"
				}

				text_single = {
					name = "category_name"
					text = "[InteractionCategoryItem.GetName]"
					default_format = "#italic"
					fontcolor = { 1 1 1 0.5 }
				}
			}

			spacer = {
				size = { 0 5 }
			}

			container = {
				dynamicgridbox_interaction_list = {
					datamodel = "[InteractionCategoryItem.GetInteractions]"
				}
			}
		}
	}

	## banner for character name and portrait
	type banner_with_portrait = vbox {
		name = "header_with_divider"
		layoutpolicy_horizontal = expanding
		spacing = 5
		margin = { 0 5 }

		background = {
			using = Background_Area_Dark
			alpha = 0.7
		}

		# divider_light = {
		# 	layoutpolicy_horizontal = growing
		# 	alpha = 0.5
		# }

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			text_multi = {
				name = "header_with_divider_text"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 10 5 }

				autoresize = yes
				align = bottom|left
				max_width = 300

				block "banner_with_portrait_text" {
					raw_text = "#D Text#!"
				}
			}

			block "portrait" {}
		}

		# divider_light = {
		# 	layoutpolicy_horizontal = growing
		# 	alpha = 0.5
		# }
	}
}

### CHARACTER LIST
types InteractionCharacterList
{
	type vbox_interaction_character_list = vbox {
		name = "character_list"
		visible = "[Not(CharacterInteractionConfirmationWindow.HasPickedCharacters)]"

		vbox = {
			layoutpolicy_horizontal = expanding
			margin_top = 5
			margin_bottom = 10

			background = {
				using = Background_Area
			}

			text_single = {
				name = "select_someone_label"
				text = "[CharacterInteractionConfirmationWindow.GetPrompt]"
				default_format = "#I"
			}
		}

		### List
		vbox_character_list = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			blockoverride "claims_visibility"
			{
				visible = no
			}

			blockoverride "special_character"
			{
				vbox = {
					datacontext = "[CharacterInteractionConfirmationWindow.GetTopCharacterItem]"
					visible = "[CharacterInteractionConfirmationWindow.HasTopCharacterItem]"
					layoutpolicy_horizontal = expanding

					widget_character_list_item = {
						layoutpolicy_horizontal = expanding
					}
				}
			}

			blockoverride "bottom_right_box"
			{
				hbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					# Realm
					widget = {
						size = {55 58 }
						visible = "[Not( IsDataModelEmpty( CharacterListItem.GetTitleItems ) )]"

						block "claims_visibility" {}

						datacontext = "[CharacterListItem.GetFirstClaim]"

						coa_title_tiny_crown = {
							using = tooltip_ne
							datacontext = "[Claim.GetTitle]"

							highlight_icon = {
								name = "pressed_claim"
								visible = "[And(Claim.IsPressed, Not(Claim.IsImplicit))]"
								texture = "gfx/interface/icons/title_status/icon_claim_pressed.dds"
								size = { 24 24 }
								parentanchor = bottom|right
							}

							highlight_icon = {
								name = "unpressed_claim"
								visible = "[And(Not(Claim.IsPressed), Not(Claim.IsImplicit))]"
								texture = "gfx/interface/icons/title_status/icon_claim_unpressed.dds"
								size = { 24 24 }
								parentanchor = bottom|right
							}

							highlight_icon = {
								name = "implicit_claim"
								visible = "[Claim.IsImplicit]"
								texture = "gfx/interface/icons/title_status/icon_claim_implicit.dds"
								size = { 24 24 }
								parentanchor = bottom|right
							}

							blockoverride "coa_tooltip"
							{
								tooltip = "CHARACTER_LIST_CLAIM_TOOLTIP"
							}
						}

						text_single = {
							align = right
							minimumsize = { 15 0 }
							parentanchor = vcenter|right
							text = "[CharacterListItem.GetTitleItemCount]"
							tooltip = "CHARACTER_LIST_CLAIM_TOOLTIP"
						}
					}

					expand = {}

					# Religion
					vbox = {
						layoutpolicy_vertical = expanding

						margin_bottom = 20

						expand = {}

						hbox = {
							icon = {
								name = "faith_button"
								size = { 35 35 }
								datacontext = "[Character.GetFaith]"
								tooltipwidget = { faith_tooltip = {} }
								texture = "[Faith.GetIcon]"
							}

							widget = {
								datacontext = "[Character.GetCulture]"
								size = { 120 24 }

								tooltipwidget = {
									culture_tooltip = {}
								}
								using = tooltip_se

								hbox = {
									spacing = 3

									icon = {
										name = "culture"
										texture = "gfx/interface/icons/icon_culture.dds"
										size = { 24 24 }
									}

									text_multi = {
										layoutpolicy_horizontal = expanding
										min_width = 95
										max_width = 95
										autoresize = yes
										text = "CULTURE_LISTS_WINDOW"
									}
								}
							}
						}
					}

					hbox = {
						visible = "[Not(CharacterInteractionConfirmationWindow.IsForcedToAccept)]"

						### Will Accept ###
						icon = {
							visible = "[GreaterThan_CFixedPoint( CharacterInteractionConfirmationWindow.GetAcceptanceValue( CharacterListItem.Self ), '(CFixedPoint)0' )]"
							size = { 60 60 }

							texture = "gfx/interface/icons/symbols/icon_check.dds"

							value = "[CharacterInteractionConfirmationWindow.GetAnswerScore]"
							tooltip = "[CharacterInteractionConfirmationWindow.GetAcceptanceBreakdown( CharacterListItem.Self )]"
						}

						### Will Not Accept ###
						icon = {
							visible = "[LessThanOrEqualTo_CFixedPoint( CharacterInteractionConfirmationWindow.GetAcceptanceValue( CharacterListItem.Self ), '(CFixedPoint)0' )]"
							size = { 60 60 }

							texture = "gfx/interface/icons/symbols/icon_cross.dds"

							value = "[CharacterInteractionConfirmationWindow.GetAnswerScore]"
							tooltip = "[CharacterInteractionConfirmationWindow.GetAcceptanceBreakdown( CharacterListItem.Self )]"
						}
					}
				}
			}
		}
	}
}
