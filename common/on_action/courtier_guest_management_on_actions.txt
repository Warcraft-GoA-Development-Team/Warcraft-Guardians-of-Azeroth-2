# Called when a courtier gets bored at a court and wants to go adventuring instead.
# root, scope:courtier: the courtier
# liege: their liege (owner of their court)
# characters: list of all characters moving together. Includes the root character.
on_courtier_decided_to_move_to_pool = {
	events = {
		courtier_guest_management.0001 #Warn liege about important courtiers moving (only liege's children atm)
	}
	effect = {
		# Warcraft
		# Caused lags on 1.4.2
		# trigger_race_giving_no_gene_effect = yes
	}
}

# Called after a set amount of time (COURTIER_MOVE_TO_POOL_DELAY_MONTHS)
# after on_courtier_decided_to_move_to_pool, if the courtier still wants to move.
# root, scope:courtier: the courtier
# liege: their liege (owner of their court)
# characters: list of all characters moving together. Includes the root character.
on_courtier_ready_to_move_to_pool = {
	events = {
		courtier_guest_management.0101 #Last chance to make them stay (only for claimants atm)
	}
}

######################################################################

# Called when a pool character has appeared at the court. See guest_management in common/courtier_guest_management.
# root, scope:guest: the guest
# host: their host (owner of the court)
# characters: list of all characters moving together. Includes the root character.
on_guest_arrived_from_pool = {
	events = {
		courtier_guest_management.1001 #Guest arriving, development effect, message if they're great
	}

	effect = { # Warcraft
		# Sets race trait (no gene)
		trigger_event = {
			id = WCRAC.10
			days = 1
		}
	}
}

# Called after a set amount of time (GUEST_MOVE_TO_POOL_DELAY_MONTHS)
# after a guest has decided to leave the court.
# root, scope:guest: the guest
# host: their host (owner of the court)
# characters: list of all characters moving together. Includes the root character.
# scope:destination: Where they should move to
on_guest_ready_to_move_to_pool = {
	events = {
		courtier_guest_management.0500 # Guest leaves
	}
}
