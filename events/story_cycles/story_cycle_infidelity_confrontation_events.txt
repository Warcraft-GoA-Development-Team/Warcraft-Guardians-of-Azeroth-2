# Events for the infidelity confrontation story cycle, used to handle lover secret discovery/exposure
# By Mathilda Bjarnehed, based on previous adultery system by Linnéa Thimrén


namespace = infidelity_confrontation

#Secret has been exposed/discovered - lover/spouse decides how to react
scripted_effect infidelity_confrontation_break_up_effect = {
	scope:confronting_partner = {
		if = {
			limit = { has_relation_lover = scope:infidelity_partner }
			remove_relation_lover = scope:infidelity_partner
		}
		else_if = {
			limit = { has_relation_soulmate = scope:infidelity_partner }
			remove_relation_soulmate = scope:infidelity_partner
		}
	}
}

scripted_effect infidelity_confrontation_demand_break_up_success_effect = {
	scope:infidelity_partner = {
		remove_relation_lover = scope:infidelity_partners_lover
	}
}

scripted_trigger infidelity_confrontation_demand_consequence_break_up_trigger = {
	scope:confronting_partner = { has_relation_lover = scope:infidelity_partner }
}

scripted_trigger infidelity_confrontation_demand_consequence_celibacy_trigger = {
	infidelity_confrontation_demand_consequence_break_up_trigger = no
	scope:confronting_partner = { is_ruler = no }
}

scripted_trigger infidelity_confrontation_demand_consequence_imprisonment_trigger = {
	infidelity_confrontation_demand_consequence_break_up_trigger = no
	infidelity_confrontation_demand_consequence_celibacy_trigger = no
	scope:confronting_partner = { allowed_to_imprison_character_trigger = { CHARACTER = scope:infidelity_partner } }
}

scripted_effect infidelity_confrontation_demand_break_up_failure_effect = {
	scope:confronting_partner = {
		if = {
			limit = { infidelity_confrontation_demand_consequence_break_up_trigger = yes }
			remove_relation_lover = scope:infidelity_partner
		}
		else_if = {
			limit = { infidelity_confrontation_demand_consequence_celibacy_trigger = yes }
			add_trait = celibate
		}
		else_if = {
			limit = { infidelity_confrontation_demand_consequence_imprisonment_trigger = yes }
			imprison_character_effect = {
				TARGET = scope:infidelity_partner
				IMPRISONER = scope:confronting_partner
			}
		}
	}
}

scripted_effect infidelity_confrontation_plead_break_up_success_effect = {
	scope:confronting_partner = {
		if = {
			limit = {
				scope:infidelity_partner = {
					is_ai = yes
				}
				can_add_hook = {
					target = scope:infidelity_partner
					type = loyalty_hook
				}
			}
			add_hook = {
				type = loyalty_hook
				target = scope:infidelity_partner
			}
		}
		#Remove negative opinions
		if = {
			limit = {
				has_opinion_modifier = {
					modifier = unfaithful_spouse_exposed_opinion
					target = scope:infidelity_partner
				}
			}
			remove_opinion = {
				modifier = unfaithful_spouse_exposed_opinion
				target = scope:infidelity_partner
			}
		}
		if = {
			limit = {
				has_opinion_modifier = {
					modifier = unfaithful_spouse_discovered_opinion
					target = scope:infidelity_partner
				}
			}
			remove_opinion = {
				modifier = unfaithful_spouse_discovered_opinion
				target = scope:infidelity_partner
			}
		}
		if = {
			limit = {
				has_opinion_modifier = {
					modifier = betrayed_our_promise
					target = scope:infidelity_partner
				}
			}
			remove_opinion = {
				modifier = betrayed_our_promise
				target = scope:infidelity_partner
			}
		}
	}
	scope:infidelity_partner = {
		remove_relation_lover = scope:infidelity_partners_lover
	}
}

scripted_effect infidelity_confrontation_plead_break_up_failure_effect = {
	scope:infidelity_partner = {
		add_opinion = {
			modifier = disgusted_opinion
			target = scope:confronting_partner
			opinion = -10
		}
	}
}

scripted_trigger infidelity_confrontation_infidelity_partner_apologetic_trigger = {
	scope:infidelity_partner = {
		OR = {
			ai_compassion >= medium_positive_ai_value
			opinion = {
				target = root
				value >= low_positive_opinion
			}
		}
	}
}


infidelity_confrontation.1000 = { #by Mathilda Bjarnehed
	type = character_event
	title = infidelity_confrontation.1000.t
		desc = {
			first_valid = {
				########
				# SPECIAL TEXT: CONFESSION
				########
				triggered_desc = {
					trigger = {
						scope:story = { has_variable = infidelity_confrontation_1000_confession_desc }
					}
					desc = {	
						first_valid = {
							#Apologetic
							triggered_desc = {
								trigger = {
									infidelity_confrontation_infidelity_partner_apologetic_trigger = yes
								}
								desc = {
									desc = infidelity_confrontation.1000.confession.apologetic_start.desc
									first_valid = {
										triggered_desc = {
											trigger = { scope:infidelity_partner = { is_close_or_extended_family_of = scope:infidelity_partners_lover } }
											desc = infidelity_confrontation.1000.confession.my_lovername.desc
										}
										desc = infidelity_confrontation.1000.confession.your_lovername.desc
									}
									desc = infidelity_confrontation.1000.confession.apologetic_end.desc
								}
							}
							#Unapologetic
							desc = {
								desc = infidelity_confrontation.1000.confession.unapologetic_start.desc
								first_valid = {
									triggered_desc = {
										trigger = { scope:infidelity_partner = { is_close_or_extended_family_of = scope:infidelity_partners_lover } }
										desc = infidelity_confrontation.1000.confession.my_lovername.desc
									}
									desc = infidelity_confrontation.1000.confession.your_lovername.desc
								}
								first_valid = {
									triggered_desc = {
										trigger = { sex_opposite_of = scope:infidelity_partners_lover }
										desc = infidelity_confrontation.1000.confession.unapologetic_end_opposite_sex.desc
									}
									desc = infidelity_confrontation.1000.confession.unapologetic_end_same_sex.desc
								}
							}
						}
					}
				}
				######
				# REGULAR TEXT
				######
				desc = {
					#Special optional starts to clarify source of information
					first_valid = {
						# If one of the lovers is the exposer
						triggered_desc = {
							trigger = {
								exists = scope:exposer
								scope:infidelity_partner = scope:exposer
							}
							desc = infidelity_controntation.1000.partner_exposed_intro.desc
						}
						triggered_desc = {
							trigger = {
								exists = scope:exposer
								scope:infidelity_partners_lover = scope:exposer
							}
							desc = infidelity_controntation.1000.partners_lover_exposed_intro.desc
						}
						# If exposed
						triggered_desc = {
							trigger = {
								exists = scope:exposer
								NOT = { this = scope:exposer }
							}
							desc = infidelity_controntation.1000.exposed_intro.desc
						}
						# If found out through investigation
						triggered_desc = {
							trigger = {
								scope:story = { has_variable = infidelity_confrontation_1000_investigation_desc }
							}
							desc = infidelity_controntation.1000.investigation_intro.desc
						}
					}
					# Reaction
					first_valid = {
						# Secret exposed but I knew
						triggered_desc = {
							trigger = {
								exists = scope:confronting_partner_knew
								scope:confronting_partner_knew = yes
							}
							desc = infidelity_controntation.1000.exposed_knew.desc
						}
						# Incest
						triggered_desc = {
							trigger = {
							scope:infidelity_partner = { relation_with_character_is_incestuous_in_faith_trigger = { CHARACTER = scope:infidelity_partners_lover FAITH = root.faith } }
							has_negative_attitude_towards_trait_trigger = { TRAIT = incestuous GENDER_CHARACTER = scope:infidelity_partner }
							}
							desc = {
								first_valid = {
									triggered_desc = {
										trigger = { is_spouse_of = scope:infidelity_partner }
										desc = infidelity_controntation.1000.start_spouse.desc
									}
									triggered_desc = {
										trigger = { has_relation_lover = scope:infidelity_partner }
										desc = infidelity_controntation.1000.start_lover.desc
									}
								}
								desc = infidelity_controntation.1000.incest.desc
							}
						}
						# Sodomy
						triggered_desc = {
						trigger = {
							scope:infidelity_partner = { relation_with_character_is_sodomy_in_faith_trigger = { CHARACTER = scope:infidelity_partners_lover FAITH = root.faith } }
						}
						desc = {
								first_valid = {
									triggered_desc = {
										trigger = { is_spouse_of = scope:infidelity_partner }
										desc = infidelity_controntation.1000.start_spouse.desc
									}
									triggered_desc = {
										trigger = { has_relation_lover = scope:infidelity_partner }
										desc = infidelity_controntation.1000.start_lover.desc
									}
								}
								desc = infidelity_controntation.1000.sodomy.desc
							}
					}
					# "Regular" lovers
					desc = infidelity_controntation.1000.regular.desc
					}
				}
			}
	}
	theme = seduction
	left_portrait = {
		character = scope:infidelity_partner
		triggered_animation = {
			trigger = { infidelity_confrontation_infidelity_partner_apologetic_trigger = yes }
			animation = shame
		}
		animation = disapproval
	}
	right_portrait = {
		character = scope:infidelity_partners_lover
		animation = flirtation
	}
	lower_center_portrait = scope:exposer

	immediate = {
		if = {
			# A lot can happen in a short time.
			limit = { scope:infidelity_partners_lover = { is_alive = yes } }
			progress_towards_rival_effect = {
				REASON = rival_infidelity_accusation
				CHARACTER = scope:infidelity_partners_lover
				OPINION = 0
			}
		}
		play_music_cue = "mx_cue_prison"
	}

	# IMPRISON & END RELATION
	option = {
		trigger = {
			#The secret is out
			NOT = { exists = scope:secret }
			#I am allowed to imprison either and it's illegal for them to be lovers
			OR = {
				AND = {
					allowed_to_imprison_character_trigger = { CHARACTER = scope:infidelity_partner }
					scope:infidelity_partner = {
						sexual_activity_with_partner_is_criminal_in_faith_trigger = {
							PARTNER = scope:infidelity_partners_lover
							FAITH = root.faith
						}
					}
				}
				AND = {
					allowed_to_imprison_character_trigger = { CHARACTER = scope:infidelity_partners_lover }
					scope:infidelity_partners_lover = {
						sexual_activity_with_partner_is_criminal_in_faith_trigger = {
							PARTNER = scope:infidelity_partner FAITH = root.faith
						}
					}
				}
			}
		}
		name = infidelity_confrontation.1000.imprison

		if = {
			limit = {
				allowed_to_imprison_character_trigger = { CHARACTER = scope:infidelity_partner }
				scope:infidelity_partner = { sexual_activity_with_partner_is_criminal_in_faith_trigger = { PARTNER = scope:infidelity_partners_lover FAITH = root.faith } }
			}
			imprison_character_effect = {
				TARGET = scope:infidelity_partner
				IMPRISONER = root
			}
		}
		if = {
			limit = {
				allowed_to_imprison_character_trigger = { CHARACTER = scope:infidelity_partners_lover }
				scope:infidelity_partners_lover = { sexual_activity_with_partner_is_criminal_in_faith_trigger = { PARTNER = scope:infidelity_partner FAITH = root.faith } }
			}
			imprison_character_effect = {
				TARGET = scope:infidelity_partners_lover
				IMPRISONER = root
			}
		}

		#Only remove lover if they're both AI so we don't have to handle multiple notifications for them (imprisonment + break up)
		if = {
			limit = {
				scope:infidelity_partner = { is_ai = yes }
				scope:infidelity_partners_lover = { is_ai = yes }
				scope:infidelity_partner = { has_relation_lover = scope:infidelity_partners_lover }
			}
			scope:infidelity_partner = {
				remove_relation_lover = scope:infidelity_partners_lover
			}
		}

		stress_impact = {
			compassionate = major_stress_impact_gain
			forgiving = major_stress_impact_gain
			calm = minor_stress_impact_gain
			craven = minor_stress_impact_gain
		}

		ai_chance = {
			base = 100
			opinion_modifier = {
				opinion_target = scope:infidelity_partner
				multiplier = -2
			}
			ai_vengefulness_target_modifier = { VALUE = 150 }
			ai_boldness_target_modifier = { VALUE = 50 }
			ai_compassion_target_modifier = { VALUE = -150 }
		}


		#END OF CONFRONTATION
		if = {
		 	limit = { exists = scope:story } #It is removed after 100 days
			scope:story = {
				set_variable = {
					name = ongoing_confrontation
					value = no
				}
			}
		}
	}

	# EXPOSE SECRET
	option = {
		trigger = { exists = scope:secret }
		name = infidelity_confrontation.1000.expose

		scope:secret = { expose_secret = root }

		stress_impact = {
			compassionate = medium_stress_impact_gain
			forgiving = minor_stress_impact_gain
			calm = minor_stress_impact_gain
		}

		ai_chance = {
			base = 100
			opinion_modifier = {
				opinion_target = scope:infidelity_partner
				multiplier = -1
			}
			ai_vengefulness_target_modifier = { VALUE = 100 }
			ai_boldness_target_modifier = { VALUE = 50 }
			ai_compassion_target_modifier = { VALUE = -100 }
			ai_honor_target_modifier = { VALUE = -50 }
		}

		#END OF CONFRONTATION
		if = {
		 	limit = { exists = scope:story } #It is removed after 100 days
			scope:story = {
				set_variable = {
					name = ongoing_confrontation
					value = no
				}
			}
		}
	}


	# DEMAND BREAK UP
	option = {
		trigger = {
			OR = {
				has_relation_lover = scope:infidelity_partner
				allowed_to_imprison_character_trigger = { CHARACTER = scope:infidelity_partner }
			}
			NOT = { scope:infidelity_partner = { is_imprisoned = yes } }
			scope:infidelity_partner = { has_relation_lover = scope:infidelity_partners_lover }
			#You only get this option once (i.e. if you discovered secret, that was your chance)
			trigger_if = {
				limit = { exists = scope:confronting_partner_knew }
				scope:confronting_partner_knew = no
			}
		}
		name = {
			trigger = { has_relation_lover = scope:infidelity_partner }
			text = infidelity_confrontation.1000.demand_break_up.lover
		}
		name = {
			trigger = { NOT = { has_relation_lover = scope:infidelity_partner } }
			text = infidelity_confrontation.1000.demand_break_up.spouse
		}
		flavor = infidelity_confrontation.1000.demand_break_up.flavor

		scope:infidelity_partner = {
			if = {
				limit = { is_ai = yes }
				trigger_event = infidelity_confrontation.1010
			}
			else = {
				trigger_event = {
					id = infidelity_confrontation.1010
					days = infidelity_event_delay
				}
			}
		}
		show_as_tooltip = {
			random_list = {
				1 = {
					show_chance = no
					desc = infidelity_confrontation.1000.demand_break_up.success
					show_as_tooltip = { infidelity_confrontation_demand_break_up_success_effect = yes }
				}
				1 = {
					show_chance = no
					desc = infidelity_confrontation.1000.break_up.failure
					show_as_tooltip = { infidelity_confrontation_demand_break_up_failure_effect = yes }
				}
			}
		}

		reverse_add_opinion = {
			modifier = angry_opinion
			target = scope:infidelity_partner
			opinion = -15
		}

		stress_impact = {
			compassionate = medium_stress_impact_gain
			forgiving = minor_stress_impact_gain
			calm = minor_stress_impact_gain
			craven = minor_stress_impact_gain
		}

		ai_chance = {
			base = 100
			opinion_modifier = {
				opinion_target = scope:infidelity_partner
				multiplier = 1.5
			}
			ai_vengefulness_target_modifier = { VALUE = 100 }
			ai_boldness_target_modifier = { VALUE = 50 }
			ai_compassion_target_modifier = { VALUE = -100 }
		}
	}

	# PLEAD FOR BREAK UP
	option = {
		trigger = {
			NOT = { scope:infidelity_partner = { is_imprisoned = yes } }
			scope:infidelity_partner = { has_relation_lover = scope:infidelity_partners_lover }
			#You only get this option once (i.e. if you discovered secret, that was your chance)
			trigger_if = {
				limit = { exists = scope:confronting_partner_knew }
				scope:confronting_partner_knew = no
			}
		}
		name = infidelity_confrontation.1000.plead_break_up
		flavor = infidelity_confrontation.1000.plead_break_up.flavor

		scope:infidelity_partner = {
			if = {
				limit = { is_ai = yes }
				trigger_event = infidelity_confrontation.1020
			}
			else = {
				trigger_event = {
					id = infidelity_confrontation.1020
					days = infidelity_event_delay
				}
			}
		}
		show_as_tooltip = {
			random_list = {
				1 = {
					show_chance = no
					desc = infidelity_confrontation.1000.plead_break_up.success
					show_as_tooltip = { infidelity_confrontation_plead_break_up_success_effect = yes }
				}
				1 = {
					show_chance = no
					desc = infidelity_confrontation.1000.break_up.failure
					show_as_tooltip = { infidelity_confrontation_plead_break_up_failure_effect = yes }
				}
			}
		}

		ai_chance = {
			base = 100
			opinion_modifier = {
				opinion_target = scope:infidelity_partner
				multiplier = 3
			}
			modifier = {
				has_relation_soulmate = scope:infidelity_partner
				add = 300
			}
			ai_vengefulness_target_modifier = { VALUE = -100 }
			ai_boldness_target_modifier = { VALUE = 50 }
			ai_compassion_target_modifier = { VALUE = 150 }
		}

		stress_impact = {
			vengeful = major_stress_impact_gain
			wrathful = medium_stress_impact_gain
			sadistic = medium_stress_impact_gain
			arrogant = medium_stress_impact_gain
			callous = minor_stress_impact_gain
		}
	}

	# BREAK UP
	option = {
		trigger = {
			OR = {
				has_relation_lover = scope:infidelity_partner
				has_relation_soulmate = scope:infidelity_partner
			}
		}
		name = infidelity_confrontation.1000.break_up

		show_as_tooltip = {
			infidelity_confrontation_break_up_effect = yes
		}

		scope:infidelity_partner = {
			if = {
				limit = { is_ai = yes }
				trigger_event = infidelity_confrontation.1030
			}
			else = {
				trigger_event = {
					id = infidelity_confrontation.1030
					days = infidelity_event_delay
				}
			}
		}

		ai_chance = {
			base = 50
			opinion_modifier = {
				opinion_target = scope:infidelity_partner
				multiplier = -1
			}
			ai_vengefulness_target_modifier = { VALUE = 100 }
			ai_energy_target_modifier = { VALUE = 50 }
			ai_greed_target_modifier = { VALUE = -50 }
			ai_boldness_target_modifier = { VALUE = 25 }
		}

		stress_impact = {
			forgiving = medium_stress_impact_gain
			calm = minor_stress_impact_gain
			compassionate = minor_stress_impact_gain
			lustful = minor_stress_impact_gain
			craven = minor_stress_impact_gain
		}
	}


	# DON'T CARE
	option = {
		name = {
			trigger = {
				NAND = {
					exists = scope:confronting_partner_knew
					scope:confronting_partner_knew = yes
				}
			}
			text = infidelity_confrontation.1000.opt_out
		}
		name = {
			trigger = {
				exists = scope:confronting_partner_knew
				scope:confronting_partner_knew = yes
			}
			text = infidelity_confrontation.1000.opt_out.knew
		}

		#Discovery: I can blackmail
		if = {
			limit = {
				exists = scope:secret
				scope:secret = {
					is_blackmailable_secret_trigger = {
						PARTICIPANT = scope:infidelity_partner
						BLACKMAILER = root
					}
				}
			}
			custom_tooltip = infidelity_confrontation.1000.opt_out.blackmail.tt
		}
		#Exposure: I can divorce
		else_if = {
			limit = {
				NOT = { exists = scope:secret }
				is_spouse_of = scope:infidelity_partner
				faith = { NOT = { has_doctrine_parameter = divorce_disallowed } }
			}
			custom_tooltip = infidelity_confrontation.1000.opt_out.divorce.tt
		}
		#Fallback
		else = {
			custom_tooltip = infidelity_confrontation.1000.opt_out.fallback.tt
		}

		ai_chance = {
			base = 100
			modifier = { # non-exclusive lovers are more forgiving
				NOR = {
					is_spouse_of = scope:infidelity_partner
					has_relation_soulmate = scope:infidelity_partner
				}
				add = 200
			}
			opinion_modifier = {
				opinion_target = scope:infidelity_partner
				multiplier = 1.5
			}
			ai_vengefulness_target_modifier = { VALUE = -100 }
			ai_energy_target_modifier = { VALUE = -100 }
			ai_boldness_target_modifier = { VALUE = -50 }
		}

		stress_impact = {
			wrathful = minor_stress_impact_gain
			sadistic = minor_stress_impact_gain
			vengeful = minor_stress_impact_gain
			callous = minor_stress_impact_gain
		}

		#END OF CONFRONTATION
		if = {
		 	limit = { exists = scope:story } #It is removed after 100 days
			scope:story = {
				set_variable = {
					name = ongoing_confrontation
					value = no
				}
			}
		}
	}
}

# Demand break up branch: Demand is presented to infidelity partner
scripted_trigger infidelity_confrontation_1010_sad_confronter_trigger = {
	scope:confronting_partner = {
		OR = {
			AND = {
				opinion = {
					target = root
					value >= high_positive_opinion
				}
				ai_compassion >= low_negative_ai_value
			}
			ai_compassion >= low_positive_ai_value
		}
	}
}

infidelity_confrontation.1010 = { #by Mathilda Bjarnehed
	type = character_event
	title = infidelity_confrontation.1000.t
	desc = {
		desc = infidelity_confrontation.1010.start.desc
		first_valid = {
			triggered_desc = {
				trigger = { infidelity_confrontation_1010_sad_confronter_trigger = yes }
				desc = infidelity_confrontation.1010.sad.desc
			}
			desc = infidelity_confrontation.1010.angry.desc
		}
		first_valid = {
			triggered_desc = {
				trigger = { infidelity_confrontation_demand_consequence_break_up_trigger = yes }
				desc = infidelity_confrontation.1010.break_up.desc
			}
			triggered_desc = {
				trigger = { infidelity_confrontation_demand_consequence_celibacy_trigger = yes }
				desc = infidelity_confrontation.1010.celibacy.desc
			}
			triggered_desc = {
				trigger = { infidelity_confrontation_demand_consequence_imprisonment_trigger = yes }
				desc = infidelity_confrontation.1010.imprisonment.desc
			}
		}
	}
	theme = seduction
	left_portrait = {
		character = scope:confronting_partner
		triggered_animation = {
			trigger = { infidelity_confrontation_1010_sad_confronter_trigger = yes }
			animation = sadness
		}
		animation = anger
	}
	right_portrait = scope:infidelity_partners_lover
	
	trigger = {
		has_relation_lover = scope:infidelity_partners_lover
	}

	on_trigger_fail = {
		#END OF CONFRONTATION
		if = {
		 	limit = { exists = scope:story } #It is removed after 100 days
			scope:story = {
				set_variable = {
					name = ongoing_confrontation
					value = no
				}
			}
		}
	}

	#Agree to break up
	option = {
		name = infidelity_confrontation.1010.a

		show_as_tooltip = {
			infidelity_confrontation_demand_break_up_success_effect = yes
		}
		scope:infidelity_partners_lover = {
			if = {
				limit = { is_ai = no }
				trigger_event = infidelity_confrontation.1013
			}
		}
		scope:confronting_partner = {
			trigger_event = {
				id = infidelity_confrontation.1011
				days = 1 #So this event where the final effects are applied, happens last
			}
		}

		stress_impact = {
			lustful = minor_stress_impact_gain
		}

		ai_chance = {
			base = 100
			opinion_modifier = {
				opinion_target = scope:confronting_partner
				multiplier = 4
			}
			modifier = {
				has_relation_soulmate = scope:confronting_partner
				add = 200
			}
			ai_honor_target_modifier = { VALUE = 100 }
			ai_rationality_target_modifier = { VALUE = 100 }

			modifier = {
				scope:confronting_partner = {
					NOT = { has_relation_lover = root }
					allowed_to_imprison_character_trigger = { CHARACTER = root }
				}
				factor = 0.2 #Don't want to go to prison
			}
		}
	}

	
		#Disagree
	option = {
		name = infidelity_confrontation.1010.c

		show_as_tooltip = {
			infidelity_confrontation_demand_break_up_failure_effect = yes
		}
		scope:confronting_partner = {
			trigger_event = infidelity_confrontation.1012
		}

		reverse_add_opinion = {
			target = scope:confronting_partner
			modifier = refused_to_renounce_lover_opinion
		}

		stress_impact = {
			craven = medium_stress_impact_gain
			content = minor_stress_impact_gain
		}

		ai_chance = {
			base = 100
			ai_greed_target_modifier = { VALUE = 100 }
			ai_boldness_target_modifier = { VALUE = 150 }
			ai_vengefulness_target_modifier = { VALUE = 50 }
			opinion_modifier = {
				opinion_target = scope:infidelity_partners_lover
				multiplier = 4
			}
			modifier = {
				has_relation_soulmate = scope:infidelity_partners_lover
				add = 200
			}
		}
	}
}

# Demand break up branch: Demand is accepted
infidelity_confrontation.1011 = { #by Mathilda Bjarnehed
	type = character_event
	title = infidelity_confrontation.1000.t
	desc = {
		first_valid = {
			# Apologetic
			triggered_desc = {
				trigger = {
					infidelity_confrontation_infidelity_partner_apologetic_trigger = yes
				}
				desc = infidelity_confrontation.1011.apologetic_start.desc
			}
			#Unapologetic
			desc = {
				desc = infidelity_confrontation.1011.unapologetic_start.desc
				first_valid = {
					triggered_desc = {
						trigger = { is_spouse_of = scope:infidelity_partner }
						desc = infidelity_confrontation.1011.unapologetic_marriage.desc
					}
					desc = infidelity_confrontation.1011.unapologetic_love.desc
				}
				desc = infidelity_confrontation.1011.unapologetic_end.desc
			}
		}
	}
	theme = seduction
	left_portrait = {
		character = scope:infidelity_partner
		triggered_animation = {
			trigger = { infidelity_confrontation_infidelity_partner_apologetic_trigger = yes }
			animation = shame
		}
		animation = anger
	}
	right_portrait = scope:infidelity_partners_lover

	#Outcome
	option = {
		name = infidelity_confrontation.1011.a
		infidelity_confrontation_demand_break_up_success_effect = yes

		#END OF CONFRONTATION
		if = {
		 	limit = { exists = scope:story } #It is removed after 100 days
			scope:story = {
				set_variable = {
					name = ongoing_confrontation
					value = no
				}
			}
		}
	}
}


# Demand break up branch: Demand is rejected
infidelity_confrontation.1012 = { #by Mathilda Bjarnehed
	type = character_event
	title = infidelity_confrontation.1000.t
		desc = {
		first_valid = {
			# Apologetic
			triggered_desc = {
				trigger = {
					infidelity_confrontation_infidelity_partner_apologetic_trigger = yes
				}
				desc = {
					desc = infidelity_confrontation.1012.apologetic_start.desc
					first_valid = {
						triggered_desc = {
							trigger = { infidelity_confrontation_demand_consequence_break_up_trigger = yes }
							desc = infidelity_confrontation.1012.apologetic_break_up.desc
						}
						#triggered_desc = { Player can never threaten with celibacy
						#	trigger = { infidelity_confrontation_demand_consequence_celibacy_trigger = yes }
						#	desc = infidelity_confrontation.1012.celibacy.desc
						#}
						triggered_desc = {
							trigger = { infidelity_confrontation_demand_consequence_imprisonment_trigger = yes }
							desc = infidelity_confrontation.1012.apologetic_imprisonment.desc
						}
					}
				}
			}
			#Unapologetic
			desc = {
				desc = infidelity_confrontation.1011.unapologetic_start.desc
				first_valid = {
					triggered_desc = {
						trigger = { is_spouse_of = scope:infidelity_partner }
						desc = infidelity_confrontation.1011.unapologetic_marriage.desc
					}
					desc = infidelity_confrontation.1011.unapologetic_love.desc
				}
				first_valid = {
					triggered_desc = {
						trigger = { infidelity_confrontation_demand_consequence_break_up_trigger = yes }
						desc = infidelity_confrontation.1012.unapologetic_break_up.desc
					}
					#triggered_desc = { Player can never threaten with celibacy
					#	trigger = { infidelity_confrontation_demand_consequence_celibacy_trigger = yes }
					#	desc = infidelity_confrontation.1012.celibacy.desc
					#}
					triggered_desc = {
						trigger = { infidelity_confrontation_demand_consequence_imprisonment_trigger = yes }
						desc = infidelity_confrontation.1012.unapologetic_imprisonment.desc
					}
				}
			}
		}
	}
	
	theme = seduction
	left_portrait = {
		character = scope:infidelity_partner
		triggered_animation = {
			trigger = { infidelity_confrontation_infidelity_partner_apologetic_trigger = yes }
			animation = shame
		}
		animation = anger
	}
	right_portrait = scope:infidelity_partners_lover

	#Outcome
	option = {
		name = infidelity_confrontation.1012.a
		infidelity_confrontation_demand_break_up_failure_effect = yes

		#END OF CONFRONTATION
		if = {
		 	limit = { exists = scope:story } #It is removed after 100 days
			scope:story = {
				set_variable = {
					name = ongoing_confrontation
					value = no
				}
			}
		}
	}
}

# Demand break up branch & plead break up branch: break up notification for the infidelity partner's lover
infidelity_confrontation.1013 = { #by Mathilda Bjarnehed
	type = letter_event
	opening = infidelity_confrontation.1013.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					OR = {
						has_relation_soulmate = scope:infidelity_partner
						reverse_opinion = {
							target = scope:infidelity_partner
							value >= high_positive_opinion
						}
					}
				}
				desc = infidelity_confrontation.1013.love.desc
			}
			triggered_desc = {
				trigger = {
					reverse_opinion = {
						target = scope:infidelity_partner
						value >= medium_positive_opinion
					}
				}
				desc = infidelity_confrontation.1013.like.desc
			}
			desc = infidelity_confrontation.1013.neutral.desc
		}
	}

	sender = scope:infidelity_partner
	
	option = {
		name = infidelity_confrontation.1013.a
		
		show_as_tooltip = {
			remove_relation_lover = scope:infidelity_partner
		}
	}
}

# Plead for break up branch: infidelity partner is presented with request
scripted_trigger infidelity_confrontation_1020_confronter_love_trigger = {
	OR = {
		reverse_opinion = {
			target = scope:confronting_partner
			value >= high_positive_opinion
		}
		has_relation_soulmate = scope:confronting_partner
	}
}

infidelity_confrontation.1020 = { #by Mathilda Bjarnehed
	type = character_event
	title = infidelity_confrontation.1000.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					OR = {
						ai_compassion >= 0
						has_relation_soulmate = scope:confronting_partner
						opinion = {
							target = scope:confronting_partner
							value >= high_positive_opinion
						}
					}
				}
				desc = infidelity_confrontation.1001.kind_start.desc
			}
			desc = infidelity_confrontation.1001.unkind_start.desc
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					infidelity_confrontation_1020_confronter_love_trigger = yes
				}
				desc = infidelity_confrontation.1001.love_end.desc
			}
			desc = infidelity_confrontation.1001.regular_end.desc
		}
	}
	theme = seduction
	left_portrait = {
		character = scope:confronting_partner
		triggered_animation = {
			trigger = { infidelity_confrontation_1020_confronter_love_trigger = yes }
			animation = grief
		}
		animation = sadness
	}
	right_portrait = scope:infidelity_partners_lover
	
	trigger = {
		has_relation_lover = scope:infidelity_partners_lover
	}

	on_trigger_fail = {
		#END OF CONFRONTATION
		if = {
		 	limit = { exists = scope:story } #It is removed after 100 days
			scope:story = {
				set_variable = {
					name = ongoing_confrontation
					value = no
				}
			}
		}
	}

	#Agree to break up
	option = {
		name = infidelity_confrontation.1020.a

		show_as_tooltip = {
			infidelity_confrontation_plead_break_up_success_effect = yes
		}
		scope:infidelity_partners_lover = {
			if = {
				limit = { is_ai = no }
				trigger_event = infidelity_confrontation.1013
			}
		}
		scope:confronting_partner = {
			trigger_event = {
				id = infidelity_confrontation.1021
				days = 1 #So this event where the final effects are applied, happens last
			}
		}

		stress_impact = {
			lustful = minor_stress_impact_gain
		}

		ai_chance = {
			base = 60
			opinion_modifier = {
				opinion_target = scope:confronting_partner
				multiplier = 8
			}
			ai_honor_target_modifier = { VALUE = 100 }
			ai_compassion_target_modifier = { VALUE = 100 }
			modifier = {
				has_relation_soulmate = scope:confronting_partner
				add = 200
			}
		}
	}

	
		#Disagree
	option = {
		name = infidelity_confrontation.1020.b

		show_as_tooltip = {
			infidelity_confrontation_plead_break_up_failure_effect = yes
		}
		scope:confronting_partner = {
			trigger_event = infidelity_confrontation.1022
		}

		reverse_add_opinion = {
			target = scope:confronting_partner
			modifier = refused_to_renounce_lover_opinion
		}

		stress_impact = {
			content = minor_stress_impact_gain
		}

		ai_chance = {
			base = 100
			ai_greed_target_modifier = { VALUE = 100 }
			ai_boldness_target_modifier = { VALUE = 50 }
			opinion_modifier = {
				opinion_target = scope:infidelity_partners_lover
				multiplier = 4
			}
			modifier = {
				has_relation_soulmate = scope:infidelity_partners_lover
				add = 200
			}
		}
	}
}

# Plead for breakup branch: request is accepted
scripted_trigger infidelity_1021_infidelity_partner_love_trigger = {
	scope:infidelity_partner = {
		OR = {
			has_relation_soulmate = root
			opinion = {
				target = root
				value >= high_positive_opinion
			}
		}
	}
}

infidelity_confrontation.1021 = { #by Mathilda Bjarnehed
	type = character_event
	title = infidelity_confrontation.1000.t
	desc = {
		first_valid = {
			# Love
			triggered_desc = {
				trigger = {
					infidelity_1021_infidelity_partner_love_trigger = yes
				}
				desc = infidelity_confrontation.1021.love.desc
			}
			#Regular
			desc = infidelity_confrontation.1021.regular.desc
		}
	}
	
	theme = seduction
	left_portrait = {
		character = scope:infidelity_partner
		triggered_animation = {
			trigger = { infidelity_1021_infidelity_partner_love_trigger = yes }
			animation = love
		}
		animation = shame
	}
	right_portrait = scope:infidelity_partners_lover

	#Outcome
	option = {
		name = infidelity_confrontation.1021.a
		infidelity_confrontation_plead_break_up_success_effect = yes

		#END OF CONFRONTATION
		if = {
		 	limit = { exists = scope:story } #It is removed after 100 days
			scope:story = {
				set_variable = {
					name = ongoing_confrontation
					value = no
				}
			}
		}
	}
}


# Plead for breakup branch: request is rejected
infidelity_confrontation.1022 = { #by Mathilda Bjarnehed
	type = character_event
	title = infidelity_confrontation.1000.t
		desc = {
		first_valid = {
			# Apologetic
			triggered_desc = {
				trigger = {
					infidelity_confrontation_infidelity_partner_apologetic_trigger = yes
				}
				desc = {
					desc = infidelity_confrontation.1022.apologetic_start.desc
					desc = infidelity_confrontation.1012.apologetic_break_up.desc
				}
			}
			#Unapologetic
			desc = infidelity_confrontation.1021.unapologetic_start.desc
		}
	}
	
	theme = seduction
	left_portrait = {
		character = scope:infidelity_partner
		triggered_animation = {
			trigger = { infidelity_confrontation_infidelity_partner_apologetic_trigger = yes }
			animation = sadness
		}
		animation = disapproval
	}
	right_portrait = scope:infidelity_partners_lover

	immediate = {
		if = {
			limit = { is_ai = no }
			scope:infidelity_partner = {
				assign_quirk_effect = yes
			}
		}
	}

	#Outcome
	option = {
		name = infidelity_confrontation.1022.a
		infidelity_confrontation_plead_break_up_failure_effect = yes

		#END OF CONFRONTATION
		if = {
		 	limit = { exists = scope:story } #It is removed after 100 days
			scope:story = {
				set_variable = {
					name = ongoing_confrontation
					value = no
				}
			}
		}
	}
}


# Break up branch: infidelity partner is informed about confronting partner's decision to end it
infidelity_confrontation.1030 = { #by Mathilda Bjarnehed
	type = letter_event
	opening = infidelity_confrontation.1030.t
	desc = infidelity_confrontation.1030.desc
	sender = scope:confronting_partner
	
	option = {
		name = infidelity_confrontation.1030.a

		infidelity_confrontation_break_up_effect = yes
		
		#END OF CONFRONTATION
		if = {
		 	limit = { exists = scope:story } #It is removed after 100 days
			scope:story = {
				set_variable = {
					name = ongoing_confrontation
					value = no
				}
			}
		}
	}
}

