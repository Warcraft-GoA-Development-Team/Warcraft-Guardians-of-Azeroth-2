become_undead_effect = {
	become_undead_no_notification_effect = yes
	
	send_being_notifications_effect = yes		# Memory leak 2 GB of OM
}
become_undead_no_notification_effect = {
	add_trait = being_undead
	
	if = {
		limit = { has_trait_with_flag = can_not_get_sick }
		recover_from_all_diseases_event_effect = yes
	} 

	check_pregnancy_effect = yes
	check_available_government_event_effect = yes	 # Memory leak 4 GB of OM

	refresh_corruption_modifiers_all_counties = yes
}
become_undead_no_notification_event_effect = {
	trigger_event = WCBEI.2
}
raise_undead_by_basic_effect = {
	custom_description = {
		text = raise_undead_by_vassal_effect
		object = $MASTER$
		subject = this

		become_undead_effect = yes
		set_character_faith_with_conversion = $MASTER$.faith
	}
	if = {
		limit = {
			NOR = {
				culture = { has_cultural_pillar = heritage_aqir }
				culture = { has_cultural_pillar = heritage_vrykulic }
			}
		}
		set_culture_same_as = $MASTER$
	}

	if = {
		limit = {
			$FROSTMOURNE$ = yes
		}

		if = {
			limit = { $MASTER$ = { can_use_frostmourne_to_twist_soul_trigger = yes } }
			frostmourne_twist_soul_effect = yes
		}

		$MASTER$ = { buff_frostmourne_if_equipped_effect = yes }
	}
}
raise_undead_by_depose_effect = {
	if = {
		limit = {
			is_ruler = yes
			NOT = { faith = $MASTER$.faith }
		}
		depose = yes	# Abdication to join as courtier
		add_trait = disinherited # Since belived to be dead
		$MASTER$ = { add_courtier = prev }
	}
	
	raise_undead_by_basic_effect = { MASTER = $MASTER$ FROSTMOURNE = yes }
	
	add_opinion = { modifier = loyal_undead target = $MASTER$ }
}
raise_undead_by_move_to_pool_effect = {
	if = {
		limit = {
			is_ruler = yes
			NOT = { faith = $MASTER$.faith }
		}
		depose = yes	# Abdication to join as courtier
		add_trait = disinherited # Since belived to be dead
		if = {
			limit = {
				is_imprisoned = no
				NOT = { host.faith = $MASTER$.faith }
			}
			move_to_pool = yes
		}
	}
	
	raise_undead_by_basic_effect = { MASTER = $MASTER$ FROSTMOURNE = yes }
	
	if = {
		limit = { $MASTER$ = { is_alive = yes } }
		add_opinion = { modifier = loyal_undead target = $MASTER$ }
	}
}
raise_undead_by_vassal_effect = {
	if = {
		limit = { any_held_title = { is_holy_order = yes } }
		override_death_killer_effect = { death_reason = death_battle killer = $MASTER$ }
	}
	else = {
		if = {
			limit = { tier_difference = { target = $MASTER$ value < 0 } }
			change_liege = {
				liege = $MASTER$
				change = $CHANGE$
			}
		}
	
		raise_undead_by_basic_effect = { MASTER = $MASTER$ FROSTMOURNE = $FROSTMOURNE$ }
	}
}
raise_undead_by_vassal_no_notification_effect = {
	if = {
		limit = { tier_difference = { target = $MASTER$ value < 0 } }
		change_liege = {
			liege = $MASTER$
			change = $CHANGE$
		}
	}
	
	raise_undead_by_basic_effect = { MASTER = $MASTER$ FROSTMOURNE = yes }
}

become_demon_effect = {
	add_trait = being_demon
	
	if = {
		limit = { has_trait_with_flag = can_not_get_sick }
		recover_from_all_diseases_event_effect = yes
	}
	check_pregnancy_effect = yes
	check_available_government_event_effect = yes	 # May be memory leak

	refresh_corruption_modifiers_all_counties = yes
}
become_being_void_effect = {
	add_trait = being_void
	
	if = {
		limit = { has_trait_with_flag = can_not_get_sick }
		recover_from_all_diseases_event_effect = yes
	}
	check_pregnancy_effect = yes
	check_available_government_event_effect = yes	# May be memory leak

	refresh_corruption_modifiers_all_counties = yes
}
become_being_life_effect = {
	add_trait = being_life
	
	if = {
		limit = { has_trait_with_flag = can_not_get_sick }
		recover_from_all_diseases_event_effect = yes
	}
	check_pregnancy_effect = yes

	refresh_corruption_modifiers_all_counties = yes
}
become_being_order_effect = {
	add_trait = being_order
	
	if = {
		limit = { has_trait_with_flag = can_not_get_sick }
		recover_from_all_diseases_event_effect = yes
	}
	check_pregnancy_effect = yes

	refresh_corruption_modifiers_all_counties = yes
}
become_being_light_effect = {
	add_trait = being_light
	
	if = {
		limit = { has_trait_with_flag = can_not_get_sick }
		recover_from_all_diseases_event_effect = yes
	}
	check_pregnancy_effect = yes

	refresh_corruption_modifiers_all_counties = yes
}

send_being_notifications_effect = {
	trigger_event = WCBEI.1
}

return_to_twisting_nether_effect = {
	custom_description = {
		text = return_to_twisting_nether_tooltip

		trigger_event = {
			on_action = on_demon_death
		}
	}
}
return_from_twisting_nether_effect = {
	custom_description = {
		text = return_from_twisting_nether_tooltip

		trigger_event = { id = WCBEI.110 years = { return_to_twisting_nether_min return_to_twisting_nether_max } }
	}
}

set_being_notified_list_effect = {
	save_scope_as = lost_character

	every_consort = {
		limit = { valid_being_notification_target_trigger = yes }
		add_to_list = being_notified_list
	}
	if = {
		limit = {
			exists = betrothed
			betrothed = { valid_being_notification_target_trigger = yes }
		}
		betrothed = {
			add_to_list = being_notified_list
		}
	}
	every_close_family_member = {
		limit = { valid_being_notification_target_trigger = yes }
		add_to_list = being_notified_list
	}
	every_relation = {
		type = lover
		limit = { valid_being_notification_target_trigger = yes }
		add_to_list = being_notified_list
	}
	every_relation = {
		type = potential_lover
		limit = { valid_being_notification_target_trigger = yes }
		add_to_list = being_notified_list
	}
	every_relation = {
		type = crush
		limit = { valid_being_notification_target_trigger = yes }
		add_to_list = being_notified_list
	}
	every_relation = {
		type = friend
		limit = { valid_being_notification_target_trigger = yes }
		add_to_list = being_notified_list
	}
	every_relation = {
		type = potential_friend
		limit = { valid_being_notification_target_trigger = yes }
		add_to_list = being_notified_list
	}
	every_relation = {
		type = guardian
		limit = { valid_being_notification_target_trigger = yes }
		add_to_list = being_notified_list
	}
	every_relation = {
		type = ward
		limit = { valid_being_notification_target_trigger = yes }
		add_to_list = being_notified_list
	}
	
	every_relation = {
		type = best_friend
		limit = { valid_being_notification_target_trigger = yes }
		add_to_list = being_notified_list
	}
	every_relation = {
		type = soulmate
		limit = { valid_being_notification_target_trigger = yes }
		add_to_list = being_notified_list
	}
}
being_notification_denial_stress_effect = {
	stress_impact = {
		base = {
			value = scope:deceased_character_stress
			if = {
				limit = { has_trait = compassionate }
				multiply = 0.5
			}
			if = {
				limit = { has_trait = cynical }
				multiply = 0.5
			}
		}
		zealous = major_stress_impact_gain
	}
}