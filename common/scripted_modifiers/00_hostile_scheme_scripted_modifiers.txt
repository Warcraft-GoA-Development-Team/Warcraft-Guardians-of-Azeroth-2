
hostile_scheme_base_chance_modifier = {
	first_valid = {
		modifier = {
			add = -30
			exists = scope:target.primary_title
			scope:target.primary_title.tier = tier_empire
			desc = "SCHEME_TARGET_IS_AN_EMPEROR"
		}
		modifier = {
			add = -20
			exists = scope:target.primary_title
			scope:target.primary_title.tier = tier_kingdom
			desc = "SCHEME_TARGET_IS_A_KING"
		}
	}
	
	modifier = { # Minor Lifestyle Perk protection for Courtiers
		add = {
			value = 0
			subtract = prepared_for_anything_perk_secondary_percentage
		}
		scope:target = {
			is_alive = yes
			is_ruler = no
			exists = court_owner
			court_owner = {
				has_perk = prepared_for_anything_perk
			}
			NOT = { court_owner = scope:owner }
			NOT = { has_perk = prepared_for_anything_perk }
		}
		desc = "SCHEME_PREPARED_FOR_ANYTHING_LIEGE_PERK_MODIFIER"
	}
	
	modifier = { # Bonus for murdering Pool characters, as you can't have agents against them
		add = 25
		scope:target = {
			is_pool_character = yes
			NOT = { intrigue >= very_high_skill_rating }
		}
		desc = "SCHEME_TARGET_TRAVELLING_UNSAFE_ROADS"
	}
	
	modifier = { # ...unless they're sneaky as all heck
		add = -10
		scope:target = {
			is_pool_character = yes
			intrigue >= very_high_skill_rating
		}
		desc = "SCHEME_TARGET_TRAVELLING_INCOGNITO"
	}
	
	first_valid = { # Essentially the Base
		modifier = {
			add = 75
			scope:owner = {
				exists = scope:target.cp:councillor_spymaster
				scope:target.cp:councillor_spymaster = this
			}
			desc = "SCHEME_I_AM_SPYMASTER"
		}
		modifier = {
			add = 75
			scope:target = {
				is_landed = no
			}
			scope:owner = {
				exists = scope:target.liege.cp:councillor_spymaster
				scope:target.liege.cp:councillor_spymaster = this
			}
			desc = "SCHEME_I_AM_SPYMASTER_OF_LIEGE"
		}
		modifier = {
			add = 75
			scope:target = {
				is_landed = no
			}
			scope:owner = {
				exists = scope:target.host.cp:councillor_spymaster
				scope:target.host.cp:councillor_spymaster = this
			}
			desc = "SCHEME_I_AM_SPYMASTER_OF_HOST"
		}
		modifier = {
			add = 75
			scope:owner = {
				has_relation_guardian = scope:target
			}
			desc = "SCHEME_I_AM_GUARDIAN"
		}
		modifier = {
			add = 25
			scope:target = {
				is_ruler = no
			}
			exists = scope:target.liege
			scope:target.liege = scope:owner
			desc = "SCHEME_TARGET_IN_MY_COURT"
		}
		modifier = {
			add = 15
			scope:owner = {
				is_councillor_of = scope:target
			}
			desc = "SCHEME_I_AM_COUNCILLOR"
		}
		modifier = {
			add = 15
			scope:owner = {
				has_relation_lover = scope:target
			}
			desc = "SCHEME_TARGET_IS_LOVER"
		}
		modifier = {
			add = 10
			scope:owner = {
				is_spouse_of = scope:target
			}
			desc = "SCHEME_TARGET_IS_SPOUSE"
		}
		modifier = {
			add = 5
			scope:owner = {
				is_close_family_of = scope:target
			}
			desc = "SCHEME_TARGET_IS_CLOSE_FAMILY"
		}
	}

	#Characters who has the disloyal trait are predisposed to scheme
	modifier = {
		add = 10
		scope:owner = {
			has_trait = disloyal
		}
		desc = "HAS_DISLOYAL_TRAIT"
	}
	modifier = {
		add = -10
		scope:owner = {
			has_trait = loyal
		}
		desc = "HAS_LOYAL_TRAIT"
	}
	
	modifier = { # Vengeful Bonus
		add = vengeful_scheme_success_chance_modifier
		scope:owner = {
			has_trait = vengeful
			OR = {
				has_relation_rival = scope:target	
				has_relation_nemesis = scope:target
			}
		}
		desc = "SCHEME_VENGEFUL_RIVAL"
	}
	
	modifier = { # Culture Bonus
		add = 15
		scope:owner = {
			culture = {
				has_cultural_parameter = hostile_action_vs_rival_bonuses
			}
			OR = {
				has_relation_rival = scope:target	
				has_relation_nemesis = scope:target
			}
		}
		desc = "SCHEME_EYE_FOR_AN_EYE"
	}
	
	modifier = { # Culture Bonus
		add = -50
		scope:owner = {
			culture = {
				has_cultural_parameter = hostile_scheme_success_chance_vs_spouse_penalty
			}
			is_spouse_of = scope:target	
		}
		desc = "SCHEME_WEDDING_CEREMONIES"
	}
	
	modifier = {
		add = -75
		always = scope:exposed
		desc = "SCHEME_IS_EXPOSED"
	}
	
	# Difficulty
	modifier = {
		add = -25
		has_game_rule = easy_difficulty
		scope:owner = {
			is_ai = yes
		}
		scope:target = {
			is_ai = no
		}
		desc = "SCHEME_SUCCESS_DIFFICULTY_EASY"
	}
	
	modifier = {
		add = -75
		has_game_rule = very_easy_difficulty
		scope:owner = {
			is_ai = yes
		}
		scope:target = {
			is_ai = no
		}
		desc = "SCHEME_SUCCESS_DIFFICULTY_VERY_EASY"
	}

	# Struggle
	#modifier = {
	#	add = -25
	#	scope:owner = {
	#		any_character_struggle = {
	#			involvement = involved
	#			is_struggle_type = iberian_struggle
	#			has_struggle_phase_parameter = struggle_agents_less_likely_to_join_schemes
	#			is_secondary_character_involvement_involved_trigger = {
	#				CHAR = scope:target
	#			}
	#		}
	#	}
	#}
}

hostile_scheme_agent_base_join_chance_modifier = {
	#Target will never scheme against themselves
	modifier = {
		add = -1000
		this = scope:target
		desc = "SCHEME_NOT_AGAINST_SELF"
	}

	#How much does Agent dislike the Target?
	opinion_modifier = {
		trigger = {
			NOT = { this = scope:target }
		}
		who = this
		opinion_target = scope:target
		multiplier = -0.5
		step = 5
	}
	
	#How much does Agent like Owner?
	opinion_modifier = {
		trigger = {
			NOT = { this = scope:owner }
		}
		who = this
		opinion_target = scope:owner
		multiplier = 0.25
		step = 5
	}

	# Intimidated
	modifier = {
		trigger = {
			has_dread_level_towards = {
				target = scope:target
				level = 1
			}
		}
		add = -100
		desc = SCHEME_I_AM_INTIMIDATED
	}
	# Cowed
	modifier = {
		trigger = {
			has_dread_level_towards = {
				target = scope:target
				level = 2
			}
		}
		add = -1000
		desc = SCHEME_I_AM_COWED
	}

	#Rivals are more keen on seeing their enemy hurt
	modifier = {
		add = 10
		has_relation_rival = scope:target
		desc = "SCHEME_AGAINST_RIVAL"
	}

	#Friends don't want to kill friends
	modifier = {
		add = -20
		has_relation_friend = scope:target
		desc = "SCHEME_AGAINST_FRIEND"
	}

	#A Spouse that likes their spouse does not want them hurt
	modifier = {
		add = -10
		is_consort_of = scope:target
		opinion = {
			target = scope:target
			value > 0
		}
		desc = "SCHEME_AGAINST_SPOUSE"
	}

	#Characters whose Faith has 'Sacred Lies' are inherently predisposed to joining schemes
	modifier = {
		add = 20
		faith = {
			has_doctrine_parameter = adherents_more_likely_to_join_schemes
		}
		desc = "SCHEME_IS_SACRED"
	}

	#Characters who has the disloyal trait are predisposed to join schemes
	modifier = {
		add = 20
		has_trait = disloyal
		desc = "HAS_DISLOYAL_TRAIT"
	}
	modifier = {
		add = -10
		has_trait = loyal
		desc = "HAS_LOYAL_TRAIT"
	}

	## Bonus gained through events
	modifier = {
		add = 20
		scope:owner = {
			has_character_modifier = event_bonus_to_agent_invite
		}
		desc = BONUS_TO_AGENT_RECRUITMENT
	}

	## Bonus from Amenities
	modifier = {
		add = 5
		is_pool_guest_of = scope:owner
		scope:owner = {
			has_royal_court = yes
			court_owner = {
				amenity_level = { type = court_lodging_standards value = medium_amenity_level }
			}
		}
		desc = BONUS_TO_AGENT_RECRUITMENT_FROM_AMENITIES
	}

	modifier = {
		add = 10
		is_pool_guest_of = scope:owner
		scope:owner = {
			has_royal_court = yes
			court_owner = {
				amenity_level = { type = court_lodging_standards value = high_amenity_level }
			}
		}
		desc = BONUS_TO_AGENT_RECRUITMENT_FROM_AMENITIES
	}

	modifier = {
		add = 15
		is_pool_guest_of = scope:owner
		scope:owner = {
			has_royal_court = yes
			court_owner = {
				amenity_level = { type = court_lodging_standards value = very_high_amenity_level }
			}
		}
		desc = BONUS_TO_AGENT_RECRUITMENT_FROM_AMENITIES
	}

	modifier = {
		add = 20
		is_pool_guest_of = scope:owner
		scope:owner = {
			has_royal_court = yes
			court_owner = {
				amenity_level = { type = court_lodging_standards value = max_amenity_level }
			}
		}
		desc = BONUS_TO_AGENT_RECRUITMENT_FROM_AMENITIES
	}

	# Difficulty
	modifier = {
		add = -10
		is_ai = yes
		scope:target = {
			is_ai = no
		}
		has_game_rule = easy_difficulty
		desc = "easy_difficulty"
	}
	modifier = {
		add = -20
		is_ai = yes
		scope:target = {
			is_ai = no
		}
		has_game_rule = very_easy_difficulty
		desc = "very_easy_difficulty"
	}

	# Warcraft
	scourge_interaction_owner_modifiers = yes
}


hostile_murder_agent_base_join_chance_modifier = {
	#Target will never scheme against themselves
	modifier = {
		add = -1000
		this = scope:target
		desc = SCHEME_NOT_AGAINST_SELF
	}
	
	#Target is not diplomatically available
	modifier = {
		add = -1000
		is_busy_in_events_localised = no
		desc = SCHEME_NOT_DIPLOMATICALLY_AVAILABLE
	}

	# Agents dont want to murder their descendants
	modifier = {
		add = -100
		OR = {
			is_great_grandparent_of = scope:target
			is_grandparent_of = scope:target
			is_parent_of = scope:target
		}
		desc = SCHEME_NOT_AGAINST_DESCENDANTS
	}

	# Weak hook used
	modifier = {
		exists = scope:hook
		scope:hook = yes
		add = 100
		desc = SCHEME_WEAK_HOOK_USED
	}
	
	# Skulduggery Focus
	modifier = {
		scope:owner = {
			has_focus = intrigue_skulduggery_focus
		}
		add = 10
		desc = SCHEME_SKULDUGGERY_FOCUS
	}
	
	# Duty Focus
	modifier = {
		scope:target = {
			has_focus = stewardship_duty_focus
		}
		add = -5
		desc = SCHEME_DUTY_FOCUS
	}
	
	# Vengeance ai modifier + crimes/slights against me
	modifier = {
		trigger = {
			ai_vengefulness > 0
			NOT = { this = scope:target }
			OR = {
				has_opinion_modifier = {
					modifier = murdered_close_family_crime
					target = scope:target
				}
				has_opinion_modifier = {
					modifier = attempted_murder_close_family_crime
					target = scope:target
				}
				has_opinion_modifier = {
					modifier = executed_close_family
					target = scope:target
				}
				has_opinion_modifier = {
					modifier = slept_with_spouse_discovered_opinion
					target = scope:target
				}
				has_opinion_modifier = {
					modifier = slept_with_spouse_exposed_opinion
					target = scope:target
				}
				has_opinion_modifier = {
					modifier = unfaithful_spouse_discovered_opinion
					target = scope:target
				}
				has_opinion_modifier = {
					modifier = unfaithful_spouse_exposed_opinion
					target = scope:target
				}
				has_opinion_modifier = {
					modifier = refused_to_renounce_lover_opinion
					target = scope:target
				}
				has_opinion_modifier = {
					modifier = betrayed_our_promise
					target = scope:target
				}
				has_opinion_modifier = {
					modifier = botched_my_treatment_crime_opinion
					target = scope:target
				}
				has_opinion_modifier = {
					modifier = botched_treatment_of_kin_crime_opinion
					target = scope:target
				}
				has_opinion_modifier = {
					modifier = smeared_opinion
					target = scope:target
				}
				has_opinion_modifier = {
					modifier = insulted_opinion
					target = scope:target
				}
				has_opinion_modifier = {
					modifier = mocked_me_in_time_of_need
					target = scope:target
				}
				has_opinion_modifier = {
					modifier = loved_one_dungeon_death
					target = scope:target
				}
				has_opinion_modifier = {
					modifier = abandoned_me_opinion
					target = scope:target
				}
				has_opinion_modifier = {
					modifier = reason_child_died
					target = scope:target
				}
				has_opinion_modifier = {
					modifier = falsely_accused
					target = scope:target
				}
			}
			opinion = {
				target = scope:target
				value <= 0
			}
		}
		add = {
			value = ai_vengefulness
			multiply = 2
		}
		desc = SCHEME_I_MUST_TAKE_VENGEANCE
	}
	
	# Claimant on the same title/s (AI Greed)
	modifier = {
		trigger = {
			is_ruler = yes
			ai_greed > 0
			any_held_title = {
				scope:target = {
					has_claim_on = prev
				}
			}
			NOR = {
				is_great_grandparent_of = scope:target
				is_grandparent_of = scope:target
				is_parent_of = scope:target
			}
			opinion = {
				target = scope:target
				value <= low_negative_opinion
			}
		}
		add = {
			value = ai_greed
			divide = 2
		}
		desc = SCHEME_GET_RID_OF_UNRULY_CLAIMANT
	}
	
	# Do I, as an agent, stand to gain a title? Really high in the succession (AI Greed)
	modifier = {
		trigger = {
			ai_greed > 0
			scope:target = {
				any_held_title = {
					place_in_line_of_succession = {
						target = root
						value <= 3
					}
				}
			}
		}
		add = {
			value = ai_greed
			divide = 2
		}
		desc = SCHEME_MOVES_ME_UP_THE_SUCCESSION
	}
	
	# Do I, as an agent, stand to gain a title? Low in the succession (AI Greed)
	modifier = {
		trigger = {
			ai_greed > 0
			scope:target = {
				any_held_title = {
					place_in_line_of_succession = {
						target = root
						value <= 10
					}
					place_in_line_of_succession = {
						target = root
						value > 3
					}
				}
				NOT = {
					any_held_title = {
						place_in_line_of_succession = {
							target = root
							value <= 3
						}
					}
				}
			}
		}
		add = {
			value = ai_greed
			divide = 4
		}
		desc = SCHEME_MOVES_ME_UP_THE_SUCCESSION
	}
	
	# I do not stand to gain anything
	modifier = {
		trigger = {
			NAND = { # Greedy agents find that Gold is, indeed, something they stand to gain!
				exists = scope:gift
				always = scope:gift
				ai_greed > 0
			}
			NOR = {
				scope:target = {
					is_ruler = yes
					any_held_title = {
						place_in_line_of_succession = {
							target = root
							value <=10
						}
					}
				}
				opinion = {
					target = scope:target
					value <= medium_negative_opinion
				}
			}
			NAND = {
				exists = house.house_head
				exists = scope:target.house
				house.house_head = {
					any_owned_story = {
						story_type = story_cycle_house_feud
						exists = var:house_feud_house
						var:house_feud_house = scope:target.house
					}
				}
			}
		}
		add = {
			value = -10
			if = {
				limit = {
					ai_greed > 0
				}
				subtract = {
					value = ai_greed
					multiply = 0.25
				}
			}
		}
		desc = SCHEME_NOTHING_TO_GAIN
	}
	
	# Cowardice
	modifier = {
		trigger = {
			ai_boldness < 0
		}
		add = {
			value = ai_boldness
		}
		desc = SCHEME_I_AM_A_COWARD
	}
	
	# Intimidated
	modifier = {
		trigger = {
			has_dread_level_towards = {
				target = scope:target
				level = 1
			}
		}
		add = -100
		desc = SCHEME_I_AM_INTIMIDATED
	}
	# Cowed
	modifier = {
		trigger = {
			has_dread_level_towards = {
				target = scope:target
				level = 2
			}
		}
		add = -1000
		desc = SCHEME_I_AM_COWED
	}
	
	# General Compassion
	modifier = {
		trigger = {
			ai_compassion > 0
			NOT = { this = scope:target }
		}
		add = {
			value = ai_compassion
			multiply = -1
			divide = 2.5
		}
		desc = COMPASSIONATE_REASON
	}
	
	modifier = { # Characters with a sadistic streak are more likely to join
		trigger = {
			ai_compassion < high_negative_ai_value
			NOT = { this = scope:target }
		}
		add = {
			value = ai_compassion
			multiply = -1
			divide = 10
		}
		desc = COMPASSIONATE_NEGATIVE_REASON
	}
	
	# Compassionate characters don't want to murder children
	modifier = {
		trigger = {
			ai_compassion > 0
			scope:target = {
				is_adult = no
			}
		}
		add = {
			value = ai_compassion
			multiply = -1
		}
		desc = SCHEME_COMPASSIONATE_NOT_MURDER_CHILDREN
	}
	
	# Zeal vs other Faiths
	modifier = {
		trigger = {
			ai_zeal > 10
			NOT = {
				faith = {
					faith_hostility_level = {
						target = scope:target.faith
						value = faith_fully_accepted_level
					}
				}
			}
		}
		add = {
			value = ai_zeal
			if = {
				limit = {
					faith = {
						faith_hostility_level = {
							target = scope:target.faith
							value = faith_astray_level
						}
					}
				}
				multiply = 0.25
			}
			else = {
				multiply = 0.5
			}
		}
		desc = SCHEME_ZEALOUS_AGAINST_HEATHEN
	}
	
	# How much does the Agent like the Target? Modified by AI honor
	# Positive honor multiplier: Ranges -1 to -5
	# Negative honor multiplier: Ranges -1 to -0.2
	# Then multiplied by 1.5
	opinion_modifier = {
		trigger = {
			NOT = { this = scope:target }
			opinion = {
				target = scope:target
				value >= low_positive_opinion
			}
		}
		who = this
		opinion_target = scope:target
		multiplier = {
			value = -1
			if = {
				limit = { this.ai_honor >= 0 }
				subtract = {
					value = this.ai_honor
					multiply = 0.025
				}
			}
			else = {
				subtract = {
					value = this.ai_honor
					multiply = 0.008
				}
			}
			multiply = 1.5
		}
		desc = SCHEME_I_LIKE_TARGET
	}
	
	# How much does the Agent dislike the Target? Modified by AI honor
	opinion_modifier = {
		trigger = {
			NOT = { this = scope:target }
			opinion = {
				target = scope:target
				value <= low_negative_opinion
			}
		}
		who = this
		opinion_target = scope:target
		multiplier = {
			value = -0.5
			if = {
				limit = { ai_honor <= 0 }
				add = {
					value = ai_honor
					multiply = 0.00625 # Used to be 0.025
				}
			}
			else = {
				add = {
					value = ai_honor
					multiply = 0.005 # Used to be 0.008
				}
			}
		}
		desc = SCHEME_I_DISLIKE_TARGET
	}
	
	#How much does Agent like Owner?
	opinion_modifier = {
		trigger = {
			NOT = { this = scope:owner }
		}
		who = this
		opinion_target = scope:owner
		multiplier = 0.25
		#step = 5
		desc = SCHEME_MY_OPINION_OF_YOU
	}

	#Rivals are more keen on seeing their enemy dead
	modifier = {
		add = 10
		has_relation_rival = scope:target
		desc = SCHEME_AGAINST_RIVAL
	}

	# Nemesis should be even more inclined
	modifier = {
		add = 1000
		has_relation_nemesis = scope:target
		desc = SCHEME_AGAINST_RIVAL
	}

	#Friends don't want to kill friends
	modifier = {
		add = -20
		has_relation_friend = scope:target
		desc = SCHEME_AGAINST_FRIEND
	}

	# Best Friend should be even less inclined
	modifier = {
		add = -2000
		has_relation_best_friend = scope:target
		desc = SCHEME_AGAINST_FRIEND
	}

	#A Spouse that likes their spouse does not want them dead
	modifier = {
		add = -10
		trigger = {
			ai_compassion >= 0
			is_consort_of = scope:target
		}
		opinion = {
			target = scope:target
			value > low_positive_opinion
		}
		desc = SCHEME_AGAINST_SPOUSE
	}
	
	# A spiteful spouse will want to murder you
	modifier = {
		add = 10
		trigger = {
			ai_compassion < 0
			is_consort_of = scope:target
		}
		opinion = {
			target = scope:target
			value < low_negative_opinion
		}
		desc = SCHEME_AGAINST_SPOUSE_POSITIVE
	}

	#Characters whose Faith has 'Sacred Lies' are inherently predisposed to joining schemes
	modifier = {
		add = 20
		faith = {
			has_doctrine_parameter = adherents_more_likely_to_join_schemes
		}
		desc = SCHEME_IS_SACRED
	}

	# Reduced chance for Lovers from the Mortal Adoration Perk
	modifier = {
		add = -25
		scope:target = { has_perk = mortal_adoration_perk }
		has_relation_lover = scope:target
		desc = MORTAL_ADORATION_REDUCED_HOSTILE_SCHEME_JOIN_CHANCE
	}
	
	# Reduced chance for Cowed and Intimidated characters to join
	modifier = {
		add = intimidated_scheme_reason_value
		target_is_liege_or_above = scope:owner
		has_dread_level_towards = {
			target = scope:owner
			level = 1
		}
		desc = INTIMIDATED_REASON
	}
	modifier = {
		add = cowed_scheme_reason_value
		target_is_liege_or_above = scope:owner
		has_dread_level_towards = {
			target = scope:owner
			level = 2
		}
		desc = COWED_REASON
	}
	
	modifier = {
		add = intimidated_scheme_external_reason_value
		NOT = { target_is_liege_or_above = scope:owner }
		has_dread_level_towards = {
			target = scope:owner
			level = 1
		}
		desc = INTIMIDATED_REASON
	}
	modifier = {
		add = cowed_scheme_external_reason_value
		NOT = { target_is_liege_or_above = scope:owner }
		has_dread_level_towards = {
			target = scope:owner
			level = 2
		}
		desc = COWED_REASON
	}
	
	# Courtiers and Guests are less likely to join schemes against targets with the Esteemed Hospitality tradition
	modifier = {
		add = -25
		scope:target = {
			culture = { has_cultural_parameter = courtiers_and_guests_less_likely_to_join_schemes }
		}
		OR = {
			is_courtier_of = scope:target
			is_pool_guest_of = scope:target
			is_foreign_court_guest_of = scope:target
		}
		desc = RESPECTED_HOST
	}
	
	# Intrigue Court bonus for being at Grandeur Level 7 or higher
	modifier = {
		add = 20
		scope:owner = {
			has_royal_court = yes
			has_court_type = court_intrigue
			court_grandeur_current_level >= 7
		}
		desc = INTRIGUE_COURT_AGENT_ACCEPTANCE_REASON
	}

	## Bonus gained through events
	modifier = {
		add = 20
		scope:owner = {
			has_character_modifier = event_bonus_to_agent_invite
		}
		desc = BONUS_TO_AGENT_RECRUITMENT
	}

	## Bonus from Amenities
	modifier = {
		add = 5
		is_pool_guest_of = scope:owner
		scope:owner = {
			has_royal_court = yes
			court_owner = {
				amenity_level = { type = court_lodging_standards value = medium_amenity_level }
			}
		}
		desc = BONUS_TO_AGENT_RECRUITMENT_FROM_AMENITIES
	}

	modifier = {
		add = 10
		is_pool_guest_of = scope:owner
		scope:owner = {
			has_royal_court = yes
			court_owner = {
				amenity_level = { type = court_lodging_standards value = high_amenity_level }
			}
		}
		desc = BONUS_TO_AGENT_RECRUITMENT_FROM_AMENITIES
	}

	modifier = {
		add = 15
		is_pool_guest_of = scope:owner
		scope:owner = {
			has_royal_court = yes
			court_owner = {
				amenity_level = { type = court_lodging_standards value = very_high_amenity_level }
			}
		}
		desc = BONUS_TO_AGENT_RECRUITMENT_FROM_AMENITIES
	}

	modifier = {
		add = 20
		is_pool_guest_of = scope:owner
		scope:owner = {
			has_royal_court = yes
			court_owner = {
				amenity_level = { type = court_lodging_standards value = max_amenity_level }
			}
		}
		desc = BONUS_TO_AGENT_RECRUITMENT_FROM_AMENITIES
	}


	# Difficulty
	modifier = {
		add = -10
		is_ai = yes
		scope:target = {
			is_ai = no
		}
		has_game_rule = easy_difficulty
		desc = "easy_difficulty"
	}
	modifier = {
		add = -20
		is_ai = yes
		scope:target = {
			is_ai = no
		}
		has_game_rule = very_easy_difficulty
		desc = "very_easy_difficulty"
	}

	# Warcraft
	modifier = {
		add = -1000
		desc = RECIPIENT_SCOURGE_JAILOR_REASON
		has_relation_scourge_damned = scope:owner
	}
	scourge_interaction_owner_modifiers = yes
	# Feud
	modifier = {
		trigger = {
			exists = house.house_head
			exists = scope:target.house
			house.house_head = {
				any_owned_story = {
					story_type = story_cycle_house_feud
					exists = var:house_feud_house
					var:house_feud_house = scope:target.house
				}
			}
		}
		add = {
			value = 50
		}
		desc = SCHEME_TARGET_IS_FEUD_TARGET
	}
}

hostile_scheme_agent_success_chance_modifier = {
	first_valid = {
		modifier = {
			add = 75
			scope:target = {
				is_ruler = yes
			}
			has_council_position = councillor_spymaster
			scope:target.cp:councillor_spymaster = this
			desc = "SCHEME_AGENT_IS_SPYMASTER_IN_MY_COURT"
		}
		modifier = {
			add = 75
			scope:target = {
				is_ruler = no
			}
			has_council_position = councillor_spymaster
			exists = scope:target.liege.cp:councillor_spymaster
			scope:target.liege.cp:councillor_spymaster = this
			desc = "SCHEME_AGENT_IS_SPYMASTER"
		}
		modifier = {
			add = 50
			is_spouse_of = scope:target
			desc = "SCHEME_AGENT_IS_SPOUSE"
		}
		modifier = {
			add = 50
			has_relation_best_friend = scope:target
			desc = "SCHEME_AGENT_IS_BEST_FRIEND"
		}
		modifier = {
			add = 50
			has_relation_ward = scope:target
			desc = "SCHEME_AGENT_IS_GUARDIAN"
		}
		modifier = {
			add = 30
			has_relation_friend = scope:target
			desc = "SCHEME_AGENT_IS_FRIEND"
		}
		modifier = {
			add = 30
			is_concubine_of = scope:target
			desc = "SCHEME_AGENT_IS_CONCUBINE"
		}
		modifier = {
			add = 30
			has_relation_lover = scope:target
			desc = "SCHEME_AGENT_IS_LOVER"
		}
		modifier = {
			add = 30
			has_court_position = court_physician_court_position
			is_court_position_employer = {
		        court_position = court_physician_court_position
				who = scope:target
		    }
			desc = "SCHEME_AGENT_IS_COURT_PHYSICIAN"
		}
		modifier = {
			add = 30
			has_court_position = food_taster_court_position
			is_court_position_employer = {
		        court_position = food_taster_court_position
				who = scope:target
		    }
			desc = "SCHEME_AGENT_IS_FOOD_TASTER"
		}
		modifier = {
			add = 30
			has_court_position = cupbearer_court_position
			is_court_position_employer = {
		        court_position = cupbearer_court_position
				who = scope:target
		    }
			desc = "SCHEME_AGENT_IS_CUP_BEARER"
		}
		modifier = {
			add = 30
			has_court_position = chief_eunuch_court_position
			is_court_position_employer = {
		        court_position = chief_eunuch_court_position
				who = scope:target
		    }
			desc = "SCHEME_AGENT_IS_CHIEF_EUNUCH"
		}
		modifier = {
			add = 30
			has_court_position = bodyguard_court_position
			is_court_position_employer = {
		        court_position = bodyguard_court_position
				who = scope:target
		    }
			desc = "SCHEME_AGENT_IS_BODYGUARD"
		}
		modifier = {
			add = 15
			has_court_position = lady_in_waiting_court_position
			is_court_position_employer = {
		        court_position = lady_in_waiting_court_position
				who = scope:target
		    }
			desc = "SCHEME_AGENT_IS_LADY_IN_WAITING"
		}
		modifier = {
			add = 25
			is_councillor_of = scope:target
			NOT = { has_council_position = councillor_spymaster }
			desc = "SCHEME_AGENT_IS_COUNCILLOR"
		}
		modifier = {
			add = 20
			is_close_family_of = scope:target
			desc = "SCHEME_AGENT_IS_CLOSE_KIN"
		}
		modifier = {
			add = 15
			is_powerful_vassal_of = scope:target
			desc = "SCHEME_AGENT_IS_POWERFUL_VASSAL"
		}
		modifier = {
			add = 15
			is_extended_family_of = scope:target
			desc = "SCHEME_AGENT_IS_EXTENDED_FAMILY"
		}
		modifier = {
			add = 10
			scope:target = {
				is_ruler = yes
			}
			is_ruler = yes
			desc = "SCHEME_AGENT_IS_VASSAL"
		}
		modifier = {
			add = 10
			scope:target = {
				is_ruler = no
			}
			is_ruler = yes
			desc = "SCHEME_AGENT_IS_VASSAL_OF_LIEGE"
		}
		modifier = {
			add = 10
			exists = liege
			exists = scope:target.liege
			scope:target.liege = scope:owner
			liege = scope:owner
			desc = "SCHEME_AGENT_IS_COURTIER_MY_COURT"
		}
		modifier = {
			add = 10
			is_courtier_of = scope:target
			desc = "SCHEME_AGENT_IS_COURTIER"
		}
		modifier = {
			add = 10
			is_foreign_court_or_pool_guest_of = scope:target
			desc =  "SCHEME_AGENT_IS_GUEST"
		}

		modifier = {
			add = 5 #FALLBACK
			desc = "SCHEME_AGENT_IS_FELLOW_COURTIER"
		}
	}
	first_valid = {	
		modifier = {
			add = 15
			has_relation_nemesis = scope:target
			desc = "SCHEME_AGENT_IS_NEMESIS"
		}
		modifier = {
			add = 10
			has_relation_rival = scope:target
			desc = "SCHEME_AGENT_IS_RIVAL"
		}
	}
	modifier = {
		add = intrigue
		desc =  "SCHEME_AGENT_INTRIGUE"
	}
}

start_hostile_scheme_ai_base_modifiers = {
	modifier = { # An Intimidated character is very unlikely to raise their hand
		add = -40
		scope:actor = {
			has_dread_level_towards = {
				target = scope:recipient
				level = 1
			}
		}
	}

	modifier = { # A Cowed character will never start a hostile scheme
		factor = 0
		scope:actor = {
			has_dread_level_towards = {
				target = scope:recipient
				level = 2
			}
		}
	}
}
