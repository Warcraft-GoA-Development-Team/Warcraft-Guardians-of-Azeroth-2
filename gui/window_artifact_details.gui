window = {
	name = "artifact_details_view"
	size = { 1000 60% }
	layer = middle

	position = { 500 200 }

	using = Window_Movable
	using = Window_Background
	using = Window_Decoration_Spike

	datacontext = "[GetVariableSystem]"
	datacontext = "[ArtifactDetailsView.GetArtifact]"

	state = {
		name = _show
		using = Animation_FadeIn_Standard
		on_start = "[GetVariableSystem.Set( 'details_right_side_tab', 'claims' )]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Standard
	}

	vbox = {
		using = Window_Margins

		header_pattern = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text"
			{
				text = "ARTIFACT_DETAILS_TITLE"
			}

			blockoverride "button_close"
			{
				onclick = "[ArtifactDetailsView.Close]"
			}
		}

		hbox = {
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			# left vbox is the artifact details
			vbox = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding
				minimumsize = { 400 -1 }

				hbox = {
					layoutpolicy_horizontal = expanding

					background = {
						using = Background_Area

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
							blend_mode = alphamultiply
						}
					}

					vbox = {
						layoutpolicy_vertical = expanding

						button_artifact = {
							size = { 160 160 }
						}

						expand = {}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						margin_top = 13

						hbox = {
							layoutpolicy_horizontal = expanding

							text_single = {
								text = "[Artifact.GetRarityAndType]"
								max_width = 250
								using = Font_Size_Small
							}

							expand = {}
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							text_multi = {
								text = "[Artifact.GetNameNoTooltip]"
								max_width = 250
								autoresize = yes
								using = Font_Size_Medium
								default_format = "#high"
							}

							expand = {}

							vbox = {
								layoutpolicy_vertical = expanding
								layoutpolicy_horizontal = expanding

								hbox = {
									layoutpolicy_horizontal = expanding
									margin_right = 10

									expand = {}

									button_edit_text = {
										visible = "[Artifact.GetOwner.IsLocalPlayer]"
										onclick = "[Artifact.OpenRenameWindow]"
										tooltip = "RENAME_ARTIFACT"
										size = { 25 25 }
									}

									button_kill_list = {
										visible = "[DataModelHasItems( Artifact.GetKills )]"
										onclick = "[ToggleGameViewData( 'artifact_kill_list', Artifact.GetID  )]"
										tooltip = "OPEN_ARTIFACT_KILL_LIST_TOOLTIP"
										size = { 25 25 }
									}
								}

								expand = {}
							}

							expand = {}
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							hbox_artifact_durability = {
								visible = "[Artifact.GetOwner.IsLocalPlayer]"
								margin_top = 5
							}

							expand = {}
						}

						hbox = {
							visible = "[Artifact.GetOwner.IsLocalPlayer]"
							layoutpolicy_horizontal = expanding
							margin_top = 5

							hbox = {
								spacing = 5

								button_round = {
									name = "reforge"
									size = { 30 30 }

									button_icon_highlight = {
										parentanchor = center
										size = { 20 20 }
										texture = "gfx/interface/icons/flat_icons/reforge.dds"
									}

									onclick = "[ToggleGameViewData( 'reforge_artifact', Artifact.GetID )]"
									tooltip = "[Artifact.GetReforgeOrRepairTooltip( Artifact.GetOwner.Self )]"
									enabled = "[Artifact.CanReforgeOrRepair( Artifact.GetOwner.Self )]"

									icon = {
										name = "selection_glow"
										visible = "[Artifact.IsDurabilityLow]"
										parentanchor = center
										size = { 45 45 }

										state = {
											trigger_on_create = yes

											name = max_glow
											next = min_glow
											duration = 1
											using = Animation_Curve_Default
											alpha = 0.5
										}

										state = {
											name = min_glow
											next = max_glow
											duration = 1.6
											using = Animation_Curve_Default
											alpha = 0.3
										}

										background = {
											texture = "gfx/interface/component_masks/mask_fade_circle.dds"
											tintcolor = { 1 0.8 0.6 1 }
										}
									}
								}

								text_single = {
									text = "REFORGE_OR_REPAIR"
									max_width = 200
									align = nobaseline
								}

								expand = {}
							}

							expand = {}
						}

						hbox = {
							visible = "[Artifact.GetOwner.IsPlayerInteractionWithTargetArtifactValid( 'destroy_artifact_interaction', Artifact.Self )]"
							layoutpolicy_horizontal = expanding
							spacing = 5

							hbox = {
								spacing = 5

								button_round = {
									name = "destroy"
									size = { 30 30 }

									button_icon_highlight = {
										parentanchor = center
										size = { 20 20 }
										texture = "gfx/interface/icons/flat_icons/destroy_artifact.dds"
									}

									visible = "[Artifact.GetOwner.IsPlayerInteractionShown( 'destroy_artifact_interaction' )]"
									enabled = "[Artifact.GetOwner.IsPlayerInteractionWithTargetArtifactValid( 'destroy_artifact_interaction', Artifact.Self )]"
									onclick = "[Artifact.GetOwner.OpenPlayerInteractionWithTargetArtifact( 'destroy_artifact_interaction', Artifact.Self )]"
									tooltip = "[Artifact.GetOwner.GetPlayerInteractionWithTargetArtifactTooltip( 'destroy_artifact_interaction', Artifact.Self )]"
								}

								text_single = {
									text = "INVENTORY_DESTROY_ARTIFACT"
									max_width = 200
									align = nobaseline
								}

								expand = {}
							}
							# Warcraft
							button_standard = {
								size = { 125 30 }
								text = "ANIMATE_RAGE_TEXT"
								tooltip = "wc_elemental_fire_magic_tree_2_perk_3_desc"
								onclick = "[GetScriptedGui( 'animate_rage_effect_sgui' ).Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('artifact', Artifact.MakeScope).End )]"
								onclick = "[ArtifactDetailsView.Close]"
								visible = "[GetScriptedGui( 'can_animate_rage_sgui' ).IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
							}

							expand = {}
						}

						vbox = {
							spacing = 5
							visible = "[And( Not( Artifact.GetOwner.IsLocalPlayer ), Artifact.HasClaim( GetPlayer ) )]"
							layoutpolicy_horizontal = expanding
							margin_bottom = 5

							hbox = {
								layoutpolicy_horizontal = expanding

								text_single = {
									text = "DETAILS_TAB_CLAIM_INTERACTIONS"
								}

								expand = {}
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 2

								expand = {}

								button_round = {
									name = "steal"
									size = { 35 35 }

									button_icon_highlight = {
										parentanchor = center
										size = { 25 25 }
										texture = "gfx/interface/icons/flat_icons/scheme.dds"
									}

									enabled = "[Artifact.GetOwner.IsPlayerInteractionValid('start_stealing_back_artifact')]"
									onclick = "[Artifact.GetOwner.OpenPlayerInteraction('start_stealing_back_artifact')]"
									tooltip = "[Artifact.GetOwner.GetPlayerInteractionTooltip( 'start_stealing_back_artifact' )]"
								}

								button_round = {
									name = "declare_war"
									size = { 35 35 }

									button_icon_highlight = {
										size = { 25 25 }
										parentanchor = center
										texture = "gfx/interface/icons/flat_icons/declare_war.dds"
									}

									enabled = "[Artifact.GetOwner.IsPlayerInteractionValid('declare_war_interaction')]"
									onclick = "[Artifact.GetOwner.OpenPlayerInteraction('declare_war_interaction')]"
									tooltip = "[Artifact.GetOwner.GetPlayerInteractionTooltip('declare_war_interaction')]"
								}

								button_round = {
									name = "duel"
									size = { 35 35 }

									button_icon_highlight = {
										parentanchor = center
										size = { 25 25 }
										texture = "gfx/interface/icons/flat_icons/duel.dds"
									}

									enabled = "[Artifact.GetOwner.IsPlayerInteractionValid('challenge_for_artifact_interaction')]"
									onclick = "[Artifact.GetOwner.OpenPlayerInteraction('challenge_for_artifact_interaction')]"
									tooltip = "[Artifact.GetOwner.GetPlayerInteractionTooltip('challenge_for_artifact_interaction')]"
								}

								expand = {
									layoutpolicy_horizontal = expanding
								}
							}

							expand = {}
						}

						expand = {}
					}
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					hbox = {
						layoutpolicy_horizontal = expanding
						margin = { 20 0 }

						text_multi = {
							text = "[Artifact.GetModifierEffects]"
							margin_bottom = 10
							margin_top = 5
							max_width = 410
							autoresize = yes
						}

						expand = {}
					}

					spacer = {
						size = { 0 5 }
					}

					hbox = {
						name = "fallback"
						visible = "[Not( Artifact.CanBenefitPlayer )]"
						layoutpolicy_horizontal = expanding
						margin = { 20 0 }

						text_multi = {
							text = "ARTIFACT_FALLBACK_EFFECT"
							max_width = 390
							autoresize = yes

							margin_bottom = 5
						}

						expand = {}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						scrollbox = {
							name = "artifact_description_scrollarea"
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							blockoverride "scrollbox_background"
							{
								background = {
									using = Background_Area
								}
							}

							scrollwidget = {
								text_multi = {
									name = "artifact_description"
									text = "[Artifact.GetDesc]"
									max_width = 410
									autoresize = yes
									default_format = "#flavor"

									margin_top = 15
									margin_left = 20
								}
							}

							blockoverride "scrollbox_background_fade" {
								icon = {
									alpha = 0
								}
							}
						}
					}
				}

				expand = {}
			}

			# right vbox is claims and history tabs
			vbox = {
				layoutpolicy_vertical = expanding
				minimumsize = { 500 -1 }

				hbox = {
					name = "right_side_tabs"
					layoutpolicy_horizontal = expanding

					button_tab = {
						layoutpolicy_horizontal = expanding
						text = "DETAILS_TAB_CLAIMS"
						onclick = "[VariableSystem.Set( 'details_right_side_tab', 'claims' )]"
						down = "[VariableSystem.HasValue( 'details_right_side_tab', 'claims' )]"
					}

					button_tab = {
						layoutpolicy_horizontal = expanding
						text = "DETAILS_TAB_HISTORY"
						onclick = "[VariableSystem.Set( 'details_right_side_tab', 'history' )]"
						down = "[VariableSystem.HasValue( 'details_right_side_tab', 'history' )]"
					}
				}

				scrollbox = {
					name = "history"
					visible = "[VariableSystem.HasValue( 'details_right_side_tab', 'history' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					blockoverride "scrollbox_content" {
						fixedgridbox = {
							name = "history_list"
							datamodel = "[Artifact.GetHistory.GetEntries]"
							addcolumn = 500
							addrow = 142

							item = {
								widget = {
									minimumsize = { 470 138 }

									vbox = {
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = expanding

										background = {
											using = Background_Area_With_Header
										}

										hbox = {
											layoutpolicy_horizontal = expanding

											text_single = {
												text = "[HistoryEntry.GetTitle]"
												margin = { 10 6 }
												align = nobaseline
												max_width = 400
											}

											expand = {}
										}

										hbox = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
											margin = { 10 0 }

											portrait_head_small = {
												name = "actor"
												datacontext = "[HistoryEntry.GetActor]"
												visible = "[HistoryEntry.HasActor]"
											}

											vbox = {
												layoutpolicy_horizontal = expanding
												margin = { 5 0 }

												text_multi = {
													text = "[HistoryEntry.GetDescription]"
													maximumsize = { 270 90 }
													min_width = 270
													autoresize = yes
													fontsize_min = 12
												}
											}

											expand = {}

											vbox = {
												name = "actor_house"
												datacontext = "[HistoryEntry.GetActor.GetHouse]"
												visible = "[And( Or( Not( HistoryEntry.HasRecipient ), ObjectsEqual( HistoryEntry.GetRecipient, HistoryEntry.GetActor ) ), HistoryEntry.GetActor.IsValid )]"
												margin = { 5 0 }

												coa_house_small = {}

												text_multi = {
													text = "[DynastyHouse.GetBaseNameNoTooltip]"
													max_width = 80
													autoresize = yes
												}
											}

											portrait_head_small = {
												name = "recipient"
												datacontext = "[HistoryEntry.GetRecipient]"
												visible = "[And( HistoryEntry.HasRecipient, Not( ObjectsEqual( HistoryEntry.GetRecipient, HistoryEntry.GetActor ) ) )]"

												blockoverride "portrait_transformation"
												{
													portrait_scale = { -1 1 }
													portrait_offset = { 1 0 }
												}
											}
										}
									}
								}
							}
						}
					}
				}

				scrollbox = {
					name = "artifact_claims"
					visible = "[VariableSystem.HasValue( 'details_right_side_tab', 'claims' )]"
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding

					blockoverride "scrollbox_empty"
					{
						visible = "[IsDataModelEmpty(ArtifactDetailsView.GetClaimants)]"
						text = "DETAILS_TAB_NO_CLAIMANTS"
					}

					blockoverride "scrollbox_content" {
						fixedgridbox = {
							name = "claims_list"
							datamodel = "[ArtifactDetailsView.GetClaimants]"
							addcolumn = 500
							addrow = 142

							item = {
								widget = {
									size = { 470 138 }

									vbox = {
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = expanding

										background = {
											using = Background_Area_With_Header
										}

										vbox = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
											margin_left = 10
											margin_right = 22

											hbox = {
												layoutpolicy_horizontal = expanding
												margin_top = 5
												margin_bottom = 8

												text_single = {
													name = "character_name"
													visible = "[ClaimantEntry.IsCharacter]"
													text = "[ClaimantEntry.GetCharacter.GetUINameNoTooltip|U]"
													max_width = 400
												}

												text_single = {
													name = "house_name"
													visible = "[ClaimantEntry.IsHouse]"
													text = "[house|E] [ClaimantEntry.GetHouse.GetNameNoTooltip]"
													max_width = 400
												}

												expand = {}
											}

											hbox = {
												layoutpolicy_horizontal = expanding
												margin_top = 5
												margin_bottom = 9

												portrait_head_small = {
													name = "character"
													visible = "[ClaimantEntry.IsCharacter]"
													datacontext = "[ClaimantEntry.GetCharacter]"
												}

												coa_house_medium = {
													name = "house"
													visible = "[ClaimantEntry.IsHouse]"
													datacontext = "[ClaimantEntry.GetHouse]"
												}

												vbox = {
													layoutpolicy_horizontal = expanding
													layoutpolicy_vertical = expanding

													hbox = {
														layoutpolicy_horizontal = expanding
														visible = "[ClaimantEntry.IsHouse]"
														margin_left = 10

														text_single = {
															text = "CLAIMANT_ENTRY_HOUSE_HEAD"
															align = nobaseline
															multiline = yes
															max_width = 240
														}

														expand = {}
													}

													expand = {}

													hbox = {
														layoutpolicy_horizontal = expanding
														spacing = 6

														icon = {
															name = "flag_icon"
															visible = "[And( ClaimantEntry.IsCharacter, Not( ClaimantEntry.CanDeclareWarForClaim ) )]"
															texture = "gfx/interface/icons/icon_retreat.dds"
															size = { 30 30 }
															tooltip = "CLAIMANT_NOT_A_THREAT"
															using = tooltip_ne
														}

														text_single = {
															datacontext = "[ClaimantEntry.GetCharacter]"

															visible = "[And( ClaimantEntry.IsCharacter, Not( ClaimantEntry.CanDeclareWarForClaim ) )]"
															layoutpolicy_horizontal = expanding
															text = "CHARACTER_CANNOT_DECLARE_WAR_SHORT"
															align = nobaseline
														}
													}
												}
											}
										}
									}

									widget = {
										name = "army_composition"
										datacontext = "[ClaimantEntry.GetArmyComposition]"
										visible = "[GreaterThan_int32(ArmyComposition.GetCurrentNumberOfSoldiers, '(int32)0' )]"
										size = { 120 45 }
										parentanchor = right|bottom
										position = { -10 -10 }

										background = {
											using = Background_Area_Dark
										}

										vbox = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
											tooltip = "[ArmyComposition.GetArmyCompositionTooltip]"

											margin = { 0 6 }

												hbox = {
													spacing = 6

													icon = {
														name = "icon_soldier"
														size = { 25 25 }
														texture = "gfx/interface/icons/icon_soldier.dds"
													}

													text_single = {
														text = "[ArmyComposition.GetSoldierCountString]"
														using = Font_Size_Medium
														default_format = "#high"
														align = nobaseline
													}

													army_quality_icon = {}
												}

												progressbar_standard = {
													name = "soldiers_max"
													size = { 40 8 }

													min = 0
													max = "[IntToFloat(ArmyComposition.GetMaxNumberOfSoldiers)]"
													value = "[IntToFloat(ArmyComposition.GetCurrentNumberOfSoldiers)]"
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
