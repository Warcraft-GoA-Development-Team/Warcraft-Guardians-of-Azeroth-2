# wc_magic_cast_spell_interaction = {
# 	common_interaction = yes
# 	use_diplomatic_range = yes
# 	category = interaction_category_wc_magic
# 	icon = wc_spellbook_icon

# 	is_shown = {
# 		scope:actor = {
# 			is_magic_user_trigger = yes
# 			can_cast_another_spell_trigger = yes
# 		}
# 	}

# 	on_accept = {
# 		scope:actor = {
# 			set_global_variable = {
# 				name = spellbook_open
# 				value = yes
# 			}
# 			set_variable = {
# 				name = spellbook_type_cast
# 				value = yes
# 			}
# 			custom_tooltip = wc_magic_cast_spell_interaction_tt
# 		 	set_variable = { name = spell_recipient value = scope:recipient }
# 		}
# 		scope:recipient = {
# 			custom_tooltip = wc_magic_cast_spell_interaction_tt_r
# 		}
# 	}

# 	auto_accept = yes
# }

# wc_magic_stop_channeling_spell_interaction = {

# }

wc_magic_fire_shield_interaction = {
	send_name = wc_magic_fire_shield_interaction_name
	category = interaction_category_wc_magic
	icon = wc_spellbook_icon
	common_interaction = yes

	populate_recipient_list = {
		scope:recipient = {
			if = {
				limit = {
					exists = primary_spouse
					primary_spouse = {
						NOT = {
							has_character_modifier = wc_fire_shield_modifier
						}
					}
				}
				primary_spouse = {
					add_to_list = characters
				}
			}
			every_relation = {
				type = friend
				limit = {
					NOT = {
						has_character_modifier = wc_fire_shield_modifier
					}
				}
				add_to_list = characters
			}
			every_relation = {
				type = best_friend
				limit = {
					NOT = {
						has_character_modifier = wc_fire_shield_modifier
					}
				}
				add_to_list = characters
			}
			every_relation = {
				type = lover
				limit = {
					NOT = {
						has_character_modifier = wc_fire_shield_modifier
					}
				}
				add_to_list = characters
			}
		}
	}

	auto_accept = yes

	hidden = yes

	on_accept = {
		scope:secondary_recipient = {
			custom_tooltip = wc_twin_flame_character_effect_tt
		}
		hidden_effect = {
			scope:actor = {
				set_variable = {
					name = fire_shield_secondary_target
					value = scope:secondary_recipient
				}
			}
		}
	}
}

wc_spell_reflect_character_interaction = {
    common_interaction = yes
    use_diplomatic_range = yes
    category = interaction_category_wc_magic
    icon = icon_spellbook
    desc = wc_interaction_reflect

    is_shown = {
        always = yes
    }

    hidden = yes

    on_accept = {
        scope:actor = {
            set_variable = { name = true_target value = scope:secondary_recipient }
            remove_variable = reflect_interaction
            remove_variable = reflect_interaction_character
            remove_variable = current_scheme
            remove_variable = landed_only
            change_variable = {
                name = scheme_reflect_count
                subtract = 1
            }
            trigger_event = {
                on_action = on_scheme_reflect_regeneration
                years = 10
            }

            if = {
                limit = {
                    exists = scope:reveal_scheme
                    scope:reveal_scheme = yes
                }

                scope:scheme = {
                    expose_scheme = yes
                }
            }
        }
    }

    populate_recipient_list = {
        scope:actor = {
            every_courtier = {
                add_to_list = characters
            }
            every_vassal = {
                add_to_list = characters
            }
        }

        every_in_list = {
            list = characters
            if = {
                limit = {
                    scope:actor = {
                        has_variable = landed_only
                    }
                }

                if = {
                    limit = {
                        is_landed = no
                    }

                    remove_from_list = characters
                }
            }
        }
    }

    send_options_exclusive = no

    send_option = {
        is_shown = { always = yes }
        current_description = wc_spell_reflect_character_interaction_reveal_desc
        flag = reveal_scheme
        localization = wc_spell_reflect_character_interaction_reveal
        starts_enabled = { always = no }
        can_be_changed = { NOT = { scope:scheme = { is_scheme_exposed = yes } } }
    }

    auto_accept = yes

    ai_frequency = 1

    ai_potential = {
        has_variable = reflect_interaction
        has_variable = reflect_interaction_character
    }

    ai_targets = {
        ai_recipients = vassals
        max = 10
    }
    ai_targets = {
        ai_recipients = courtiers
        max = 10
    }

    ai_will_do = {
        base = 100

        modifier = {
            factor = 0
            scope:actor = {
                has_variable = landed_only
            }
            scope:secondary_recipient = {
                is_landed = no
            }
        }
    }
}

wc_spell_reflect_artifact_interaction = {
    common_interaction = yes
    use_diplomatic_range = yes
    category = interaction_category_wc_magic
    icon = icon_spellbook
    desc = wc_interaction_reflect

    target_type = artifact
    target_filter = actor_artifacts

    is_shown = {
        always = yes
    }

    hidden = yes

    can_be_picked_artifact = {
        scope:actor = {
            any_character_artifact = {
                this = scope:target
            }
        }
    }

    on_accept = {
        scope:actor = {
            set_variable = { name = true_target value = scope:target }
            remove_variable = reflect_interaction
            remove_variable = reflect_interaction_artifact
            remove_variable = current_scheme
            change_variable = {
                name = scheme_reflect_count
                subtract = 1
            }
            trigger_event = {
                on_action = on_scheme_reflect_regeneration
                years = 10
            }

            if = {
                limit = {
                    exists = scope:reveal_scheme
                    scope:reveal_scheme = yes
                }

                scope:scheme = {
                    expose_scheme = yes
                }
            }
        }
    }

    send_options_exclusive = no

    send_option = {
        is_shown = { always = yes }
        current_description = wc_spell_reflect_character_interaction_reveal_desc
        flag = reveal_scheme
        localization = wc_spell_reflect_character_interaction_reveal
        starts_enabled = { always = no }
        can_be_changed = { NOT = { scope:scheme = { is_scheme_exposed = yes } } }
    }

    auto_accept = yes

    ai_frequency = 1

    ai_potential = {
        has_variable = reflect_interaction
        has_variable = reflect_interaction_artifact
    }

    ai_targets = {
        ai_recipients = vassals
        max = 10
    }
    ai_targets = {
        ai_recipients = courtiers
        max = 10
    }

    ai_will_do = {
        base = 100

        modifier = {
            factor = 0
            scope:actor = {
                has_variable = landed_only
            }
            scope:secondary_recipient = {
                is_landed = no
            }
        }
    }
}

wc_spell_reflect_cancel_interaction = {
    common_interaction = yes
    use_diplomatic_range = yes
    category = interaction_category_wc_magic
    icon = icon_spellbook
    desc = wc_interaction_reflect

    is_shown = {
        always = yes
    }

    hidden = yes

    on_accept = {
        scope:actor = {
            set_variable = cancel_scheme
            remove_variable = reflect_interaction
            remove_variable = reflect_interaction_cancel
            remove_variable = current_scheme
            change_variable = {
                name = scheme_reflect_count
                subtract = 1
            }
            trigger_event = {
                on_action = on_scheme_reflect_regeneration
                years = 10
            }

            if = {
                limit = {
                    exists = scope:reveal_scheme
                    scope:reveal_scheme = yes
                }

                scope:scheme = {
                    expose_scheme = yes
                }
            }
        }
    }

    send_options_exclusive = no

    send_option = {
        is_shown = { always = yes }
        current_description = wc_spell_reflect_character_interaction_reveal_desc
        flag = reveal_scheme
        localization = wc_spell_reflect_character_interaction_reveal
        starts_enabled = { always = no }
        can_be_changed = { NOT = { scope:scheme = { is_scheme_exposed = yes } } }
    }

    auto_accept = yes

    ai_frequency = 1

    ai_potential = {
        has_variable = reflect_interaction
        has_variable = reflect_interaction_cancel
    }

    ai_targets = {
        ai_recipients = vassals
        max = 10
    }
    ai_targets = {
        ai_recipients = courtiers
        max = 10
    }

    ai_will_do = {
        base = 100
    }
}

wc_magic_give_disease_interaction = {
    send_name = wc_magic_give_disease_interaction_name
    desc = wc_interaction_disease
    category = interaction_category_wc_magic
    icon = wc_spellbook_icon
    common_interaction = yes

    auto_accept = yes

    hidden = no

    send_options_exclusive = yes

    send_option = {
        localization = ill
        flag = ill
        is_valid = {
            scope:recipient = {
                can_contract_disease_trigger = { DISEASE = ill }
            }
        }
    }
    send_option = {
        localization = dysentery
        flag = dysentery
        is_valid = {
            scope:recipient = {
                can_contract_disease_trigger = { DISEASE = dysentery }
            }
        }
    }
    send_option = {
        localization = consumption
        flag = consumption
        is_valid = {
            scope:recipient = {
                can_contract_disease_trigger = { DISEASE = consumption }
            }
        }
    }
    send_option = {
        localization = great_pox
        flag = great_pox
        is_valid = {
            scope:recipient = {
                can_contract_disease_trigger = { DISEASE = great_pox }
            }
        }
    }
    send_option = {
        localization = leper
        flag = leper
        is_valid = {
            scope:recipient = {
                can_contract_disease_trigger = { DISEASE = leper }
            }
        }
    }
    send_option = {
        localization = lovers_pox
        flag = lovers_pox
        is_valid = {
            scope:recipient = {
                can_contract_disease_trigger = { DISEASE = lovers_pox }
            }
        }
    }
    send_option = {
        localization = measles
        flag = measles
        is_valid = {
            scope:recipient = {
                can_contract_disease_trigger = { DISEASE = measles }
            }
        }
    }
    send_option = {
        localization = pneumonic
        flag = pneumonic
        is_valid = {
            scope:recipient = {
                can_contract_disease_trigger = { DISEASE = pneumonic }
            }
        }
    }
    send_option = {
        localization = smallpox
        flag = smallpox
        is_valid = {
            scope:recipient = {
                can_contract_disease_trigger = { DISEASE = smallpox }
            }
        }
    }
    send_option = {
        localization = typhus
        flag = typhus
        is_valid = {
            scope:recipient = {
                can_contract_disease_trigger = { DISEASE = typhus }
            }
        }
    }
    send_option = {
        localization = frost_fever
        flag = frost_fever
        is_shown = {
            scope:actor = {
                has_perk = death_magic_tree_1_perk_3
            }
        }
        is_valid = {
            scope:recipient = {
                can_contract_disease_trigger = { DISEASE = frost_fever }
            }
        }
    }
    send_option = {
        localization = blood_plague
        flag = blood_plague
        is_shown = {
            scope:actor = {
                has_perk = death_magic_tree_3_perk_2
            }
        }
        is_valid = {
            scope:recipient = {
                can_contract_disease_trigger = { DISEASE = blood_plague }
            }
        }
    }
    send_option = {
        localization = crypt_fever
        flag = crypt_fever
        is_shown = {
            scope:actor = {
                has_perk = death_magic_tree_2_perk_5
            }
        }
        is_valid = {
            scope:recipient = {
                can_contract_disease_trigger = { DISEASE = crypt_fever }
            }
        }
    }

    on_accept = {
        if = {
            limit = {
                scope:ill = yes
            }
            save_scope_value_as = { name = disease value = flag:ill }
        }
        else_if = {
            limit = {
                scope:dysentery = yes
            }
            save_scope_value_as = { name = disease value = flag:dysentery }
        }
        else_if = {
            limit = {
                scope:consumption = yes
            }
            save_scope_value_as = { name = disease value = flag:consumption }
        }
        else_if = {
            limit = {
                scope:great_pox = yes
            }
            save_scope_value_as = { name = disease value = flag:great_pox }
        }
        else_if = {
            limit = {
                scope:leper = yes
            }
            save_scope_value_as = { name = disease value = flag:leper }
        }
        else_if = {
            limit = {
                scope:lovers_pox = yes
            }
            save_scope_value_as = { name = disease value = flag:lovers_pox }
        }
        else_if = {
            limit = {
                scope:measles = yes
            }
            save_scope_value_as = { name = disease value = flag:measles }
        }
        else_if = {
            limit = {
                scope:pneumonic = yes
            }
            save_scope_value_as = { name = disease value = flag:pneumonic }
        }
        else_if = {
            limit = {
                scope:smallpox = yes
            }
            save_scope_value_as = { name = disease value = flag:smallpox }
        }
        else_if = {
            limit = {
                scope:typhus = yes
            }
            save_scope_value_as = { name = disease value = flag:typhus }
        }
        else_if = {
            limit = {
                scope:frost_fever = yes
            }
            save_scope_value_as = { name = disease value = flag:frost_fever }
        }
        else_if = {
            limit = {
                scope:blood_plague = yes
            }
            save_scope_value_as = { name = disease value = flag:blood_plague }
        }
        else_if = {
            limit = {
                scope:crypt_fever = yes
            }
            save_scope_value_as = { name = disease value = flag:crypt_fever }
        }
        hidden_effect = {
            scope:actor = {
                remove_variable = give_disease_interaction
                set_variable = {
                    name = give_disease_type
                    value = scope:disease
                }
            }
        }
        custom_tooltip = wc_give_disease_character_effect_tt
    }
}

wc_magic_epidemic_interaction = {
    send_name = wc_magic_epidemic_interaction_name
    desc = wc_interaction_disease
    category = interaction_category_wc_magic
    icon = wc_spellbook_icon
    common_interaction = yes

    auto_accept = yes

    hidden = no

    send_options_exclusive = yes

    send_option = {
        localization = smallpox
        flag = smallpox
    }
    send_option = {
        localization = bubonic_plague
        flag = bubonic_plague
    }
    send_option = {
        localization = typhus
        flag = typhus
    }
    send_option = {
        localization = consumption
        flag = consumption
    }
    send_option = {
        localization = measles
        flag = measles
    }
    send_option = {
        localization = dysentery
        flag = dysentery
    }
    send_option = {
        localization = ergotism
        flag = ergotism
    }
    send_option = {
        localization = frost_fever
        flag = frost_fever
        is_shown = {
            scope:actor = {
                has_perk = death_magic_tree_1_perk_3
            }
        }
    }
    send_option = {
        localization = blood_plague
        flag = blood_plague
        is_shown = {
            scope:actor = {
                has_perk = death_magic_tree_3_perk_2
            }
        }
    }
    send_option = {
        localization = crypt_fever
        flag = crypt_fever
        is_shown = {
            scope:actor = {
                has_perk = death_magic_tree_2_perk_5
            }
        }
    }

    on_accept = {
        if = {
            limit = {
                scope:smallpox = yes
            }
            save_scope_value_as = { name = disease value = flag:smallpox }
        }
        else_if = {
            limit = {
                scope:bubonic_plague = yes
            }
            save_scope_value_as = { name = disease value = flag:bubonic_plague }
        }
        else_if = {
            limit = {
                scope:consumption = yes
            }
            save_scope_value_as = { name = disease value = flag:consumption }
        }
        else_if = {
            limit = {
                scope:measles = yes
            }
            save_scope_value_as = { name = disease value = flag:measles }
        }
        else_if = {
            limit = {
                scope:dysentery = yes
            }
            save_scope_value_as = { name = disease value = flag:dysentery }
        }
        else_if = {
            limit = {
                scope:ergotism = yes
            }
            save_scope_value_as = { name = disease value = flag:ergotism }
        }
        else_if = {
            limit = {
                scope:typhus = yes
            }
            save_scope_value_as = { name = disease value = flag:typhus }
        }
        else_if = {
            limit = {
                scope:frost_fever = yes
            }
            save_scope_value_as = { name = disease value = flag:frost_fever }
        }
        else_if = {
            limit = {
                scope:blood_plague = yes
            }
            save_scope_value_as = { name = disease value = flag:blood_plague }
        }
        else_if = {
            limit = {
                scope:crypt_fever = yes
            }
            save_scope_value_as = { name = disease value = flag:crypt_fever }
        }
        scope:actor.var:epidemic_recipient.title_province = {
            show_as_tooltip = {
                switch = {
                    trigger = scope:disease

                    flag:smallpox = { create_epidemic_outbreak = { type = smallpox intensity = major } }
                    flag:bubonic_plague = { create_epidemic_outbreak = { type = bubonic_plague intensity = major } }
                    flag:consumption = { create_epidemic_outbreak = { type = consumption intensity = major } }
                    flag:measles = { create_epidemic_outbreak = { type = measles intensity = major } }
                    flag:dysentery = { create_epidemic_outbreak = { type = dysentery intensity = major } }
                    flag:ergotism = { create_epidemic_outbreak = { type = ergotism intensity = major } }
                    flag:typhus = { create_epidemic_outbreak = { type = typhus intensity = major } }
                    flag:frost_fever = { create_epidemic_outbreak = { type = frost_fever intensity = major } }
                    flag:blood_plague = { create_epidemic_outbreak = { type = blood_plague intensity = major } }
                    flag:crypt_fever = { create_epidemic_outbreak = { type = crypt_fever intensity = major } }
                }
            }
        }
        hidden_effect = {
            scope:actor = {
                remove_variable = epidemic_interaction
                set_variable = {
                    name = epidemic_type
                    value = scope:disease
                }
            }
        }
    }
}