
#Debugging events

namespace = debug

debug.1 = { # Max Portraits in Event Window
	type = character_event
	title = LOREM_IPSUM_TITLE 
	desc = LOREM_IPSUM_DESCRIPTION
	theme = realm
	orphan = yes
	content_source = "dlc_006"

	left_portrait = {
		character = root
		animation = interested
	}
	
	right_portrait = {
		character = scope:portrait_2
		animation = interested_left
	}
	
	center_portrait = {
		character = scope:portrait_3
		animation = loss_1
	}
	
	
	lower_right_portrait = scope:portrait_4
	lower_center_portrait = scope:portrait_5
	lower_left_portrait = scope:portrait_6

	immediate = {
		random_ruler = { save_scope_as = portrait_1 }
		random_ruler = { save_scope_as = portrait_2 }
		random_ruler = { save_scope_as = portrait_3 }
		random_ruler = { save_scope_as = portrait_4 }
		random_ruler = { save_scope_as = portrait_5 }
		random_ruler = { save_scope_as = portrait_6 }
	}

	option = { name = LOREM_IPSUM_TITLE }
}

debug.111 = { # Two Portraits + three Artifacts in Event Window
	type = character_event
	title = LOREM_IPSUM_TITLE
	desc = LOREM_IPSUM_DESCRIPTION
	theme = realm
	orphan = yes
	left_portrait = {
		character = root
		animation = idle
	}
	right_portrait = {
		character =  scope:portrait_1
		animation = idle
	}
	
	artifact = {
        target = scope:portrait_2
        position = lower_right_portrait
    }
	
	artifact = {
        target = scope:portrait_3
        position = lower_center_portrait
    }
	
	artifact = {
        target = scope:portrait_4
        position = lower_left_portrait
    }

	immediate = {
		random_ruler = {
			save_scope_as = portrait_1
		}
		random_artifact = {
			save_scope_as = portrait_2
		}
		random_artifact = {
			save_scope_as = portrait_3
		}
		random_artifact = {
			save_scope_as = portrait_4
		}
	}

	option = {
		name = LOREM_IPSUM_TITLE
	}
}

debug.0002 = {
	type = character_event
	title = debug.0002.t
	desc = debug.0002.desc
	theme = default
	left_portrait = scope:recipient

	immediate = {
		if = {
			limit = { is_female = yes }
			save_scope_as = mother
			scope:recipient = { save_scope_as = father }
		}

		else = {
			save_scope_as = father
			scope:recipient = { save_scope_as = mother }
		}
	}

	#Normal pregnancy
	option = {
		name = debug.0002.a
		
		scope:mother = {
			make_pregnant = {
				father = scope:father
			}
		}
	}

	#One please
	option = {
		name = debug.0002.b

		scope:mother = {
			make_pregnant = {
				father = scope:father
				number_of_children = 1
			}
		}
	}
	
	#Two please
	option = {
		name = debug.0002.c
		
			scope:mother = {
				make_pregnant = {
				father = scope:father
				number_of_children = 2
			}
		}
	}

	#Three please
	option = {
		name = debug.0002.d
		
			scope:mother = {
				make_pregnant = {
				father = scope:father
				number_of_children = 3
			}
		}
	}

	#Go crazy
	option = {
		name = debug.0002.e
		
			scope:mother = {
				make_pregnant = {
				father = scope:father
				number_of_children = 10
			}
		}
	}
}

## globally upgrade some holdings for marketing videos and screenshots

debug.0008 = {
	type = character_event
	hidden = yes
	theme = default
	orphan = yes
	
	immediate = {
		every_duchy = {
			if = {
				limit = { is_titular = no }
				title_capital_county = {
					every_county_province = {
						if = {
							limit = {
								is_county_capital = yes
								NOT = { has_building = curtain_walls_02 }
							}
							add_building = curtain_walls_02
						}
						if = {
							limit = {
								has_holding_type = castle_holding
								NOT = { has_building = castle_02 }
							}
							add_building = castle_02
						}
						else_if = {
							limit = {
								has_holding_type = church_holding
								NOT = { has_building = temple_02 }
							}
							add_building = temple_03
						}
						else_if = {
							limit = {
								has_holding_type = city_holding
								NOT = { has_building = city_02 }
							}
							add_building = city_03
						}
					}
				}	
			}
		}
		every_kingdom = {
			if = {
				limit = { is_titular = no }
				title_capital_county = {
					every_county_province = {
						if = {
							limit = {
								is_county_capital = yes
								NOT = { has_building = curtain_walls_03 }
							}
							add_building = curtain_walls_03
						}
						if = {
							limit = {
								has_holding_type = castle_holding
								NOT = { has_building = castle_03 }
							}
							add_building = castle_03
						}
						else_if = {
							limit = {
								has_holding_type = church_holding
								NOT = { has_building = temple_03 }
							}
							add_building = temple_03
						}
						else_if = {
							limit = {
								has_holding_type = city_holding
								NOT = { has_building = city_03 }
							}
							add_building = city_03
						}
					}
				}
			}
		}
		every_empire = {
			if = {
				limit = { is_titular = no }
				title_capital_county = {
					every_county_province = {
						if = {
							limit = {
								is_county_capital = yes
								NOT = { has_building = curtain_walls_08 }
							}
							add_building = curtain_walls_08
						}
						if = {
							limit = {
								has_holding_type = castle_holding
								NOT = { has_building = castle_04 }
							}
							add_building = castle_04
						}
						else_if = {
							limit = {
								has_holding_type = church_holding
								NOT = { has_building = temple_04 }
							}
							add_building = temple_04
						}
						else_if = {
							limit = {
								has_holding_type = city_holding
								NOT = { has_building = city_04 }
							}
							add_building = city_04
						}
					}
				}
			}
		}
	}
}

######################
# HEALTH DATA EVENTS #
######################

# Set variable to collect data on birth
scripted_effect test_2_set_character_disease_data_variable_effect = {
	set_variable = {
		name = disease_data_character_$DISEASE$_amount
		value = 0
	}
}

# For likelihood of happening, set target values, change the weights of the diseases, et voila
# Calculate for deadliness: seed the world with disease and check how likely people are to die
debug.0010 = { #test.2
	hidden = yes

	trigger = { activate_disease_data_tracking_trigger = yes }

	immediate = {
		set_variable = {
			name = disease_data_activate_tracking
			value = yes
		}

		test_2_set_character_disease_data_variable_effect = { DISEASE = ill }
		test_2_set_character_disease_data_variable_effect = { DISEASE = pneumonic }
		test_2_set_character_disease_data_variable_effect = { DISEASE = gout_ridden }
		test_2_set_character_disease_data_variable_effect = { DISEASE = leper }
		test_2_set_character_disease_data_variable_effect = { DISEASE = typhus }
		test_2_set_character_disease_data_variable_effect = { DISEASE = consumption }
		test_2_set_character_disease_data_variable_effect = { DISEASE = cancer }
		test_2_set_character_disease_data_variable_effect = { DISEASE = lovers_pox }
		test_2_set_character_disease_data_variable_effect = { DISEASE = great_pox }
		test_2_set_character_disease_data_variable_effect = { DISEASE = smallpox }
		test_2_set_character_disease_data_variable_effect = { DISEASE = bubonic_plague }
		test_2_set_character_disease_data_variable_effect = { DISEASE = measles }
		test_2_set_character_disease_data_variable_effect = { DISEASE = dysentery }
		test_2_set_character_disease_data_variable_effect = { DISEASE = ergotism }
	}
}


scripted_effect test_3_create_disease_variables_effect = {
	set_global_variable = {
		name = disease_data_global_$DISEASE$_amount
		value = 0
	}
	set_global_variable = {
		name = disease_data_global_premature_death_$DISEASE$_amount
		value = 0
	}
}

scripted_effect test_3_count_diseases_effect = {
	change_global_variable = {
		name = disease_data_global_$DISEASE$_amount
		add = var:disease_data_character_$DISEASE$_amount
	}
}


scripted_effect test_3_count_premature_disease_deaths_effect = {
	if = {
		limit = { death_reason = death_$DISEASE$ }
		change_global_variable = {
			name = disease_data_global_premature_death_amount
			add = 1
		}
		change_global_variable = {
			name = disease_data_global_premature_death_$DISEASE$_amount
			add = 1
		}
	}
}

# Collect data on death
debug.0011 = { #test.3
	hidden = yes
	orphan = yes

	trigger = {
		activate_disease_data_tracking_trigger = yes
		has_variable = disease_data_activate_tracking
	}

	immediate = {
		if = {
			limit = { NOT = { exists = global_var:disease_data_global_character_amount } }

			# All counters
			set_global_variable = {
				name = disease_data_global_character_amount
				value = 0
			}
			set_global_variable = {
				name = disease_data_global_common_disease_amount
				value = 0
			}
			set_global_variable = {
				name = disease_data_global_serious_disease_amount
				value = 0
			}
			set_global_variable = {
				name = disease_data_global_premature_death_amount
				value = 0
			}

			# Disease counters
			test_3_create_disease_variables_effect = { DISEASE = ill }
			test_3_create_disease_variables_effect = { DISEASE = pneumonic }
			test_3_create_disease_variables_effect = { DISEASE = gout_ridden }
			test_3_create_disease_variables_effect = { DISEASE = leper }
			test_3_create_disease_variables_effect = { DISEASE = typhus }
			test_3_create_disease_variables_effect = { DISEASE = consumption }
			test_3_create_disease_variables_effect = { DISEASE = cancer }
			test_3_create_disease_variables_effect = { DISEASE = lovers_pox }
			test_3_create_disease_variables_effect = { DISEASE = great_pox }
			test_3_create_disease_variables_effect = { DISEASE = smallpox }
			test_3_create_disease_variables_effect = { DISEASE = bubonic_plague }
			test_3_create_disease_variables_effect = { DISEASE = measles }
			test_3_create_disease_variables_effect = { DISEASE = dysentery }
			test_3_create_disease_variables_effect = { DISEASE = ergotism }
		}


		change_global_variable = {
			name = disease_data_global_character_amount
			add = 1
		}

		# Add to disease counters
		test_3_count_diseases_effect = { DISEASE = ill }
		test_3_count_diseases_effect = { DISEASE = pneumonic }
		test_3_count_diseases_effect = { DISEASE = gout_ridden }
		test_3_count_diseases_effect = { DISEASE = leper }
		test_3_count_diseases_effect = { DISEASE = typhus }
		test_3_count_diseases_effect = { DISEASE = consumption }
		test_3_count_diseases_effect = { DISEASE = cancer }
		test_3_count_diseases_effect = { DISEASE = lovers_pox }
		test_3_count_diseases_effect = { DISEASE = great_pox }
		test_3_count_diseases_effect = { DISEASE = smallpox }
		test_3_count_diseases_effect = { DISEASE = bubonic_plague }
		test_3_count_diseases_effect = { DISEASE = measles }
		test_3_count_diseases_effect = { DISEASE = dysentery }
		test_3_count_diseases_effect = { DISEASE = ergotism }

		# Had a "common" disease?
		if = {
			limit = {
				OR = {
					var:disease_data_character_ill_amount >= 1
					var:disease_data_character_lovers_pox_amount >= 1
				}
			}
			change_global_variable = {
				name = disease_data_global_common_disease_amount
				add = 1
			}
		}

		# Had a "serious" disease?
		if = {
			limit = {
				OR = {
					var:disease_data_character_gout_ridden_amount >= 1
					var:disease_data_character_pneumonic_amount >= 1
					var:disease_data_character_leper_amount >= 1
					var:disease_data_character_typhus_amount >= 1
					var:disease_data_character_consumption_amount >= 1
					var:disease_data_character_cancer_amount >= 1
					var:disease_data_character_great_pox_amount >= 1
					var:disease_data_character_smallpox_amount >= 1
					var:disease_data_character_bubonic_plague_amount >= 1
					var:disease_data_character_measles_amount >= 1
					var:disease_data_character_dysentery_amount >= 1
					var:disease_data_character_ergotism_amount >= 1
				}
			}
			change_global_variable = {
				name = disease_data_global_serious_disease_amount
				add = 1
			}
		}

		# Premature death data
		if = {
			limit = { # Warcraft
				age_in_relation_to_humans_less_than_trigger = { age = 60 } 
			}

			save_scope_as = dead
			random_independent_ruler = {
				trigger_event = { # Death reason isn't set yet, so we send an event to someone else to check
					id = debug.0013
					days = 2
				}
			}
		}
	}
}

# Display the current data
scripted_effect test_4_disease_data_calc_effect = {
	set_variable = {
		name = disease_data_calc_$DISEASE$_percentage
		value = {
			value = global_var:disease_data_global_$DISEASE$_amount
			divide = global_var:disease_data_global_character_amount
			multiply = 100
		}
	}
	set_variable = {
		name = disease_data_calc_$DISEASE$_premature_death_chance
		value = {
			value = global_var:disease_data_global_premature_death_$DISEASE$_amount
			divide = global_var:disease_data_global_$DISEASE$_amount
			multiply = 100
		}
	}
}

debug.0012 = { # test.4
	type = character_event
	title = test.4.title
	desc = test.4.desc
	theme = medicine
	orphan = yes
	override_background = {
		reference = temple_generic
	}

	immediate = {
		### COPY DATA ###

		#Total character amount
		set_variable = {
			name = local_copy_disease_data_global_character_amount
			value = global_var:disease_data_global_character_amount
		}
		#Total early death amount
		set_variable = {
			name = local_copy_disease_data_global_premature_death_amount
			value = global_var:disease_data_global_premature_death_amount
		}
		
		
		### ADDITIONAL DATA ###

		#Percentage of early disease deaths
		set_variable = {
			name = disease_data_calc_premature_disease_death_percentage
			value = {
				value = global_var:disease_data_global_premature_death_amount
				divide = global_var:disease_data_global_character_amount
				multiply = 100
			}
		}

		#Percentage common disease contraction
		set_variable = {
			name = disease_data_calc_common_disease_percentage
			value = {
				value = global_var:disease_data_global_common_disease_amount
				divide = global_var:disease_data_global_character_amount
				multiply = 100
			}
		}

		#Percentage serious disease contraction
		set_variable = {
			name = disease_data_calc_serious_disease_percentage
			value = {
				value = global_var:disease_data_global_serious_disease_amount
				divide = global_var:disease_data_global_character_amount
				multiply = 100
			}
		}

		#Disease chances
		test_4_disease_data_calc_effect = { DISEASE = ill }
		test_4_disease_data_calc_effect = { DISEASE = pneumonic }
		test_4_disease_data_calc_effect = { DISEASE = gout_ridden }
		test_4_disease_data_calc_effect = { DISEASE = leper }
		test_4_disease_data_calc_effect = { DISEASE = typhus }
		test_4_disease_data_calc_effect = { DISEASE = consumption }
		test_4_disease_data_calc_effect = { DISEASE = cancer }
		test_4_disease_data_calc_effect = { DISEASE = lovers_pox }
		test_4_disease_data_calc_effect = { DISEASE = great_pox }
		test_4_disease_data_calc_effect = { DISEASE = smallpox }
		test_4_disease_data_calc_effect = { DISEASE = bubonic_plague }
		test_4_disease_data_calc_effect = { DISEASE = measles }
		test_4_disease_data_calc_effect = { DISEASE = dysentery }
		test_4_disease_data_calc_effect = { DISEASE = ergotism }
		
		save_scope_value_as = {
			name = a_value
			value = var:disease_data_calc_common_disease_percentage
		}
	}

	option = {
		if = { # To block error messages....
			limit = {
				OR = {
					exists = var:local_copy_disease_data_global_character_amount
					exists = var:local_copy_disease_data_global_premature_death_amount
					exists = var:disease_data_calc_premature_disease_death_percentage
					exists = var:disease_data_calc_common_disease_percentage
					exists = var:disease_data_calc_serious_disease_percentage
					exists = var:disease_data_calc_ill_percentage
					exists = var:disease_data_calc_ill_premature_death_chance
					exists = var:disease_data_calc_pneumonic_percentage
					exists = var:disease_data_calc_pneumonic_premature_death_chance
					exists = var:disease_data_calc_gout_ridden_percentage
					exists = var:disease_data_calc_gout_ridden_premature_death_chance
					exists = var:disease_data_calc_leper_percentage
					exists = var:disease_data_calc_leper_premature_death_chance
					exists = var:disease_data_calc_typhus_percentage
					exists = var:disease_data_calc_typhus_premature_death_chance
					exists = var:disease_data_calc_consumption_percentage
					exists = var:disease_data_calc_consumption_premature_death_chance
					exists = var:disease_data_calc_cancer_percentage
					exists = var:disease_data_calc_cancer_premature_death_chance
					exists = var:disease_data_calc_lovers_pox_percentage
					exists = var:disease_data_calc_lovers_pox_premature_death_chance
					exists = var:disease_data_calc_great_pox_percentage
					exists = var:disease_data_calc_great_pox_premature_death_chance
					exists = var:disease_data_calc_smallpox_percentage
					exists = var:disease_data_calc_smallpox_premature_death_chance
					exists = var:disease_data_calc_bubonic_plague_percentage
					exists = var:disease_data_calc_bubonic_plague_premature_death_chance
					exists = var:disease_data_calc_measles_percentage
					exists = var:disease_data_calc_measles_premature_death_chance
					exists = var:disease_data_calc_dysentery_percentage
					exists = var:disease_data_calc_dysentery_premature_death_chance
					exists = var:disease_data_calc_ergotism_percentage
					exists = var:disease_data_calc_ergotism_premature_death_chance
				}
			}
		}

		debug_log = test.4.desc
	}
}

debug.0013 = { # test.5
	hidden = yes

	immediate = {
		scope:dead = {
			test_3_count_premature_disease_deaths_effect = { DISEASE = ill }
			test_3_count_premature_disease_deaths_effect = { DISEASE = pneumonic }
			test_3_count_premature_disease_deaths_effect = { DISEASE = gout_ridden }
			test_3_count_premature_disease_deaths_effect = { DISEASE = leper }
			test_3_count_premature_disease_deaths_effect = { DISEASE = typhus }
			test_3_count_premature_disease_deaths_effect = { DISEASE = consumption }
			test_3_count_premature_disease_deaths_effect = { DISEASE = cancer }
			#test_3_count_premature_disease_deaths_effect = { DISEASE = lovers_pox } you can't die from lover's pox
			test_3_count_premature_disease_deaths_effect = { DISEASE = great_pox }
			test_3_count_premature_disease_deaths_effect = { DISEASE = smallpox }
			test_3_count_premature_disease_deaths_effect = { DISEASE = bubonic_plague }
			test_3_count_premature_disease_deaths_effect = { DISEASE = measles }
			test_3_count_premature_disease_deaths_effect = { DISEASE = dysentery }
			test_3_count_premature_disease_deaths_effect = { DISEASE = ergotism }
		}
	}
}



debug.0020 = {
	type = character_event
	title = debug_test_event_progress_title
	desc = debug_test_event_progress_desc
	theme = default
	orphan = yes
	
	widget = {
		gui = "event_window_widget_event_chain_progress"
		container = "custom_widgets_container"
		controller = event_chain_progress
	}
	immediate = {
		save_scope_value_as = { # 4 events in this event chain
			name = event_chain_length
			value = 4
		}
		save_scope_value_as = { # Of which we are on the 2nd event
			name = event_chain_progress
			value = 2
		}
	}

	option = { 
	}
}

debug.0299 = {
	hidden = yes
	orphan = yes

	immediate = {
		save_scope_as = owner
		create_artifact = {	
			name = debug_test_event_progress_title
			description = debug_test_event_progress_title
			visuals = mace
			type = regalia_simple
			quality = 0
			wealth = 0
			modifier = artifact_placeholder_modifier
			save_scope_as = newly_created_artifact
		}
		create_artifact = {	
			name = debug_test_event_progress_title
			description = debug_test_event_progress_title
			visuals = sword
			type = regalia_simple
			quality = 20
			wealth = 20
			modifier = artifact_placeholder_modifier
			save_scope_as = newly_created_artifact
		}
		create_artifact = {	
			name = debug_test_event_progress_title
			description = debug_test_event_progress_title
			visuals = dagger
			type = regalia_simple
			quality = 40
			wealth = 40
			modifier = artifact_placeholder_modifier
			save_scope_as = newly_created_artifact
		}
		create_artifact = {	
			name = debug_test_event_progress_title
			description = debug_test_event_progress_title
			visuals = axe
			type = regalia_simple
			quality = 60
			wealth = 60
			modifier = artifact_placeholder_modifier
			save_scope_as = newly_created_artifact
		}
		create_artifact = {	
			name = debug_test_event_progress_title
			description = debug_test_event_progress_title
			visuals = hammer
			type = regalia_simple
			quality = 80
			wealth = 80
			modifier = artifact_placeholder_modifier
			save_scope_as = newly_created_artifact
		}
		create_artifact = {	
			name = debug_test_event_progress_title
			description = debug_test_event_progress_title
			visuals = spear
			type = regalia_simple
			quality = 100
			wealth = 100
			modifier = artifact_placeholder_modifier
			save_scope_as = newly_created_artifact
		}
	}
}
debug.0300 = {
	hidden = yes
	orphan = yes

	immediate = {
		save_scope_as = owner
		random_character_artifact = {
			trigger_event = {
				id = artifact.1000
				days = 0
			}
		}
	}
}

debug.0301 = {
	type = character_event
	title = test_artifact_name
	desc = artifact_sword_description
	theme = stewardship_wealth_focus
	orphan = yes
	
	immediate = {
		create_artifact_weapon_effect = {
			OWNER = root
			CREATOR = root
			SET_WEAPON_TYPE = flag:artifact_weapon_type_sword
		}
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.302 = {
	type = character_event
	title = test_artifact_name
	desc = artifact_dagger_description
	theme = stewardship_wealth_focus
	orphan = yes
	
	immediate = {
		create_artifact_weapon_effect = {
			OWNER = root
			CREATOR = root
			SET_WEAPON_TYPE = flag:artifact_weapon_type_dagger
		}
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.303 = {
	type = character_event
	title = test_artifact_name
	desc = artifact_axe_description
	theme = stewardship_wealth_focus
	orphan = yes
	
	immediate = {
		create_artifact_weapon_effect = {
			OWNER = root
			CREATOR = root
			SET_WEAPON_TYPE = flag:artifact_weapon_type_axe
		}
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.304 = {
	type = character_event
	title = test_artifact_name
	desc = artifact_hammer_description
	theme = stewardship_wealth_focus
	orphan = yes
	
	immediate = {
		create_artifact_weapon_effect = {
			OWNER = root
			CREATOR = root
			SET_WEAPON_TYPE = flag:artifact_weapon_type_hammer
		}
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.305 = {
	type = character_event
	title = test_artifact_name
	desc = artifact_spear_description
	theme = stewardship_wealth_focus
	orphan = yes
	
	immediate = {
		create_artifact_weapon_effect = {
			OWNER = root
			CREATOR = root
			SET_WEAPON_TYPE = flag:artifact_weapon_type_spear
		}
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.306 = {
	type = character_event
	title = test_artifact_name
	desc = artifact_mace_description
	theme = stewardship_wealth_focus
	orphan = yes
	
	immediate = {
		create_artifact_weapon_effect = {
			OWNER = root
			CREATOR = root
			SET_WEAPON_TYPE = flag:artifact_weapon_type_mace
		}
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.307 = {
	type = character_event
	title = test_artifact_name
	desc = artifact_brooch_description
	theme = stewardship_wealth_focus
	orphan = yes
	
	immediate = {
		save_scope_as = owner
		create_artifact_brooch_effect = {
			OWNER = root
			SMITH = root
		}
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.310 = {
	type = character_event
	title = artifact_armor_name
	desc = artifact_armor_description
	theme = stewardship_wealth_focus
	override_background = {
		reference = wilderness
	}
	left_portrait = root
	orphan = yes
	
	immediate = {
		create_artifact_armor_effect = {
			OWNER = root
			CREATOR = root
			SET_ARMOR_TYPE = flag:no #Decided in the effect based on the variable saved on the inspiration owner
		}

	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.311 = {
	type = character_event
	title = artifact_armor_name
	desc = artifact_armor_description
	theme = stewardship_wealth_focus
	override_background = {
		reference = wilderness
	}
	left_portrait = root
	orphan = yes
	
	immediate = {
		create_artifact_armor_effect = {
			OWNER = root
			CREATOR = root
			SET_ARMOR_TYPE = flag:armor_type_lamellar
		}
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.312 = {
	type = character_event
	title = test_artifact_name
	desc = artifact_regalia_description
	theme = stewardship_wealth_focus
	override_background = {
		reference = throne_room
	}
	#left_portrait = root
	orphan = yes
	
	immediate = {
		random_dummy_gender_effect = yes
		create_artifact_regalia_effect = {
			OWNER = root
			SMITH = scope:dummy_gender
		}
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.313 = {
	type = character_event
	title = test_artifact_name
	desc = artifact_chest_description
	theme = stewardship_wealth_focus
	orphan = yes

	
	immediate = {
		save_scope_as = owner
		#Warcraft
		title:c_stormwind = { title_province = { add_to_list = artifact_material_sources } }
		create_artifact_chest_effect = {
			OWNER = root
			CARPENTER = root
		}
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}


debug.314 = {
	type = character_event
	title = test_artifact_name
	desc = artifact_cabinet_description
	theme = stewardship_wealth_focus
	orphan = yes

	
	immediate = {
		create_artifact_cabinet_effect = {
			OWNER = root
			CARPENTER = root
		}
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.315 = {
	type = character_event
	title = test_artifact_name
	desc = artifact_throne_description
	theme = stewardship_wealth_focus
	orphan = yes

	
	immediate = {
		save_scope_as = owner
		create_artifact_throne_effect = {
			OWNER = root
			MAKER = root
		}
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}


debug.316 = {
	type = character_event
	title = artifact_wall_tapestry_name
	desc = artifact_wall_tapestry_description
	theme = stewardship_wealth_focus
	orphan = yes

	immediate = {
		create_artifact_tapestry_effect = {
			OWNER = root
			WEAVER = root
		}
	}
	
	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.317 = {
	type = character_event
	title = test_artifact_name
	desc = artifact_crown_description
	theme = stewardship_wealth_focus
	orphan = yes

	
	immediate = {
		random_dummy_gender_effect = yes
		create_artifact_crown_effect = {
			OWNER = root
			SMITH = root
		}
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.318 = {
	type = character_event
	title = artifact_wall_tapestry_name
	desc = artifact_wall_tapestry_description
	theme = stewardship_wealth_focus
	orphan = yes

	immediate = {
		create_artifact_tapestry_effect = {
			OWNER = root
			WEAVER = root
		}
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.319 = {
	type = character_event
	title = artifact_box_small_name
	desc = artifact_box_small_description
	theme = stewardship_wealth_focus
	orphan = yes

	immediate = {
		create_artifact_box_small_effect = {
			OWNER = root
			CARPENTER = root
		}
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.320 = {
	type = character_event
	title = artifact_box_medium_name
	desc = artifact_box_medium_description
	theme = stewardship_wealth_focus
	orphan = yes

	immediate = {
		create_artifact_box_medium_effect = {
			OWNER = root
			CARPENTER = root
		}
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.321 = {
	type = character_event
	title = artifact_goblet_name
	desc = artifact_goblet_description
	theme = stewardship_wealth_focus
	orphan = yes

	immediate = {
		create_artifact_goblet_effect = {
				OWNER = root
				SMITH = root
			}
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.322 = {
	type = character_event
	title = debug.322.title
	desc = debug.322.desc
	theme = stewardship_wealth_focus
	orphan = yes

	immediate = {
		set_variable = { name = book_artifact_topic value = flag:martial_troop_compositions days = 1 }
		set_variable = { name = book_artifact_topic value = flag:martial_military_strategies days = 1 }
		set_variable = { name = book_artifact_topic value = flag:martial_ancient_military_campaigns days = 1 }
		set_variable = { name = book_artifact_topic value = flag:military days = 1 }
		set_variable = { name = book_artifact_topic value = flag:duels days = 1 }
		set_variable = { name = book_artifact_topic value = flag:diplomacy_court_politics days = 1 }
		set_variable = { name = book_artifact_topic value = flag:diplomacy_court_alliances days = 1 }
		set_variable = { name = book_artifact_topic value = flag:cicero days = 1 }
		set_variable = { name = book_artifact_topic value = flag:diplomacy_art_of_feasting days = 1 }
		set_variable = { name = book_artifact_topic value = flag:hitopadesa days = 1 }
		set_variable = { name = book_artifact_topic value = flag:kalila days = 1 }
		set_variable = { name = book_artifact_topic value = flag:edda days = 1 }
		set_variable = { name = book_artifact_topic value = flag:orkneyinga days = 1 }
		set_variable = { name = book_artifact_topic value = flag:jokes days = 1 }
		set_variable = { name = book_artifact_topic value = flag:learning_theological_treaties days = 1 }
		set_variable = { name = book_artifact_topic value = flag:learning_metaphysical_conundrums days = 1 }
		set_variable = { name = book_artifact_topic value = flag:aristotle days = 1 }
		set_variable = { name = book_artifact_topic value = flag:artifact_book_topic_anatomy days = 1 }
		set_variable = { name = book_artifact_topic value = flag:learning_tome_collections days = 1 }
		set_variable = { name = book_artifact_topic value = flag:prayers days = 1 }
		set_variable = { name = book_artifact_topic value = flag:hours days = 1 }
		set_variable = { name = book_artifact_topic value = flag:iliad days = 1 }
		set_variable = { name = book_artifact_topic value = flag:mahabharata days = 1 }
		set_variable = { name = book_artifact_topic value = flag:mufaddaliyat days = 1 }
		set_variable = { name = book_artifact_topic value = flag:stewardship_trade_routes days = 1 }
		set_variable = { name = book_artifact_topic value = flag:stewardship_lawmaking days = 1 }
		set_variable = { name = book_artifact_topic value = flag:stewardship_best_practices_tax_collectors days = 1 }
		set_variable = { name = book_artifact_topic value = flag:digest days = 1 }
		set_variable = { name = book_artifact_topic value = flag:architect days = 1 }
		set_variable = { name = book_artifact_topic value = flag:speculum days = 1 }
		set_variable = { name = book_artifact_topic value = flag:admin days = 1 }
		set_variable = { name = book_artifact_topic value = flag:intrigue_poisons days = 1 }
		set_variable = { name = book_artifact_topic value = flag:seduction days = 1 }
		set_variable = { name = book_artifact_topic value = flag:intrigue_the_art_of_love days = 1 }
		set_variable = { name = book_artifact_topic value = flag:artifact_book_topic_medicine days = 1 }
		set_variable = { name = book_artifact_topic value = flag:artifact_book_topic_herbs days = 1 }
		set_variable = { name = book_artifact_topic value = flag:artifact_book_topic_science days = 1 }
		set_variable = { name = book_artifact_topic value = flag:galen days = 1 }
		set_variable = { name = book_artifact_topic value = flag:artifact_book_topic_witch days = 1 }
		set_variable = { name = book_artifact_topic value = flag:artifact_book_topic_witch_bible days = 1 }
		set_variable = { name = book_artifact_topic value = flag:worship_horned_god days = 1 }
		set_variable = { name = book_artifact_topic value = flag:love_sorcery days = 1 }
		set_variable = { name = book_artifact_topic value = flag:curse_sorcery days = 1 }
		set_variable = { name = book_artifact_topic value = flag:artifact_book_topic_cannibal days = 1 }
		set_variable = { name = book_artifact_topic value = flag:artifact_book_topic_lunatic days = 1 }
		set_variable = { name = book_artifact_topic value = flag:artifact_book_topic_mystic days = 1 }
		set_variable = { name = book_artifact_topic value = flag:artifact_book_topic_hunter days = 1 }
		set_variable = { name = book_artifact_topic value = flag:artifact_book_topic_nature days = 1 }
		set_variable = { name = book_artifact_topic value = flag:artifact_book_topic_falconry days = 1 }
		set_variable = { name = book_artifact_topic value = flag:artifact_book_topic_dogs days = 1 }
		set_variable = { name = book_artifact_topic value = flag:artifact_book_topic_childhood days = 1 }
		set_variable = { name = book_artifact_topic value = flag:science days = 1 }
		save_scope_as = honorary_guest
		save_scope_as = honorary_guest_regular
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.323 = {
	type = character_event
	title = artifact_animal_hide_big_name
	desc = artifact_animal_hide_big_description
	theme = stewardship_wealth_focus
	orphan = yes
	artifact = {
		target = scope:newly_created_artifact
		position = lower_left_portrait
	}

	trigger = {
		any_realm_province = {
			OR = {
				terrain = forest
				terrain = steppe
				terrain = jungle
				terrain = taiga
				terrain = oasis
			}
		}
	}

	immediate = {
		save_scope_value_as = {
			name = animal_hide_size
			value = flag:big
		}
		create_artifact_animal_hide_effect = {
			OWNER = root
			HUNTER = root
			LEGENDARY = no
			ANIMAL = flag:none
		}
		random_realm_province = {
			limit = {
				OR = {
					terrain = forest
					terrain = steppe
					terrain = jungle
					terrain = taiga
					terrain = oasis
				}
			}
			save_scope_as = location
		}
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.324 = {
	type = character_event
	title = artifact_animal_hide_medium_name
	desc = artifact_animal_hide_medium_description
	theme = stewardship_wealth_focus
	orphan = yes
	artifact = {
		target = scope:newly_created_artifact
		position = lower_left_portrait
	}

	immediate = {
		save_scope_value_as = {
			name = animal_hide_size
			value = flag:medium
		}
		create_artifact_animal_hide_effect = {
			OWNER = root
			HUNTER = root
			LEGENDARY = no
			ANIMAL = flag:none
		}
		random_realm_province = {
			save_scope_as = location
		}
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.325 = {
	type = character_event
	title = artifact_small_hide_name
	desc = artifact_small_hide_description
	theme = stewardship_wealth_focus
	orphan = yes
	artifact = {
		target = scope:newly_created_artifact
		position = lower_left_portrait
	}

	immediate = {
		save_scope_value_as = {
			name = animal_hide_size
			value = flag:small
		}
		create_artifact_animal_hide_effect = {
			OWNER = root
			HUNTER = root
			LEGENDARY = no
			ANIMAL = flag:none
		}
		random_realm_province = {
			save_scope_as = location
		}
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.326 = {
	type = character_event
	title = artifact_wall_banner_name
	desc = artifact_wall_banner_description
	theme = stewardship_wealth_focus
	orphan = yes
	artifact = {
		target = scope:newly_created_artifact
		position = lower_left_portrait
	}

	trigger = {
		exists = var:epic_battle_location
		exists = var:epic_loser
	}

	immediate = {
		create_artifact_wall_banner_effect = { OWNER = root CREATOR = root TARGET = root.primary_title }
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.327 = {
	type = character_event
	title = artifact_wall_shield_name
	desc = artifact_wall_shield_description
	theme = stewardship_wealth_focus
	orphan = yes
	artifact = {
		target = scope:newly_created_artifact
		position = lower_left_portrait
	}

	immediate = {
		create_artifact_wall_shield_effect = {
			OWNER = root
			TARGET = root.house
			CREATOR = root
		}
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.328 = {
	type = character_event
	title = artifact_wall_skull_name
	desc = artifact_wall_shield_description
	theme = stewardship_wealth_focus
	orphan = yes
	artifact = {
		target = scope:newly_created_artifact
		position = lower_left_portrait
	}

	immediate = {
		create_artifact_wall_skull_effect = {
			OWNER = root
			HUNTER = root
			LEGENDARY = no
			ANIMAL = flag:none
		}
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.329 = {
	type = character_event
	title = artifact_wall_narwhal_horn_name
	desc = artifact_wall_narwhal_horn
	theme = stewardship_wealth_focus
	orphan = yes
	artifact = {
		target = scope:newly_created_artifact
		position = lower_left_portrait
	}

	immediate = {
		create_artifact_wall_narwhal_horn_effect = {
			OWNER = root
			HUNTER = root
		}
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

#debug.330 = {
#	type = character_event
#	title = artifact_wall_rhino_horn_name
#	desc = artifact_wall_rhino_horn
#	theme = stewardship_wealth_focus
#	orphan = yes
#
#	immediate = {
#		create_artifact_wall_rhino_horn_effect = { OWNER = root }
#	}
#
#	option = { 
#		name = debug_test_artifact_cloth_option
#	}
#}

debug.331 = {
	type = character_event
	title = artifact_sculpture_name
	desc = artifact_sculpture_description
	theme = stewardship_wealth_focus
	orphan = yes
	artifact = {
		target = scope:newly_created_artifact
		position = lower_left_portrait
	}

	immediate = {
		create_artifact_sculpture_effect = {
			OWNER = root
			SCULPTER = root
		}
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.332 = {
	type = character_event
	title = artifact_pedestal_rock_name
	desc = artifact_pedestal_rock_description
	theme = stewardship_wealth_focus
	orphan = yes

	immediate = {
		create_artifact_pedestal_rock_effect = { OWNER = root }
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.333 = {
	type = character_event
	title = artifact_pedestal_pouch_name
	desc = artifact_pedestal_pouch_description
	theme = stewardship_wealth_focus
	orphan = yes

	immediate = {
		create_artifact_pedestal_pouch_effect = { OWNER = root }
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.334 = {
	type = character_event
	title = artifact_pedestal_scroll_name
	desc = artifact_pedestal_scroll_description
	theme = stewardship_wealth_focus
	orphan = yes

	immediate = {
		create_artifact_pedestal_scroll_effect = {
			OWNER = root
			WRITER = root
		}
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.335 = {
	type = character_event
	title = artifact_pedestal_crucifix_name
	desc = artifact_pedestal_crucifix_description
	theme = stewardship_wealth_focus
	orphan = yes

	immediate = {
		create_artifact_pedestal_crucifix_effect = { OWNER = root }
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.336 = {
	type = character_event
	title = artifact_pedestal_cross_name
	desc = artifact_pedestal_cross_description
	theme = stewardship_wealth_focus
	orphan = yes

	immediate = {
		create_artifact_pedestal_cross_effect = { OWNER = root }
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.337 = {
	type = character_event
	title = artifact_pedestal_human_skull_name
	desc = artifact_pedestal_human_skull_description
	theme = stewardship_wealth_focus
	orphan = yes

	trigger = {
		scope:owner = {
			any_killed_character = {
				count >= 1
			}
		}
	}

	immediate = {
		create_artifact_pedestal_human_skull_effect = { OWNER = root DESKULLED = root CREATOR = root }
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.338 = {
	type = character_event
	title = artifact_pedestal_massive_diamond_name
	desc = artifact_pedestal_massive_diamond
	theme = stewardship_wealth_focus
	orphan = yes

	immediate = {
		create_artifact_pedestal_diamond_effect = { OWNER = root }
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.339 = {
	type = character_event
	title = artifact_pedestal_gold_nugget_name
	desc = artifact_pedestal_gold_nugget
	theme = stewardship_wealth_focus
	orphan = yes

	immediate = {
		create_artifact_pedestal_gold_effect = { OWNER = root }
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

#debug.340 = {
#	type = character_event
#	title = artifact_pedestal_mosque_lamp_name
#	desc = artifact_pedestal_mosque_lamp
#	theme = stewardship_wealth_focus
#	orphan = yes
#
#	immediate = {
#		create_artifact_pedestal_lamp_effect = { OWNER = root }
#	}
#
#	option = { 
#		name = debug_test_artifact_cloth_option
#	}
#}


debug.342 = {
	type = character_event
	title = artifact_book_title
	desc = artifact_book_description
	theme = stewardship_wealth_focus
	orphan = yes

	immediate = {
		random_dummy_gender_effect = yes
		save_scope_as = author
		create_artifact_book_effect = {
			OWNER = root
			CREATOR = scope:dummy_gender
			SET_SUBJECT = flag:no
			SET_TOPIC = flag:no
		}
	}

	option = { 
	name = debug_test_artifact_cloth_option
	}
}

debug.343 = {
	type = character_event
	title = artifact_pedestal_reliquary_christian_name
	desc = artifact_pedestal_reliquary_christian_description
	theme = stewardship_wealth_focus
	orphan = yes

	immediate = {
		#create_artifact_pedestal_reliquary_christian_effect = { OWNER = root }
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.344 = {
	type = character_event
	title = artifact_pedestal_reliquary_islam_name
	desc = artifact_pedestal_reliquary_islam_description
	theme = stewardship_wealth_focus
	orphan = yes

	immediate = {
		#create_artifact_pedestal_reliquary_islam_effect = { OWNER = root }
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.345 = {
	type = character_event
	title = artifact_pedestal_reliquary_buddhism_name
	desc = artifact_pedestal_reliquary_buddhism_description
	theme = stewardship_wealth_focus
	orphan = yes

	immediate = {
		#create_artifact_pedestal_reliquary_buddhism_effect = { OWNER = root }
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.346 = {
	type = character_event
	title = artifact_pedestal_reliquary_judaism_name
	desc = artifact_pedestal_reliquary_judaism_description
	theme = stewardship_wealth_focus
	orphan = yes

	immediate = {
		#create_artifact_pedestal_reliquary_judaism_effect = { OWNER = root }
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.347 = {
	type = character_event
	title = artifact_sculpture_religious_name
	desc = artifact_sculpture_religious_description
	theme = stewardship_wealth_focus
	orphan = yes

	trigger = {
		faith = {
			NOR = {
				has_doctrine = tenet_aniconism
				# Warcraft
				# religion = religion:judaism_religion
				like_judaism_religion_trigger = yes
				like_christianity_religion_trigger = yes
				like_islam_religion_trigger = yes
			}
		}
	}

	immediate = {
		create_artifact_sculpture_religious_effect = { OWNER = root }
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.348 = {
	type = character_event
	title = artifact_sculpture_religious_christian_name
	desc = artifact_sculpture_religious_christian_description
	theme = stewardship_wealth_focus
	orphan = yes

	trigger = {
		faith = {
			NOT = {
				has_doctrine = tenet_aniconism
			}
			like_christianity_religion_trigger = yes
		}
	}

	immediate = {
		create_artifact_sculpture_religious_christian_effect = { OWNER = root }
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

debug.349 = {
	type = character_event
	title = artifact_pedestal_reliquary_christian_name
	desc = artifact_pedestal_reliquary_christian_description
	theme = stewardship_wealth_focus
	orphan = yes

	immediate = {
		#Warcraft
		#create_artifact_pedestal_christian_relic_effect_hist = { OWNER = root }
		#create_artifact_pedestal_islamic_relic_effect_hist = { OWNER = root }
		#create_artifact_pedestal_buddhism_relic_effect_hist = { OWNER = root }
	}

	option = { 
		name = debug_test_artifact_cloth_option
	}
}

# Set relationship
debug.350 = {
	type = character_event
	title = set_relationship_debug_name
	desc = set_relationship_debug_desc
	theme = default
	left_portrait = scope:recipient

	option = {
		name = set_relationship_debug_friend_add

		trigger = {
			scope:actor = {
				can_set_relation_friend_trigger = { CHARACTER = scope:recipient }
			}
		}

		scope:actor = {
			set_relation_friend = { reason = test_friend_desc target = scope:recipient }
		}
	}
	option = {
		name = set_relationship_debug_friend_remove

		trigger = {
			scope:actor = {
				any_relation = {
					type = friend
					this = scope:recipient
				}
			}

			NOT = {
				scope:actor = {
					any_relation = {
						type = best_friend
						this = scope:recipient
					}
				}
			}
		}

		scope:actor = {
			remove_relation_friend = scope:recipient
		}
	}
	option = {
		name = set_relationship_debug_best_friend_add

		trigger = {
			scope:actor = {
				can_set_relation_best_friend_trigger = { CHARACTER = scope:recipient }
			}
		}

		scope:actor = {
			set_relation_best_friend = scope:recipient
		}
	}
	option = {
		name = set_relationship_debug_best_friend_remove

		trigger = {
			scope:actor = {
				any_relation = {
					type = best_friend
					this = scope:recipient
				}
			}
		}

		scope:actor = {
			remove_relation_best_friend = scope:recipient
		}
	}
	option = {
		name = set_relationship_debug_lover_add

		trigger = {
			scope:actor = {
				can_set_relation_lover_trigger = { CHARACTER = scope:recipient }
			}
		}

		scope:actor = {
			set_relation_lover = { reason = test_lover_desc target = scope:recipient }
		}
	}
	option = {
		name = set_relationship_debug_lover_remove

		trigger = {
			scope:actor = {
				any_relation = {
					type = lover
					this = scope:recipient
				}
			}

			NOT = {
				scope:actor = {
					any_relation = {
						type = soulmate
						this = scope:recipient
					}
				}
			}
		}

		scope:actor = {
			remove_relation_lover = scope:recipient
		}
	}
	option = {
		name = set_relationship_debug_soulmate_add

		trigger = {
			scope:actor = {
				can_set_relation_soulmate_trigger = { CHARACTER = scope:recipient }
			}
		}

		scope:actor = {
			set_relation_soulmate = { reason = test_soulmate_desc copy_reason = lover target = scope:recipient }
		}
	}
	option = {
		name = set_relationship_debug_soulmate_remove

		trigger = {
			scope:actor = {
				any_relation = {
					type = soulmate
					this = scope:recipient
				}
			}
		}

		scope:actor = {
			remove_relation_soulmate = scope:recipient
		}
	}
	option = {
		name = set_relationship_debug_childhood_bully_add

		trigger = {
			scope:actor = {
				can_set_relation_bully_trigger = { CHARACTER = scope:recipient }
			}
		}

		scope:actor = {
			set_relation_bully = scope:recipient
		}
	}
	option = {
		name = set_relationship_debug_childhood_bully_remove

		trigger = {
			scope:actor = {
				any_relation = {
					type = bully
					this = scope:recipient
				}
			}
		}

		scope:actor = {
			remove_relation_bully = scope:recipient
		}
	}
	option = {
		name = set_relationship_debug_childhood_victim_add

		trigger = {
			scope:actor = {
				can_set_relation_victim_trigger = { CHARACTER = scope:recipient }
			}
		}

		scope:actor = {
			set_relation_victim = scope:recipient
		}
	}
	option = {
		name = set_relationship_debug_childhood_victim_remove

		trigger = {
			scope:actor = {
				any_relation = {
					type = victim
					this = scope:recipient
				}
			}
		}

		scope:actor = {
			remove_relation_victim = scope:recipient
		}
	}
	option = {
		name = set_relationship_debug_rival_add

		trigger = {
			scope:actor = {
				can_set_relation_rival_trigger = { CHARACTER = scope:recipient }
			}
		}

		scope:actor = {
			set_relation_rival = {
				target = scope:recipient
				reason = rival_debug
			}
		}
	}
	option = {
		name = set_relationship_debug_rival_remove

		trigger = {
			scope:actor = {
				any_relation = {
					type = rival
					this = scope:recipient
				}
			}

			NOT = {
				scope:actor = {
					any_relation = {
						type = nemesis
						this = scope:recipient
					}
				}
			}
		}

		scope:actor = {
			remove_relation_rival = scope:recipient
		}
	}
	option = {
		name = set_relationship_debug_nemesis_add

		trigger = {
			scope:actor = {
				can_set_relation_nemesis_trigger = { CHARACTER = scope:recipient }
			}
		}

		scope:actor = {
			set_relation_nemesis = {
				target = scope:recipient
				reason = nemesis_debug
			}
		}
	}
	option = {
		name = set_relationship_debug_nemesis_remove

		trigger = {
			scope:actor = {
				any_relation = {
					type = nemesis
					this = scope:recipient
				}
			}
		}

		scope:actor = {
			remove_relation_nemesis = scope:recipient
		}
	}
	option = {
		name = set_relationship_debug_nevermind
	}
}

debug.360 = {
	type = character_event
	title = enter_text_save_in_death_title
	desc = enter_text_save_in_death_desc
	theme = default
	left_portrait = root
	orphan = yes

	widget = {
		gui = "event_window_widget_enter_text"
		container = "dynamic_birth_name"
		controller = {
			type = text
			data = {
				key = test_saved_text
				default = cat_name_mite
			}
		}
		setup_scope = {
			root = { save_scope_as = text_target }
		}
	}

	option = {
		name = enter_text_save_in_death_opt
		store_localized_text_in_death = test_saved_text
		add_to_global_variable_list = {
			name = test_saved_text_character
			target = root
		}
		remove_variable = test_saved_text
		death = natural
	}
}

debug.361 = {
	type = character_event
	title = enter_text_save_in_death_title
	desc = enter_text_save_in_death_retreive_desc
	theme = default
	left_portrait = scope:text_character
	orphan = yes

	immediate = {
		random_in_global_list = {
			variable = test_saved_text_character
			save_scope_as = text_character
		}
	}

	option = {
		name = enter_text_save_in_death_retreive_opt
	}
	option = {
		name = enter_text_save_in_death_clear_opt
		every_in_global_list = {
			variable = test_saved_text_character
			remove_localized_text = test_saved_text
		}
	}
}

debug.380 = {
	type = character_event
	hidden = yes
	theme = default
	orphan = yes

	immediate = {
		capital_province = {
			set_variable = {
				name = random_building_variable
				value = 0
				days = 365
			}
		}
	}
}

debug.400 = {
	type = character_event
	title = generate_artifact_with_history_debug_name
	desc = generate_artifact_with_history_debug_desc
	theme = default
	left_portrait = root
	right_portrait = scope:recipient

	option = {
		name = generate_artifact_with_history_debug_given
		generate_trinket_effect = {
			TRINKET_RECEIVER = root
			TRINKET_GIVER = scope:recipient
			GRAB_ALL_TRINKETS = yes
			HISTORY_TYPE = given
		}
	}

	option = {
		name = generate_artifact_with_history_debug_discovered
		generate_trinket_effect = {
			TRINKET_RECEIVER = root
			TRINKET_GIVER = scope:recipient
			GRAB_ALL_TRINKETS = yes
			HISTORY_TYPE = discovered
		}
	}

	option = {
		name = generate_artifact_with_history_debug_stolen_unknown
		generate_trinket_effect = {
			TRINKET_RECEIVER = root
			TRINKET_GIVER = scope:recipient
			GRAB_ALL_TRINKETS = yes
			HISTORY_TYPE = stolen_unknown
		}
	}

	option = {
		name = generate_artifact_with_history_debug_stolen
		generate_trinket_effect = {
			TRINKET_RECEIVER = root
			TRINKET_GIVER = scope:recipient
			GRAB_ALL_TRINKETS = yes
			HISTORY_TYPE = stolen
		}
	}

	option = {
		name = generate_artifact_with_history_debug_created_unknown
		generate_trinket_effect = {
			TRINKET_RECEIVER = root
			TRINKET_GIVER = scope:recipient
			GRAB_ALL_TRINKETS = yes
			HISTORY_TYPE = created_unknown
		}
	}

	option = {
		name = generate_artifact_with_history_debug_created
		generate_trinket_effect = {
			TRINKET_RECEIVER = root
			TRINKET_GIVER = scope:recipient
			GRAB_ALL_TRINKETS = yes
			HISTORY_TYPE = created
		}
	}

	option = {
		name = generate_artifact_with_history_debug_inherited_unknown
		generate_trinket_effect = {
			TRINKET_RECEIVER = root
			TRINKET_GIVER = scope:recipient
			GRAB_ALL_TRINKETS = yes
			HISTORY_TYPE = inherited_unknown
		}
	}

	option = {
		name = generate_artifact_with_history_debug_inherited
		generate_trinket_effect = {
			TRINKET_RECEIVER = root
			TRINKET_GIVER = scope:recipient
			GRAB_ALL_TRINKETS = yes
			HISTORY_TYPE = inherited
		}
	}

	option = {
		name = generate_artifact_with_history_debug_reforged
		generate_trinket_effect = {
			TRINKET_RECEIVER = root
			TRINKET_GIVER = scope:recipient
			GRAB_ALL_TRINKETS = yes
			HISTORY_TYPE = reforged
		}
	}

	option = {
		name = generate_artifact_with_history_debug_conquest
		generate_trinket_effect = {
			TRINKET_RECEIVER = root
			TRINKET_GIVER = scope:recipient
			GRAB_ALL_TRINKETS = yes
			HISTORY_TYPE = conquest
		}
	}

	option = {
		name = generate_artifact_with_history_debug_taken_in_siege
		generate_trinket_effect = {
			TRINKET_RECEIVER = root
			TRINKET_GIVER = scope:recipient
			GRAB_ALL_TRINKETS = yes
			HISTORY_TYPE = taken_in_siege
		}
	}

}

# Have Sex With Character (only usable via interaction)
debug.410 = {
	hidden = yes
	immediate = {
		send_interface_message = {
			type = sway_good_message
			title = debug_sex_interaction
			left_icon = scope:recipient
			right_icon = ROOT # References root instead of scope:actor to verify that root is defined
		
			had_sex_with_effect = {
				CHARACTER = scope:recipient
				PREGNANCY_CHANCE = pregnancy_chance
			}
		}
	}
}

# Warcraft
# Convert all of iberia to mozarab & conquer caucasian iberia
#debug.411 = { # For usage debugging achievements. Should be a generic command rather than a predefined event.
#	orphan = yes
#	hidden = yes
#	immediate = {
#		debug_log = "Iberia Converted to Mozarab!"
#		every_county_in_region = {
#			region = world_europe_west_iberia
#			set_county_faith = faith:mozarabic_church
#		}
#
#		debug_log = "Woosh! Caucasian Iberia is now yours!"
#		every_county_in_region = {
#			region = dlc_fp2_caucasian_iberia
#			create_title_and_vassal_change = {
#				type = conquest
#				save_scope_as = change
#			}
#			change_title_holder_include_vassals = {
#				holder = root
#				change = scope:change
#			}
#			resolve_title_and_vassal_change = scope:change
#			change_county_control = 100 # (Not actually necessary, apparently)
#		}
#	}
#}
# End of Warcraft

debug.412 = { # Spawn the CHESS-A-THRON 3000, a perfect creature designed to beat you up at the game of chess
	orphan = yes
	hidden = yes
	immediate = {
		create_character = {
			age = { 20 32 }
			location = root.capital_province
			gender_female_chance = root_faith_dominant_gender_female_chance
			culture = root.culture
			faith = root.faith
			random_traits = yes
			martial = 100
			learning = 100
			intrigue = 100
		
			dynasty = none
			after_creation = { 
				add_gold = { minor_gold_value medium_gold_value }
				add_prestige = { minor_prestige_gain medium_prestige_gain }
				add_piety = { minor_piety_gain medium_piety_gain }
			}
		
			save_scope_as = generated_actor
		}

		send_interface_toast = {
			type = event_toast_effect_good
			title = b_chessy
			left_icon = scope:generated_actor
		
			add_courtier = scope:generated_actor
		}
	}
}

# Cycle through duel animations (hardcoded) - but easy to read and expand upon :)
debug.415 = { # You could have a system that checks the scripted animations themselves, but this was made only to test the animations themselves
	type = character_event
	title = {
		desc = TITLE_ANIMATION
		desc = CONSTRUCT_BUILDINGS_DETAILS
	}
	desc = building_type_nalanda_university_desc

	theme = mental_break
	left_portrait = {
		character = root

		### DUEL ANIMATIONS
		# Axe
		triggered_animation = { # Aggressive animation
			trigger = { scope:animation_cycle = 0 scope:animation_view_celebrations = 0 }
			animation = aggressive_axe
		}
		triggered_animation = { # Celebration animation (Originally designed with an elegant, concatenating design, then I realized the engine did not support it.)
			trigger = { scope:animation_cycle = 0 scope:animation_view_celebrations = 1 }
			animation = celebrate_axe
		}
		# Mace
		triggered_animation = { # Aggressive animation
			trigger = { scope:animation_cycle = 1 scope:animation_view_celebrations = 0 }
			animation = aggressive_mace
		}
		triggered_animation = { # Celebration animation
			trigger = { scope:animation_cycle = 1 scope:animation_view_celebrations = 1 }
			animation = celebrate_mace
		}
		# Sword
		triggered_animation = { # Aggressive animation
			trigger = { scope:animation_cycle = 2 scope:animation_view_celebrations = 0 }
			animation = aggressive_sword
		}
		triggered_animation = { # Celebration animation
			trigger = { scope:animation_cycle = 2 scope:animation_view_celebrations = 1 }
			animation = celebrate_sword
		}
		# Dagger
		triggered_animation = { # Aggressive animation
			trigger = { scope:animation_cycle = 3 scope:animation_view_celebrations = 0 }
			animation = aggressive_dagger
		}
		triggered_animation = { # Celebration animation
			trigger = { scope:animation_cycle = 3 scope:animation_view_celebrations = 1 }
			animation = celebrate_dagger
		}
		# Spear
		triggered_animation = { # Aggressive animation
			trigger = { scope:animation_cycle = 4 scope:animation_view_celebrations = 0 }
			animation = aggressive_spear
		}
		triggered_animation = { # Celebration animation
			trigger = { scope:animation_cycle = 4 scope:animation_view_celebrations = 1 }
			animation = celebrate_spear
		}
		# Hammer
		triggered_animation = { # Aggressive animation
			trigger = { scope:animation_cycle = 5 scope:animation_view_celebrations = 0 }
			animation = aggressive_hammer
		}
		triggered_animation = { # Celebration animation
			trigger = { scope:animation_cycle = 5 scope:animation_view_celebrations = 1 }
			animation = celebrate_hammer
		}
		# Fallback
		animation = aggressive_sword
	}
	artifact = {
		target = root.var:signature_weapon_scope
		position = lower_left_portrait
		trigger = { exists = root.var:signature_weapon_scope }
	}

	immediate = {
		# Create variables used for tracking where in the cycle you are
		if = {
			limit = { exists = scope:animation_cycle }
			if = {
				limit = { scope:animation_cycle_action = 1 }
				save_scope_value_as = {
					name = animation_cycle
					value = {
						value = scope:animation_cycle
						add = 1
					}
				}
			}
			if = {
				limit = { scope:animation_cycle_action = 0 }
				save_scope_value_as = {
					name = animation_cycle
					value = {
						value = scope:animation_cycle
						subtract = 1
					}
				}
			}
		}
		else = {
			save_scope_value_as = {
				name = animation_cycle
				value = 0
			}
			save_scope_value_as = {
				name = animation_view_celebrations
				value = 0
			}
		}

		# Wrapping support
		if = {
			limit = { scope:animation_cycle < 0 } # Go from the back to the top
			save_scope_value_as = {
				name = animation_cycle
				value = 5 # Replace this with the highest number in the animation set
			}
		}
		if = {
			limit = { scope:animation_cycle > 5 } # Replace this with the highest number in the animation set
			save_scope_value_as = {
				name = animation_cycle
				value = 0
			}
		}
	}

	option = { # Forward (next anim)
		name = dynn_Daflos_motto

		save_scope_value_as = {
			name = animation_cycle_action
			value = 1
		}

		trigger_event = debug.415
	}

	option = { # Backwards (prev anim)
		name = default_retreat

		save_scope_value_as = {
			name = animation_cycle_action
			value = 0
		}

		trigger_event = debug.415
	}

	option = { # Switch to celebration animations
		name = lover.3215.t
		trigger = { scope:animation_view_celebrations = 0 }
		save_scope_value_as = {
			name = animation_view_celebrations
			value = 1
		}
		save_scope_value_as = {
			name = animation_cycle_action
			value = 2 # Used to keep still
		}

		trigger_event = debug.415
	}

	option = { # Switch back from celebration animations
		name = hold_court.8110.t
		trigger = { scope:animation_view_celebrations = 1 }
		save_scope_value_as = {
			name = animation_view_celebrations
			value = 0
		}
		save_scope_value_as = {
			name = animation_cycle_action
			value = 2
		}

		trigger_event = debug.415
	}

	option = { name = EXIT_TO_DESKTOP } # Exit debug event
}

# Debug set up conditions for childhood_education.0004
debug.418 = {
	hidden = yes
	immediate = {
		debug_log = "Running autotest for childhood_education.0004"
		if = {
			limit = { 
				any_relation = {
					type = ward
					has_any_focus = no
				}
			}
			add_piety = 50000 # Acts as a warning that maintenance events did not run
		}
		if = {
			limit = { # Then, this second time, we give it a new focus to force childhood_education.0004 to trigger
				any_relation = {
					type = ward
					has_focus = education_martial
				}
			}
			random_relation = { # Change focus
				type = ward
				set_focus = education_diplomacy
			}
			# (this is the part where the event auto-triggers itself) (or should. All reqs are met but it seems the hook fails)
		}
		else = {
			random_relation = {
				type = ward
				set_focus = education_martial  # Change focus (gives first focus), then call event again
			}
			trigger_event = debug.418 # Apparently the fact that this event calls itself makes it no longer an orphan, which I find very amusing
		}
	}
}

# Family Feud 
debug.501 = { # Have another house murder my close family
	type = character_event
	hidden = yes
	orphan = yes

	immediate = {
		faith = {
			random_faith_playable_ruler = {
				limit = {
					in_diplomatic_range = root
					NOT = { house = root.house }
				}
				save_scope_as = killer_scope
			}
		}
		random_close_family_member = {
			limit = {
				is_close_family_of = root
				NOT = { this = root }
			}
			death = {
				death_reason = death_duel
				killer = scope:killer_scope
			}
		}
	}
}

debug.502 = { # Have another house kill me
	type = character_event
	hidden = yes
	orphan = yes

	immediate = {
		faith = {
			random_faith_playable_ruler = {
				limit = {
					house_feud_valid_feud_target_trigger = yes
				}
				save_scope_as = killer_scope
			}
		}
		death = {
			death_reason = death_duel
			killer = scope:killer_scope
		}
	}
}

debug.503 = { # Have my house kill a feud target member
	type = character_event
	hidden = yes
	orphan = yes

	trigger = {
		any_owned_story = {
			story_type = story_cycle_house_feud
			has_variable = house_feud_house
			var:house_feud_house = {
				any_house_member = {
					NOT = { this = this.house.house_head }
				}
			}
		}
		house = {
			any_house_member = {
				NOT = { this = root }
			}
		}
	}

	immediate = {
		random_owned_story = {
			limit = {
				story_type = story_cycle_house_feud
				has_variable = house_feud_house
				var:house_feud_house = {
					any_house_member = {
						NOT = { this = this.house.house_head }
					}
				}
			}
			var:house_feud_house = {
				random_house_member = {
					save_scope_as = victim_scope
				}
			}
		}
		house = {
			random_house_member = {
				limit = {
					NOT = { this = root }
				}
				save_scope_as = murderer_scope
			}
		}
		scope:victim_scope = {
			death = {
				death_reason = death_duel
				killer = scope:murderer_scope
			}
		}
	}
}

debug.504 = { # Have my house killed by a feud target member
	type = character_event
	hidden = yes
	orphan = yes

	trigger = {
		any_owned_story = {
			story_type = story_cycle_house_feud
			has_variable = house_feud_house
			var:house_feud_house = {
				any_house_member = {
					NOT = { this = this.house.house_head }
				}
			}
		}
		house = {
			any_house_member = {
				NOT = { this = root }
			}
		}
	}

	immediate = {
		random_owned_story = {
			limit = {
				story_type = story_cycle_house_feud
				has_variable = house_feud_house
				var:house_feud_house = {
					any_house_member = {
						NOT = { this = this.house.house_head }
					}
				}
			}
			var:house_feud_house = {
				random_house_member = {
					save_scope_as = murderer_scope
				}
			}
		}
		house = {
			random_house_member = {
				limit = {
					NOT = { this = root }
				}
				save_scope_as = victim_scope
			}
		}
		scope:victim_scope = {
			death = {
				death_reason = death_duel
				killer = scope:murderer_scope
			}
		}
	}
}

debug.510 = { # Placeholder debug event - Used to mark the location of placeholders
	type = character_event
	title = { # My favourite movie of the original triology
		desc = d_star_company_adj
		desc = game_concept_wars
		desc = KEY_KP_MINUS
		desc = cat_revenge_modifier
	}
	desc = {
		desc = childhood.7400_mother_dead
		desc = double_line_break
		desc = RELIGION_LOC_PLACEHOLDER
		desc = double_line_break
		desc = RELIGION_LOC_PLACEHOLDER
		desc = double_line_break
		desc = RELIGION_LOC_PLACEHOLDER
		desc = double_line_break
		desc = RELIGION_LOC_PLACEHOLDER
	}

	#orphan = yes
	theme = mental_break
	left_portrait = root
	right_portrait = character:1

	option = { name = debug_generic_option  } # Dear debug console, quiet please.
	option = { name = debug_generic_option trigger = { always = no } trigger_event = debug.510 }
}

debug.511 = { # Set secret faith for Character
	type = character_event
	theme = default
	orphan = yes

	title = LOREM_IPSUM_TITLE
	desc = LOREM_IPSUM_DESCRIPTION

	option = {
		name = debug.511.a

		trigger = {
			NOT = { exists = root.secret_faith }
		}

		root = {
			make_character_crypto_religionist_effect = { CRYPTO_RELIGION = faith:death_god }
		}
	}

	option = {
		name = debug.511.b

		trigger = {
			exists = root.secret_faith
		}

		root = {
			remove_character_secret_faith = yes
		}
	}
}

debug.512 = {
	type = character_event
	theme = default
	orphan = yes

	title = LOREM_IPSUM_TITLE
	desc = LOREM_IPSUM_DESCRIPTION

	option = {
		name = debug.512.a
	}
}

debug.513 = {
	title = debug_main
	desc = debug_main
	theme = ep2_video_test
	orphan = yes

	option = {
		name = debug_main
	}
}

debug.605 = {
	type = character_event
	title = debug_main
	desc = debug_main
	theme = default
	orphan = yes

	left_portrait = root

	option = {
		name = debug_main
		stress_impact = {
			base = 30
		}
	}
	option = {
		name = debug_main

		trigger = {
			dread > 20
		}
	}
	option = {
		name = debug_main

		trigger = {
			has_trait = diligent
		}
	}
	option = {
		name = debug_main

		trigger = {
			martial > 10
		}
	}
	option = {
		name = debug_main
		stress_impact = {
			base = 30
		}

		trigger = {
			dread > 20
			has_trait = diligent
			has_trait = brave
			martial > 10
			stewardship > 10
		}
	}
}

#steam rich presence test - update this event with your new rich presence text to see it in the desc
#debug.700

debug.9595 = {
	type = character_event
	title = LOREM_IPSUM_TITLE
	desc = PROGRESS_TO_VICTORY_DEBUG
	theme = realm
	orphan = yes
	lower_right_portrait = scope:bottom
	lower_left_portrait = scope:top

	immediate = {
		involved_activity = { save_scope_as = activity }
		scope:activity = {
			ordered_attending_character = {
				limit = {
					trigger_if = {
						limit = { activity_tournament_race_contest_trigger = no }
						activity_is_valid_tournament_contestant = yes
					}
					exists = var:contest_aptitude
				}
				order_by = var:contest_aptitude
				save_scope_as = top
			}
			ordered_attending_character = {
				limit = {
					trigger_if = {
						limit = { activity_tournament_race_contest_trigger = no }
						activity_is_valid_tournament_contestant = yes
					}
					exists = var:contest_aptitude
				}
				order_by = {
					value = 0
					subtract = var:contest_aptitude
				}
				save_scope_as = bottom
			}
		}
	}

	option = {
		name = LOREM_IPSUM_TITLE
	}
}
# Warcraft

#	Test for maximum usage of everything in activities.
debug.9601 = {
	type = activity_event
	title = debug_9601.t
	desc = debug_9601.desc
	theme = feast_activity
	left_portrait = {
		character = root
		animation = hunting_falcon
	}
	center_portrait = {
		character = root
		animation = hunting_falcon
	}
	right_portrait = {
		character = root
		animation = hunting_falcon
	}
	lower_left_portrait = root
	lower_center_portrait = root
	lower_right_portrait = root
	orphan = yes

	trigger = { always = no }

	# Ayyy.
	option = { name = debug_9601.a }

	# Yo.
	option = { name = debug_9601.b }

	# I'm eventing here.
	option = { name = debug_9601.c }

	# Come on.
	option = { name = debug_9601.d }
}

debug.9610 = { # Spawn a super tax collector
	hidden = yes
	orphan = yes

	immediate = {
		create_character = {
			name = "Super Tax Collector"
			age = { 20 32 }
			location = root.capital_province
			gender_female_chance = root_faith_dominant_gender_female_chance
			culture = root.culture
			faith = root.faith
			random_traits = yes
			trait = blind
			stewardship = 100
		
			dynasty = none
			after_creation = {  add_character_flag = is_guaranteed_excellent_tax_collector }
		
			save_scope_as = generated_actor
		}

		send_interface_message = {
			type = event_stewardship_good
			title = governance_1053_corrupt_tax_collectors_modifier
			right_icon = scope:generated_actor
		
			add_courtier = scope:generated_actor
		}	
	}
}

debug.9611 = { # Spawn a assassin
	hidden = yes
	orphan = yes

	immediate = {
		create_character = {
			name = "Super Assassin"
			age = { 20 32 }
			location = root.capital_province
			gender_female_chance = root_faith_dominant_gender_female_chance
			culture = root.culture
			faith = root.faith
			random_traits = yes
			intrigue = 100
			prowess = 100
			trait = schemer
			trait = education_intrigue_4
		
			dynasty = none
		
			save_scope_as = generated_actor
		}

		send_interface_message = {
			type = event_stewardship_good
			title = {
				desc = d_assassin
				desc = motto_greed
			}
			right_icon = scope:generated_actor
		
			add_courtier = scope:generated_actor
		}	
	}
}

debug.9620 = { # Hunt Artifacts
	type = character_event
	title = LOREM_IPSUM_TITLE
	desc = LOREM_IPSUM_DESCRIPTION
	theme = realm
	orphan = yes

	left_portrait = {
		character = root
		animation = happiness
	}
	
	right_portrait = {
		character = scope:hunter
		scripted_animation = bow_drawn
	}

	artifact = {
		target = scope:trinket
		position = lower_right_portrait
	}
	artifact = {
		target = scope:skull
		position = lower_center_portrait
	}
	artifact = {
		target = scope:hide
		position = lower_left_portrait
	}

	immediate = {
		random_courtier = { save_scope_as = hunter }
		hidden_effect = {
			random_list = {
				1 = {
					hunt_activity_standard_game_effect = { PROVINCE = root.capital_province HUNTER = root }
				}
				1 = {
					hunt_activity_dangerous_game_effect = { PROVINCE = root.capital_province }
				}
			}
		}
		hunt_activity_standard_game_effect = { PROVINCE = root.capital_province HUNTER = root }
		create_artifact_animal_hide_effect = {
			OWNER = root
			HUNTER = scope:hunter
			LEGENDARY = no
			ANIMAL = root.var:animal_type
		}
		scope:newly_created_artifact ?= { save_scope_as = hide }
		if = {
			limit = {
				can_animal_produce_skull_trigger = { VARIABLE = root.var:animal_type }
			}
			create_artifact_wall_skull_effect = {
				OWNER = root
				HUNTER = scope:hunter
				LEGENDARY = no
				ANIMAL = root.var:animal_type
			}
			scope:newly_created_artifact ?= { save_scope_as = skull }
		}
		create_artifact_animal_trinket_effect = {
			OWNER = root
			HUNTER = scope:hunter
			LEGENDARY = no
			ANIMAL = root.var:animal_type
		}
		scope:newly_created_artifact ?= { save_scope_as = trinket }
	}

	option = {
		name = LOREM_IPSUM_TITLE
	}

	after = { remove_variable = animal_type }
}

debug.9621 = { # Legendary Artifacts
	type = character_event
	title = LOREM_IPSUM_TITLE
	desc = LOREM_IPSUM_DESCRIPTION
	theme = realm
	orphan = yes

	left_portrait = {
		character = root
		animation = happiness
	}
	
	right_portrait = {
		character = scope:hunter
		scripted_animation = bow_drawn
	}

	artifact = {
		target = scope:trinket
		position = lower_right_portrait
	}
	artifact = {
		target = scope:skull
		position = lower_center_portrait
	}
	artifact = {
		target = scope:hide
		position = lower_left_portrait
	}

	immediate = {
		random_courtier = { save_scope_as = hunter }
		hidden_effect = {
			random_list = {
				1 = {
					hunt_activity_standard_game_effect = { PROVINCE = root.capital_province HUNTER = root }
				}
				1 = {
					hunt_activity_dangerous_game_effect = { PROVINCE = root.capital_province }
				}
			}
		}
		hunt_activity_standard_game_effect = { PROVINCE = root.capital_province HUNTER = root }
		create_artifact_animal_hide_effect = {
			OWNER = root
			HUNTER = scope:hunter
			LEGENDARY = yes
			ANIMAL = root.var:animal_type
		}
		scope:newly_created_artifact ?= { save_scope_as = hide }
		if = {
			limit = {
				can_animal_produce_skull_trigger = { VARIABLE = root.var:animal_type }
			}
			create_artifact_wall_skull_effect = {
				OWNER = root
				HUNTER = scope:hunter
				LEGENDARY = yes
				ANIMAL = root.var:animal_type
			}
			scope:newly_created_artifact ?= { save_scope_as = skull }
		}
		create_artifact_animal_trinket_effect = {
			OWNER = root
			HUNTER = scope:hunter
			LEGENDARY = yes
			ANIMAL = root.var:animal_type
		}
		scope:newly_created_artifact ?= { save_scope_as = trinket }
	}

	option = {
		name = LOREM_IPSUM_TITLE
	}

	after = { remove_variable = animal_type }
}
