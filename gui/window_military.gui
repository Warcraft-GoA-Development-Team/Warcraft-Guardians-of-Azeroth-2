###################################################
################### MILTARY VIEW #####################
######################################################

window = {
	name = "military_view"
	widgetid = "military_view"
	datacontext = "[GetVariableSystem]"
	datacontext = "[GetPlayer]"
	parentanchor = top|right
	# Warcraft
	visible = "[And(IsGameViewOpen('military'), Not(GetVariableSystem.HasValue( 'right_window_open', 'pol_factions' )))]"

	layer = windows_layer
	movable = no

	using = Window_Size_MainTab

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
		using = Window_Position_MainTab

		on_start = "[GetVariableSystem.Set( 'military_view_mercenaries', 'mercenaries' )]"

		# Warcraft
		on_start = "[GetVariableSystem.Set( 'right_window_open', 'military' )]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
		using = Window_Position_MainTab_Hide

		# Warcraft
		on_start = "[GetVariableSystem.ClearIf( 'right_window_open', GetVariableSystem.HasValue( 'right_window_open', 'military' ) )]"
	}

	margin_widget = {
		size = { 100% 100% }
		margin = { 0 26 }
		margin_right = 13

		widget = {
			size = { 100% 100% }

			### WINDOW CONTENT
			vbox = {
				using = Window_Margins

				widget_header_with_picture = {
					layoutpolicy_horizontal = expanding

					blockoverride "header_text" {
						text = "MILITARY_VIEW"
					}

					blockoverride "illustration_texture" {
						texture = "gfx/interface/illustrations/window_headers/header_military.dds"
					}

					blockoverride "button_close" {
						onclick = "[MilitaryView.Close]"
					}

					flowcontainer = {
						parentanchor = bottom|right
						spacing = 5
						margin = { 10 5 }

						ignoreinvisible = yes

						button_primary = {
							name = "tutorial_highlight_raise_troops_button"
							datacontext = "[GetPlayer]"
							onclick = "[PlayerRaiseAllRegiments]"
							enabled = "[PlayerCanRaiseAnyRallyPoint]"

							text = "RAISE_ALL"
							size = {180 32}

							tooltip = "[GetPlayerRaiseAllTooltip]"
							using = tooltip_se
							clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_raise_army"

							# animation_attention_text = {
							# 	visible = "[And( And( GetPlayer.IsAtWar, PlayerCanRaiseAnyRallyPoint ),Not(GetPlayer.HasRaisedRegiments) )]"
							# }
						}

						button_standard = {
							datacontext = "[GetPlayer]"
							onclick = "[PlayerRaiseAllRaidRegiments]"
							visible = "[Character.CanRaid]"
							enabled = "[PlayerCanRaiseAnyRaiderRallyPoint]"

							text = "RAISE_ALL_RAIDERS"
							size = { 200 32 }

							tooltip = "[GetPlayerRaiseAllRaidersTooltip]"
							using = tooltip_se
							clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_raise_army"
						}

						button_standard = {
							datacontext = "[GetPlayer]"

							onclick = "[PlayerDisbandAll]"
							enabled = "[PlayerCanDisbandAll]"

							text = "DISBAND_ALL"
							size = { 135 32 }

							tooltip = "[GetDisbandAllTooltip]"
							using = tooltip_se
							clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_unit_army_disband"
						}
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					margin_bottom = 5

					button_tab = {
						layoutpolicy_horizontal = expanding
						onclick = "[MilitaryView.SetActiveTab( 'owned_armies' )]"
						down = "[MilitaryView.IsTabActive( 'owned_armies' )]"

						text_single = {
							text = "BANNER_TROOPS_TAB"
							parentanchor = center

							maximumsize = { 400 -1 }
							default_format = "#low"
						}
					}

					button_tab = {
						name = ra_highlight_imperial_armies
						widgetid = ra_highlight_imperial_armies

						visible = "[MilitaryView.GetCharacter.GetGovernment.HasRule( 'administrative' )]"
						layoutpolicy_horizontal = expanding

						onclick = "[MilitaryView.SetActiveTab( 'title_troops' )]"
						down = "[MilitaryView.IsTabActive( 'title_troops' )]"

						text_single = {
							parentanchor = center
							text = "MV_ARMIES_SELECTION_IMPERIAL"

							maximumsize = { 400 -1 }
							default_format = "#low"
						}
					}

					button_tab = {
						layoutpolicy_horizontal = expanding
						onclick = "[MilitaryView.SetActiveTab( 'mercenary' )]"
						down = "[MilitaryView.IsTabActive( 'mercenary' )]"

						text_single = {
							text = "MV_MERCENARIES"
							parentanchor = center

							maximumsize = { 400 -1 }
							default_format = "#low"
						}
					}


				}

				# Your Armies
				vbox = {
					name = "tab_your_armies"
					visible = "[MilitaryView.IsTabActive( 'owned_armies' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					using = Animation_Tab_Switch

					scrollbox = {
						name = "scrollbox_troops"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						background = {
							texture = "gfx/interface/skinned/illustrations/moving.dds"
							fittype = end
							alpha = 0.3

							using = Mask_Rough_Edges

							modify_texture = {
								texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
								blend_mode = alphamultiply
								mirror = vertical
							}
						}

						blockoverride "scrollbox_content" {
							vbox_your_armies = {
								visible = "[Or(GetVariableSystem.HasValue( 'military_view_armies', 'personal' ), Or(Not(GetVariableSystem.Exists('military_view_armies')), Not(MilitaryView.GetCharacter.GetGovernment.HasRule( 'administrative' ))))]"

								layoutpolicy_horizontal = expanding
								margin = { 10 0 }
								spacing = 10
							}

							vbox_imperial_armies = {
								visible = "[GetVariableSystem.HasValue( 'military_view_armies', 'imperial' )]"
								layoutpolicy_horizontal = expanding
							}
						}
					}

					hbox = {
						visible = "[GetVariableSystem.HasValue( 'military_view_armies', 'imperial' )]"
						margin_top = 5
						margin_bottom = -10
						spacing = 5

						button_standard = {
							datacontext = "[GetPlayer]"
							visible = "[Character.GetGovernment.HasRule( 'administrative' )]"
							enabled = "[MilitaryView.CanReturnControlledMaA]"
							onclick = "[MilitaryView.ReturnControlledMaA]"

							text = "MV_RETURN_CONTROLLED"
						}

						button_standard = {
							datacontext = "[GetPlayer]"
							visible = "[And(Character.GetGovernment.HasRule( 'administrative' ), Character.IsIndependentRuler)]"
							enabled = "[MilitaryView.CanReturnReassignedMaA]"
							onclick = "[MilitaryView.ReturnReassignedMaA]"

							text = "MV_RETURN_REASSIGNED"
						}
					}

					vbox = {
						name = "rally_points"
						layoutpolicy_horizontal = expanding
						margin = { 25 10 }
						spacing = 5

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "MV_RALLY_POINTS"
						}

						divider_light = {
							layoutpolicy_horizontal = expanding
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							hbox = {
								name = "rally_point_list"
								datamodel = "[MilitaryView.GetRallyPoints]"

								item = {
									button = {
										name = "rally_point_button"
										datacontext = "[RallyPointItem.GetRallyPoint]"
										size = { 50 50 }
										onclick = "[RallyPointItem.OnClick]"
										tooltip = "MV_RALLY_POINT_TT"
										using = tooltip_ne
										texture = "gfx/interface/window_military/banner_icon.dds"
										tintcolor = "[RallyPoint.GetColor]"
									}
								}
							}

							button_plus_small = {
								name = "add_rally_point"
								enabled = "[MilitaryView.CanAddRallyPoint]"
								onclick = "[MilitaryView.OnAddRallyPoint]"
								tooltip = "[MilitaryView.GetAddRallyPointTooltip]"
							}

							expand = {}
						}
					}

					vbox = {
						name = "footer"
						layoutpolicy_horizontal = expanding
						margin = { 90 0 }
						margin_bottom = 10

						background = {
							using = Background_Bottom_Fade
							margin_bottom = 20
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							margin = { 10 10 }
							spacing = 2

							background = {
								using = Background_Area
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								visible = "[Not(GetPlayer.GetGovernment.IsType( 'landless_adventurer_government' ))]"

								button_checkbox_label = {
									onclick = "[MilitaryView.OnMilitaryReinforcementClick]"
									tooltip = "[MilitaryView.GetMilitaryReinforcementCostTooltip]"

									blockoverride "checkbox"
									{
										checked = "[MilitaryView.IsMilitaryReinforcementsEnabled]"
									}

									blockoverride "text"
									{
										text = "MONTHLY_REINFORCEMENT_COST_LABEL"
									}
								}

								expand = {}
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								visible = "[GetPlayer.GetGovernment.IsType( 'landless_adventurer_government' )]"

								text_multi = {
									text = "ADVENTURER_MAINTENANCE_INFO"
									align = nobaseline
									autoresize = yes
									max_width = 350
									default_format = "#weak"
								}

								expand = {}
							}

							divider_light = {
								layoutpolicy_horizontal = expanding
							}

							vbox = {
								layoutpolicy_horizontal = expanding

								hbox = {
									layoutpolicy_horizontal = expanding
									spacing = 5

									text_single = {
										text = "MONTHLY_MAINTENANCE_LABEL"
										maximumsize = { 400 -1 }
									}

									expand = {
										size = { 28 28 }
									}

									icon = {
										size = { 28 28 }
										visible = "[MilitaryView.HasEmbarkedArmies]"
										texture = "gfx/interface/icons/map_icons/naval_transportation.dds"
										tooltip = "MV_EMBARKED_TT"
									}

									text_single = {
										datacontext = "[MilitaryView.GetGoldMilitaryExpenses]"
										visible = "[NotEqualTo_CFixedPoint(ValueBreakdown.GetFixedPointValue, '(CFixedPoint)0')]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"

										tooltipwidget = {
											recursive = yes

											widget_value_breakdown_tooltip = {}
										}
									}

									text_single = {
										datacontext = "[MilitaryView.GetPrestigeMilitaryExpenses]"
										visible = "[NotEqualTo_CFixedPoint(ValueBreakdown.GetFixedPointValue, '(CFixedPoint)0')]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"

										tooltipwidget = {
											recursive = yes

											widget_value_breakdown_tooltip = {}
										}
									}

									text_single = {
										datacontext = "[MilitaryView.GetPietyMilitaryExpenses]"
										visible = "[NotEqualTo_CFixedPoint(ValueBreakdown.GetFixedPointValue, '(CFixedPoint)0')]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"

										tooltipwidget = {
											recursive = yes

											widget_value_breakdown_tooltip = {}
										}
									}

									text_single = {
										text = "COST_RESULT_NOTHING"
										visible = "[And(EqualTo_CFixedPoint(MilitaryView.GetGoldMilitaryExpenses.GetFixedPointValue, '(CFixedPoint)0') ,And( EqualTo_CFixedPoint( MilitaryView.GetPrestigeMilitaryExpenses.GetFixedPointValue, '(CFixedPoint)0'), EqualTo_CFixedPoint(MilitaryView.GetPietyMilitaryExpenses.GetFixedPointValue, '(CFixedPoint)0') ) ) ]"
										maximumsize = { 400 -1 }
										default_format = "#high"
									}
								}

								hbox = {
									visible = "[MilitaryView.HasAnyRaisedMilitaryExpenses]"
									layoutpolicy_horizontal = expanding
									spacing = 10

									expand = {}

									text_single = {
										text = "MONTHLY_MAX_MAINTENANCE_LABEL"
										maximumsize = { 400 -1 }
										tooltip = "MONTHLY_MAX_MAINTENANCE_TT"
										align = nobaseline
									}

									text_single = {
										datacontext = "[MilitaryView.GetAllRaisedGoldMilitaryExpenses]"
										visible = "[MilitaryView.HasAllRaisedGoldMilitaryExpenses]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"
										align = nobaseline

										tooltipwidget = {
											recursive = yes
											widget_value_breakdown_tooltip = {}
										}
									}

									text_single = {
										visible = "[MilitaryView.HasAllRaisedGoldMilitaryExpenses]"
										text = "MONTHLY_MAX_MAINTENANCE_VIEW"
										maximumsize = { 400 -1 }
										default_format = "#weak"
										align = nobaseline
									}

									text_single = {
										datacontext = "[MilitaryView.GetAllRaisedPrestigeMilitaryExpenses]"
										visible = "[MilitaryView.HasAllRaisedPrestigeMilitaryExpenses]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"
										align = nobaseline

										tooltipwidget = {
											recursive = yes
											widget_value_breakdown_tooltip = {}
										}
									}

									text_single = {
										datacontext = "[MilitaryView.GetAllRaisedPietyMilitaryExpenses]"
										visible = "[MilitaryView.HasAllRaisedPietyMilitaryExpenses]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"
										align = nobaseline

										tooltipwidget = {
											recursive = yes
											widget_value_breakdown_tooltip = {}
										}
									}
								}
							}
						}
					}

					expand = {}
				}

				# You Imperial Armies
				vbox = {
					name = imperial_armies_ra_uses_this
					widgetid = imperial_armies_ra_uses_this
					visible = "[MilitaryView.IsTabActive( 'title_troops' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					using = Animation_Tab_Switch

					scrollbox = {
						name = "scrollbox_troops"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						background = {
							texture = "gfx/interface/skinned/illustrations/moving.dds"
							fittype = end
							alpha = 0.3

							using = Mask_Rough_Edges

							modify_texture = {
								texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
								blend_mode = alphamultiply
								mirror = vertical
							}
						}

						blockoverride "scrollbox_content" {
							vbox_imperial_armies = {
								layoutpolicy_horizontal = expanding
								margin = { 10 0 }
							}
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						margin = { 20 10 }
						spacing = 5

						expand = {}

						button_standard = {
							datacontext = "[GetPlayer]"
							visible = "[Character.GetGovernment.HasRule( 'administrative' )]"
							layoutpolicy_horizontal = expanding
							enabled = "[MilitaryView.CanReturnControlledMaA]"
							onclick = "[MilitaryView.ReturnControlledMaA]"

							text = "MV_RETURN_CONTROLLED"
						}

						button_standard = {
							datacontext = "[GetPlayer]"
							visible = "[And(Character.GetGovernment.HasRule( 'administrative' ), Character.IsIndependentRuler)]"
							layoutpolicy_horizontal = expanding
							enabled = "[MilitaryView.CanReturnReassignedMaA]"
							onclick = "[MilitaryView.ReturnReassignedMaA]"

							text = "MV_RETURN_REASSIGNED"
						}

						expand = {}
					}

					vbox = {
						name = "rally_points"
						layoutpolicy_horizontal = expanding
						margin = { 25 0 }
						margin_bottom = 10
						spacing = 5

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "MV_RALLY_POINTS"
						}

						divider_light = {
							layoutpolicy_horizontal = expanding
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							hbox = {
								name = "rally_point_list"
								datamodel = "[MilitaryView.GetRallyPoints]"

								item = {
									button = {
										name = "rally_point_button"
										datacontext = "[RallyPointItem.GetRallyPoint]"
										size = { 50 50 }
										onclick = "[RallyPointItem.OnClick]"
										tooltip = "MV_RALLY_POINT_TT"
										using = tooltip_ne
										texture = "gfx/interface/window_military/banner_icon.dds"
										tintcolor = "[RallyPoint.GetColor]"
									}
								}
							}

							button_plus_small = {
								name = "add_rally_point"
								enabled = "[MilitaryView.CanAddRallyPoint]"
								onclick = "[MilitaryView.OnAddRallyPoint]"
								tooltip = "[MilitaryView.GetAddRallyPointTooltip]"
							}

							expand = {}
						}
					}

					vbox = {
						name = "footer"
						layoutpolicy_horizontal = expanding
						margin = { 90 0 }
						margin_bottom = 10

						background = {
							using = Background_Bottom_Fade
							margin_bottom = 20
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							margin = { 10 10 }
							spacing = 2

							background = {
								using = Background_Area
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								visible = "[Not(GetPlayer.GetGovernment.IsType( 'landless_adventurer_government' ))]"

								button_checkbox_label = {
									onclick = "[MilitaryView.OnMilitaryReinforcementClick]"
									tooltip = "[MilitaryView.GetMilitaryReinforcementCostTooltip]"

									blockoverride "checkbox"
									{
										checked = "[MilitaryView.IsMilitaryReinforcementsEnabled]"
									}

									blockoverride "text"
									{
										text = "MONTHLY_REINFORCEMENT_COST_LABEL"
									}
								}

								expand = {}
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								visible = "[GetPlayer.GetGovernment.IsType( 'landless_adventurer_government' )]"

								text_multi = {
									text = "ADVENTURER_MAINTENANCE_INFO"
									align = nobaseline
									autoresize = yes
									max_width = 350
									default_format = "#weak"
								}

								expand = {}
							}

							divider_light = {
								layoutpolicy_horizontal = expanding
							}

							vbox = {
								layoutpolicy_horizontal = expanding

								hbox = {
									layoutpolicy_horizontal = expanding
									spacing = 5

									text_single = {
										text = "MONTHLY_MAINTENANCE_LABEL"
										maximumsize = { 400 -1 }
									}

									expand = {
										size = { 28 28 }
									}

									icon = {
										size = { 28 28 }
										visible = "[MilitaryView.HasEmbarkedArmies]"
										texture = "gfx/interface/icons/map_icons/naval_transportation.dds"
										tooltip = "MV_EMBARKED_TT"
									}

									text_single = {
										datacontext = "[MilitaryView.GetGoldMilitaryExpenses]"
										visible = "[NotEqualTo_CFixedPoint(ValueBreakdown.GetFixedPointValue, '(CFixedPoint)0')]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"

										tooltipwidget = {
											recursive = yes

											widget_value_breakdown_tooltip = {}
										}
									}

									text_single = {
										datacontext = "[MilitaryView.GetPrestigeMilitaryExpenses]"
										visible = "[NotEqualTo_CFixedPoint(ValueBreakdown.GetFixedPointValue, '(CFixedPoint)0')]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"

										tooltipwidget = {
											recursive = yes

											widget_value_breakdown_tooltip = {}
										}
									}

									text_single = {
										datacontext = "[MilitaryView.GetPietyMilitaryExpenses]"
										visible = "[NotEqualTo_CFixedPoint(ValueBreakdown.GetFixedPointValue, '(CFixedPoint)0')]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"

										tooltipwidget = {
											recursive = yes

											widget_value_breakdown_tooltip = {}
										}
									}

									text_single = {
										text = "COST_RESULT_NOTHING"
										visible = "[And(EqualTo_CFixedPoint(MilitaryView.GetGoldMilitaryExpenses.GetFixedPointValue, '(CFixedPoint)0') ,And( EqualTo_CFixedPoint( MilitaryView.GetPrestigeMilitaryExpenses.GetFixedPointValue, '(CFixedPoint)0'), EqualTo_CFixedPoint(MilitaryView.GetPietyMilitaryExpenses.GetFixedPointValue, '(CFixedPoint)0') ) ) ]"
										maximumsize = { 400 -1 }
										default_format = "#high"
									}
								}

								hbox = {
									visible = "[MilitaryView.HasAnyRaisedMilitaryExpenses]"
									layoutpolicy_horizontal = expanding
									spacing = 10

									expand = {}

									text_single = {
										text = "MONTHLY_MAX_MAINTENANCE_LABEL"
										maximumsize = { 400 -1 }
										tooltip = "MONTHLY_MAX_MAINTENANCE_TT"
										align = nobaseline
									}

									text_single = {
										datacontext = "[MilitaryView.GetAllRaisedGoldMilitaryExpenses]"
										visible = "[MilitaryView.HasAllRaisedGoldMilitaryExpenses]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"
										align = nobaseline

										tooltipwidget = {
											recursive = yes
											widget_value_breakdown_tooltip = {}
										}
									}

									text_single = {
										visible = "[MilitaryView.HasAllRaisedGoldMilitaryExpenses]"
										text = "MONTHLY_MAX_MAINTENANCE_VIEW"
										maximumsize = { 400 -1 }
										default_format = "#weak"
										align = nobaseline
									}

									text_single = {
										datacontext = "[MilitaryView.GetAllRaisedPrestigeMilitaryExpenses]"
										visible = "[MilitaryView.HasAllRaisedPrestigeMilitaryExpenses]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"
										align = nobaseline

										tooltipwidget = {
											recursive = yes
											widget_value_breakdown_tooltip = {}
										}
									}

									text_single = {
										datacontext = "[MilitaryView.GetAllRaisedPietyMilitaryExpenses]"
										visible = "[MilitaryView.HasAllRaisedPietyMilitaryExpenses]"
										text = "[ValueBreakdown.GetValue]"
										maximumsize = { 400 -1 }
										default_format = "#high"
										align = nobaseline

										tooltipwidget = {
											recursive = yes
											widget_value_breakdown_tooltip = {}
										}
									}
								}
							}
						}
					}

					expand = {}
				}

				# Mercenaries
				vbox = {
					visible = "[MilitaryView.IsTabActive( 'mercenary' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					using = Animation_Tab_Switch

					hbox = {
						layoutpolicy_horizontal = expanding

						button_tab = {
							layoutpolicy_horizontal = expanding

							text = "MV_MERCENARIES_SELECTION_MERCENARIES"

							onclick = "[GetVariableSystem.Set( 'military_view_mercenaries', 'mercenaries' )]"
							down = "[GetVariableSystem.HasValue( 'military_view_mercenaries', 'mercenaries' )]"
						}

						button_tab = {
							layoutpolicy_horizontal = expanding

							text = "MV_MERCENARIES_SELECTION_HIREABLE_RULERS"

							onclick = "[GetVariableSystem.Set( 'military_view_mercenaries', 'hireable_rulers' )]"
							down = "[GetVariableSystem.HasValue( 'military_view_mercenaries', 'hireable_rulers' )]"
						}

						button_tab = {
							layoutpolicy_horizontal = expanding

							onclick = "[GetVariableSystem.Set( 'military_view_mercenaries', 'holy_orders' )]"
							down = "[GetVariableSystem.HasValue( 'military_view_mercenaries', 'holy_orders' )]"

							text_single = {
								text = "MV_HOLY_ORDERS"
								parentanchor = center

								maximumsize = { 400 -1 }
								default_format = "#low"

								alpha = "[Select_float( DataModelHasItems( MilitaryView.GetAllHolyOrders ), '(float)1.0', '(float)0.5' )]"
							}

							text_single = {
								parentanchor = vcenter|right
								position = {-20 0}
								text = "[GetDataModelSize(MilitaryView.GetAllHolyOrders)]"

								default_format = "#low"

								alpha = "[Select_float( DataModelHasItems( MilitaryView.GetAllHolyOrders ), '(float)1.0', '(float)0.5' )]"
							}
						}
					}

					scrollbox = {
						name = "tab_mercenaries"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						background = {
							visible = "[Not( GetVariableSystem.HasValue( 'military_view_mercenaries', 'holy_orders' ) )]"

							texture = "gfx/interface/illustrations/event_scenes/genericcamp.dds"
							alpha = 0.3
							fittype = end
							framesize = { 1200 848 }
							using = Mask_Rough_Edges

							modify_texture = {
								texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
								blend_mode = alphamultiply
								mirror = vertical
							}
						}

						background = {
							visible = "[GetVariableSystem.HasValue( 'military_view_mercenaries', 'holy_orders' )]"

							texture = "gfx/interface/skinned/illustrations/holy_order_bg.dds"
							alpha = 0.3
							fittype = centercrop
							using = Mask_Rough_Edges

							modify_texture = {
								texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
								blend_mode = alphamultiply
								mirror = vertical
							}
						}

						blockoverride "scrollbox_content" {
							vbox = {
								layoutpolicy_vertical = expanding
								layoutpolicy_horizontal = expanding

								vbox = {
									name = "tutorial_highlight_mercenary_list_item"
									datamodel = "[MilitaryView.GetAllMercenaries]"
									visible = "[GetVariableSystem.HasValue( 'military_view_mercenaries', 'mercenaries' )]"
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding

									spacing = 5

									using = Animation_Tab_Switch

									item = {
										vbox = {
											layoutpolicy_horizontal = expanding

											button_mercenary_list_item = {
												datacontext = "[HiredTroopItem.GetMercenaryCompany]"
												size = { 504 92 }

												blockoverride "HiredTroopMenAtArmsTypesDataModel"
												{
													datamodel = "[HiredTroopItem.GetRegiments]"
												}
											}
										}
									}
								}

								vbox = {
									name = "hireable_rulers"
									visible = "[GetVariableSystem.HasValue( 'military_view_mercenaries', 'hireable_rulers' )]"
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding

									using = Animation_Tab_Switch

									vbox = {
										name = "populated_list"
										visible = "[Not( IsDataModelEmpty( MilitaryView.GetAllHireableRulers ) )]"

										layoutpolicy_vertical = expanding
										layoutpolicy_horizontal = expanding

										fixedgridbox = {
											datamodel = "[MilitaryView.GetAllHireableRulers]"
											allow_outside = yes

											addcolumn = 504
											addrow = 110 # bit larger to account for spacing

											item = {
												button_hireable_ruler_item = {
													visible = "[Not( ObjectsEqual( HiredTroopItem.GetHireableRuler, GetPlayer ) )]"
													size = { 504 92 }
												}
											}
										}

										expand = { }
									}

									vbox = {
										name = "unpopulated_list"
										visible = "[IsDataModelEmpty( MilitaryView.GetAllHireableRulers )]"
										layoutpolicy_vertical = expanding

										text_single = {

											text = "MV_MERCENARIES_NO_HIREABLE_RULERS_IN_RANGE"
											default_format = "#weak"
										}
									}
								}

								vbox = {
									name = "tab_holy_orders"
									visible = "[GetVariableSystem.HasValue( 'military_view_mercenaries', 'holy_orders' )]"
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding

									using = Animation_Tab_Switch

									text_label_center = {
										name = "hired_troops_view_holy_orders_header_item"
										text = "HIRED_TROOPS_VIEW_LIST_HO_HEADER"
									}

									text_single = {
										visible = "[And( Not(MilitaryView.CanUseAnyHolyOrder), DataModelHasItems(MilitaryView.GetAllHolyOrders))]"
										text = "HOLY_ORDER_MUST_BE_AT_WAR_WITH_BAD_FAITH"
									}

									hbox = {
										visible = "[Not(DataModelHasItems(MilitaryView.GetAllHolyOrders ))]"

										text_single = {
											text = "HIRED_TROOPS_VIEW_LIST_HO_NO_HOS"
											default_format = "#weak"
										}
									}

									spacer = {
										size = { 5 10 }
									}

									button_standard = {
										name = "hired_troops_view_create_holy_order_item"
										datacontext = "[GetDecisionWithKey('create_holy_order_decision')]"
										visible = "[Decision.IsShownForPlayer]"
										layoutpolicy_horizontal = expanding

										size = { 504 55 }

										onclick = "[OpenGameViewData( 'decision_detail', Decision.Self)]"

										widget = {
											parentanchor = center
											size = { 523 51 }
											scissor = yes

											icon = {
												name = "illustration"
												visible = "[Decision.IsPossibleForPlayer]"
												parentanchor = right|vcenter

												alpha = 0.7
												position = { -2 0 }
												size = { 250 100 }
												mirror = horizontal

												block "decision_texture_icon" {
													texture = "[Decision.GetPicture( GetPlayer.Self )]"
												}

												modify_texture = {
													texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
													blend_mode = alphamultiply
												}
											}

											highlight_icon = {
												visible = "[Not(Decision.IsPossibleForPlayer)]"
												parentanchor = right|vcenter

												alpha = 0.7
												position = { -2 0 }
												size = { 250 100 }
												mirror = horizontal
												effectname = "GreyedOut"
												tintcolor = { 0.6 0.6 0.6 0.7 }

												block "decision_texture_highlight" {
													texture = "[Decision.GetPicture( GetPlayer.Self )]"
												}

												modify_texture = {
													texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
													blend_mode = alphamultiply
												}
											}

											icon = {
												parentanchor = center
												size = { 523 51 }

												texture = "gfx/interface/component_tiles/tile_vignette_3px.dds"
												spriteType = Corneredtiled
												spriteborder = { 5 5 }
											}
										}

										hbox = {
											margin = { 20 0 }
											margin_right = 10

											text_single = {
												name = "title"
												visible = "[Decision.IsPossibleForPlayer]"
												text = "[Decision.GetTitleForPlayer]"
												layoutpolicy_horizontal = growing

												align = nobaseline
												default_format = "#clickable"
											}

											text_single = {
												name = "title2"
												visible = "[Not(Decision.IsPossibleForPlayer)]"
												layoutpolicy_horizontal = growing
												text = "[Decision.GetTitleForPlayer]"

												align = nobaseline
												block "default_format" {
													default_format = "#low"
												}
											}

											highlight_icon = {
												name = "not_possible"
												visible = "[Not(Decision.IsPossibleForPlayer)]"
												size = { 30 30 }
												texture = "gfx/interface/icons/symbols/icon_cross.dds"

											}
										}
									}

									spacer = {
										size = { 5 20 }
									}

									vbox = {
										layoutpolicy_vertical = expanding
										layoutpolicy_horizontal = expanding

										fixedgridbox = {
											datamodel = "[MilitaryView.GetAllHolyOrders]"
											allow_outside = yes

											addcolumn = 504
											addrow = 110 # bit larger to account for spacing

											item = {
												button_holyorder_list_item = {
													datacontext = "[HiredTroopItem.GetHolyOrder]"
													size = { 504 92 }

													blockoverride "HiredTroopMenAtArmsTypesDataModel"
													{
														datamodel = "[HiredTroopItem.GetRegiments]"
													}

												}
											}
										}

										expand = {}
									}
									expand = {}

								}
								expand = {}
							}
						}
					}
				}
			}
		}
	}
}


######################################################
################ TYPES AND TEMPLATES #################
######################################################

types ArmiesView
{
	type overlappingitembox_regiment_types = overlappingitembox
	{
		item = {
			icon = {
				name = "men_at_arms_icon"
				size = { 30 30 }
				texture = "[Regiment.GetMAAType.GetIcon]"
				tooltipwidget = regiment_container_tooltip
				using = tooltip_ws
			}
		}
	}

	type hbox_your_raised_and_unraised_soldiers = hbox
	{
		vbox = {
			datacontext = "[MilitaryView.GetComposition]"
			layoutpolicy_horizontal = expanding
			margin = { 0 5 }
			tooltip = "[ArmyComposition.GetArmyCompositionTooltip]"
			ignoreinvisible = no

			# background = {
			# 	using = Background_Area
			# }

			hbox = {
				name = tutorial_highlight_soldiers_total
				layoutpolicy_horizontal = expanding
				spacing = 10

				text_single = {
					text = "MV_TOTAL_SOLDIERS"
					layoutpolicy_horizontal = expanding
					align = nobaseline
				}

				hbox = {
					spacing = 7

					icon = {
						name = "icon_soldier"
						texture = "gfx/interface/icons/icon_soldier.dds"
						size = { 25 25 }
					}

					text_single = {
						text = "[ArmyComposition.GetSoldierCountString]"
						using = Font_Size_Big
						default_format = "#high"
						align = nobaseline
					}

					army_quality_icon = {}
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 10
				visible = "[And( ArmyComposition.HasRaisedSoldiers, GreaterThan_int32( ArmyComposition.GetUnraisedNumberOfSoldiers, '(int32)0' ) )]"
				tooltip = "[ArmyComposition.GetUnraisedArmyCompositionTooltip]"

				text_single = {
					text = "MV_UNRAISED_SOLDIERS"
					layoutpolicy_horizontal = expanding
					align = nobaseline
					margin_bottom = 3
					margin_left = 3
					using = Font_Size_Small
				}

				hbox = {
					spacing = 7

					text_single = {
						text = "[ArmyComposition.GetUnraisedNumberOfSoldiers]"
						layoutpolicy_horizontal = expanding
						using = Font_Size_Small
						default_format = "#high"
						align = nobaseline
					}

					unraised_army_quality_icon = {}
				}
			}

			progressbar_standard = {
				name = "soldiers_max"
				size = { 140 10 }
				visible = "[NotEqualTo_int32(ArmyComposition.GetCurrentNumberOfSoldiers, ArmyComposition.GetMaxNumberOfSoldiers)]"
				layoutpolicy_horizontal = expanding
				max = "[IntToFloat(ArmyComposition.GetMaxNumberOfSoldiers)]"
				value = "[IntToFloat(ArmyComposition.GetCurrentNumberOfSoldiers)]"
				using = Animation_ShowHide_Standard
			}
		}
	}

	type hbox_your_levies_and_knights = hbox
	{
		button_standard_clean = {
			name = "levies_button"
			datacontext = "[MilitaryView.GetComposition]"
			visible = "[Not( IsLandlessAdventurer( GetPlayer ) )]"

			size = { 249 140 }

			onclick = "[MilitaryView.ShowLevies]"


			tooltip = "MV_LEVY_TT"

			background = {
				texture = "gfx/interface/illustrations/men_at_arms_big/levies.dds"
				alpha = 0.7
			}

			background = {
				using = Background_Button_Illustration
				visible = "[MilitaryView.AreLeviesShown]"
			}

			background = {
				texture = "gfx/interface/component_tiles/tile_vignette_3px.dds"
				spriteType = Corneredtiled
				spriteborder = { 5 5 }
				margin = { -2 -2 }
			}

			using = Background_Vignette_Button

			vbox = {
				expand = {}
				margin = { 8 10 }

				text_single = {
					layoutpolicy_horizontal = expanding
					alwaystransparent = yes
					text = "LEVIES_LABEL"
				}

				hbox = {
					spacing = 3
					layoutpolicy_horizontal = expanding
					margin_right = 5

					icon = {
						name = "icon_soldier"
						texture = "gfx/interface/icons/icon_soldier.dds"
						size = { 25 25 }
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "[ArmyComposition.GetLeviesCountString]"
						using = Font_Size_Big
						default_format = "#high"
						align = nobaseline

					}

					expand = {}

					text_single = {
						text = MV_LEVY_MAINTENANCE
						tooltip = MV_LEVY_MAINTENANCE_TOOLTIP
						alwaystransparent = yes
						default_format = "#high"
						align = nobaseline

						background = {
							using = Background_Area_Dark
							margin = { 10 5 }
						}

					}
				}
			}

			progressbar_standard = {
				name = "levies_max"
				parentanchor = bottom|left
				position = { 5 -3 }
				size = { 96% 10 }
				visible = "[NotEqualTo_int32(ArmyComposition.GetCurrentNumberOfLevies, ArmyComposition.GetMaxNumberOfLevies)]"
				max = "[IntToFloat(ArmyComposition.GetMaxNumberOfLevies)]"
				value = "[IntToFloat(ArmyComposition.GetCurrentNumberOfLevies)]"
			}
		}

		button_standard_clean = {
			name = "knights_button"
			size = { 249 140 }

			onclick = "[MilitaryView.ShowKnights]"

			tooltip = "MV_KNIGHTS_TT"

			background = {
				texture = "gfx/interface/skinned/illustrations/men_at_arms/knights.dds"
				alpha = 0.7
			}

			background = {
				using = Background_Button_Illustration
				visible = "[MilitaryView.AreKnightsShown]"
			}

			background = {
				texture = "gfx/interface/component_tiles/tile_vignette_3px.dds"
				spriteType = Corneredtiled
				spriteborder = { 5 5 }
				margin = { -2 -2 }
			}

			using = Background_Vignette_Button

			vbox = {
				tooltip = "MV_KNIGHTS_TOOLTIP"
				using = tooltip_se
				expand = {}
				margin = { 8 10 }

				text_single = {
					visible = "[Not( GreaterThan_int32( Character.GetNumAccoladeSlots, '(int32)0' ) )]"
					layoutpolicy_horizontal = expanding
					text = "MV_KNIGHTS"
					alwaystransparent = yes
				}
				text_single = {
					visible = "[GreaterThan_int32( Character.GetNumAccoladeSlots, '(int32)0' )]"
					layoutpolicy_horizontal = expanding
					text = "MV_KNIGHTS_AND_ACCOLADES"
					alwaystransparent = yes
				}

				hbox = {
					spacing = 3
					layoutpolicy_horizontal = expanding
					icon = {
						name = "icon_knight"
						texture = "gfx/interface/icons/icon_knight_small.dds"
						size = { 30 30 }
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "KNIGHTS_CURRENT_MAX"
						using = Font_Size_Big
						default_format = "#high"
						align = nobaseline
					}

					expand = {}

					text_label_center = {
						layoutpolicy_horizontal = expanding
						text = "MV_MANAGE_KNIGHTS"
					}
				}
			}
		}
	}

	type vbox_your_armies = vbox
	{
		hbox_your_raised_and_unraised_soldiers = {
			layoutpolicy_horizontal = expanding
		}

		hbox_your_levies_and_knights = {
			layoutpolicy_horizontal = expanding
			spacing = 10
		}

		vbox = {
			name = "maa_area"
			datacontext = "[MilitaryView.GetMilitaryItem]"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin = { 0 0 }
			spacing = 4

			vbox = {
				layoutpolicy_horizontal = expanding
				margin = { 0 5 }
				spacing = 5
				name = "heading"

				hbox = {
					layoutpolicy_horizontal = expanding
					ignoreinvisible = no

					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						expand = {}
						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 5

							text_single = {
								text = "BANNER_MEN_AT_ARMS_LABEL"
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								text = "[MilitaryView.GetMAACountAndCapString]"
								default_format = "#high"
								tooltip = "[MilitaryView.GetMAACountAndCapTooltip]"
								using = tooltip_ne
							}
						}

						text_single = {
							max_width = 300
							visible = "[GetPlayer.GetGovernment.IsType( 'landless_adventurer_government' )]"
							layoutpolicy_horizontal = expanding
							text = "ADVENTURER_CAP_HINT"
							default_format = "#weak"
						}
					}

					button_tertiary = {
						datacontext = "[MilitaryView.GetMilitaryItem]"
						visible = "[Not(IsDataModelEmpty( MilitaryItem.GetOwnedMaa ))]"
						using = Animation_ShowHide_Standard

						name = "raise_all_men_at_arms"
						datacontext = "[GetPlayer]"
						onclick = "[PlayerRaiseAllMenAtArmsRegiments]"
						enabled = "[PlayerCanRaiseAnyMenAtArmsRallyPoint]"

						text = "RAISE_ALL_MEN_AT_ARMS"
						size = {200 36}

						tooltip = "[GetPlayerRaiseAllMenAtArmsTooltip]"
						using = tooltip_se
						clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_raise_army"
					}
				}

				divider_light = {
					layoutpolicy_horizontal = expanding
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				name = "maa_tiles"

				fixedgridbox = {
					datacontext = "[MilitaryView.GetMilitaryItem]"
					datamodel = "[MilitaryItem.GetOwnedMaa]"
					layoutpolicy_horizontal = expanding
					flipdirection = yes
					datamodel_wrap = 3
					addcolumn = 169
					addrow = 93

					item = {
						container_maa_item = {}
					}
				}

				expand = {}
			}

			button_standard = {
				datacontext = "[MilitaryView.GetMilitaryItem]"
				visible = "[And( GetPlayer.GetGovernment.IsType( 'landless_adventurer_government' ), Character.IsPlayerInteractionShown('refill_maa_interaction') )]"
				layoutpolicy_horizontal = expanding

				name = "adventurer_refill_shortcut"
				datacontext = "[GetPlayer]"
				enabled = "[Character.IsPlayerInteractionValid('refill_maa_interaction')]"
				onclick = "[Character.OpenPlayerInteraction('refill_maa_interaction')]"
				text = "[Character.GetPlayerInteractionName('refill_maa_interaction')]"
				tooltip = "[Character.GetPlayerInteractionTooltip('refill_maa_interaction')]"
				using = tooltip_se
				clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_raise_army"

				icon = {
					name = "adventurer_gold_icon"
					parentanchor = left|vcenter
					position = { 10 0 }
					size = { 29 29 }
					texture = "gfx/interface/icons/icon_gold.dds"
				}

				icon = {
					name = "adventurer_provision_icon"
					parentanchor = left|vcenter
					position = { 40 0 }
					size = { 29 29 }
					framesize = { 60 60 }
					frame = 0
					texture = "gfx/interface/icons/icon_camp_supply.dds"
				}
			}

			button_standard = {
				datacontext = "[MilitaryView.GetMilitaryItem]"
				visible = "[And( GetPlayer.GetGovernment.IsType( 'landless_adventurer_government' ), Character.IsPlayerInteractionShown('reinforce_soldiers_interaction') )]"
				layoutpolicy_horizontal = expanding

				name = "adventurer_reinforce_shortcut"
				datacontext = "[GetPlayer]"
				enabled = "[Character.IsPlayerInteractionValid('reinforce_soldiers_interaction')]"
				onclick = "[Character.OpenPlayerInteraction('reinforce_soldiers_interaction')]"
				text = "[Character.GetPlayerInteractionName('reinforce_soldiers_interaction')]"
				tooltip = "[Character.GetPlayerInteractionTooltip('reinforce_soldiers_interaction')]"
				using = tooltip_se
				clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_raise_army"

				icon = {
					name = "adventurer_icon"
					parentanchor = left|vcenter
					position = { 5 -1 }
					size = { 28 28 }
					texture = "gfx/interface/icons/combat_effects/owner_in_debt.dds"
				}
			}

			button_standard = {
				name = "add_maa"
				layoutpolicy_horizontal = expanding

				text = "ADD_MEN_AT_ARMS_LABEL"

				onclick = "[MilitaryItem.OnClick]"
				tooltip = "CREATE_MAA_TOOLTIP"
				down = "[MilitaryItem.IsOpen]"

				button_plus = {
					name = "can_be_created"
					visible = "[MilitaryItem.CanCreateAnyMAAType]"
					parentanchor = left|vcenter
					position = { 5 0 }
					alwaystransparent = yes
				}

				warning_icon = {
					name = "at_cap"
					visible = "[Not(MilitaryItem.MaACanBeCreated)]"
					parentanchor = left|vcenter
					position = { 5 0 }
					size = { 28 28 }
				}
			}
		}

		vbox = {
			visible = "[Not(IsDataModelEmpty(MilitaryView.GetEventTroops))]"
			layoutpolicy_horizontal = expanding
			margin = { 0 5 }
			spacing = 5

			text_single = {
				layoutpolicy_horizontal = expanding
				text = "MILITARY_VIEW_EVENT_TROOPS"
			}

			divider_light = {
				layoutpolicy_horizontal = expanding
			}

			vbox = {
				datamodel = "[MilitaryView.GetEventTroops]"
				layoutpolicy_horizontal = expanding

				item = {
					hbox_event_troop_item = {
						layoutpolicy_horizontal = expanding
					}
				}
			}
		}

		vbox = {
			visible = "[Or( Not(IsDataModelEmpty(MilitaryView.GetHiredMercenaries)), Not(IsDataModelEmpty(MilitaryView.GetHiredHolyOrders)) )]"
			layoutpolicy_horizontal = expanding
			margin = { 0 5 }
			spacing = 5

			text_single = {
				layoutpolicy_horizontal = expanding
				text = "MILITARY_VIEW_HIRED_TROOPS"
			}

			divider_light = {
				layoutpolicy_horizontal = expanding
			}

			vbox = {
				datamodel = "[MilitaryView.GetHiredMercenaries]"
				layoutpolicy_horizontal = expanding
				spacing = 5
				margin_top = 5

				item = {
					button_mercenary_list_item = {
						datacontext = "[HiredTroopItem.GetMercenaryCompany]"
						layoutpolicy_horizontal = expanding
						size = { 504 92 }

						blockoverride "HiredTroopMenAtArmsTypesDataModel"
						{
							datamodel = "[HiredTroopItem.GetRegiments]"
						}
					}
				}
			}

			vbox = {
				datamodel = "[MilitaryView.GetHiredHolyOrders]"
				layoutpolicy_horizontal = expanding
				spacing = 5

				item = {
					button_holyorder_list_item = {
						datacontext = "[HiredTroopItem.GetHolyOrder]"
						layoutpolicy_horizontal = expanding
						size = { 504 92 }

						blockoverride "HiredTroopMenAtArmsTypesDataModel"
						{
							datamodel = "[HiredTroopItem.GetRegiments]"
						}
					}
				}
			}
		}
	}

	type button_imperial_army_item = widget
	{
		datacontext = "[HiredTroopItem.GetAdministrativeTitle]"
		allow_outside = yes

		button_standard = {
			allow_outside = yes
			parentanchor = bottom|right
			size = { 100% 82% }

			onclick = "[OpenAdministrativeArmyDetailView( Title.Self )]"
			down = "[IsAdministrativeArmyDetailViewShown( Title.Self )]"

			tooltip = TT_IMPERIAL_ARMIES

			vbox = {
				allow_outside = yes
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				margin_left = 42

				widget = {
					allow_outside = yes
					layoutpolicy_horizontal = expanding
					size = { 0 34 }

					# Status available
					highlight_icon = {
						visible = "[And( Not( Title.IsAdministrativeArmyHiredByLocalPlayer ), Not( HiredTroopItem.GetAdministrativeTitle.GetHolder.IsAtWar ) )]"
						position = { -2 2 }
						size = { 100% 100% }
						texture = "gfx/interface/window_military/military_banner_green.dds"
					}

					# Status commanded by you
					highlight_icon = {
						visible = "[And( Title.IsAdministrativeArmyHiredByLocalPlayer, Not( HiredTroopItem.GetAdministrativeTitle.GetHolder.IsAtWar ) )]"
						position = { -2 2 }
						size = { 100% 100% }
						texture = "gfx/interface/window_military/military_banner_blue.dds"
					}

					# Status unavailable
					highlight_icon = {
						visible = "[And( Or( And( HiredTroopItem.IsHired, HiredTroopItem.GetHiredBy.IsAtWar ), And( Not( HiredTroopItem.IsHired ), HiredTroopItem.GetAdministrativeTitle.GetHolder.IsAtWar ) ), Not( And( Title.IsAdministrativeArmyHiredByLocalPlayer, Not( HiredTroopItem.GetAdministrativeTitle.GetHolder.IsAtWar ) ) ) ) ]"
						position = { -2 2 }
						size = { 100% 100% }
						texture = "gfx/interface/window_military/military_banner_red.dds"
					}

					text_single = {
						parentanchor = left|vcenter
						position = { 0 -1 }
						text = MV_ADMIN_ARMY_NAME
						align = nobaseline
						max_width = 350
						using = Font_Size_Medium
					}

					# Status icon & background
					widget = {
						parentanchor = top|right
						position = { -10 -8 }
						size = { 42 52 }

						tooltip = "[Title.GetAdministrativeArmyStatus]"

						# Status available
						highlight_icon = {
							visible = "[And(And( Not( Title.IsAdministrativeArmyHiredByLocalPlayer ), Not( HiredTroopItem.GetAdministrativeTitle.GetHolder.IsAtWar ) ), Not(And(HiredTroopItem.IsHired, HiredTroopItem.GetHiredBy.IsAtWar)))]"
							parentanchor = center
							size = { 42 52 }
							texture = "gfx/interface/window_military/military_banner_green_icon_bg.dds"
						}

						icon_flat_standard_gold = {
							visible = "[And(And( Not( Title.IsAdministrativeArmyHiredByLocalPlayer ), Not( HiredTroopItem.GetAdministrativeTitle.GetHolder.IsAtWar ) ), Not(And(HiredTroopItem.IsHired, HiredTroopItem.GetHiredBy.IsAtWar)))]"
							parentanchor = top|hcenter
							position = { 0 12 }
							size = { 22 22 }
							texture = "gfx/interface/icons/flat_icons/army_select.dds"
						}

						# Status Commanded by you
						highlight_icon = {
							visible = "[Title.IsAdministrativeArmyHiredByLocalPlayer]"
							parentanchor = center
							size = { 42 52 }
							texture = "gfx/interface/window_military/military_banner_blue_icon_bg.dds"
						}

						icon_flat_standard_gold = {
							visible = "[Title.IsAdministrativeArmyHiredByLocalPlayer]"
							parentanchor = top|hcenter
							position = { 0 8 }
							size = { 28 28 }
							texture = "gfx/interface/icons/flat_icons/army_details.dds"
						}

						# Status unavailable
						highlight_icon = {
							visible = "[And( Or( And( HiredTroopItem.IsHired, HiredTroopItem.GetHiredBy.IsAtWar ), And( Not( HiredTroopItem.IsHired ), HiredTroopItem.GetAdministrativeTitle.GetHolder.IsAtWar ) ), Not( And( Title.IsAdministrativeArmyHiredByLocalPlayer, Not( HiredTroopItem.GetAdministrativeTitle.GetHolder.IsAtWar ) ) ) ) ]"
							parentanchor = center
							position = { 0 2}
							size = { 42 52 }
							texture = "gfx/interface/window_military/military_banner_red_icon_bg.dds"
						}

						icon_flat_standard_gold = {
							visible = "[And( Or( And( HiredTroopItem.IsHired, HiredTroopItem.GetHiredBy.IsAtWar ), And( Not( HiredTroopItem.IsHired ), HiredTroopItem.GetAdministrativeTitle.GetHolder.IsAtWar ) ), Not( And( Title.IsAdministrativeArmyHiredByLocalPlayer, Not( HiredTroopItem.GetAdministrativeTitle.GetHolder.IsAtWar ) ) ) ) ]"
							parentanchor = top|hcenter
							position = { 0 9 }
							size = { 30 30 }
							texture = "gfx/interface/icons/flat_icons/cancel.dds"
						}
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					margin_right = 10

					overlappingitembox_regiment_types = {
						datamodel = "[HiredTroopItem.GetRegiments]"

						layoutpolicy_horizontal = expanding
						size = { -1 30 }
					}

					expand = {}

					soldiers_and_quality_small = {
						datacontext = "[HiredTroopItem.GetComposition]"
					}
				}
			}

			widget = {
				allow_outside = yes
				parentanchor = top|left
				position = { -16 -20 }
				size = { 62 58 }

				coa_title_small_crown = {
					parentanchor = center
					scale = 0.8
				}
			}
		}
	}

	type vbox_imperial_armies = vbox
	{
		vbox = {
			layoutpolicy_horizontal = expanding
			datamodel = "[MilitaryView.GetHeldTitleItems]"
			spacing = 5

			item = {
				vbox = {
					datacontext = "[MilitaryItem.GetTitle]"
					layoutpolicy_horizontal = expanding

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 5

						coa_title_tiny_crown = {}

						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							margin_bottom = 5
							spacing = 5

							expand = {}

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 5

								text_single = {
									layoutpolicy_horizontal = expanding
									text = MV_ADMIN_ARMY_ARMIES_NAME
								}

								expand = { }

								text_single = {
									text = "BANNER_MEN_AT_ARMS_LABEL"
								}

								text_single = {
									text = "[MilitaryItem.GetMAACountAndCapString]"
									default_format = "#high"
									tooltip = "[MilitaryItem.GetMAACountAndCapTooltip]"
									using = tooltip_ne
								}
							}

							divider_light = {
								layoutpolicy_horizontal = expanding
							}
						}
					}

					spacer = {
						size = { 0 5 }
					}

					fixedgridbox = {
						layoutpolicy_horizontal = expanding
						datamodel = "[MilitaryItem.GetOwnedMaa]"
						flipdirection = yes
						datamodel_wrap = 3
						addcolumn = 169
						addrow = 93

						item = {
							container_maa_item = {

								widget = {
									###Add Tooltip to show how long this maa will be loaned out.
									size = { 68 64 }
									visible = "[Not( ObjectsEqual( Regiment.GetOwningTitle, Regiment.GetControllingTitle ) )]"

									background = {
										using = Background_Area_Dark
									}

									text_single = {
										visible = "[Not( ObjectsEqual( Regiment.GetOwningTitle, Regiment.GetControllingTitle ) )]"
										parentanchor = top|hcenter
										text = MV_ADMIN_ARMY_ARMIES_LOANED_LABEL
									}

									coa_title_tiny = {
										datacontext = "[Regiment.GetControllingTitle]"
										parentanchor = bottom|hcenter
										position = { 0 2 }
									}
								}
							}
						}
					}

					spacer = {
						size = { 0 5 }
					}

					button_standard = {
						name = "add_maa"
						layoutpolicy_horizontal = expanding

						text = "ADD_MEN_AT_ARMS_LABEL"

						onclick = "[MilitaryItem.OnClickTitle( Title.Self )]"
						down = "[MilitaryItem.IsOpen]"

						tooltip = "CREATE_MAA_TOOLTIP"

						button_plus = {
							name = "can_be_created"
							visible = "[MilitaryItem.CanCreateAnyMAAType]"
							parentanchor = vcenter
							alwaystransparent = yes
						}

						warning_icon = {
							name = "at_cap"
							visible = "[Not(MilitaryItem.MaACanBeCreated)]"
							parentanchor = left|vcenter
							position = { 10 0 }
							size = { 29 29 }
						}
					}
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 5
			margin_top = 15
			margin_bottom = 5

			text_label_left = {
				layoutpolicy_horizontal = expanding

				text = MV_ADMIN_ARMY_ARMIES_YOU_COMMAND
				using = Font_Size_Medium
			}

			expand = { }
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			datamodel = "[MilitaryView.GetAllAdministrativeArmies]"

			item = {
				button_imperial_army_item = {
					visible = "[Title.IsAdministrativeArmyHiredByLocalPlayer]"
					size = { 504 94 }
					layoutpolicy_horizontal = expanding
				}
			}
		}

		text_single = {
			visible = "[Not(MilitaryView.IsControllingOtherTitlesTroops)]"
			text = "MV_ADMIN_ARMY_NO_CONTROLLED_TITLES"
			default_format = "#weak"
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 5
			margin_top = 15
			margin_bottom = 5

			text_label_left = {
				layoutpolicy_horizontal = expanding
				text = MV_ADMIN_ARMY_ARMIES_IN_OTHER_GOVERNORSHIPS
				using = Font_Size_Medium
			}

			expand = { }

			text_single = {
				text = MV_ADMIN_ARMY_ARMIES_REALM_STRENGTH
				align = nobaseline
			}

			text_single = {
				align = nobaseline
				text = "[MilitaryView.GetTotalAdminRealmStrengthString]"
				default_format = "#high"
				using = tooltip_ne
			}
		}

		hbox = {
			visible = "[InDebugMode]"

			layoutpolicy_horizontal = expanding
			spacing = 5
			margin = { 0 8 }

			expand = { }

			text_single = {
				raw_text = "#D Military Power"
				align = bottom
			}

			text_single = {
				align = bottom
				text = "[MilitaryView.GetTotalAdminRealmPowerString]"
				default_format = "#D;high"
				using = tooltip_ne
			}
		}

		text_label_center = {
			visible = "[And(MilitaryView.CanRequestAnyTitleArmyPersonally, Not(GetPlayer.IsIndependentRuler))]"
			text = "MV_ADMIN_ARMY_HIRE_DIRECTLY"
		}

		vbox = {
			datamodel = "[MilitaryView.GetAllAdministrativeArmies]"
			layoutpolicy_horizontal = expanding

			item = {
				button_imperial_army_item = {
					name = imperial_army_item
					widgetid = imperial_army_item
					visible = "[And(IsNotHiredByPlayer(Title), And(MilitaryView.CanRequestTitleArmyPersonally(Title.Self), MilitaryView.IsAdminTitleWithTroops(Title.Self)))]"
					layoutpolicy_horizontal = expanding
					size = { 504 98 }
				}
			}
		}

		text_single = {
			visible = "[Not(MilitaryView.DoesOtherUncontrolledTitlesExist)]"
			text = "MV_ADMIN_ARMY_NO_UNCONTROLLED_TITLES"
		}

		text_label_center = {
			visible = "[Not(GetPlayer.IsIndependentRuler)]"
			text = "MV_ADMIN_ARMY_ASK_EMPEROR"
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			datamodel = "[MilitaryView.GetAllAdministrativeArmies]"

			item = {
				button_imperial_army_item = {
					name = imperial_army_item_2
					visible = "[And(IsNotHiredByPlayer(Title), And(Not(MilitaryView.CanRequestTitleArmyPersonally(Title.Self)), MilitaryView.IsAdminTitleWithTroops(Title.Self)))]"
					layoutpolicy_horizontal = expanding
					size = { 504 98 }
				}
			}
		}
	}

	type button_hireable_ruler_item = widget
	{
		datacontext = "[HiredTroopItem.GetHireableRuler]"
		allow_outside = yes

		button_standard = {
			allow_outside = yes
			parentanchor = bottom|right
			size = { 100% 85% }

			onclick = "[OpenHireableRulerDetailView( Character.Self )]"
			down = "[IsHireableRulerDetailViewShown( Character.Self )]"

			tooltip = TT_MERCENARIES_HIREABLE_RULER

			vbox = {
				allow_outside = yes
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				margin_left = 40

				# Banner
				widget = {
					allow_outside = yes
					layoutpolicy_horizontal = expanding
					size = { 0 34 }

					# Status available
					highlight_icon = {
						visible = "[And( Character.IsHireableRuler, Character.IsPlayerInteractionValid( 'hire_laamp_mercenaries_interaction' ) )]"
						position = { -2 1 }
						size = { 100% 100% }
						texture = "gfx/interface/window_military/military_banner_green.dds"
					}

					# Status commanded by you
					highlight_icon = {
						visible = "[Character.IsHireableRulerEmployedByLocalPlayer]"
						position = { -2 1 }
						size = { 100% 100% }
						texture = "gfx/interface/window_military/military_banner_blue.dds"
					}

					# Status unavailable
					highlight_icon = {
						visible = "[And( Or( Not( Character.IsHireableRuler ), And( Character.IsHireableRuler, Not(Character.IsPlayerInteractionValid( 'hire_laamp_mercenaries_interaction' ) ) ) ), Not(Character.IsHireableRulerEmployedByLocalPlayer) )]"
						position = { -2 1 }
						size = { 100% 100% }
						texture = "gfx/interface/window_military/military_banner_red.dds"
					}

					text_single = {
						parentanchor = vcenter|left
						position = { 0 -1 }
						text = "[Character.GetPrimaryTitle.GetNameNoTooltip]"
						align = nobaseline
						max_width = 350
						using = Font_Size_Medium
					}

					widget = {
						parentanchor = vcenter|right
						position = { -54 -1 }
						size = { -1 24 }

						hbox = {
							resizeparent = yes

							tooltip = "[SelectLocalization( HiredTroopItem.WillHireableRulerCauseBankrupcy, 'MERCENARY_COMPANY_COST_BANKRUPTCY', 'MERCENARY_COMPANY_COST_DEBT')]"
							tooltip_visible = "[HiredTroopItem.WillHireableRulerCauseDebt]"
							using = tooltip_ne

							highlight_icon = {
								name = "debt"
								#visible = no
								visible = "[HiredTroopItem.WillHireableRulerCauseDebt]"
								size = { 24 24 }
								
								texture = "gfx/interface/icons/symbols/icon_alert.dds"
							}

							text_single = {
								text = "[HiredTroopItem.GetHireableRulerCost]"
								align = nobaseline|left
								max_width = 350
								#using = Font_Size_Medium

								background = {
									visible = "[HiredTroopItem.WillHireableRulerCauseDebt]"
									margin_bottom = -2
									using = Status_Bad
								}
							}
						}
					}

					# Status icon & background
					widget = {
						parentanchor = top|right
						position = { -10 -8 }
						size = { 42 52 }


						# Status available
						highlight_icon = {
							visible = "[And( Character.IsHireableRuler, Character.IsPlayerInteractionValid( 'hire_laamp_mercenaries_interaction' ) )]"
							parentanchor = center
							size = { 42 52 }
							texture = "gfx/interface/window_military/military_banner_green_icon_bg.dds"
							tooltip = MV_MERCENARIES_HIREABLE_RULER_STATUS
						}

						icon_flat_standard_gold = {
							visible = "[And( Character.IsHireableRuler, Character.IsPlayerInteractionValid( 'hire_laamp_mercenaries_interaction' ) )]"
							parentanchor = top|hcenter
							position = { 0 12 }
							size = { 22 22 }
							texture = "gfx/interface/icons/flat_icons/army_select.dds"
							tooltip = MV_MERCENARIES_HIREABLE_RULER_STATUS
						}

						# Status Commanded by you
						highlight_icon = {
							visible = "[Character.IsHireableRulerEmployedByLocalPlayer]"
							parentanchor = center
							position = { 0 2}
							size = { 42 52 }
							texture = "gfx/interface/window_military/military_banner_blue_icon_bg.dds"
							tooltip = "MV_MERCENARIES_STATUS_COMMANDED"
						}

						icon_flat_standard_gold = {
							visible = "[Character.IsHireableRulerEmployedByLocalPlayer]"
							parentanchor = top|hcenter
							position = { 0 8 }
							size = { 28 28 }
							texture = "gfx/interface/icons/flat_icons/army_details.dds"
							tooltip = "MV_MERCENARIES_STATUS_COMMANDED"
						}

						# Status unavailable
						highlight_icon = {
							visible = "[And( Or( Not( Character.IsHireableRuler ), And( Character.IsHireableRuler, Not(Character.IsPlayerInteractionValid( 'hire_laamp_mercenaries_interaction' ) ) ) ), Not(Character.IsHireableRulerEmployedByLocalPlayer) )]"
							parentanchor = center
							position = { 0 2}
							size = { 42 52 }
							texture = "gfx/interface/window_military/military_banner_red_icon_bg.dds"
							tooltip = "[Character.GetPlayerInteractionTooltip( 'hire_laamp_mercenaries_interaction' )]"
						}

						icon_flat_standard_gold = {
							visible = "[And( Or( Not( Character.IsHireableRuler ), And( Character.IsHireableRuler, Not(Character.IsPlayerInteractionValid( 'hire_laamp_mercenaries_interaction' ) ) ) ), Not(Character.IsHireableRulerEmployedByLocalPlayer) )]"
							parentanchor = top|hcenter
							position = { 0 12 }
							size = { 22 22 }
							texture = "gfx/interface/icons/flat_icons/cancel.dds"
							tooltip = "[Character.GetPlayerInteractionTooltip( 'hire_laamp_mercenaries_interaction' )]"
						}
					}
				}

				# Regiments type & size
				hbox = {
					layoutpolicy_horizontal = expanding
					margin_right = 10
					margin_bottom = 3

					overlappingitembox_regiment_types = {
						datamodel = "[HiredTroopItem.GetRegiments]"

						layoutpolicy_horizontal = expanding
						size = { -1 30 }
					}

					soldiers_and_quality_small = {
						datacontext = "[HiredTroopItem.GetComposition]"
					}
				}
			}

			widget = {
				allow_outside = yes
				parentanchor = top|left
				position = { -16 -24 }
				size = { 62 74 }

				coa_realm_medium_crown = {
					datacontext = "[Character.GetPrimaryTitle]"
					parentanchor = center
					scale = 0.7
				}
			}
		}
	}
}

types MilitaryView
{
	type hbox_event_troop_item = vbox {
		background = {
			using = Background_Area
		}
		margin = { 5 5 }

		hbox  = {
			name = "header"
			layoutpolicy_horizontal = expanding

			background = {
				using = Background_Area
			}

			hbox = {
				margin = { 5 5 }
				layoutpolicy_horizontal = expanding

				icon = {
					name = "event_troops"
					texture = "gfx/interface/icons/icon_special_troops.dds"
					size = { 36 36 }
				}

				spacer = {
					size = { 5 0 }
				}

				text_single = {
					text = "[MilitaryViewEventTroop.GetName]"
					default_format = "#high"
				}

				expand = {}

				soldiers_and_quality_small = {
					datacontext = "[MilitaryViewEventTroop.GetComposition]"

					blockoverride "background" {
						background = {
							using = Background_Area
							margin = { 3 0 }
						}
					}
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding

			vbox = {
				margin = { 5 5 }
				layoutpolicy_horizontal = expanding

				hbox = {
					name = "menatarms"
					layoutpolicy_horizontal = expanding

					text_single = {
						text = MV_MEN_AT_ARMS_LABEL
					}

					text_single = {
						text = MV_MEN_AT_ARMS_NONE
						default_format = "#weak"
						visible = "[IsDataModelEmpty(MilitaryViewEventTroop.GetRegiments)]"
					}

					spacer = {
						size = { 10 5 }
					}

					hbox = {
						name = "regiment_types"
						datamodel = "[MilitaryViewEventTroop.GetRegiments]"
						layoutpolicy_vertical = expanding
						margin_top = 5

						background = {
							using = Background_Area
							margin = { 10 2 }
						}

						item = {
							container = {
								highlight_icon = {
									size = { 40 40 }
									texture = "[Regiment.GetMAAType.GetIcon]"
									tooltipwidget = regiment_container_tooltip
									using = tooltip_se
								}
							}
						}
					}

					expand = {}
				}

				text_single = {
					visible = "[Not(MilitaryViewEventTroop.IsInheritable)]"

					layoutpolicy_horizontal = expanding
					text = "MILITARY_VIEW_EVENT_TROOPS_NOT_INHERITABLE"
				}

				text_single = {
					visible = "[MilitaryViewEventTroop.IsInheritable]"

					layoutpolicy_horizontal = expanding
					text = "MILITARY_VIEW_EVENT_TROOPS_INHERITABLE"
				}

				hbox = {
					datacontext = "[MilitaryViewEventTroop.GetAssociatedWar]"
					visible = "[War.IsValid]"

					layoutpolicy_horizontal = expanding

					text_single = {
						visible = "[MilitaryViewEventTroop.IsInheritable]"
						text = "MILITARY_VIEW_EVENT_TROOPS_ASSOCIATED_WAR"
						max_width = 450
						multiline = yes
					}

					expand = {}
				}
			}

			vbox = {
				layoutpolicy_vertical = growing

				margin = { 10 5 }

				expand = {
					layoutpolicy_vertical = growing
				}

				button_standard = {
					name = "raise"
					size = { 100 32 }
					onclick = "[OnRaiseEventTroops(MilitaryViewEventTroop.Self)]"
					visible = "[MilitaryViewEventTroop.CanBeRaised]"
					tooltip = "MILITARY_VIEW_EVENT_TROOPS_RAISE_TT"

					hbox = {
						margin = { 5 0 }

						button_army_details = {
							size = { 28 28 }
							alwaystransparent = yes
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							align = center|nobaseline
							text = "MILITARY_VIEW_EVENT_TROOPS_RAISE"
							default_format = "#clickable"
						}
					}
				}
			}
		}
	}

	type container_maa_item = container {
		datacontext = "[Regiment.GetMAAType]"
		using = tooltip_es

		background = {
			texture = "[MenAtArmsType.GetHorizontalImage]"
			alpha = 0.7
			margin = { -2 -2 }
		}

		background = {
			using = Background_Button_Illustration
			visible = "[Regiment.IsShownInMaaView]"
		}

		background = {
			texture = "gfx/interface/component_tiles/tile_vignette_3px.dds"
			spriteType = Corneredtiled
			spriteborder = { 5 5 }
			margin = { -2 -2 }
		}

		tooltipwidget = {
			using = regiment_container_text_tooltip

			blockoverride "extra_info" {
				divider_light = {
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = "CLICK_TO_SELECT"
					margin = { 10 0 }
				}
			}
		}

		button_standard_clean = {
			name = "maa_entry"
			size = { 166 90 }

			vbox = {
				expand = {}

				hbox = {
					margin = { 8 4 }
					spacing = 2
					layoutpolicy_horizontal = expanding

					background = {
						using = Background_Area_Dark
					}

					icon = {
						name = "icon_maa"
						texture = [MenAtArmsType.GetIcon]
						size = { 20 20 }
					}

					text_single = {
						text = "[Regiment.BuildCurrentRegimentCountString|V]"
						default_format = "#high"
					}

					expand = {}

					text_single = {
						text = "TOTAL_MAA_COST"
						tooltip = "TOTAL_MAA_COST_TOOLTIP"

						default_format = "#high"
					}
				}
			}

			button_normal = {
				visible = "[Not(Regiment.IsShownInMaaView)]"
				size = { 100% 100% }
				onclick = "[Regiment.ToggleMaaView]"
			}

			text_label_right = {
				visible = "[And( Not(Regiment.IsRaised), GetPlayer.IsAtWar)]"
				text = "MAA_UNRAISED"
				using = Font_Size_Small
				default_format = "#X"
				parentanchor = top|right
				position = {-10 1}
			}

			text_label_right = {
				visible = "[Not(And( Not(Regiment.IsRaised), GetPlayer.IsAtWar))]"
				text = "MAA_CURRENT_SIZE"
				using = Font_Size_Small
				parentanchor = top|right
				position = {-10 1}
			}

			text_label_right = {
				visible = "[And( Not( Regiment.GetOriginProvince.IsValid ), GetPlayer.HasDomainProvincesForMAAOrigin )]"
				text = "MAA_UNSTATIONED"
				default_format = "#X"
				using = Font_Size_Small
				parentanchor = top|right
				position = { -10 22 }
			}

			button_normal = {
				visible = "[GetVariableSystem.Exists( 'menatarms_open' )]"
				size = { 100% 100% }
				onclick = "[PdxGuiTriggerAllAnimations('menatarms_refresh')]"

				state = {
					name = _mouse_click
					delay = 0.2
					on_finish = "[Regiment.ToggleMaaView]"
				}
			}
		}
	}
}

types HiredTroops
{
	type button_mercenary_list_item = widget
	{
		allow_outside = yes

		button_standard = {
			allow_outside = yes
			parentanchor = bottom|right
			size = { 100% 85% }

			tooltip = "HIRED_TROOPS_VIEW_LIST_MC_BUTTON_TOOLTIP"
			tooltip_visible = "[Or(Not(MercenaryCompany.IsHired), MercenaryCompany.IsHiredByLocalPlayer)]"

			down = "[IsMercenaryCompanyDetailViewShown(MercenaryCompany.Self)]"

			button = {
				visible = "[Or( IsMercenaryCompanyDetailViewShown(MercenaryCompany.Self), Not(GetVariableSystem.Exists( 'hired_troop_detail_view_open' )))]"
				size = { 100% 100% }
				onclick = "[ToggleMercenaryCompanyDetailView(MercenaryCompany.Self)]"
			}

			button = {
				visible = "[And( GetVariableSystem.Exists( 'hired_troop_detail_view_open' ), Not( IsMercenaryCompanyDetailViewShown(MercenaryCompany.Self) ) )]"
				size = { 100% 100% }
				onclick = "[PdxGuiTriggerAllAnimations('mercenary_details_refresh')]"

				state = {
					name = _mouse_click
					delay = 0.2
					on_finish = "[ToggleMercenaryCompanyDetailView(MercenaryCompany.Self)]"
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				margin_left = 40

				widget = {
					layoutpolicy_horizontal = expanding
					size = { 0 34 }

					# Status available
					highlight_icon = {
						visible = "[And( Not( MercenaryCompany.IsHired ), Not( MercenaryCompany.WillGoInBankruptcy( GetPlayer.Self ) ) )]"
						position = { -2 1 }
						size = { 100% 100% }
						texture = "gfx/interface/window_military/military_banner_green.dds"
					}

					highlight_icon = {
						visible = "[Or( And( Not( MercenaryCompany.IsHired ), MercenaryCompany.WillGoInBankruptcy(GetPlayer.Self) ), And( Not( MercenaryCompany.IsHiredByLocalPlayer ), MercenaryCompany.IsHired ) )]"
						position = { -2 1 }
						size = { 100% 100% }
						texture = "gfx/interface/window_military/military_banner_red.dds"
					}

					highlight_icon = {
						visible = "[MercenaryCompany.IsHiredByLocalPlayer]"
						position = { -2 2 }
						size = { 100% 100% }
						texture = "gfx/interface/window_military/military_banner_blue.dds"
					}

					text_single = {
						parentanchor = left|vcenter
						position = { 0 -1 }
						text = "[MercenaryCompany.GetName]"
						align = nobaseline
						default_format = "#high"
						max_width = 300
						using = Font_Size_Medium
					}

					# Status icon & background
					widget = {
						parentanchor = top|right
						position = { -10 -8 }
						size = { 42 52 }

						# Status available
						widget = {
							visible = "[And( And( Not( MercenaryCompany.IsHired ), Not( MercenaryCompany.WillGoInBankruptcy( GetPlayer.Self ) ) ), Not( MercenaryCompany.WillGoInDebt( GetPlayer.Self ) ) )]"
							parentanchor = center
							size = { 100% 100% }

							tooltip = "MV_MERCENARIES_STATUS_AVAILABLE"

							highlight_icon = {
								parentanchor = center
								size = { 42 52 }
								texture = "gfx/interface/window_military/military_banner_green_icon_bg.dds"
							}

							icon_flat_standard_gold = {
								parentanchor = top|hcenter
								position = { 0 12 }
								size = { 22 22 }
								texture = "gfx/interface/icons/flat_icons/army_select.dds"
							}
						}

						# Status commanded by you
						widget = {
							visible = "[MercenaryCompany.IsHiredByLocalPlayer]"
							parentanchor = center
							size = { 100% 100% }

							tooltip = "MV_MERCENARIES_STATUS_COMMANDED"

							highlight_icon = {
								parentanchor = center
								size = { 42 52 }
								texture = "gfx/interface/window_military/military_banner_blue_icon_bg.dds"
							}

							icon_flat_standard_gold = {
								parentanchor = top|hcenter
								position = { 0 8 }
								size = { 28 28 }
								texture = "gfx/interface/icons/flat_icons/army_details.dds"
							}
						}

						# Status debt
						widget = {
							visible = "[And( Not( MercenaryCompany.IsHired ), MercenaryCompany.WillGoInDebt( GetPlayer.Self ) )]"
							parentanchor = center
							size = { 100% 100% }

							tooltip = "[SelectLocalization(MercenaryCompany.IsHiredByLocalPlayer, 'MERCENARY_COMPANY_COST_DEBT_HIRED', 'MERCENARY_COMPANY_COST_DEBT')]"

							highlight_icon = {
								parentanchor = center
								size = { 42 52 }
								texture = "gfx/interface/window_military/military_banner_green_icon_bg.dds"
							}

							icon_flat_standard_gold = {
								parentanchor = top|hcenter
								position = { 0 12 }
								size = { 22 22 }
								texture = "gfx/interface/icons/flat_icons/army_select.dds"
							}
						}

						# Status unavailable
						widget = {
							visible = "[And( Not( MercenaryCompany.IsHired ), MercenaryCompany.WillGoInBankruptcy(GetPlayer.Self) )]"
							parentanchor = center
							size = { 100% 100% }

							tooltip = "[SelectLocalization(MercenaryCompany.IsHiredByLocalPlayer, 'MERCENARY_COMPANY_COST_BANKRUPTCY_HIRED', 'MERCENARY_COMPANY_COST_BANKRUPTCY')]"

							highlight_icon = {
								parentanchor = center
								position = { 0 2}
								size = { 42 52 }
								texture = "gfx/interface/window_military/military_banner_red_icon_bg.dds"
							}

							icon_flat_standard_gold = {
								parentanchor = top|hcenter
								position = { 0 9 }
								size = { 30 30 }
								texture = "gfx/interface/icons/flat_icons/cancel.dds"
							}
						}

						# Status unavailable, hired by other
						widget = {
							visible = "[And( Not( MercenaryCompany.IsHiredByLocalPlayer ), MercenaryCompany.IsHired )]"
							parentanchor = center
							size = { 100% 100% }

							tooltip = "HIRED_TROOPS_VIEW_NOT_AVAILABLE"

							highlight_icon = {
								parentanchor = center
								position = { 0 2}
								size = { 42 52 }
								texture = "gfx/interface/window_military/military_banner_red_icon_bg.dds"
							}

							icon_flat_standard_gold = {
								parentanchor = top|hcenter
								position = { 0 9 }
								size = { 30 30 }
								texture = "gfx/interface/icons/flat_icons/cancel.dds"
							}
						}
					}

					widget = {
						parentanchor = right|vcenter
						position = { -58 -1 }
						size = { 192 34 }

						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 5

							expand = {}

							highlight_icon = {
								name = "debt"
								visible = "[MercenaryCompany.WillGoInDebt(GetPlayer.Self)]"
								size = { 24 24 }
								texture = "gfx/interface/icons/symbols/icon_alert.dds"

								tooltip = "[SelectLocalization(MercenaryCompany.IsHiredByLocalPlayer, 'MERCENARY_COMPANY_COST_DEBT_HIRED', 'MERCENARY_COMPANY_COST_DEBT')]"
								using = tooltip_se
							}

							text_single = {
								name = "cost_label"
								text = "[MercenaryCompany.GetCostDesc]"
								alwaystransparent = yes
								align = nobaseline

								background = {
									visible = "[Or(MercenaryCompany.WillGoInDebt(GetPlayer.Self), MercenaryCompany.WillGoInBankruptcy(GetPlayer.Self))]"
									margin_bottom = -2
									using = Status_Bad
								}
							}
						}
					}
				}

				# Regiments type & size
				hbox = {
					layoutpolicy_horizontal = expanding
					margin_right = 10
					margin_bottom = 3

					overlappingitembox = {
						name = "regiment_types"
						layoutpolicy_horizontal = expanding
						size = { -1 30 }

						block "HiredTroopMenAtArmsTypesDataModel" { }

						item = {
							icon = {
								name = "men_at_arms_icon"
								size = { 30 30 }
								texture = "[Regiment.GetMAAType.GetIcon]"
								tooltipwidget = regiment_container_tooltip
								using = tooltip_se

							}
						}
					}
					
					text_single = {
						name = "hired_by_label"
						visible = "[MercenaryCompany.IsHired]"
						align = left|nobaseline
						text = "[SelectLocalization( MercenaryCompany.IsHiredByLocalPlayer, 'HIRED_TROOPS_VIEW_MC_HIRED_TIME_LEFT', 'HIRED_TROOPS_VIEW_NOT_AVAILABLE' )]"
					}

					soldiers_and_quality_small = {
						datacontext = "[HiredTroopItem.GetComposition]"
					}
				}
			}

			widget = {
				allow_outside = yes
				parentanchor = top|left
				position = { -16 -21 }
				size = { 62 74 }

				coa_realm_medium = {
					datacontext = "[MercenaryCompany.GetTitle.GetHolder]"
					parentanchor = center
					scale = 0.7
				}
			}
		}
	}

	type button_holyorder_list_item = widget
	{
		allow_outside = yes

		button_standard = {
			allow_outside = yes
			parentanchor = bottom|right
			size = { 100% 85% }

			tooltip = "HIRED_TROOPS_VIEW_LIST_HO_BUTTON_TOOLTIP"

			down = "[IsHolyOrderDetailViewShown(HolyOrder.Self)]"

			button = {
				visible = "[Not(GetVariableSystem.Exists( 'hired_troop_detail_view_open' ))]"
				size = { 100% 100% }
				enabled = "[Or(Not(HolyOrder.IsHired), Or(HolyOrder.IsHiredByLocalPlayer, HolyOrder.IsPlayerPatron))]"
				onclick = "[OpenHolyOrderDetailView(HolyOrder.Self)]"
			}

			button = {
				visible = "[GetVariableSystem.Exists( 'hired_troop_detail_view_open' )]"
				size = { 100% 100% }
				onclick = "[PdxGuiTriggerAllAnimations('mercenary_details_refresh')]"

				state = {
					name = _mouse_click
					delay = 0.2
					on_finish = "[OpenHolyOrderDetailView(HolyOrder.Self)]"
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				margin_left = 40

				widget = {
					layoutpolicy_horizontal = expanding
					size = { 0 34 }

					# Status available
					highlight_icon = {
						visible = "[Not( HolyOrder.IsHired )]"
						position = { -2 1 }
						size = { 100% 100% }
						texture = "gfx/interface/window_military/military_banner_green.dds"
					}

					# Status commanded by you
					highlight_icon = {
						visible = "[HolyOrder.IsHired]"
						position = { -2 1 }
						size = { 100% 100% }
						texture = "gfx/interface/window_military/military_banner_blue.dds"
					}

					highlight_icon = {
						visible = "[And(HolyOrder.IsHired, HolyOrder.IsPledgedToGreatHolyWar)]"
						position = { -2 1 }
						size = { 100% 100% }
						texture = "gfx/interface/window_military/military_banner_red.dds"
					}

					text_single = {
						parentanchor = vcenter|left
						position = { 0 -1 }
						text = "[HolyOrder.GetName]"
						default_format = "#high"
						align = nobaseline
						max_width = 300
						using = Font_Size_Medium
					}

					text_single = {
						name = "cost_label"
						parentanchor = right|vcenter
						position = { -58 -1 }
						text = "[HolyOrder.GetCostDescForPlayer]"
						align = nobaseline
					}

					# Status icon & background
					widget = {
						parentanchor = top|right
						position = { -10 -8 }
						size = { 42 52 }

						# Status available
						widget = {
							visible = "[Not( HolyOrder.IsHired )]"
							parentanchor = center
							size = { 100% 100% }

							tooltip = "MV_MERCENARIES_STATUS_AVAILABLE"

							highlight_icon = {
								parentanchor = center
								size = { 42 52 }
								texture = "gfx/interface/window_military/military_banner_green_icon_bg.dds"
							}

							icon_flat_standard_gold = {
								parentanchor = top|hcenter
								position = { 0 12 }
								size = { 22 22 }
								texture = "gfx/interface/icons/flat_icons/army_select.dds"
							}
						}

						# Status commanded by you
						widget = {
							visible = "[HolyOrder.IsHired]"
							parentanchor = center
							size = { 100% 100% }

							tooltip = "MV_MERCENARIES_STATUS_COMMANDED"

							highlight_icon = {
								parentanchor = center
								size = { 42 52 }
								texture = "gfx/interface/window_military/military_banner_blue_icon_bg.dds"
							}

							icon_flat_standard_gold = {
								parentanchor = top|hcenter
								position = { 0 8 }
								size = { 28 28 }
								texture = "gfx/interface/icons/flat_icons/army_details.dds"
							}
						}

						# Status unavailable
						widget = {
							visible = "[And(HolyOrder.IsHired, HolyOrder.IsPledgedToGreatHolyWar)]"
							parentanchor = center
							size = { 100% 100% }

							tooltip = "HIRED_TROOPS_VIEW_PLEDGED_TO_GREAT_HOLY_WAR"

							highlight_icon = {
								parentanchor = center
								position = { 0 2}
								size = { 42 52 }
								texture = "gfx/interface/window_military/military_banner_red_icon_bg.dds"
							}

							icon_flat_standard_gold = {
								parentanchor = top|hcenter
								position = { 0 9 }
								size = { 30 30 }
								texture = "gfx/interface/icons/flat_icons/cancel.dds"
							}
						}
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					margin_right = 10
					margin_bottom = 3

					overlappingitembox = {
						name = "regiment_types"
						layoutpolicy_horizontal = expanding
						size = { -1 30 }

						block "HiredTroopMenAtArmsTypesDataModel" { }

						item = {
							icon = {
								datacontext = "[Regiment.GetMAAType]"
								name = "men_at_arms_icon"
								size = { 30 30 }
								texture = "[MenAtArmsType.GetIcon]"

								tooltipwidget = regiment_container_tooltip
							}
						}
					}

					soldiers_and_quality_small = {
						datacontext = "[HiredTroopItem.GetComposition]"
					}
				}
			}

			widget = {
				allow_outside = yes
				parentanchor = top|left
				position = { -16 -21 }
				size = { 62 74 }

				coa_realm_medium = {
					name = "realm_flag"
					datacontext = "[HolyOrder.GetTitle.GetHolder]"
					parentanchor = center
					scale = 0.7
				}
			}
		}
	}
}
