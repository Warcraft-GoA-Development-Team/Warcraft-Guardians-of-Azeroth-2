# scope:first = Character in relation
# scope:second = Other character in relation
# This is run once, so anything applied on both characters must be done on both root and scope:second here
on_alliance_added = {
	effect = {
		# Embassies Perk stat bonus:
		scope:first = { update_embassies_effect = yes }
		scope:second = { update_embassies_effect = yes }

		# If players are fighting a war, let them know new allies can be called in soon.
		if = {
			limit = {
				 scope:first = { # Vassals cannot be called to war
			        NOR = {
			            target_is_vassal_or_below = scope:second
			            target_is_liege_or_above = scope:second
			        }
			    }
			}
			send_new_alliance_message = {
				THIS_CHARACTER = scope:first
				OTHER_CHARACTER = scope:second
			}
			send_new_alliance_message = {
				THIS_CHARACTER = scope:second
				OTHER_CHARACTER = scope:first
			}
		}
		# Add a delay on calling new allies into old wars.
		if = {
			limit = {
				scope:first = { is_playable_character = yes}
				scope:second = { is_playable_character = yes}
			}
			if = {
				limit = {
					scope:first = {	is_at_war = yes }
				}
				scope:first = {
					set_variable = { 
						name = delay_calling_recent_ally
						value = scope:second
						months = 1
					}
				}
			}
			if = {
				limit = {
					scope:second = { is_at_war = yes}
				}
				scope:second = {
					set_variable = {
						name = delay_calling_recent_ally
						value = scope:first
						months = 1
					}
				}
			}
		}

		# Warcraft
		# Struggle parameter
		# Struggle Catalysts.
	}
}

# scope:first = Character in relation
# scope:second = Other character in relation
# This is run once, so anything applied on both characters must be done on both root and scope:second here
on_alliance_removed = {
	effect = {
		# Embassies modifier removal:
		scope:first = { update_embassies_effect = yes }
		scope:second = { update_embassies_effect = yes }
		
		# Remove the opinion modifier from having proposed an alliance via the perk:
		scope:first = { try_remove_perk_alliance_opinion_effect = { TARGET = scope:second } }
		scope:second = { try_remove_perk_alliance_opinion_effect = { TARGET = scope:first } }
	}
}

# scope:first = Character in relation
# scope:second = Other character in relation
# List 'first' = The "left" half of the reason characters
# List 'second' = The "right" half of the reason characters
# The two lists are ordered together so the top of first and the top of second together make one alliance reason pair
# This is run once, so anything applied on both characters must be done on both root and scope:second here
on_alliance_broken = {
	effect = {
		# Embassies modifier removal:
		scope:first = { update_embassies_effect = yes }
		scope:second = { update_embassies_effect = yes }

		# Remove the opinion modifier from having proposed an alliance via the perk:
		scope:first = { try_remove_perk_alliance_opinion_effect = { TARGET = scope:second } }
		scope:second = { try_remove_perk_alliance_opinion_effect = { TARGET = scope:first } }

		# Hack scope change to make sure we're in a valid scope which is necessary for the later compare trigger inside the loop.
		scope:first = {
			set_local_variable = { name = reason_counter value = 0 }
			while = {
				limit = { # Loop over every pair of people in the first and second reason list
					list_size = {
						name = first
						value > local_var:reason_counter
					}
				}
				ordered_in_list = { # Pick the person at counter index for first reason list
					list = first
					position = local_var:reason_counter
					save_temporary_scope_as = reason_first
				}
				ordered_in_list = { # Pick the corresponding person at counter index for second reason list
					list = second
					position = local_var:reason_counter
					save_temporary_scope_as = reason_second
				}
				scope:reason_first = { # If they were betrothed break that betrothal now that the alliance is broken
					if = {
						limit = {
							is_betrothed = yes
							betrothed = scope:reason_second
						}
						break_betrothal = scope:reason_second
					}
				}
				change_local_variable = {
					name = reason_counter
					add = 1
				}
			}
		}
	}
}
