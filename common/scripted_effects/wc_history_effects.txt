vanish_historical_character_effect = {
	death = { death_reason = death_vanished }
}
purge_historical_character_effect = {
	set_to_lowborn = yes
	# Basically reset parents
	if = {
		limit = { exists = father }
		create_character = {
			age = current_year
			gender = male
			location = title:c_stormwind.title_province
			faith = faith:drogbar_religion
			culture = culture:drogbar
			random_traits = no
			dynasty = none
			save_scope_as = dummy_male
		}
		set_father = scope:dummy_male
		scope:dummy_male = {
			death = { death_reason = death_vanished }
		}
	}
	if = {
		limit = { exists = real_father }
		create_character = {
			age = current_year
			gender = male
			location = title:c_stormwind.title_province
			faith = faith:drogbar_religion
			culture = culture:drogbar
			random_traits = no
			dynasty = none
			save_scope_as = dummy_male
		}
		set_real_father = scope:dummy_male
		scope:dummy_male = {
			death = { death_reason = death_vanished }
		}
	}
	if = {
		limit = { exists = mother }
		create_character = {
			age = current_year
			gender = female
			location = title:c_stormwind.title_province
			faith = faith:drogbar_religion
			culture = culture:drogbar
			random_traits = no
			dynasty = none
			save_scope_as = dummy_female
		}
		set_mother = scope:dummy_female
		scope:dummy_female = {
			death = { death_reason = death_vanished }
		}
	}
	if = {
		limit = { is_alive = yes }
		death = { death_reason = death_vanished }
	}
}

add_patron_trait_character_effect = {
	# May add traits here later
}
add_fan_trait_character_effect = {
	# May add traits here later
}

add_1_perk_in_TYPE_TREE_effect = {
	# if = {
		# limit = {
			# perks_in_tree = { tree = $TYPE$_tree_$TREE$ value < 9 }
		# }

		if = { # switch breaks it somehow
			limit = {
				NOT = { has_perk = $TYPE$_tree_$TREE$_perk_1 }
			}

			add_perk = $TYPE$_tree_$TREE$_perk_1
		}
		else_if = {
			limit = {
				NOT = { has_perk = $TYPE$_tree_$TREE$_perk_2 }
			}

			add_perk = $TYPE$_tree_$TREE$_perk_2
		}
		else_if = {
			limit = {
				NOT = { has_perk = $TYPE$_tree_$TREE$_perk_3 }
			}

			add_perk = $TYPE$_tree_$TREE$_perk_3
		}
		else_if = {
			limit = {
				NOT = { has_perk = $TYPE$_tree_$TREE$_perk_4 }
			}

			add_perk = $TYPE$_tree_$TREE$_perk_4
		}
		else_if = {
			limit = {
				NOT = { has_perk = $TYPE$_tree_$TREE$_perk_5 }
			}

			add_perk = $TYPE$_tree_$TREE$_perk_5
		}
		else_if = {
			limit = {
				NOT = { has_perk = $TYPE$_tree_$TREE$_perk_6 }
			}

			add_perk = $TYPE$_tree_$TREE$_perk_6
		}
		else_if = {
			limit = {
				NOT = { has_perk = $TYPE$_tree_$TREE$_perk_7 }
			}

			add_perk = $TYPE$_tree_$TREE$_perk_7
		}
		else_if = {
			limit = {
				NOT = { has_perk = $TYPE$_tree_$TREE$_perk_8 }
			}

			add_perk = $TYPE$_tree_$TREE$_perk_8
		}
		else_if = {
			limit = {
				NOT = { has_perk = $TYPE$_tree_$TREE$_perk_9 }
			}

			add_perk = $TYPE$_tree_$TREE$_perk_9
		}
		# else = { add_$TYPE$_lifestyle_perk_points = 1 }

	# }
}

add_perks_in_nonelemental_MAGIC_lifestyle_effect = {
	if = { 
		limit = { 
			flag:$MAGIC$ = flag:order 
			has_variable = order_focus #note that we would be able to set up classes this way
		}
		add_weighted_perks_in_order_magic_lifestyle_effect = yes
	}
	else_if = {
		limit = { has_variable = wc_$MAGIC$_magic_lifestyle_additional_perks_variable }

		if = {
			limit = {
				has_character_flag = wc_$MAGIC$_magic_lifestyle_perks_were_reset_flag
			}

			add_$MAGIC$_magic_lifestyle_perk_points = var:wc_$MAGIC$_magic_lifestyle_additional_perks_variable
		}
		else = {
			while = {
				count = var:wc_$MAGIC$_magic_lifestyle_additional_perks_variable

				random_list = {
					1 = {
						trigger = {
							perks_in_tree = { tree = $MAGIC$_magic_tree_1 value < 9 }
						}

						add_1_perk_in_TYPE_TREE_effect = { TYPE = $MAGIC$_magic TREE = 1 }
					}
					1 = {
						trigger = {
							perks_in_tree = { tree = $MAGIC$_magic_tree_2 value < 9 }
						}

						add_1_perk_in_TYPE_TREE_effect = { TYPE = $MAGIC$_magic TREE = 2 }
					}
					1 = {
						trigger = {
							perks_in_tree = { tree = $MAGIC$_magic_tree_3 value < 9 }
						}

						add_1_perk_in_TYPE_TREE_effect = { TYPE = $MAGIC$_magic TREE = 3 }
					}
					1 = {
						trigger = {
							perks_in_tree = { tree = $MAGIC$_magic_tree_1 value = 9 }
							perks_in_tree = { tree = $MAGIC$_magic_tree_2 value = 9 }
							perks_in_tree = { tree = $MAGIC$_magic_tree_3 value = 9 }
						}

						add_$MAGIC$_magic_lifestyle_perk_points = 1
					}
				}
			}
		}

		remove_variable = wc_$MAGIC$_magic_lifestyle_additional_perks_variable

	}
}

add_perks_in_elemental_MAGIC_lifestyle_effect = {
	if = {
		limit = { has_variable = wc_$MAGIC$_magic_lifestyle_additional_perks_variable }

		if = {
			limit = {
				has_character_flag = wc_$MAGIC$_magic_lifestyle_perks_were_reset_flag
			}

			add_$MAGIC$_magic_lifestyle_perk_points = var:wc_$MAGIC$_magic_lifestyle_additional_perks_variable
		}
		else = {
			while = {
				count = var:wc_$MAGIC$_magic_lifestyle_additional_perks_variable

				random_list = {
					1 = {
						trigger = {
							perks_in_tree = { tree = $MAGIC$_magic_tree_1 value < 9 }
						}

						add_1_perk_in_TYPE_TREE_effect = { TYPE = $MAGIC$_magic TREE = 1 }
					}
					1 = {
						trigger = {
							perks_in_tree = { tree = $MAGIC$_magic_tree_2 value < 9 }
						}

						add_1_perk_in_TYPE_TREE_effect = { TYPE = $MAGIC$_magic TREE = 2 }
					}
					1 = {
						trigger = {
							perks_in_tree = { tree = $MAGIC$_magic_tree_1 value = 9 }
							perks_in_tree = { tree = $MAGIC$_magic_tree_2 value = 9 }
						}

						add_$MAGIC$_magic_lifestyle_perk_points = 1
					}
				}
			}

			if = { # If character doesn't have variable yet
				limit = { NOT = { has_variable = wc_$MAGIC$_favour_variable } }

				set_variable = { name = wc_$MAGIC$_favour_variable value = wc_starting_$MAGIC$_favour_value }
			}
			wc_ELEMENT_favour_lifestyle_check_effect = { ELEMENT = $MAGIC$ }
		}

		remove_variable = wc_$MAGIC$_magic_lifestyle_additional_perks_variable

	}
}

add_weighted_perks_in_order_magic_lifestyle_effect = {
	if = {
		limit = { has_variable = wc_order_magic_lifestyle_additional_perks_variable }

		if = {
			limit = {
				has_character_flag = wc_order_magic_lifestyle_perks_were_reset_flag
			}

			add_order_magic_lifestyle_perk_points = var:wc_order_magic_lifestyle_additional_perks_variable
		}
		else = {
			while = {
				count = var:wc_order_magic_lifestyle_additional_perks_variable

				random_list = {
					1 = {
						trigger = {
							perks_in_tree = { tree = order_magic_tree_1 value < 9 }
						}
						modifier = { #should be top priority for characters with this focus
							var:order_focus = flag:conjuration
							add = 1000
						}
						modifier = { #fire or ice should make having prereqs top priority
							AND = { 
								OR = {
									var:order_focus = flag:fire
									var:order_focus = flag:ice
								}
								NOT = { 
									has_perk = order_magic_tree_1_perk_1
									has_perk = order_magic_tree_1_perk_2
								}
							}
							add = 1000
						}
						modifier = { #otherwise should prioritize this just below ice and fire (see below)
							OR = {
								var:order_focus = flag:fire
								var:order_focus = flag:ice
							}
							add = 50
						}

						add_1_perk_in_TYPE_TREE_effect = { TYPE = order_magic TREE = 1 }
					}
					1 = {
						trigger = {
							perks_in_tree = { tree = order_magic_tree_2 value < 9 }
						}
						modifier = { #should be top priority for characters with this focus
							var:order_focus = flag:abjuration
							add = 1000
						}

						add_1_perk_in_TYPE_TREE_effect = { TYPE = order_magic TREE = 2 }
					}
					1 = {
						trigger = { 
							perks_in_tree = { tree = order_magic_tree_3 value < 9 }
						}
						modifier = { #should be top priority for characters with this focus
							var:order_focus = flag:chronomancy
							add = 1000
						}

						add_1_perk_in_TYPE_TREE_effect = { TYPE = order_magic TREE = 3 }
					}
					1 = {
						trigger = {
							has_perk = order_magic_tree_1_perk_1
							has_perk = order_magic_tree_1_perk_2
							OR = { 
								AND = { #should not be able to take last fire perk if has last ice perk
									perks_in_tree = { tree = order_magic_tree_4 value < 8 }
									perks_in_tree = { tree = order_magic_tree_5 value = 9 }
								}
								AND = { #otherwise free to finish whichever tree first
									perks_in_tree = { tree = order_magic_tree_4 value < 9 }
									perks_in_tree = { tree = order_magic_tree_5 value < 9 }
								}
							}
						}
						modifier = { #should be top priority for characters with this focus
							var:order_focus = flag:fire
							add = 1000
						}
						modifier = { #otherwise, other conjurers will also want to grab some of these
							OR = { 
								var:order_focus = flag:conjuration
								var:order_focus = flag:ice
							}
							add = 50
						}
						modifier = { #frost mages will want to grab fire synergy
							AND = { 
								var:order_focus = flag:ice
								NOT = { has_perk = order_magic_tree_4_perk_5 }
							}
							add = 25
						}

						add_1_perk_in_TYPE_TREE_effect = { TYPE = order_magic TREE = 4 }
					}
					1 = {
						trigger = {
							has_perk = order_magic_tree_1_perk_1
							has_perk = order_magic_tree_1_perk_2
							OR = { 
								AND = { # should not be able to take the last ice perk if has last fire perk
									perks_in_tree = { tree = order_magic_tree_5 value < 8 }
									perks_in_tree = { tree = order_magic_tree_4 value = 9 }
								}
								AND = { # otherwise free to finish whichever tree first
									perks_in_tree = { tree = order_magic_tree_4 value < 9 }
									perks_in_tree = { tree = order_magic_tree_5 value < 9 }
								}
							}
						}
						modifier = { #should be top priority for characters with this focus
							var:order_focus = flag:ice
							add = 1000
						}
						modifier = { #otherwise, other conjurers will also want to grab some of these
							OR = { 
								var:order_focus = flag:conjuration
								var:order_focus = flag:fire
							}
							add = 50
						}
						modifier = { #fire mages will want to grab frost synergy
							AND = { 
								var:order_focus = flag:fire
								NOT = { has_perk = order_magic_tree_5_perk_6 }
							}
							add = 25
						}

						add_1_perk_in_TYPE_TREE_effect = { TYPE = order_magic TREE = 5 }
					}
					1 = { #honestly no idea why this is here but wanted to make sure that it was updated with how the trees are supposed to work - SS
						trigger = {
							perks_in_tree = { tree = order_magic_tree_1 value = 9 }
							perks_in_tree = { tree = order_magic_tree_2 value = 9 }
							perks_in_tree = { tree = order_magic_tree_3 value = 9 }
							OR = { 
								AND = { 
									perks_in_tree = { tree = order_magic_tree_4 value = 9 }
									perks_in_tree = { tree = order_magic_tree_5 value = 8 }
								}
								AND = { 
									perks_in_tree = { tree = order_magic_tree_4 value = 8 }
									perks_in_tree = { tree = order_magic_tree_5 value = 9 }
								}
							}
						}

						add_order_magic_lifestyle_perk_points = 1
					}
				}
			}
		}

		#cleanup
		remove_variable = wc_order_magic_lifestyle_additional_perks_variable
	}
}