try_to_send_resurrected_message_effect = {
	if = {
		limit = { any_in_list = { list = relevant_slain_combatants } }
		# Send a message telling us about the casualties we inflicted after the battle
		send_interface_message = {
			type = event_slain_combatants_$TYPE$
			title = combat_event.$TITLE$.resurrected.t
			desc = {
				first_valid = {
					triggered_desc = {
						trigger = {	var:num_other_relevant_slain_combatants = 0	}
						desc = combat_event.$DESC$.resurrected.desc.single
					}
					triggered_desc = {
						trigger = {	var:num_other_relevant_slain_combatants = 1	}
						desc = combat_event.$DESC$.resurrected.desc.double
					}
					desc = combat_event.$DESC$.resurrected.desc.multiple
				}
				desc = combat_event.$DESC$.resurrected.desc.end
			}
			tooltip = event_message_effect
			left_icon = scope:primary_deceased

			# Show all slain combatants.
			every_in_list = {
				list = relevant_slain_combatants
				
				show_as_tooltip = { become_undead_no_notification_effect = yes }
			}
		}
	}
}

knight_is_resurrected_by_someone_effect = {
	if = {
		limit = { scope:enemy_knight = { can_use_frostmourne_to_twist_soul_trigger = yes } }
		raise_undead_by_depose_effect = { MASTER = scope:enemy_knight }
	}
	else = {
		raise_undead_by_depose_effect = { MASTER = var:battle_death_enemy }
	}
}