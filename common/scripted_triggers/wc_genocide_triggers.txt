# TODO: Infusion 2024, replace a lot of the corruption checks with infusion checks

#################################
# Corruption                    #
#################################

#######################
#  Is corrupted       #
#######################

has_corruption_modifier_trigger = {
    OR = {
        has_county_modifier = county_corruption_light_modifier
        has_county_modifier = county_corruption_void_modifier
        has_county_modifier = county_corruption_arcane_modifier
        has_county_modifier = county_corruption_fel_modifier
        has_county_modifier = county_corruption_life_modifier
        has_county_modifier = county_corruption_death_modifier
    }
}

# Check if province is corrupted with the modifier beneficial to the liege, with specific magic type
has_beneficial_corruption_this_province_specific_trigger = {
    has_county_modifier = $MOD$

    scope:councillor_liege = {
        OR = {
            can_corrupt_specific_trigger = { BEING = $BEING$ MAGIC = $MAGIC$ }
            faith = {
                OR = {
                    has_doctrine = doctrine_$MAGIC$_magic_approved
                    has_doctrine = doctrine_$MAGIC$_magic_accepted
                }
            }
        }
        NOT = {
            has_trait = $BEING_OPPOSITE$
        }
    }
    trigger_if = {
        limit = { scope:councillor_liege = { is_independent_ruler = no } }
        scope:councillor_liege.top_liege = {
            OR = {
                can_corrupt_specific_trigger = { BEING = $BEING$ MAGIC = $MAGIC$ }
                faith = {
                    OR = {
                        has_doctrine = doctrine_$MAGIC$_magic_approved
                        has_doctrine = doctrine_$MAGIC$_magic_accepted
                    }
                }
            }
            NOT = {
                has_trait = $BEING_OPPOSITE$
            }
        }
    }
}

# Check if province is corrupted with the modifier beneficial to the liege, with any magic type
has_beneficial_corruption_this_province_trigger = {
    OR = {
        has_beneficial_corruption_this_province_specific_trigger = { BEING = being_light BEING_OPPOSITE = being_void MAGIC = light MOD = county_corruption_light_modifier }
        has_beneficial_corruption_this_province_specific_trigger = { BEING = being_void BEING_OPPOSITE = being_light MAGIC = shadow MOD = county_corruption_void_modifier }
        has_beneficial_corruption_this_province_specific_trigger = { BEING = being_order BEING_OPPOSITE = being_demon MAGIC = order MOD = county_corruption_arcane_modifier }
        has_beneficial_corruption_this_province_specific_trigger = { BEING = being_demon BEING_OPPOSITE = being_order MAGIC = disorder MOD = county_corruption_fel_modifier }
        has_beneficial_corruption_this_province_specific_trigger = { BEING = being_life BEING_OPPOSITE = being_undead MAGIC = life MOD = county_corruption_life_modifier }
        has_beneficial_corruption_this_province_specific_trigger = { BEING = being_undead BEING_OPPOSITE = being_life MAGIC = death MOD = county_corruption_death_modifier }
    }
}

has_same_corruption_trigger = {
    trigger_if = {
        limit = {
            $COUNTY_1$ = {
                has_county_modifier = county_corruption_light_modifier
            }
        }
        $COUNTY_2$ = {
            has_county_modifier = county_corruption_light_modifier
        }
    }
    trigger_else_if = {
        limit = {
            $COUNTY_1$ = {
                has_county_modifier = county_corruption_void_modifier
            }
        }
        $COUNTY_2$ = {
            has_county_modifier = county_corruption_void_modifier
        }
    }
    trigger_else_if = {
        limit = {
            $COUNTY_1$ = {
                has_county_modifier = county_corruption_arcane_modifier
            }
        }
        $COUNTY_2$ = {
            has_county_modifier = county_corruption_arcane_modifier
        }
    }
    trigger_else_if = {
        limit = {
            $COUNTY_1$ = {
                has_county_modifier = county_corruption_fel_modifier
            }
        }
        $COUNTY_2$ = {
            has_county_modifier = county_corruption_fel_modifier
        }
    }
    trigger_else_if = {
        limit = {
            $COUNTY_1$ = {
                has_county_modifier = county_corruption_life_modifier
            }
        }
        $COUNTY_2$ = {
            has_county_modifier = county_corruption_life_modifier
        }
    }
    trigger_else_if = {
        limit = {
            $COUNTY_1$ = {
                has_county_modifier = county_corruption_death_modifier
            }
        }
        $COUNTY_2$ = {
            has_county_modifier = county_corruption_death_modifier
        }
    }
    trigger_else = {
        always = no
    }
}

#######################
#  Can be corrupted   #
#######################

# Check if the character is allowed the Corrupt action instead of Purge
can_corrupt_trigger = {
    OR = {
        has_being_trait_trigger = yes
        has_culture_being_trait_gfx_trigger = yes
        AND = {
            evil_public_religion_trigger = yes
            faith = {
                OR = {
                    has_doctrine = doctrine_light_magic_approved
                    has_doctrine = doctrine_shadow_magic_approved
                    has_doctrine = doctrine_order_magic_approved
                    has_doctrine = doctrine_disorder_magic_approved
                    has_doctrine = doctrine_life_magic_approved
                    has_doctrine = doctrine_death_magic_approved
                }
            }
        }
    }
}

# Check if character can corrupt a specific magic type
can_corrupt_specific_trigger = {
    OR = {
        has_trait = $BEING$
        culture = {
            has_clothing_gfx = $BEING$_gfx
        }
        AND = {
            evil_public_religion_trigger = yes
            faith = {
                has_doctrine = doctrine_$MAGIC$_magic_approved
            }
        }
    }
}

can_corrupt_at_game_start_specific_trigger = {
    OR = {
        culture = {
            has_clothing_gfx = $BEING$_gfx
        }
        AND = {
            evil_public_religion_trigger = yes
            faith = {
                has_doctrine = doctrine_$MAGIC$_magic_approved
            }
        }
    }
}

# This is very clunky, but also the only way to get the tooltip to work properly
can_corrupt_this_province_valid_trigger = {
    trigger_if = {
        limit = {
            OR = {
                NOT = { has_county_modifier = $MOD$ }
                NOT = { culture = scope:councillor_liege.culture }
                NOT = { faith = scope:councillor_liege.faith }
            }
        }
        always = yes
    }
    trigger_else = {
        custom_tooltip = {
            text = COUNTY_IS_YOUR_CULTURE
            always = no
        }
        custom_tooltip = {
            text = COUNTY_IS_YOUR_FAITH
            always = no
        }
        custom_tooltip = {
            text = COUNTY_ALREADY_CORRUPTED
            always = no
        }
    }
}

# Check if the liege will approve corruption, with a specific magic type
can_corrupt_this_province_liege_trigger = {
    trigger_if = {
        limit = { scope:councillor_liege = { is_independent_ruler = no } }
        custom_tooltip = {
            text = genocide_liege_disapproves
            scope:councillor_liege.top_liege = {
                can_corrupt_specific_trigger = { BEING = $BEING$ MAGIC = $MAGIC$ }
            }
        }
    }
}

# Check if the Corrupt task can be used on a county, with a any magic type
allow_corrupt_this_province_trigger = {
    trigger_if = {
        limit = {
            scope:councillor_liege = {
                can_corrupt_specific_trigger = { BEING = being_light MAGIC = light }
            }
        }
        can_corrupt_this_province_valid_trigger = { MOD = county_corruption_light_modifier }
        can_corrupt_this_province_liege_trigger = { BEING = being_light MAGIC = light }
    }
    trigger_else_if = {
        limit = {
            scope:councillor_liege = {
                can_corrupt_specific_trigger = { BEING = being_void MAGIC = shadow }
            }
        }
        can_corrupt_this_province_valid_trigger = { MOD = county_corruption_void_modifier }
        can_corrupt_this_province_liege_trigger = { BEING = being_void MAGIC = shadow }
    }
    trigger_else_if = {
        limit = {
            scope:councillor_liege = {
                can_corrupt_specific_trigger = { BEING = being_order MAGIC = order }
            }
        }
        can_corrupt_this_province_valid_trigger = { MOD = county_corruption_arcane_modifier }
        can_corrupt_this_province_liege_trigger = { BEING = being_order MAGIC = order }
    }
    trigger_else_if = {
        limit = {
            scope:councillor_liege = {
                can_corrupt_specific_trigger = { BEING = being_demon MAGIC = disorder }
            }
        }
        can_corrupt_this_province_valid_trigger = { MOD = county_corruption_fel_modifier }
        can_corrupt_this_province_liege_trigger = { BEING = being_demon MAGIC = disorder }
    }
    trigger_else_if = {
        limit = {
            scope:councillor_liege = {
                can_corrupt_specific_trigger = { BEING = being_life MAGIC = life }
            }
        }
        can_corrupt_this_province_valid_trigger = { MOD = county_corruption_life_modifier }
        can_corrupt_this_province_liege_trigger = { BEING = being_life MAGIC = life }
    }
    trigger_else_if = {
        limit = {
            scope:councillor_liege = {
                can_corrupt_specific_trigger = { BEING = being_undead MAGIC = death }
            }
        }
        can_corrupt_this_province_valid_trigger = { MOD = county_corruption_death_modifier }
        can_corrupt_this_province_liege_trigger = { BEING = being_undead MAGIC = death }
    }
    trigger_else = {
        always = no
    }
}

#################################
# Corruption modifier scale     #
#################################

corruption_scale_specific_trigger = {
    var:corruption_type ?= flag:$MOD$
    holder = {
        trigger_if = {
            limit = {
                $IS_EXTREME$ = yes
            }
            NOT = {
                has_trait = $BEING_OPPOSITE$
            }
        }
        OR = {
            trigger_if = {
                limit = {
                    $IS_EXTREME$ = yes
                }
                OR = {
                    has_trait = $BEING$
                    culture = {
                        has_clothing_gfx = $BEING$_gfx
                    }
                }
            }
            faith = {
                has_doctrine = doctrine_$MAGIC$_magic_$MAGIC_LEVEL$
            }
        }
    }
}

corruption_scale_extreme_pos_trigger = {
    OR = {
        corruption_scale_specific_trigger = { IS_EXTREME = yes BEING = being_light BEING_OPPOSITE = being_void MAGIC = light MAGIC_LEVEL = approved MOD = county_corruption_light_modifier }
        corruption_scale_specific_trigger = { IS_EXTREME = yes BEING = being_void BEING_OPPOSITE = being_light MAGIC = shadow MAGIC_LEVEL = approved MOD = county_corruption_void_modifier }
        corruption_scale_specific_trigger = { IS_EXTREME = yes BEING = being_order BEING_OPPOSITE = being_demon MAGIC = order MAGIC_LEVEL = approved MOD = county_corruption_arcane_modifier }
        corruption_scale_specific_trigger = { IS_EXTREME = yes BEING = being_demon BEING_OPPOSITE = being_order MAGIC = disorder MAGIC_LEVEL = approved MOD = county_corruption_fel_modifier }
        corruption_scale_specific_trigger = { IS_EXTREME = yes BEING = being_life BEING_OPPOSITE = being_undead MAGIC = life MAGIC_LEVEL = approved MOD = county_corruption_life_modifier }
        corruption_scale_specific_trigger = { IS_EXTREME = yes BEING = being_undead BEING_OPPOSITE = being_life MAGIC = death MAGIC_LEVEL = approved MOD = county_corruption_death_modifier }
    }
}

corruption_scale_mild_pos_trigger = {
    OR = {
        corruption_scale_specific_trigger = { IS_EXTREME = no BEING = being_light BEING_OPPOSITE = being_void MAGIC = light MAGIC_LEVEL = accepted MOD = county_corruption_light_modifier }
        corruption_scale_specific_trigger = { IS_EXTREME = no BEING = being_void BEING_OPPOSITE = being_light MAGIC = shadow MAGIC_LEVEL = accepted MOD = county_corruption_void_modifier }
        corruption_scale_specific_trigger = { IS_EXTREME = no BEING = being_order BEING_OPPOSITE = being_demon MAGIC = order MAGIC_LEVEL = accepted MOD = county_corruption_arcane_modifier }
        corruption_scale_specific_trigger = { IS_EXTREME = no BEING = being_demon BEING_OPPOSITE = being_order MAGIC = disorder MAGIC_LEVEL = accepted MOD = county_corruption_fel_modifier }
        corruption_scale_specific_trigger = { IS_EXTREME = no BEING = being_life BEING_OPPOSITE = being_undead MAGIC = life MAGIC_LEVEL = accepted MOD = county_corruption_life_modifier }
        corruption_scale_specific_trigger = { IS_EXTREME = no BEING = being_undead BEING_OPPOSITE = being_life MAGIC = death MAGIC_LEVEL = accepted MOD = county_corruption_death_modifier }
    }
}

corruption_scale_extreme_neg_trigger = {
    OR = {
        corruption_scale_specific_trigger = { IS_EXTREME = yes BEING = being_void BEING_OPPOSITE = being_light MAGIC = light MAGIC_LEVEL = crime MOD = county_corruption_light_modifier }
        corruption_scale_specific_trigger = { IS_EXTREME = yes BEING = being_light BEING_OPPOSITE = being_void MAGIC = shadow MAGIC_LEVEL = crime MOD = county_corruption_void_modifier }
        corruption_scale_specific_trigger = { IS_EXTREME = yes BEING = being_demon BEING_OPPOSITE = being_order MAGIC = order MAGIC_LEVEL = crime MOD = county_corruption_arcane_modifier }
        corruption_scale_specific_trigger = { IS_EXTREME = yes BEING = being_order BEING_OPPOSITE = being_demon MAGIC = disorder MAGIC_LEVEL = crime MOD = county_corruption_fel_modifier }
        corruption_scale_specific_trigger = { IS_EXTREME = yes BEING = being_undead BEING_OPPOSITE = being_life MAGIC = life MAGIC_LEVEL = crime MOD = county_corruption_life_modifier }
        corruption_scale_specific_trigger = { IS_EXTREME = yes BEING = being_life BEING_OPPOSITE = being_undead MAGIC = death MAGIC_LEVEL = crime MOD = county_corruption_death_modifier }
    }
}

corruption_scale_mild_neg_trigger = {
    OR = {
        corruption_scale_specific_trigger = { IS_EXTREME = no BEING = being_void BEING_OPPOSITE = being_light MAGIC = light MAGIC_LEVEL = shunned MOD = county_corruption_light_modifier }
        corruption_scale_specific_trigger = { IS_EXTREME = no BEING = being_light BEING_OPPOSITE = being_void MAGIC = shadow MAGIC_LEVEL = shunned MOD = county_corruption_void_modifier }
        corruption_scale_specific_trigger = { IS_EXTREME = no BEING = being_demon BEING_OPPOSITE = being_order MAGIC = order MAGIC_LEVEL = shunned MOD = county_corruption_arcane_modifier }
        corruption_scale_specific_trigger = { IS_EXTREME = no BEING = being_order BEING_OPPOSITE = being_demon MAGIC = disorder MAGIC_LEVEL = shunned MOD = county_corruption_fel_modifier }
        corruption_scale_specific_trigger = { IS_EXTREME = no BEING = being_undead BEING_OPPOSITE = being_life MAGIC = life MAGIC_LEVEL = shunned MOD = county_corruption_life_modifier }
        corruption_scale_specific_trigger = { IS_EXTREME = no BEING = being_life BEING_OPPOSITE = being_undead MAGIC = death MAGIC_LEVEL = shunned MOD = county_corruption_death_modifier }
    }
}

#################################
# Cleanse                       #
#################################

allow_cleanse_this_province_trigger = {
    has_corruption_modifier_trigger = yes
    NOT = {
        has_beneficial_corruption_this_province_trigger = yes
    }
}

#################################
# Purge                         #
#################################

# Monster cultures can genocide own heritage
monster_culture_trigger = {
	OR = {
		culture = culture:scourge
		culture = culture:naga
		culture = culture:satyr
		culture = culture:faldorei
	}
}

# Can this character genocide their own heritage
can_genocide_own_culture_group_trigger = {
    OR = {
        monster_culture_trigger = yes
        culture = {
            has_cultural_pillar = heritage_mogu
        }
        $LIEGE$ = { 
            OR = { 
                monster_culture_trigger = yes
                culture = {
                    has_cultural_pillar = heritage_mogu
                }
            }
        }
    }
}

# Can this character genocide their own religion
can_genocide_own_religion_trigger = {
    always = no
    OR = { 
        $LIEGE$ = { 

        }
    }
}

# Check if genocide should be allowed because they are evil
can_genocide_evil_trigger = {
    OR = {
        is_aggressive_trigger = yes
        $LIEGE$ = { is_aggressive_trigger = yes }
        evil_public_religion_trigger = yes
        $LIEGE$ = { evil_public_religion_trigger = yes }
    }
}

has_faith_hostility_trigger = { 
    faith = {
        faith_hostility_level = {
            target = $LIEGE$.faith
            value >= faith_$LEVEL$_level
        }
    }
}

allow_character_genocide_this_province_culture_trigger = {
    # These cultures can be genocided by their own group
    OR = {
        trigger_if = {
            limit = {
                can_genocide_own_culture_group_trigger = { LIEGE = $CHARACTER$ }
            }
            NOT = { culture = $CHARACTER$.culture }
        }
        trigger_else = {
            NOT = { culture = { has_same_culture_heritage = $CHARACTER$.culture } }
        }

        AND = {
            NOT = { culture = $CHARACTER$.culture }
            can_genocide_evil_trigger = { LIEGE = $CHARACTER$ }
        }
    }
}

allow_genocide_this_province_parent_culture_trigger = {
    trigger_if = { # AI shouldn't genocide parent/child cultures
        limit = {
            scope:councillor_liege = {
                is_ai = yes
            }
            OR = {
                scope:councillor_liege.culture = {
                    OR = {
                        is_hybrid_culture = yes
                        is_divergent_culture = yes
                    }
                }
                culture = {
                    OR = {
                        is_hybrid_culture = yes
                        is_divergent_culture = yes
                    }
                }
            }
        }
        culture = {
            save_temporary_scope_as = culture_check
            NOR = {
                scope:councillor_liege.culture = {
                    any_parent_culture = {
                        this = scope:culture_check
                    }
                }
                any_parent_culture = {
                    this = scope:councillor_liege.culture
                }
            }
        }
    }
}

allow_genocide_this_province_culture_trigger = {
    allow_character_genocide_this_province_culture_trigger = { CHARACTER = $CHARACTER$ }
    trigger_if = { # If the character is not independent, make sure their liege would approve
        limit = { scope:councillor_liege = { is_independent_ruler = no } }
        allow_character_genocide_this_province_culture_trigger = { CHARACTER = $CHARACTER$.top_liege }
    }
}

allow_character_genocide_this_province_religion_trigger = {
    OR = {
        # These religions can be genocided by their own group
        trigger_if = {
            limit = {
                can_genocide_own_religion_trigger = { LIEGE = $CHARACTER$ }
            }
            NOT = { faith = $CHARACTER$.faith }
            has_faith_hostility_trigger = { LIEGE = $CHARACTER$ LEVEL = astray }
        }
        trigger_else = {
            NOT = { religion = $CHARACTER$.religion }
            has_faith_hostility_trigger = { LIEGE = $CHARACTER$ LEVEL = hostile }
        }

        AND = {
            NOT = { faith = $CHARACTER$.faith }
            can_genocide_evil_trigger = { LIEGE = $CHARACTER$ }
        }
    }
}

allow_genocide_this_province_religion_trigger = {
    allow_character_genocide_this_province_religion_trigger = { CHARACTER = $CHARACTER$ }
    trigger_if = { # If the character is not independent, make sure their liege would approve
        limit = { scope:councillor_liege = { is_independent_ruler = no } }
        allow_character_genocide_this_province_religion_trigger = { CHARACTER = $CHARACTER$.top_liege }
    }
}

# This is the dumbest shit I've ever created
# Can't use OR = {} because the tooltip will only display triggers one level deep, so I came up with this shit instead
# Don't crucify me please
allow_genocide_this_province_trigger = {
    trigger_if = {
        limit = {
            scope:councillor_liege = {
                is_ai = yes
            }
        }

        NOT = {
            scope:councillor_liege = { # AI should never genocide if they can cleanse first
                any_sub_realm_county = {
                    allow_cleanse_this_province_trigger = yes
                }
            }
        }
    }
    trigger_if = {
        limit = {
            OR = {
                AND = {
                    allow_character_genocide_this_province_culture_trigger = { CHARACTER = scope:councillor_liege }
                    NOT = {
                        allow_genocide_this_province_religion_trigger = { CHARACTER = scope:councillor_liege }
                    }
                    NOT = {
                        allow_character_genocide_this_province_culture_trigger = { CHARACTER = scope:councillor_liege.top_liege }
                    }
                }
                AND = {
                    NOT = {
                        allow_genocide_this_province_culture_trigger = { CHARACTER = scope:councillor_liege }
                    }
                    allow_character_genocide_this_province_religion_trigger = { CHARACTER = scope:councillor_liege }
                    NOT = {
                        allow_character_genocide_this_province_religion_trigger = { CHARACTER = scope:councillor_liege.top_liege }
                    }
                }
            }
        }

        custom_tooltip = {
            text = genocide_liege_disapproves
            always = no
        }
    }
    trigger_else_if = {
        limit = {
            NAND = {
                allow_genocide_this_province_culture_trigger = { CHARACTER = scope:councillor_liege }
                allow_genocide_this_province_religion_trigger = { CHARACTER = scope:councillor_liege }
            }
        }
        custom_tooltip = {
            text = genocide_invalid_culture_faith
            always = no
        }
    }
    trigger_else = {
        always = yes
    }
}