window = {
	name = "ruler_designer"
	size = { 100% 100% }
	movable = no
	layer = windows_layer
	filter_mouse = all
	datacontext = "[GetVariableSystem]"

	using = Window_Background_No_Edge

	background = {
		texture = "gfx/interface/component_tiles/tile_window_background_no_edge.dds"
		spriteType = Corneredtiled
		spriteborder = { 18 0 }
		margin = { 20 0 }
		texture_density = 2

		modify_texture = {
			texture = "gfx/interface/component_overlay/overlay_effect.dds"
			blend_mode = overlay
		}
	}

	state = {
		name = _show
		using = Animation_FadeIn_Standard
		on_start = "[GetVariableSystem.Clear( 'faith_select_window_open' )]"
		on_start = "[GetVariableSystem.Clear( 'culture_select_window_open' )]"
		on_start = "[GetVariableSystem.Clear( 'trait_select_window_open' )]"
		on_start = "[GetVariableSystem.Clear( 'trait_select_window_replace' )]"
		on_start = "[GetVariableSystem.Clear( 'appearance_customization_window_open' )]"
		on_start = "[GetVariableSystem.Clear( 'appearance_customization_side_tab_open' )]"
		on_start = "[GetVariableSystem.Clear( 'appearance_customization_portrait_view' )]"
		on_start = "[GetVariableSystem.Clear( 'coat_of_arms_customization_open' )]"
		#Warcraft
		on_start = "[GetVariableSystem.Clear( 'picked_ethnicity' )]"
		on_start = "[GetVariableSystem.Clear( 'picked_race_trait' )]"
		on_start = "[VariableSystem.Set( 'picked_ethnicity', RulerDesignerWindow.GetEthnicity.GetName )]"
		using = CoatOfArmsDesignerAnimationResetState
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Standard
		#Warcraft
		on_start = "[GetVariableSystem.Clear( 'picked_ethnicity' )]"
		on_start = "[GetVariableSystem.Clear( 'picked_race_trait' )]"
	}

	vbox = {
		margin_top = 10

		background = {
			texture = "gfx/interface/illustrations/event_scenes_frontend/temple.dds"
			alpha = 0.5
			mirror = horizontal
			fittype = centercrop

			modify_texture = {
				texture = "gfx/interface/window_ruler_designer/rd_bg_mask.dds"
				blend_mode = alphamultiply
				spritetype = corneredstretched
				spriteborder = { 590 0 }
			}
		}

		background = {
			texture = "gfx/interface/component_masks/mask_fade_corner.dds"
			color = { 0.12 0.12 0.12 1 }
			mirror = horizontal
			margin_right = -1200
			alpha = 0.6
		}

		header_standard = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text"
			{
				text = "RULER_DESIGNER"
			}


			blockoverride "button_close"
			{
				visible = no
			}
		}

		hbox = {
			name = "main_designer"
			visible = "[Not( Or( VariableSystem.Exists( 'appearance_customization_window_open' ), VariableSystem.Exists( 'coat_of_arms_customization_open' ) ) )]"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin = { 20 20 }

			using =  Animation_Tab_Switch

			widget = {
				visible = "[Not( VariableSystem.Exists( 'trait_select_window_open' ) )]"
				layoutpolicy_vertical = expanding
				size = { 520 0 }

				vbox = {

					hbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						vbox = {
							name = "left_panel"
							layoutpolicy_vertical = expanding
							margin_right = 8

							vbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								spacing = 16

								hbox = {
									name = "sex_customization"
									layoutpolicy_horizontal = expanding
									spacing = 40

									vbox = {
										name = "sex"
										layoutpolicy_vertical = expanding

										vbox = {
											layoutpolicy_horizontal = expanding

											hbox = {
												layoutpolicy_horizontal = expanding

												text_label_left = {
													text = "RULER_DESIGNER_SEX"
													max_width = 120
													autoresize = yes
													using = Font_Size_Medium
												}
											}
										}

										hbox = {
											layoutpolicy_horizontal = expanding
											margin_top = 3
											spacing = 5

											button_male = {
												name = "male"
												alwaystransparent = "[Not( RulerDesignerWindow.IsFemale )]"
												onclick = "[RulerDesignerWindow.SetIsFemale( '(bool)no' )]"
												down = "[Not( RulerDesignerWindow.IsFemale )]"
												tooltip = RULER_DESIGNER_SET_IS_MALE
												using = tooltip_se

												onclick = "[PdxGuiTriggerAllAnimations('ruler_designer_portrait_refresh')]"
											}

											button_female = {
												name = "female"
												alwaystransparent = "[RulerDesignerWindow.IsFemale]"
												onclick = "[RulerDesignerWindow.SetIsFemale( '(bool)yes' )]"
												down = "[RulerDesignerWindow.IsFemale]"
												tooltip = RULER_DESIGNER_SET_IS_FEMALE
												using = tooltip_se

												onclick = "[PdxGuiTriggerAllAnimations('ruler_designer_portrait_refresh')]"
											}

											expand = {}
										}

										expand = {}
									}


									vbox = {
										name = "sexuality"
										layoutpolicy_vertical = expanding


										vbox = {
											layoutpolicy_horizontal = expanding

											hbox = {
												layoutpolicy_horizontal = expanding

												text_label_left = {
													text = "RULER_DESIGNER_SEXUALITY"
													max_width = 250
													autoresize = yes
													using = Font_Size_Medium
												}
											}
										}


										text_single = {
											margin_top = 3
											text = "RULER_DESIGNER_SEXUALITY_NOT_AVAILABLE_INFO"
											visible = "[Not(RulerDesignerWindow.CanChangeSexuality)]"
										}



										hbox = {
											visible = "[RulerDesignerWindow.CanChangeSexuality]"
											layoutpolicy_horizontal = expanding

											margin_top = 3
											spacing = 5

											button_randomize = {
												name = "random"
												alwaystransparent = "[RulerDesignerWindow.HasSexuality( 'none' )]"
												onclick = "[RulerDesignerWindow.SetSexuality( 'none' )]"
												down = "[RulerDesignerWindow.HasSexuality( 'none' )]"
												tooltip = RULER_DESIGNER_SET_SEXUALITY_RANDOM
												using = tooltip_se
											}

											button_heterosexual = {
												name = "heterosexual"
												alwaystransparent = "[RulerDesignerWindow.HasSexuality( 'heterosexual' )]"
												onclick = "[RulerDesignerWindow.SetSexuality( 'heterosexual' )]"
												down = "[RulerDesignerWindow.HasSexuality( 'heterosexual' )]"
												tooltip = RULER_DESIGNER_SET_SEXUALITY_HETEROSEXUAL
												using = tooltip_se
											}

											button_homosexual_female = {
												name = "homosexual_female"
												visible = "[RulerDesignerWindow.IsFemale]"
												alwaystransparent = "[RulerDesignerWindow.HasSexuality( 'homosexual' )]"
												onclick = "[RulerDesignerWindow.SetSexuality( 'homosexual' )]"
												down = "[RulerDesignerWindow.HasSexuality( 'homosexual' )]"
												tooltip = RULER_DESIGNER_SET_SEXUALITY_HOMOSEXUAL
												using = tooltip_se
											}

											button_homosexual_male = {
												name = "homosexual_male"
												visible = "[Not( RulerDesignerWindow.IsFemale )]"
												alwaystransparent = "[RulerDesignerWindow.HasSexuality( 'homosexual' )]"
												onclick = "[RulerDesignerWindow.SetSexuality( 'homosexual' )]"
												down = "[RulerDesignerWindow.HasSexuality( 'homosexual' )]"
												tooltip = RULER_DESIGNER_SET_SEXUALITY_HOMOSEXUAL
												using = tooltip_se
											}

											button_bisexual_female = {
												name = "bisexual_female"
												visible = "[RulerDesignerWindow.IsFemale]"
												alwaystransparent = "[RulerDesignerWindow.HasSexuality( 'bisexual' )]"
												onclick = "[RulerDesignerWindow.SetSexuality( 'bisexual' )]"
												down = "[RulerDesignerWindow.HasSexuality( 'bisexual' )]"
												tooltip = RULER_DESIGNER_SET_SEXUALITY_BISEXUAL
												using = tooltip_se
											}

											button_bisexual_male = {
												name = "bisexual_male"
												visible = "[Not( RulerDesignerWindow.IsFemale )]"
												alwaystransparent = "[RulerDesignerWindow.HasSexuality( 'bisexual' )]"
												onclick = "[RulerDesignerWindow.SetSexuality( 'bisexual' )]"
												down = "[RulerDesignerWindow.HasSexuality( 'bisexual' )]"
												tooltip = RULER_DESIGNER_SET_SEXUALITY_BISEXUAL
												using = tooltip_se
											}

											button_asexual = {
												name = "asexual"
												alwaystransparent = "[RulerDesignerWindow.HasSexuality( 'asexual' )]"
												onclick = "[RulerDesignerWindow.SetSexuality( 'asexual' )]"
												down = "[RulerDesignerWindow.HasSexuality( 'asexual' )]"
												tooltip = RULER_DESIGNER_SET_SEXUALITY_ASEXUAL
												using = tooltip_se
											}

											expand = {}
										}

										expand = {}
									}

									expand = {}
								}

								vbox = {
									name = "culture_and_faith"
									layoutpolicy_horizontal = expanding
									spacing = 20

									vbox = {
										layoutpolicy_horizontal = expanding
										datacontext = "[RulerDesignerWindow.GetFaith]"

										hbox = {
											layoutpolicy_horizontal = expanding

											text_label_left = {
												layoutpolicy_horizontal = expanding
												text = "RULER_DESIGNER_FAITH_LABEL"
												using = Font_Size_Medium
											}
										}

										hbox = {
											layoutpolicy_horizontal = expanding

											tooltipwidget = {
												faith_tooltip_core_tenents = {}
											}

											icon = {
												name = "item_icon"
												size = { 60 60 }
												texture = "[Faith.GetIcon]"
												using = tooltip_se
											}

											vbox = {
												margin_left = 5

												hbox = {
													layoutpolicy_horizontal = expanding

													text_single = {
														layoutpolicy_horizontal = expanding
														text = "[Faith.GetReligion.GetNameNoTooltip]"
														default_format = "#bold"
														margin_right = 5
														margin_bottom = 5
													}

													button_replace = {
														name = "reset"
														onclick = "[VariableSystem.Toggle( 'faith_select_window_open' )]"
														onclick = "[VariableSystem.Clear( 'culture_select_window_open' )]"
														tooltip = RULER_DESIGNER_CHOOSE_FAITH
														using = tooltip_se
													}
												}

												hbox = {
													layoutpolicy_horizontal = expanding

													text_single = {
														layoutpolicy_horizontal = expanding
														text = "[Faith.GetNameNoTooltip]"

														margin_bottom = 5
													}
												}
											}

											expand = {}
										}
									}

									vbox = {
										layoutpolicy_horizontal = expanding
										datacontext = "[RulerDesignerWindow.GetCulture]"

										hbox = {
											layoutpolicy_horizontal = expanding

											text_label_left = {
												layoutpolicy_horizontal = expanding
												text = "RULER_DESIGNER_CULTURE_LABEL"
												using = Font_Size_Medium
											}
										}

										hbox = {
											layoutpolicy_horizontal = expanding

											vbox = {

											tooltipwidget = {
												ruler_designer_culture_tooltip = {}
											}

												hbox = {
													layoutpolicy_horizontal = expanding

													text_single = {
														layoutpolicy_horizontal = expanding
														text = "[Culture.GetHeritage.GetNameNoTooltip]"
														default_format = "#bold"

														margin_right = 5
														margin_bottom = 5
													}

													button_replace = {
														onclick = "[VariableSystem.Toggle( 'culture_select_window_open' )]"
														using = Button_Close_Select_Faith
														tooltip = RULER_DESIGNER_CHOOSE_CULTURE
														using = tooltip_se
													}
													#Warcraft
													hbox_race_trait_slot = {
														name = "race_trait"
														margin_left = 25
														margin_top = 5
														datacontext = "[GetNullCharacter]"
														#WCrace
														datacontext = "[RulerDesignerWindow.AccessOtherTraitSlots]"
														layoutpolicy_horizontal = expanding

														blockoverride "trait_slots_header_text"
														{
															text = RULER_DESIGNER_RACE_TRAIT_LABEL
															default_format = "#bold"
														}
														blockoverride "plus_onclick"
														{
															onclick = "[VariableSystem.Set( 'trait_select_window_open', 'race' )]"
														}
													}
												}

												hbox = {
													layoutpolicy_horizontal = expanding

													text_single = {
														layoutpolicy_horizontal = expanding
														text = "[Culture.GetNameNoTooltip]"

														margin_bottom = 5
													}
												}
											}

											expand = { }

											button_standard = {
												size = { 250 32 }

												onclick = "[RulerDesignerWindow.RandomizeEthnicityDnaFromCulture]"
												onclick = "[PdxGuiTriggerAllAnimations('ruler_designer_portrait_refresh')]"
												visible = "[Not(VariableSystem.HasValue( 'culture_select_window_open', 'true' ))]"
												text = "RULER_DESIGNER_REGENERATE_PORTRAIT"
					
												button_randomize = {
													parentanchor = vcenter
													position = { 7 0 }
												}
											}			

										}
									}
								}

								vbox = {
									name = "name"
									layoutpolicy_horizontal = expanding

									vbox = {
										layoutpolicy_horizontal = expanding

										hbox = {
											layoutpolicy_horizontal = expanding

											text_label_left = {
												layoutpolicy_horizontal = expanding
												text = "RULER_DESIGNER_CHARACTER_NAME"
												using = Font_Size_Medium
											}
										}
									}

									vbox = {
										layoutpolicy_horizontal = expanding
										margin_top = 10
										spacing = 10

										hbox = {
											layoutpolicy_horizontal = expanding
											spacing = 5

											text_single = {
												text = "RULER_DESIGNER_FIRST_NAME_LABEL"
												align = nobaseline
											}

											editbox_standard = {
												layoutpolicy_horizontal = expanding

												blockoverride "editbox_properties"
												{
													text = "[RulerDesignerWindow.GetFirstName]"
													ontextedited = "[RulerDesignerWindow.OnEditFirstName]"
													maxcharacters = 40
												}
											}

											expand = {}
										}

										hbox = {
											name = "random_name"
											layoutpolicy_horizontal = expanding
											spacing = 5

											button_randomize = {
												name = "dice_icon"
												size = { 30 30 }
												enabled = no
											}

											text_single = {
												text = "RULER_DESIGNER_RANDOM_NAME_LABEL"
												align = nobaseline
												max_width = 150
											}

											hbox = {
												spacing = 5

												button_standard = {
													name = "random_faith_name"
													datacontext = "[RulerDesignerWindow.GetFaith]"
													visible = "[Faith.HasReservedNames( RulerDesignerWindow.IsFemale )]"
													size = { 140 25 }
													text = "[Faith.GetAdjectiveNoTooltip]"
													tooltip = RULER_DESIGNER_RANDOM_NAME_FAITH_TOOLTIP
													using = tooltip_se
													onclick = "[RulerDesignerWindow.RandomizeFirstNameFaith]"
												}

												button_standard = {
													name = "random_culture_name"
													datacontext = "[RulerDesignerWindow.GetCulture]"
													size = { 140 25 }
													text = "[Culture.GetNameNoTooltip]"
													tooltip = RULER_DESIGNER_RANDOM_NAME_CULTURE_TOOLTIP
													using = tooltip_se
													onclick = "[RulerDesignerWindow.RandomizeFirstNameCulture]"
												}
											}

											expand = {}
										}
									}
								}

								vbox = {
									name = "dynasty_house"
									layoutpolicy_horizontal = expanding

									hbox = {
										layoutpolicy_horizontal = expanding

										text_label_left = {
											layoutpolicy_horizontal = expanding
											text = "RULER_DESIGNER_DYNASTY_LABEL"
											using = Font_Size_Medium
										}
									}

									vbox = {
										datacontext = "[RulerDesignerWindow.GetDynastyCoatOfArms]"
										layoutpolicy_horizontal = expanding

										margin_top = 25
										margin_bottom = -10

										hbox = {
											spacing = 5

											coa_preview_dynasty_huge = {
												datacontext = "[DesignerCoA.GetCoA]"
											}

											button_edit_text = {
												onclick = "[RulerDesignerWindow.OpenDynastyCoatOfArmsDesigner]"
												onclick = "[VariableSystem.Set( 'coat_of_arms_customization_open', 'dynasty' )]"
												tooltip = RULER_DESIGNER_CUSTOMIZE_DYNASTY
												using = tooltip_se
											}
										}
									}
								}

								vbox = {
									name = "realm"
									layoutpolicy_horizontal = expanding
									datacontext = "[RulerDesignerWindow.GetCharacterToOverwrite]"
									datacontext = "[Character.GetPrimaryTitle]"
									datacontext = "[RulerDesignerWindow.GetTitleCoatOfArms]"
									visible = "[Not( RulerDesignerWindow.IsDesigningLandless )]"

									vbox = {
										name = "realm_header"
										layoutpolicy_horizontal = expanding

										hbox = {
											layoutpolicy_horizontal = expanding

											text_label_left = {
												layoutpolicy_horizontal = expanding
												text = "RULER_DESIGNER_REALM_LABEL"
												using = Font_Size_Medium
											}
										}
									}

									hbox = {
										name = "title_and_government"
										layoutpolicy_vertical = expanding
										layoutpolicy_horizontal = expanding

										vbox = {
											name = "title"
											layoutpolicy_horizontal = expanding
											margin_top = 5

											hbox = {
												layoutpolicy_horizontal = expanding
												margin_right = 30

												text_multi = {
													layoutpolicy_horizontal = expanding
													text = "RULER_DESIGNER_TITLE_NAME"
													default_format = "#high"
													using = Font_Size_Big
													max_width = 470
													autoresize = yes
													align = center
												}
											}

											hbox = {
												margin_left = 30

												coa_realm_huge_crown = {
													name = "default_coa"
													visible = "[Not( DesignerCoA.IsSet )]"
													blockoverride "coa_button" {}
												}

												container = {
													visible = "[DesignerCoA.IsSet]"

													coa_preview_realm_huge_crown = {
														name = "custom_coa"
														datacontext = "[DesignerCoA.GetCoA]"

														blockoverride "frame_override"
														{
															frame = "[Title.GetTierFrame]"
														}
														blockoverride "realm_mask_texture"
														{
															texture = "[Character.GetGovernment.GetRealmMask]"
														}
														blockoverride "realm_frame_texture"
														{
															texture = "[Character.GetGovernment.GetRealmFrame('(int32)115')]"
														}
													}
												}

												button_edit_text = {
													onclick = "[RulerDesignerWindow.OpenTitleCoatOfArmsDesigner]"
													onclick = "[VariableSystem.Set( 'coat_of_arms_customization_open', 'title' )]"
													tooltip = RULER_DESIGNER_CUSTOMIZE_TITLE
													using = tooltip_se
												}

												button_revert = {
													visible = "[Not( RulerDesignerWindow.IsDesigningLandless )]"
													onclick = "[RulerDesignerWindow.ResetTitleToHistorical]"
													tooltip = RULER_DESIGNER_RESET_TITLE
													using = tooltip_se
												}
											}
										}
									}

									widget = {
										size = {520 1}
									}									
								}

								expand = {}

								hbox = {
									layoutpolicy_horizontal = expanding
									spacing =  8

									button_standard_back = {
										onclick = "[RulerDesignerWindow.Close]"
										shortcut = "close_window"

										blockoverride "text"
										{
											text = "BACK_LABEL"
										}
									}

									button_standard = {
										text = "RULER_DESIGNER_SAVE_RULER"

										enabled = "[RulerDesignerWindow.CanOpenSaveRulerWindow]"
										tooltip = "[RulerDesignerWindow.CanOpenSaveRulerWindowTooltip]"

										onclick = "[RulerDesignerWindow.OpenSaveRulerWindow]"
									}

									button_standard = {
										text = "RULER_DESIGNER_LOAD_RULER"

										enabled = "[RulerDesignerWindow.CanOpenLoadRulerWindow]"
										tooltip = "[RulerDesignerWindow.CanOpenLoadRulerWindowTooltip]"

										onclick = "[RulerDesignerWindow.OpenLoadRulerWindow]"
									}

									expand = {}
								}
							}
						}

						divider_light = {
							visible = "[Not( VariableSystem.Exists( 'trait_select_window_open' ) )]"
							layoutpolicy_vertical = expanding
						}
					}
				}
			}

			vbox = {
				name = "faith_selection"
				layoutpolicy_vertical = expanding
				visible = "[VariableSystem.Exists( 'faith_select_window_open' )]"

				state = {
					name = _show
					using = Animation_FadeIn_Quick
				}

				state = {
					name = _hide
					alpha = 0
					on_start = "[RulerDesignerWindow.AccessReligionList.HideAllChildren]"
				}

				text_label_center = {
					text = RULER_DESIGNER_FAITH_LIST_LABEL
					using = Font_Size_Big
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					margin_bottom = 15

					expand = {}

					button_close = {
						name = "button_close"
						shortcut = "close_window"
						tooltip = "CLOSE_TOOLTIP"
						onclick = "[VariableSystem.Clear( 'faith_select_window_open' )]"
						clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
					}
				}

				scrollbox = {
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding
					minimumsize = { 350 0 }

					datacontext = "[RulerDesignerWindow.AccessReligionList]"

					blockoverride "scrollbox_content"
					{
						vbox = {
							datamodel = "[CollapsibleReligionList.AccessItems]"
							layoutpolicy_horizontal = expanding

							item = {
								vbox = {
									name = "religion"
									datacontext = "[CollapsibleReligionListGroup.GetItem]"
									layoutpolicy_horizontal = expanding

									hbox = {
										layoutpolicy_horizontal = expanding
										tooltip = "RULER_DESIGNER_LIST_FAITH_ENTRY_TOOLTIP"

										button_standard_hover = {
											layoutpolicy_horizontal = expanding
											onclick = "[CollapsibleReligionListGroup.ToggleChildrenVisible]"

											hbox = {
												margin = { 5 0 }
												spacing = 10

												button_list_expand = {
													checked = "[CollapsibleReligionListGroup.AreChildrenVisible]"
													onclick = "[CollapsibleReligionListGroup.ToggleChildrenVisible]"
												}

												text_single = {
													layoutpolicy_horizontal = expanding
													text = "[Religion.GetNameNoTooltip]"
													size = { 0 40 }
													align = nobaseline
													default_format = "#clickable"
													autoresize = no
												}
											}
										}
									}

									vbox = {
										name = "faiths"
										datamodel = "[Religion.GetFaiths]"
										visible = "[CollapsibleReligionListGroup.AreChildrenVisible]"
										layoutpolicy_horizontal = expanding

										item = {
											hbox = {
												layoutpolicy_horizontal = expanding

												button_standard_hover = {
													name = "faith_item"
													layoutpolicy_horizontal = expanding
													size = { 0 55 }
													using = Button_Select_Faith
													tooltipwidget = { faith_tooltip_ruler_designer = {} }
													enabled = "[Not( ObjectsEqual( Faith.Self, RulerDesignerWindow.GetFaith ) )]"

													hbox = {
														margin = { 5 0 }
														margin_left = 30
														spacing = 10

														button_religion_icon_ruler_designer = {
															name = "faith_icon"
															size = { 50 50 }
															using = Button_Select_Faith
														}

														text_single = {
															layoutpolicy_horizontal = expanding
															text = "[Faith.GetNameNoTooltip]"
															default_format = "#clickable"
															autoresize = no
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}

			vbox = {
				name = "culture_selection"
				layoutpolicy_vertical = expanding
				size = { 520 0 }

				visible = "[VariableSystem.Exists( 'culture_select_window_open' )]"

				state = {
					name = _show
					using = Animation_FadeIn_Quick
				}

				state = {
					name = _hide
					alpha = 0
					on_start = "[RulerDesignerWindow.AccessCultureList.HideAllChildren]"
				}

				text_label_center = {
					text = RULER_DESIGNER_CULTURE_LIST_LABEL
					using = Font_Size_Big
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					margin = { 0 10 }
					margin_bottom = 15

					button_checkbox_label = {
						name = "update_appearance_checkbox"
						onclick = "[RulerDesignerWindow.ToggleAppearanceOverride]"

						blockoverride "checkbox"
						{
							checked = "[RulerDesignerWindow.IsAppearanceOverrideEnabled]"
						}

						blockoverride "text"
						{
							text = "RULER_DESIGNER_UPDATE_APPEARANCE"
						}
					}

					expand = {}

					button_close = {
						name = "button_close"
						shortcut = "close_window"
						tooltip = "CLOSE_TOOLTIP"
						using = Button_Close_Select_Culture
						clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
					}
				}

				scrollbox = {
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding
					minimumsize = { 400 100% }

					datacontext = "[RulerDesignerWindow.AccessCultureList]"

					blockoverride "scrollbox_content"
					{
						vbox = {
							datamodel = "[CollapsibleCultureList.AccessItems]"
							layoutpolicy_horizontal = expanding

							item = {
								vbox = {
									name = "culture_group"
									layoutpolicy_horizontal = expanding

									datacontext = "[CollapsibleCultureListGroup.GetItem]"

									button_standard_hover = {
										layoutpolicy_horizontal = expanding

										size = { 0 40 }
										onclick = "[CollapsibleCultureListGroup.ToggleChildrenVisible]"
										tooltip = RULER_DESIGNER_LIST_CULTURE_ENTRY_TOOLTIP

										hbox = {
											margin = { 5 0 }
											spacing = 10

											button_list_expand = {
												checked = "[CollapsibleCultureListGroup.AreChildrenVisible]"
												onclick = "[CollapsibleCultureListGroup.ToggleChildrenVisible]"
											}

											text_single = {
												layoutpolicy_horizontal = expanding
												text = "[CulturePillar.GetNameNoTooltip]"
												default_format = "#clickable"
												autoresize = no
											}
										}
									}


									vbox = {
										name = "cultures"
										layoutpolicy_horizontal = expanding
										datamodel = "[CulturePillar.GetCulturesWithPillar]"
										visible = "[CollapsibleCultureListGroup.AreChildrenVisible]"

										item = {
											hbox = {
												layoutpolicy_horizontal = expanding
												datacontext = "[Culture.GetTemplate]"

												button_standard_hover = {
													name = "culture_item"
													layoutpolicy_horizontal = expanding
													size = { 0 35 }
													tooltipwidget = {
														ruler_designer_culture_tooltip = {}
													}
													using = Button_Select_Culture
													enabled = "[Not( ObjectsEqual( CultureTemplate.Self, RulerDesignerWindow.GetCulture.GetTemplate ) )]"

													hbox = {
														margin_left = 50

														text_single = {
															margin = { 5 0 }
															text = "[CultureTemplate.GetName]"
															default_format = "#clickable"
															align = nobaseline
														}

														expand = {}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}

			widget = {
				name = "middle_portrait"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				# error_horse = {}

				icon = {
					parentanchor = bottom|hcenter
					position = { 0 20 }
					size = { 650 1100 }
					scale = "[ScaleToFitElementInside('(int32)650', '(int32)1100')]"
					texture = "[RulerDesignerWindow.GetPortrait( 'environment_body', 'camera_ruler_designer', PdxGetWidgetScreenSize( PdxGuiWidget.Self ) )]"

					state = {
						name = "ruler_designer_portrait_refresh"
						using = Animation_Refresh_FadeOut
					}

					state = {
						using = Animation_Refresh_FadeIn
					}
				}

				button_standard = {
					parentanchor = bottom|hcenter
					size = { 250 45 }
					position = { 0 -5 }
					text = "RULER_DESIGNER_CHANGE_PORTRAIT"
					onclick = "[VariableSystem.Set( 'appearance_customization_window_open', 'ethnicity_selection' )]"
					onclick = "[VariableSystem.Set( 'appearance_customization_portrait_view', 'full_body' )]"
					onclick = "[GetVariableSystem.Clear( 'picked_ethnicity' )]"
				}
				#Warcraft
				# Zumbak static race button is here -mayonez
				#button_standard = {
				#	parentanchor = bottom|hcenter
				#	size = { 250 45 }
				#	position = { 0 -45 }
				#	text = "RULER_DESIGNER_PICK_STATIC"
				#	datacontext = "[RulerDesignerWindow.AccessOtherTraitSlots]"
				#	onclick = "[GetVariableSystem.Clear( 'picked_ethnicity' )]"
				#	onclick = "[TraitSlotArray.StartEditing]"
				#	onclick = "[VariableSystem.Set( 'trait_select_window_open', 'static_race' )]"
				#}

				text_label_center = {
					parentanchor = bottom|hcenter
					position = { 0 -80 }
					text = "RULER_DESIGNER_FULL_NAME"
					using = Font_Size_Big
					autoresize = yes
					max_width = 550
					multiline = yes
					visible = "[Not( StringIsEmpty( RulerDesignerWindow.GetFirstName ) )]"
					using = Animation_ShowHide_Standard
				}
			}

			vbox = {
				name = "trait_selection_panel"
				layoutpolicy_vertical = expanding
				visible = "[VariableSystem.Exists( 'trait_select_window_open' )]"

				using =  Animation_Tab_Switch

				text_label_center = {
					text = RULER_DESIGNER_TRAITS_LABEL
					layoutpolicy_horizontal = expanding
				}

				scrollbox = {
					name = "education_trait_selection_list"
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding
					minimumsize = { 400 100% }

					visible = "[VariableSystem.HasValue( 'trait_select_window_open', 'education' )]"

					blockoverride "scrollbox_content"
					{
						vbox_trait_selection_content = {
							layoutpolicy_horizontal = expanding
							datamodel = "[GetEducationTraits]"
						}
					}
				}

				scrollbox = {
					name = "personality_trait_selection_list"
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding
					minimumsize = { 400 100% }

					visible = "[VariableSystem.HasValue( 'trait_select_window_open', 'personality' )]"

					blockoverride "scrollbox_content"
					{
						vbox_trait_selection_content = {
							layoutpolicy_horizontal = expanding
							datamodel = "[GetPersonalityTraits]"
						}
					}
				}

				scrollbox = {
					name = "other_trait_selection_list"
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding
					minimumsize = { 400 100% }

					visible = "[VariableSystem.HasValue( 'trait_select_window_open', 'other' )]"

					blockoverride "scrollbox_content"
					{
						vbox_trait_selection_content = {
							layoutpolicy_horizontal = expanding
							datamodel = "[GetOtherRulerDesignerTraits]"
						}
					}
				}

				scrollbox = {
					name = "race_trait_selection_list"
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding
					minimumsize = { 400 100% }

					visible = "[VariableSystem.HasValue( 'trait_select_window_open', 'race' )]"

					blockoverride "scrollbox_content"
					{
						#creature_human
						vbox_race_trait_selection_content = {
							visible = "[Or(VariableSystem.HasValue( 'picked_ethnicity', Localize('slavic_northern_dark_hair') ), VariableSystem.HasValue( 'picked_ethnicity', Localize('slavic_northern_brown_hair') ))]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('ruler_designer_human')]"
						}
						vbox_race_trait_selection_content = {
							visible = "[Or(VariableSystem.HasValue( 'picked_ethnicity', Localize('slavic_northern_blond') ), VariableSystem.HasValue( 'picked_ethnicity', Localize('slavic_northern_ginger') ))]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('ruler_designer_human')]"
						}
						vbox_race_trait_selection_content = {
							visible = "[Or(Or(VariableSystem.HasValue( 'picked_ethnicity', Localize('caucasian_blond') ), VariableSystem.HasValue( 'picked_ethnicity', Localize('caucasian_ginger') )), VariableSystem.HasValue( 'picked_ethnicity', Localize('caucasian_northern_blond') ))]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('ruler_designer_human')]"
						}
						vbox_race_trait_selection_content = {
							visible = "[Or(VariableSystem.HasValue( 'picked_ethnicity', Localize('caucasian_brown_hair') ), VariableSystem.HasValue( 'picked_ethnicity', Localize('caucasian_dark_hair') ))]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('ruler_designer_human')]"
						}
						vbox_race_trait_selection_content = {
							visible = "[Or(VariableSystem.HasValue( 'picked_ethnicity', Localize('northern_ruler_designer') ), VariableSystem.HasValue( 'picked_ethnicity', Localize('caucasian') ))]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('ruler_designer_human')]"
						}
						vbox_race_trait_selection_content = {
							visible = "[Or(Or(VariableSystem.HasValue( 'picked_ethnicity', Localize('caucasian_northern_ginger') ), VariableSystem.HasValue( 'picked_ethnicity', Localize('caucasian_northern_brown_hair') )), VariableSystem.HasValue( 'picked_ethnicity', Localize('caucasian_northern_dark_hair') ))]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('ruler_designer_human')]"
						}
						vbox_race_trait_selection_content = {
							visible = "[Or(Or(VariableSystem.HasValue( 'picked_ethnicity', Localize('mediterranean') ), VariableSystem.HasValue( 'picked_ethnicity', Localize('byzantine') )), VariableSystem.HasValue( 'picked_ethnicity', Localize('east_african') ))]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('ruler_designer_human')]"
						}
						vbox_race_trait_selection_content = {
							visible = "[Or(Or(VariableSystem.HasValue( 'picked_ethnicity', Localize('arab') ), VariableSystem.HasValue( 'picked_ethnicity', Localize('african') )), VariableSystem.HasValue( 'picked_ethnicity', Localize('slavic') ))]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('ruler_designer_human')]"
						}
						vbox_race_trait_selection_content = {
							visible = "[Or(Or(VariableSystem.HasValue( 'picked_ethnicity', Localize('asian') ), VariableSystem.HasValue( 'picked_ethnicity', Localize('indian') )), VariableSystem.HasValue( 'picked_ethnicity', Localize('south_indian') ))]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('ruler_designer_human')]"
						}
						vbox_race_trait_selection_content = {
							visible = "[Or(Or(Or(VariableSystem.HasValue( 'picked_ethnicity', Localize('circumpolar') ), VariableSystem.HasValue( 'picked_ethnicity', Localize('circumpolar_brown_hair') )), VariableSystem.HasValue( 'picked_ethnicity', Localize('circumpolar_dark_hair') )), VariableSystem.HasValue( 'picked_ethnicity', Localize('circumpolar_blonde_hair') ))]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('ruler_designer_human')]"
						}
						#creature_nathrezim
						vbox_race_trait_selection_content = {
							visible = "[Or(Or(VariableSystem.HasValue( 'picked_ethnicity', Localize('nathrezim_tint2') ), VariableSystem.HasValue( 'picked_ethnicity', Localize('nathrezim_tint1') )), VariableSystem.HasValue( 'picked_ethnicity', Localize('nathrezim_ethnicity') ))]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('ruler_designer_nathrezim')]"
						}
						vbox_race_trait_selection_content = {
							visible = "[Or(Or(VariableSystem.HasValue( 'picked_ethnicity', Localize('nathrezim_tint3') ), VariableSystem.HasValue( 'picked_ethnicity', Localize('nathrezim_tint4') )), VariableSystem.HasValue( 'picked_ethnicity', Localize('nathrezim_tint5') ))]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('ruler_designer_nathrezim')]"
						}
						#creature_sayaadi
						vbox_race_trait_selection_content = {
							visible = "[VariableSystem.HasValue( 'picked_ethnicity', Localize('succubus_ethnicity') )]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('ruler_designer_sayaadi')]"
						}
						#creature_draenei, creature_manari
						vbox_race_trait_selection_content = {
							visible = "[Or(VariableSystem.HasValue( 'picked_ethnicity', Localize('draenei_ethnicity') ), VariableSystem.HasValue( 'picked_ethnicity', Localize('manari_ethnicity') ))]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('eredar_family')]"
						}
						#creature_dwarf
						vbox_race_trait_selection_content = {
							visible = "[Or(VariableSystem.HasValue( 'picked_ethnicity', Localize('dwarven_ethnicity') ), VariableSystem.HasValue( 'picked_ethnicity', Localize('bronzebeard_ethnicity') ))]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('ruler_designer_dwarf')]"
						}
						#creature_dwarf, to not make scary visible
						vbox_race_trait_selection_content = {
							visible = "[Or(Or(VariableSystem.HasValue( 'picked_ethnicity', Localize('dark_iron_ethnicity') ), VariableSystem.HasValue( 'picked_ethnicity', Localize('wildhammer_ethnicity') )), VariableSystem.HasValue( 'picked_ethnicity', Localize('frostborn_ethnicity') ))]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('ruler_designer_dwarf')]"
						}
						#creature_high_elf, creature_nightborne, creature_night_elf, creature_highborne
						vbox_race_trait_selection_content = {
							visible = "[Or(Or(VariableSystem.HasValue( 'picked_ethnicity', Localize('high_elven') ), VariableSystem.HasValue( 'picked_ethnicity', Localize('nightborne_ethnicity') )), VariableSystem.HasValue( 'picked_ethnicity', Localize('faldorei_ethnicity') ))]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('elven_family')]"
						}
						vbox_race_trait_selection_content = {
							visible = "[Or(VariableSystem.HasValue( 'picked_ethnicity', Localize('night_elven') ), VariableSystem.HasValue( 'picked_ethnicity', Localize('highborne_ethnicity') ))]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('elven_family')]"
						}
						#creature_gnome
						vbox_race_trait_selection_content = {
							visible = "[VariableSystem.HasValue( 'picked_ethnicity', Localize('gnome_ethnicity') )]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('ruler_designer_gnome')]"
						}
						#creature_goblin, creature_gilblin
						vbox_race_trait_selection_content = {
							visible = "[Or(VariableSystem.HasValue( 'picked_ethnicity', Localize('goblin_ethnicity') ), VariableSystem.HasValue( 'picked_ethnicity', Localize('gilblin_ethnicity') ))]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('goblin_family')]"
						}
						#creature_ogre
						vbox_race_trait_selection_content = {
							visible = "[Or(VariableSystem.HasValue( 'picked_ethnicity', Localize('ogre_ethnicity') ), VariableSystem.HasValue( 'picked_ethnicity', Localize('moknathal_ethnicity') ))]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('ruler_designer_ogre')]"
						}
						#creature_orc
						vbox_race_trait_selection_content = {
							visible = "[Or(VariableSystem.HasValue( 'picked_ethnicity', Localize('moknathal_ethnicity') ), VariableSystem.HasValue( 'picked_ethnicity', Localize('green_orcish') ))]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('ruler_designer_orc')]"
						}
						#creature_orc, to not make scary visible
						vbox_race_trait_selection_content = {
							visible = "[Or(Or(VariableSystem.HasValue( 'picked_ethnicity', Localize('brown_orcish') ), VariableSystem.HasValue( 'picked_ethnicity', Localize('gray_orcish') )), VariableSystem.HasValue( 'picked_ethnicity', Localize('pale_orcish') ))]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('ruler_designer_orc')]"
						}
						#creature_pygmy
						vbox_race_trait_selection_content = {
							visible = "[VariableSystem.HasValue( 'picked_ethnicity', Localize('pygmy_ethnicity') )]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('ruler_designer_pygmy')]"
						}
						#creature_troll
						vbox_race_trait_selection_content = {
							visible = "[Or(VariableSystem.HasValue( 'picked_ethnicity', Localize('darkspear_trollish') ), VariableSystem.HasValue( 'picked_ethnicity', Localize('blood_troll_ethnicity') ))]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('ruler_designer_troll')]"
						}
						#creature_troll, to not make scary visible
						vbox_race_trait_selection_content = {
							visible = "[Or(VariableSystem.HasValue( 'picked_ethnicity', Localize('sand_troll_ethnicity') ), VariableSystem.HasValue( 'picked_ethnicity', Localize('ice_troll_ethnicity') ))]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('ruler_designer_troll')]"
						}
						#creature_troll, to not make scary visible
						vbox_race_trait_selection_content = {
							visible = "[Or(Or(VariableSystem.HasValue( 'picked_ethnicity', Localize('dark_troll_ethnicity') ), VariableSystem.HasValue( 'picked_ethnicity', Localize('forest_troll_ethnicity') )), VariableSystem.HasValue( 'picked_ethnicity', Localize('zandalari_troll_ethnicity') ))]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('ruler_designer_troll')]"
						}
						vbox_race_trait_selection_content = {
							visible = "[Or(Or(VariableSystem.HasValue( 'picked_ethnicity', Localize('blood_troll_light') ), VariableSystem.HasValue( 'picked_ethnicity', Localize('blood_troll_dark') )), VariableSystem.HasValue( 'picked_ethnicity', Localize('blood_troll_green') ))]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('ruler_designer_troll')]"
						}
						#creature_vrykul
						vbox_race_trait_selection_content = {
							visible = "[Or(Or(Or(VariableSystem.HasValue( 'picked_ethnicity', Localize('vrykul_ethnicity') ), VariableSystem.HasValue( 'picked_ethnicity', Localize('frost_vrykul_ethnicity') )), VariableSystem.HasValue( 'picked_ethnicity', Localize('drust_ethnicity') )), VariableSystem.HasValue( 'picked_ethnicity', Localize('kvaldir_ethnicity') ))]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('vrykul_family')]"
						}
						#dragon traits, black dragon
						vbox_race_trait_selection_content = {
							visible = "[Or(VariableSystem.HasValue( 'picked_ethnicity', Localize('black_dragon_human') ), VariableSystem.HasValue( 'picked_ethnicity', Localize('black_dragon_high_elven') ))]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('dragon_family')]"
						}
						#dragon traits, green dragon
						vbox_race_trait_selection_content = {
							visible = "[Or(VariableSystem.HasValue( 'picked_ethnicity', Localize('green_dragon_night_elven') ), VariableSystem.HasValue( 'picked_ethnicity', Localize('green_dragon_high_elven') ))]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('dragon_family')]"
						}
						#dragon traits, red dragon
						vbox_race_trait_selection_content = {
							visible = "[Or(VariableSystem.HasValue( 'picked_ethnicity', Localize('red_dragon_human') ), VariableSystem.HasValue( 'picked_ethnicity', Localize('red_dragon_high_elven') ))]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('dragon_family')]"
						}
						#dragon traits, blue dragon
						vbox_race_trait_selection_content = {
							visible = "[Or(Or(VariableSystem.HasValue( 'picked_ethnicity', Localize('blue_dragon_human') ), VariableSystem.HasValue( 'picked_ethnicity', Localize('blue_dragon_high_elven') )), VariableSystem.HasValue( 'picked_ethnicity', Localize('blue_dragon_gnome') ))]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('dragon_family')]"
						}
						#dragon traits, bronze dragon
						vbox_race_trait_selection_content = {
							visible = "[Or(Or(VariableSystem.HasValue( 'picked_ethnicity', Localize('bronze_dragon_human') ), VariableSystem.HasValue( 'picked_ethnicity', Localize('bronze_dragon_high_elven') )), VariableSystem.HasValue( 'picked_ethnicity', Localize('bronze_dragon_gnome') ))]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('dragon_family')]"
						}
						#harpy traits
						vbox_race_trait_selection_content = {
							visible = "[Or(VariableSystem.HasValue( 'picked_ethnicity', Localize('green_harpy_ethnicity') ), VariableSystem.HasValue( 'picked_ethnicity', Localize('yellow_harpy_ethnicity') ))]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('ruler_designer_harpy')]"
						}
						vbox_race_trait_selection_content = {
							visible = "[Or(VariableSystem.HasValue( 'picked_ethnicity', Localize('blue_harpy_ethnicity') ), VariableSystem.HasValue( 'picked_ethnicity', Localize('elven_harpy_ethnicity') ))]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('ruler_designer_harpy')]"
						}
						#creature_satyr
						vbox_race_trait_selection_content = {
							visible = "[VariableSystem.HasValue( 'picked_ethnicity', Localize('satyr_ethnicity') )]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('ruler_designer_satyr')]"
						}
						#creature_sea_giant
						vbox_race_trait_selection_content = {
							visible = "[VariableSystem.HasValue( 'picked_ethnicity', Localize('skrog_ethnicity') )]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('ruler_designer_seagiant')]"
						}
						#creature_drogbar
						vbox_race_trait_selection_content = {
							visible = "[VariableSystem.HasValue( 'picked_ethnicity', Localize('drogbar_ethnicity') )]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('ruler_designer_drogbar')]"
						}
						#creature_trogg
						vbox_race_trait_selection_content = {
							visible = "[VariableSystem.HasValue( 'picked_ethnicity', Localize('trogg_ethnicity') )]"
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('ruler_designer_trogg')]"
						}
					}
				}#WCrace
				scrollbox = {
					name = "static_race_trait_selection_list"
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding
					minimumsize = { 400 100% }

					visible = "[VariableSystem.HasValue( 'trait_select_window_open', 'static_race' )]"

					blockoverride "scrollbox_content"
					{
						vbox_race_trait_selection_content = {
							layoutpolicy_horizontal = expanding
							datamodel = "[GetTraitsWithFlag('static_race')]"
						}
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					margin = { 0 10 }
					margin_bottom = 15

					button_standard = {
						text = "DONE"
						onclick = "[RulerDesignerWindow.CancelTraitEditing]"
						onclick = "[RulerDesignerWindow.CancelTraitEditing]"
						onclick = "[VariableSystem.Clear( 'trait_select_window_open' )]"
						shortcut = "close_window"
					}
				}
			}

			divider_light = {
				visible = "[Not( Or( VariableSystem.Exists( 'culture_select_window_open' ), VariableSystem.Exists( 'faith_select_window_open' ) ) )]"
				layoutpolicy_vertical = expanding
			}

			widget = {
				visible = "[Not( Or( VariableSystem.Exists( 'culture_select_window_open' ), VariableSystem.Exists( 'faith_select_window_open' ) ) )]"
				layoutpolicy_vertical = expanding
				size = { 520 0 }

				vbox = {
					name = "right_panel"
					margin_left = 15
					margin_bottom = 5
					spacing = 10

					vbox = {
						layoutpolicy_horizontal = expanding
						spacing = 10

						vbox = {
							name = "points"
							layoutpolicy_horizontal = expanding
							spacing = 5

							vbox = {
								layoutpolicy_horizontal = expanding

								hbox = {
									layoutpolicy_horizontal = expanding

									text_label_left = {
										layoutpolicy_horizontal = expanding
										text = "RULER_DESIGNER_POINTS_LABEL"
										using = Font_Size_Medium
									}
								}
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								datacontext = "[RulerDesignerWindow.GetPointsUsedBreakdown]"

								tooltip_visible = "[ValueBreakdown.HasTooltip]"
								tooltipwidget = {
									widget_value_breakdown_tooltip = {}
								}

								text_single = {
									name = "current"
									text = "[ValueBreakdown.GetValue]"
									using = Font_Size_Big
									align = nobaseline
									default_format = "#high"
									min_width = 50
								}

								progressbar_standard = {
									name = "points_bar"
									layoutpolicy_horizontal = expanding
									using = ProgressBar_Achievements
									visible = "[LessThanOrEqualTo_int32( RulerDesignerWindow.GetPointsUsed, GetDefine( 'NRulerDesigner', 'IRONMAN_POINT_MAX' ) )]"
								}

								progressbar_red = {
									name = "points_bar_over_limit"
									layoutpolicy_horizontal = expanding
									using = ProgressBar_Achievements
									visible = "[GreaterThan_int32( RulerDesignerWindow.GetPointsUsed, GetDefine( 'NRulerDesigner', 'IRONMAN_POINT_MAX' ) )]"
								}
							}

							text_single = {
								text = RULER_DESIGNER_POINTS_LIMIT_LABEL
								layoutpolicy_horizontal = expanding
								align = right
								margin_right = 15
							}
						}

						vbox = {
							name = "physical"
							layoutpolicy_horizontal = expanding
							spacing = 10

							vbox = {
								name = "age"
								layoutpolicy_horizontal = expanding

								vbox = {
									layoutpolicy_horizontal = expanding

									hbox = {
										layoutpolicy_horizontal = expanding

										text_label_left = {
											layoutpolicy_horizontal = expanding
											text = "RULER_DESIGNER_AGE_LABEL"
											using = Font_Size_Medium
										}
									}
								}

								hbox = {
									layoutpolicy_horizontal = expanding
									spacing = 15

									vbox = {
										layoutpolicy_horizontal = expanding
										spacing = 10

										hbox = {
											layoutpolicy_horizontal = expanding
											spacing = 10
											margin_top = 10

											text_single = {
												text = RULER_DESIGNER_AGE
												using = Font_Size_Big
												align = nobaseline
											}

											expand = {}

											text_single = {
												text = RULER_DESIGNER_BIRTH_YEAR
											}

										}

										scrollbar_age = {
											name = "scrollbar_age"
											layoutpolicy_horizontal = expanding
										}
									}

									expand = {}
								}
							}

							expand = {}

							vbox = {
								name = "weight"
								layoutpolicy_horizontal = expanding
								spacing = 5

								vbox = {
									layoutpolicy_horizontal = expanding
									margin_bottom = 10

									hbox = {
										layoutpolicy_horizontal = expanding

										text_label_left = {
											layoutpolicy_horizontal = expanding
											text = "RULER_DESIGNER_WEIGHT_LABEL"
											using = Font_Size_Medium
										}
									}
								}

								scrollbar_weight = {
									name = "scrollbar_weight"
									layoutpolicy_horizontal = expanding
								}
							}

							expand = {}
						}

						vbox = {
							name = "traits"
							layoutpolicy_horizontal = expanding
							datacontext = "[GetNullCharacter]"

							vbox = {
								layoutpolicy_horizontal = expanding

								hbox = {
									layoutpolicy_horizontal = expanding

									text_label_left = {
										layoutpolicy_horizontal = expanding
										text = "RULER_DESIGNER_TRAITS_LABEL"
										using = Font_Size_Medium
									}
								}
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								margin = { 10 0 }
								margin_top = 5
								spacing = 3

								hbox_trait_slot = {
									name = "education_trait"
									datacontext = "[RulerDesignerWindow.AccessEducationTraitSlot]"
									layoutpolicy_horizontal = expanding

									blockoverride "plus_button"
									{
										button_trait = {
											visible = "[RulerDesignerWindow.IsAdult]"
											datacontext = "[TraitSlot.GetTrait]"
											onclick = "[TraitSlot.StartEditing]"
											onclick = "[VariableSystem.Toggle( 'trait_select_window_replace' )]"
											onclick = "[VariableSystem.Set( 'trait_select_window_open', 'education' )]"

											state = {
												name = "_mouse_enter"
												on_start = "[PdxGuiWidget.FindChild('swap_icon').TriggerAnimation('show')]"
											}

											state = {
												name = "_mouse_leave"
												on_start = "[PdxGuiWidget.FindChild('swap_icon').TriggerAnimation('hide')]"
											}

											button_replace = {
												name = "swap_icon"
												parentanchor = center
												alwaystransparent = yes
												alpha = 0

												state = {
													name = "show"
													using = Animation_FadeIn_Quick
													duration = 0.05
												}

												state = {
													name = "hide"
													alpha = 0
													using = Animation_FadeOut_Quick
												}

												background = {
													texture = "gfx/interface/component_masks/mask_fade_circle.dds"
													color = { 0.18 0.18 0.18 0.8 }
													margin = {20 20}
												}
											}
										}

										icon = {
											visible = "[Not(RulerDesignerWindow.IsAdult)]"
											texture = "gfx/interface/icons/symbols/icon_cross.dds"
											enabled = no
											size = { 50 50 }
											tooltip = RULER_DESIGNER_NO_EDUCATION_TOOLTIP
										}
									}

									blockoverride "trait_list" {}

									blockoverride "trait_slots_header_text"
									{
										text = RULER_DESIGNER_EDUCATION_TRAIT_LABEL
									}
									blockoverride "button_trait_onclick"
									{
										onclick = "[VariableSystem.Set( 'trait_select_window_open', 'education' )]"
									}
								}

								hbox_trait_slot = {
									name = "personality_traits"
									datacontext = "[RulerDesignerWindow.AccessPersonalityTraitSlots]"
									layoutpolicy_horizontal = expanding

									blockoverride "trait_slots_header_text"
									{
										text = RULER_DESIGNER_PERSONALITY_TRAIT_LABEL
									}
									blockoverride "plus_onclick"
									{
										onclick = "[VariableSystem.Set( 'trait_select_window_open', 'personality' )]"
									}
								}

								hbox_trait_slot = {
									name = "other_traits"
									datacontext = "[RulerDesignerWindow.AccessOtherTraitSlots]"
									layoutpolicy_horizontal = expanding

									blockoverride "trait_slots_header_text"
									{
										text = RULER_DESIGNER_OTHER_TRAIT_LABEL
									}
									blockoverride "plus_onclick"
									{
										onclick = "[VariableSystem.Set( 'trait_select_window_open', 'other' )]"
									}
								}
							}
						}

						vbox = {
							name = "skills"
							layoutpolicy_horizontal = expanding
							spacing = 5

							vbox = {
								layoutpolicy_horizontal = expanding

								hbox = {
									layoutpolicy_horizontal = expanding

									text_label_left = {
										layoutpolicy_horizontal = expanding
										text = "RULER_DESIGNER_SKILLS_LABEL"
										using = Font_Size_Medium
									}
								}
							}

							fixedgridbox = {
								name = "skill_buttons"
								datamodel = "[RulerDesignerWindow.AccessSkills]"
								datamodel_wrap = 3
								addrow = 60
								addcolumn = 245

								item = {
									widget = {
										name = "skill_item"
										size = { 240 60 }

										background = {
											using = Background_Area
										}

										hbox = {
											margin = { 7 0 }
											spacing = 5

											icon = {
												name = "skill_icon"
												texture = "gfx/interface/icons/icon_skills.dds"
												size = { 32 32 }
												framesize = { 60 60 }
												frame = "[RulerDesignerSkill.GetFrame]"
											}

											vbox = {
												layoutpolicy_horizontal = expanding

												text_single = {
													name = "skill_name"
													layoutpolicy_horizontal = expanding
													text = "[RulerDesignerSkill.GetName]"
													autoresize = no
												}

												text_single = {
													name = "skill_level"
													layoutpolicy_horizontal = expanding
													text = "[RulerDesignerSkill.GetLevelDesc]"
													default_format = "#weak"
													autoresize = no
												}
											}

											button_round = {
												size = { 28 28 }
												onclick = "[RulerDesignerSkill.ChangeValue( '(int32)-1' )]"
												enabled = "[GreaterThan_int32( RulerDesignerSkill.GetBaseValue, '(int32)0' )]"

												button_minus_small = {
													name = "decrease_skill"
													parentanchor = center
													alwaystransparent = yes
												}
											}

											text_single = {
												name = "skill_value"

												datacontext = "[RulerDesignerSkill.GetModifiedValueBreakdown]"

												tooltip_visible = "[ValueBreakdown.HasTooltip]"
												tooltipwidget = {
													widget_value_breakdown_tooltip = {}
												}

												text = "[ValueBreakdown.GetValue]"

												using = Font_Size_Big
												default_format = "#high"
												align = nobaseline|center
												min_width = 25
											}

											button_round = {
												size = { 28 28 }
												onclick = "[RulerDesignerSkill.ChangeValue( '(int32)1' )]"
												enabled = "[LessThan_int32( RulerDesignerSkill.GetBaseValue, '(int32)100' )]"

												button_plus_small = {
													name = "increase_skill"
													parentanchor = center
													alwaystransparent = yes
												}
											}
										}
									}
								}
							}

							text_single = {
								name = "prowess_muscle_info"
								text = PROWESS_MUSCLE_INFO_PERSONAL
								default_format = "#weak"
							}
						}

						vbox = {
							name = "family"
							layoutpolicy_horizontal = expanding
							spacing = 10
							visible = "[Not( RulerDesignerWindow.IsDesigningLandless )]"

							vbox = {
								layoutpolicy_horizontal = expanding

								hbox = {
									layoutpolicy_horizontal = expanding

									text_label_left = {
										layoutpolicy_horizontal = expanding
										text = "RULER_DESIGNER_FAMILY_LABEL"
										using = Font_Size_Medium
									}
								}
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 30

								vbox = {
									layoutpolicy_vertical = expanding

									button_checkbox_label = {
										name = "generate_spouse_button"
										layoutpolicy_horizontal = expanding

										onclick = "[RulerDesignerWindow.ToggleGenerateSpouse]"
										enabled = "[RulerDesignerWindow.IsAdult]"
										tooltip = "RULER_DESIGNER_GENERATE_SPOUSE_TOOLTIP"

										blockoverride "checkbox"
										{
											checked = "[RulerDesignerWindow.ShouldGenerateSpouse]"
										}

										blockoverride "text"
										{
											text = "RULER_DESIGNER_GENERATE_SPOUSE_LABEL"
										}
									}

									expand = {}
								}

								vbox = {
									hbox = {
										name = "generate_sons_amount"
										layoutpolicy_horizontal = expanding
										spacing = 20

										text_single = {
											layoutpolicy_horizontal = expanding
											text = "RULER_DESIGNER_GENERATED_SONS_LABEL"
											align = nobaseline
										}

										tooltip = RULER_DESIGNER_GENERATED_SONS_TOOLTIP

										hbox = {
											spacing = 10

											button_round = {
												size = { 28 28 }
												onclick = "[RulerDesignerWindow.ChangeNumberOfGeneratedSons( '(int32)-1' )]"
												enabled = "[GreaterThan_int32( RulerDesignerWindow.GetNumberOfGeneratedSons, '(int32)0' )]"

												button_minus_small = {
													name = "decrease_amount"
													parentanchor = center
													alwaystransparent = yes
												}
											}

											text_single = {
												name = "sons_value"
												text = "[RulerDesignerWindow.GetNumberOfGeneratedSons]"
												using = Font_Size_Big
												default_format = "#high"
												align = nobaseline|center
												min_width = 25
											}

											button_round = {
												size = { 28 28 }
												onclick = "[RulerDesignerWindow.ChangeNumberOfGeneratedSons( '(int32)1' )]"
												enabled = "[LessThan_int32( RulerDesignerWindow.GetNumberOfGeneratedChildren, RulerDesignerWindow.CalcMaxNumberOfGeneratedChildren )]"

												button_plus_small = {
													name = "increase_amount"
													parentanchor = center
													alwaystransparent = yes
												}
											}
										}
									}

									hbox = {
										name = "generate_daughters_amount"
										layoutpolicy_horizontal = expanding
										spacing = 20

										text_single = {
											layoutpolicy_horizontal = expanding
											text = "RULER_DESIGNER_GENERATED_DAUGHTERS_LABEL"
											align = nobaseline
										}

										tooltip = RULER_DESIGNER_GENERATED_DAUGHTERS_TOOLTIP

										hbox = {
											spacing = 10

											button_round = {
												size = { 28 28 }
												onclick = "[RulerDesignerWindow.ChangeNumberOfGeneratedDaughters( '(int32)-1' )]"
												enabled = "[GreaterThan_int32( RulerDesignerWindow.GetNumberOfGeneratedDaughters, '(int32)0' )]"

												button_minus_small = {
													name = "decrease_amount"
													parentanchor = center
													alwaystransparent = yes
												}
											}

											text_single = {
												name = "daughters_value"
												text = "[RulerDesignerWindow.GetNumberOfGeneratedDaughters]"
												using = Font_Size_Big
												default_format = "#high"
												align = nobaseline|center
												min_width = 25
											}

											button_round = {
												size = { 28 28 }
												onclick = "[RulerDesignerWindow.ChangeNumberOfGeneratedDaughters( '(int32)1' )]"
												enabled = "[LessThan_int32( RulerDesignerWindow.GetNumberOfGeneratedChildren, RulerDesignerWindow.CalcMaxNumberOfGeneratedChildren )]"

												button_plus_small = {
													name = "increase_amount"
													parentanchor = center
													alwaystransparent = yes
												}
											}
										}
									}
								}

								text_multi = {
									visible = "[Not( RulerDesignerWindow.IsAdult )]"
									text = RULER_DESIGNER_ADULT_ONLY_WARNING
									autoresize = yes
									max_width = 130
									align = center
								}

								expand = {}
							}
						}

						achievements_availability_box = {
							blockoverride "achievements_enabled_visible" {
								visible = "[LessThanOrEqualTo_int32( RulerDesignerWindow.GetPointsUsed, GetDefine( 'NRulerDesigner', 'IRONMAN_POINT_MAX' ) )]"
							}
							blockoverride "achievements_disabled_visible" {
								visible = "[GreaterThan_int32( RulerDesignerWindow.GetPointsUsed, GetDefine( 'NRulerDesigner', 'IRONMAN_POINT_MAX' ) )]"
							}
						}
					}

					expand = {}

					button_primary_big = {
						text = "RULER_DESIGNER_FINALIZE"

						enabled = "[RulerDesignerWindow.CanFinalize]"
						tooltip = "[RulerDesignerWindow.GetFinalizeTooltip]"

						onclick = "[RulerDesignerWindow.FinalizeOverwrite]"
					}
				}
			}
		}

		hbox = {
			name = "appearance_customizer_view"
			visible = "[VariableSystem.Exists( 'appearance_customization_window_open' )]"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin = { 20 20 }

			using =  Animation_Tab_Switch

			widget = {
				layoutpolicy_vertical = expanding
				size = { 480 0 }

				vbox = {
					name = "ethnicity_panel"
					visible = "[VariableSystem.HasValue( 'appearance_customization_window_open', 'ethnicity_selection' )]"
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding

					margin_right = 16

					using = Animation_ShowHide_Quick

					text_label_left = {
						layoutpolicy_horizontal = expanding
						text = RULDER_DESIGNER_ETHNICITY_LABEL
						using = Font_Size_Medium
					}

					vbox = {
						name = "new_appearance"
						layoutpolicy_horizontal = expanding
						spacing = 20

						text_single = {
							name = "override_portrait_warning"
							layoutpolicy_horizontal = expanding
							text = RULER_DESIGNER_OVERRIDE_PORTRAIT
							autoresize = no
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							text_multi = {
								text = RULER_DESIGNER_ETHNICITY_INFO
								autoresize = yes
								max_width = 470
							}

							expand = {}
						}

						scrollbox = {
							name = "ethinicity_list"
							layoutpolicy_horizontal = expanding
							minimumsize = { 0 470 }

							blockoverride "scrollbox_content"
							{
								vbox = {
									datamodel = "[GetEthnicities]"
									layoutpolicy_horizontal = expanding

									item = {
										button_standard_hover = {
											visible = "[And( Ethnicity.IsVisible, ObjectsEqual( Ethnicity.GetPortraitGroup, RulerDesignerWindow.GetEthnicity.GetPortraitGroup ) )]"
											layoutpolicy_horizontal = expanding

											text = "[Ethnicity.GetName]"
											size = { 0 40 }
											onclick = "[RulerDesignerWindow.SetEthnicity( Ethnicity.Self )]"
											onclick = "[PdxGuiTriggerAllAnimations('ruler_designer_portrait_refresh')]"
											#Warcraft
											onclick = "[VariableSystem.Set( 'picked_ethnicity', Ethnicity.GetName )]"
											onclick = "[GetVariableSystem.Clear( 'picked_race_trait' )]"
											# Deleting all race traits
											#datacontext = "[RulerDesignerWindow.AccessOtherTraitSlots]"
											#datamodel = "[TraitSlotArray.AccessSlots]"
											#onclick = "[TraitSlotArray.StartEditing]"
											#onclick = "[RulerDesignerWindow.FinishTraitEditing( GetTrait('creature_troll').Self )]"
										}
									}
								}
							}
						}
					}

					expand = {}

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 8

						button_standard_back = {
							text = "BACK_LABEL"
							onclick = "[VariableSystem.Clear( 'appearance_customization_window_open' )]"
							onclick = "[VariableSystem.Clear( 'appearance_customization_portrait_view' )]"
							#warcraft
							onclick = "[VariableSystem.Set( 'picked_ethnicity', RulerDesignerWindow.GetEthnicity.GetName )]"
						}

						button_primary = {
							visible = "[Not(VariableSystem.HasValue( 'appearance_customization_window_open', 'main_customizer' ))]"
							text = "RULER_DESIGNER_CUSTOMIZE_APPEARANCE_FURTHER"
							onclick = "[VariableSystem.Set( 'appearance_customization_window_open', 'main_customizer' )]"
							onclick = "[VariableSystem.Set( 'appearance_customization_side_tab_open', 'body' )]"
							min_width = 290
							max_width = 290
						}
					}
				}

				vbox = {
					name = "main_customizer"
					visible = "[VariableSystem.HasValue( 'appearance_customization_window_open', 'main_customizer' )]"
					spacing = 10
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding

					margin_right = 16

					using = Animation_ShowHide_Quick

					vbox = {
						layoutpolicy_horizontal = expanding

						datamodel = "[RulerDesignerWindow.GetGeneGroupCategories]"
						item = {
							vbox = {
								layoutpolicy_horizontal = expanding
								spacing = 10

								text_label_left = {
									layoutpolicy_horizontal = expanding
									text = "[Localize( Concatenate( 'RULER_DESIGNER_CATEGORY_' , RulerDesignerGeneGroupCategory.GetCategory ) )]"
									using = Font_Size_Medium
								}

								hbox = {
									layoutpolicy_horizontal = expanding

									vbox = {
										datamodel = "[RulerDesignerGeneGroupCategory.GetGroups]"
										spacing = 10

										item = {
											button_standard = {
												text = "[Localize( Concatenate( 'RULER_DESIGNER_GROUP_' , RulerDesignerGeneGroup.GetGroup ) )]"
												onclick = "[VariableSystem.Set( 'appearance_customization_side_tab_open', RulerDesignerGeneGroup.GetGroup )]"
												onclick = "[VariableSystem.Set( 'appearance_customization_portrait_view', RulerDesignerGeneGroup.GetCamera )]"
												down = "[VariableSystem.HasValue( 'appearance_customization_side_tab_open', RulerDesignerGeneGroup.GetGroup )]"
											}
										}
									}
								}
							}
						}
					}
					button_checkbox_label = {
						name = "toggle_show_accessories"

						visible = "[RulerDesignerWindow.HasAccessoryGenes]"
						onclick = "[RulerDesignerWindow.ToggleShowAccessories]"
						tooltip = "RULER_DESIGNER_TOGGLE_SHOW_ACCESSORIES_TOOLTIP"

						blockoverride "checkbox"
						{
							checked = "[RulerDesignerWindow.ShouldShowAcesssories]"
						}

						blockoverride "text"
						{
								text = "RULER_DESIGNER_TOGGLE_SHOW_ACCESSORIES_LABEL"
						}
					}

					# Warcraft
					text_label_left = {
						layoutpolicy_horizontal = expanding
						text = RULER_DESIGNER_ACCESSORIES_LABEL
						using = Font_Size_Medium
					}
					hbox = {
						layoutpolicy_horizontal = expanding

						vbox = {
							spacing = 10

							button_standard = {
								text = RULER_DESIGNER_CATEGORY_marking_group
								onclick = "[VariableSystem.Set( 'appearance_customization_side_tab_open', 'marking_group' )]"
								onclick = "[VariableSystem.Set( 'appearance_customization_portrait_view', 'face' )]"
								down = "[VariableSystem.HasValue( 'appearance_customization_side_tab_open', 'marking_group' )]"
							}
							button_standard = {
								text = RULER_DESIGNER_CATEGORY_body_markings_group
								onclick = "[VariableSystem.Set( 'appearance_customization_side_tab_open', 'body_markings_group' )]"
								onclick = "[VariableSystem.Set( 'appearance_customization_portrait_view', 'full_body' )]"
								down = "[VariableSystem.HasValue( 'appearance_customization_side_tab_open', 'body_markings_group' )]"
							}
						}
					}

					expand = {}

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 8

						button_standard_back = {
							text = "BACK_LABEL"
							onclick = "[VariableSystem.Set( 'appearance_customization_window_open', 'ethnicity_selection' )]"
							onclick = "[VariableSystem.Set( 'appearance_customization_portrait_view', 'full_body' )]"
							onclick = "[VariableSystem.Clear( 'appearance_customization_side_tab_open' )]"
							onclick = "[RulerDesignerWindow.SetShowAccessories]"
						}

						expand = {}

						button_primary = {
							visible = "[VariableSystem.HasValue( 'appearance_customization_window_open', 'main_customizer' )]"
							text = RULER_DESIGNER_CUSTOMIZE_APPEARANCE_FINISH
							onclick = "[VariableSystem.Clear( 'appearance_customization_side_tab_open' )]"
							onclick = "[VariableSystem.Clear( 'appearance_customization_window_open' )]"
							onclick = "[VariableSystem.Clear( 'appearance_customization_portrait_view' )]"
							onclick = "[RulerDesignerWindow.SetShowAccessories]"
							onclick = "[VariableSystem.Set( 'picked_ethnicity', RulerDesignerWindow.GetEthnicity.GetName )]"
							min_width = 290
							max_width = 290
						}
					}
				}
			}

			divider_light = {
				layoutpolicy_vertical = expanding
			}

			widget = {
				name = "portrait_view"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				widget = {
					visible = "[VariableSystem.HasValue( 'appearance_customization_portrait_view', 'face' )]"
					size = { 100% 100% }

					using = Animation_ShowHide_Standard

					icon = {
						parentanchor = center
						position = { 130 -80 }
						size = { 500 700 }
						texture = "[RulerDesignerWindow.GetPortrait( 'environment_head', 'camera_ruler_designer_head_profile', PdxGetWidgetScreenSize( PdxGuiWidget.Self ) )]"

						using = Animation_ShowHide_Quick

						state = {
							name = "ruler_designer_portrait_refresh"
							using = Animation_Refresh_FadeOut
						}

						state = {
							using = Animation_Refresh_FadeIn
						}


						modify_texture = {
							texture = "gfx/portraits/portrait_mask_event_letter.dds"
							blend_mode = alphamultiply
						}

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal_thick.dds"
							blend_mode = alphamultiply
						}
					}

					icon = {
						parentanchor = center
						position = { -130 -80 }
						size = { 500 700 }
						texture = "[RulerDesignerWindow.GetPortrait( 'environment_head', 'camera_head', PdxGetWidgetScreenSize( PdxGuiWidget.Self ) )]"

						using = Animation_ShowHide_Quick

						state = {
							name = "ruler_designer_portrait_refresh"
							using = Animation_Refresh_FadeOut
						}

						state = {
							using = Animation_Refresh_FadeIn
						}

						modify_texture = {
							texture = "gfx/portraits/portrait_mask_event_letter.dds"
							blend_mode = alphamultiply
						}
					}
				}

				icon = {
					visible = "[VariableSystem.HasValue( 'appearance_customization_portrait_view', 'full_body' )]"
					parentanchor = bottom|hcenter
					position = { 0 20 }
					size = { 650 1100 }
					scale = "[ScaleToFitElementInside('(int32)650', '(int32)1100')]"
					texture = "[RulerDesignerWindow.GetPortrait( 'environment_body', 'camera_ruler_designer', PdxGetWidgetScreenSize( PdxGuiWidget.Self ) )]"

					using = Animation_ShowHide_Standard

					state = {
						name = "ruler_designer_portrait_refresh"
						using = Animation_Refresh_FadeOut
					}

					state = {
						using = Animation_Refresh_FadeIn
					}
				}

				widget = {
					parentanchor = bottom|hcenter
					position = { 0 -20 }

					vbox = {
						set_parent_size_to_minimum = yes

						button_standard = {
							size = { 250 32 }
							onclick = "[RulerDesignerWindow.RandomizeEthnicityDnaFromCurrent]"
							onclick = "[PdxGuiTriggerAllAnimations('ruler_designer_portrait_refresh')]"
							visible = "[Not(VariableSystem.HasValue( 'appearance_customization_window_open', 'ethnicity_selection' ))]"
							text = "RULER_DESIGNER_REGENERATE_PORTRAIT"

							button_randomize = {
								parentanchor = vcenter
								position = { 7 0 }
							}
						}

						vbox = {
							name = "copy_paste_dna"
							margin_top = 10

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 20

								text_single = {
									layoutpolicy_horizontal = expanding

									text = "RULER_DESIGNER_SAVE_DNA_TO_CLIPBOARD"
								}

								button_copy = {
									onclick = "[RulerDesignerWindow.SaveDnaToClipboard]"
								}

								tooltip = RULER_DESIGNER_SAVE_DNA_TO_CLIPBOARD_TOOLTIP
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 20

								text_single = {
									layoutpolicy_horizontal = expanding
									text = "RULER_DESIGNER_LOAD_DNA_FROM_CLIPBOARD"
								}

								button_paste = {
									onclick = "[RulerDesignerWindow.LoadDnaFromClipboard]"
									onclick = "[PdxGuiTriggerAllAnimations('ruler_designer_portrait_refresh')]"
								}

								tooltip = RULER_DESIGNER_LOAD_DNA_FROM_CLIPBOARD_TOOLTIP
							}
						}
					}
				}
			}

			widget = {
				layoutpolicy_vertical = expanding
				size = { 520 0 }

				hbox = {
					layoutpolicy_vertical = expanding
					visible = "[VariableSystem.HasValue( 'appearance_customization_window_open', 'main_customizer' )]"

					divider_light = {
						layoutpolicy_vertical = expanding
					}

					vbox = {
						name = "gene_editor"
						spacing = 10
						layoutpolicy_vertical = expanding
						layoutpolicy_horizontal = expanding
						margin_left = 15

						using = Animation_ShowHide_Quick

						hbox = {
							layoutpolicy_horizontal = expanding

							text_label_left = {
								layoutpolicy_horizontal = expanding
								text = "[Localize( Concatenate( 'RULER_DESIGNER_GROUP_' , VariableSystem.Get( 'appearance_customization_side_tab_open' ) ) )]"
								using = Font_Size_Medium
							}
						}

						scrollbox = {
							name = "gene_sliders"
							layoutpolicy_vertical = expanding
							layoutpolicy_horizontal = expanding
							minimumsize = { 200 0 }

							blockoverride "scrollbox_background"
							{
							}

							blockoverride "scrollbox_background_fade"
							{
							}

							blockoverride "scrollbox_content"
							{
								vbox = {
									layoutpolicy_horizontal = expanding

									text_multi = {
										text = "RULER_DESIGNER_CLIPPING_NOTE"
										default_format = "#weak"
										margin_bottom = 20
										autoresize = yes
										max_width = 480
									}

									vbox = {
										datamodel = "[RulerDesignerWindow.GetGenesByGroup( VariableSystem.Get( 'appearance_customization_side_tab_open' ) )]"
										layoutpolicy_horizontal = expanding
										spacing = 10

										item = {
											hbox = {
												name = "gene_entry"
												layoutpolicy_horizontal = expanding

												vbox = {
													layoutpolicy_vertical = expanding

													text_label_left = {
														layoutpolicy_horizontal = expanding
														min_width = 190
														max_width = 190
														multiline = yes
														text = "[GeneCategory.GetName]"
													}

													expand = {}
												}


												vbox = {
													layoutpolicy_vertical = expanding
													layoutpolicy_horizontal = expanding
													margin = { 0 5 }
													spacing = 5

													visible = "[GeneCategory.IsType( 'morph' )]"

													scrollbar_morph_gene = {
														name = "scrollbar_morph_gene"
														visible = "[RulerDesignerWindow.ShowMorphGeneSlider( GeneCategory.Self )]"
													}

													text_single = {
														name = "morph_gene_female_only"
														text = RULER_DESIGNER_GENE_ONLY_WOMEN
														visible = "[RulerDesignerWindow.IsOnlyVisibleFemale( GeneCategory.Self )]"
														align = left
														layoutpolicy_horizontal = expanding
														default_format = "#weak"
													}

													expand = {}

													vbox_morph_gene_template_buttons = {
														name = "gene_templates"
														visible = "[GreaterThan_int32( GetDataModelSize( RulerDesignerWindow.GetMorphTemplatesByGene( GeneCategory.Self ) ), '(int32)1' )]"
														datamodel = "[RulerDesignerWindow.GetMorphTemplatesByGene( GeneCategory.Self )]"
														spacing = 10
													}
												}

												vbox_accessory_gene_buttons = {
													name = "vbox_accessory_gene_buttons"
													visible = "[GeneCategory.IsType( 'accessory' )]"
													datamodel = "[RulerDesignerWindow.GetAccessoryModifiers( GeneCategory.Self )]"
													layoutpolicy_horizontal = expanding
												}

												vbox_color_picker = {
													name = "vbox_color_picker"
													datacontext = "[RulerDesignerWindow.AccessColorPicker( GeneCategory.Self )]"
													visible = "[GeneCategory.IsType( 'color' )]"
												}

												expand = {}
											}
										}
									}
								}
							}
						}

						expand = {}
					}
				}
			}
		}

		vbox = {
			name = "coat_of_arms_page"

			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin = { 10 0 }
			margin_top = 15
			spacing = 10

			visible = "[VariableSystem.Exists( 'coat_of_arms_customization_open' )]"

			using = Animation_ShowHide_Quick

			state = {
				name = _show
				using = CoatOfArmsDesignerAnimationResetState
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				vbox_dynasty_edit_fields = {
					name = "dynasty_detail_input"
					visible = "[VariableSystem.HasValue( 'coat_of_arms_customization_open', 'dynasty' )]"
					layoutpolicy_vertical = expanding
					margin_right = 10
					margin_left = 10
				}

				vbox_title_edit_fields = {
					name = "title_detail_input"
					visible = "[VariableSystem.HasValue( 'coat_of_arms_customization_open', 'title' )]"
					layoutpolicy_vertical = expanding

				}

				divider_light = {
					layoutpolicy_vertical = expanding
				}

				vbox_coa_designer = {
					datacontext = "[RulerDesignerWindow.GetCoatOfArmsDesigner]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
				}
			}

			hbox = {
				name = "finish_buttons"
				layoutpolicy_horizontal = expanding
				margin_top = 20
				margin_bottom = 15

				background = {
					using = Background_Area
					margin = { 15 0 }
				}

				button_primary = {
					name = "title_finish_button"
					visible = "[VariableSystem.HasValue( 'coat_of_arms_customization_open', 'title' )]"

					text = "FINISH"
					tooltip = "RULER_DESIGNER_FINISH_CUSTOMIZE_TITLE"
					onclick = "[RulerDesignerWindow.FinishTitleCoatOfArmsDesigner]"
					onclick = "[VariableSystem.Clear( 'coat_of_arms_customization_open' )]"

					size = { 210 40 }
				}

				button_primary = {
					name = "dynasty_finish_button"
					visible = "[VariableSystem.HasValue( 'coat_of_arms_customization_open', 'dynasty' )]"

					text = "FINISH"
					tooltip = "RULER_DESIGNER_FINISH_CUSTOMIZE_DYNASTY"
					onclick = "[RulerDesignerWindow.FinishDynastyCoatOfArmsDesigner]"
					onclick = "[VariableSystem.Clear( 'coat_of_arms_customization_open' )]"

					size = { 210 40 }
				}
			}
		}
	}
}

types ruler_designer_types
{
	type achievements_availability_box = hbox {
		name = "achievements_availability_box"
		layoutpolicy_horizontal = expanding
		spacing = 10

		achievements_enabled_icon = {
			block "achievements_enabled_visible" {}
		}
		achievements_disabled_icon = {
			block "achievements_disabled_visible" {}
		}

		vbox = {
			block "achievements_title_visible" {}

			text_single = {
				text = RULER_DESIGNER_ACHIEVEMENTS_LABEL
			}
			text_single = {
				text = RULER_DESIGNER_ACHIEVEMENTS_AVAILABLE
				block "achievements_enabled_visible" {}
				default_format = "#P"
			}
			text_single = {
				text = RULER_DESIGNER_ACHIEVEMENTS_NOT_AVAILABLE
				block "achievements_disabled_visible" {}
				default_format = "#N"
			}
		}

		expand = {}

		text_multi = {
			name = "achievements_info"
			text = RULER_DESIGNER_ACHIEVEMENTS_INFO
			block "achievements_info_visible" {}
			default_format = "#weak"
			autoresize = yes
			max_width = 300
		}
	}

	type scrollbar_value_slider = scrollbar
	{
		direction = horizontal
		size = { 270 20 }
		wheelstep = 0

		track = {
			using = SettingsValueTrack
		}

		slider = {
			using = SettingsValueSlider
		}

		dec_button = {
			using = SettingsValueDecButton
		}

		inc_button = {
			using = SettingsValueIncButton
		}
	}

	type scrollbar_age = scrollbar_value_slider
	{
		min = 0
		max = 120

		onvaluechanged = "[RulerDesignerWindow.OnAgeChange( PdxGuiWidget.Self )]"
		value = "[IntToFloat( RulerDesignerWindow.GetAge )]"
	}

	type scrollbar_weight = scrollbar_value_slider
	{
		min = -100
		max = 100

		onvaluechanged = "[RulerDesignerWindow.OnWeightChange( PdxGuiWidget.Self )]"
		value = "[IntToFloat( RulerDesignerWindow.GetWeight )]"
	}

	type scrollbar_morph_gene = scrollbar_value_slider
	{
		min = 0 # You should probably not change these min and max values, the code relies on them being uint8s
		max = 255

		onvaluechanged = "[RulerDesignerWindow.OnMorphGeneChange( GeneCategory.Self, PdxGuiWidget.Self )]"
		value = "[RulerDesignerWindow.GetMorphGeneValue( GeneCategory.Self )]"


	}

	type vbox_morph_gene_template_buttons = vbox
	{
		spacing = 3

		item = {
			button_standard = {
				name = "template_button"
				text = "[GeneTemplate.GetName]"
				onclick = "[RulerDesignerWindow.OnMorphTemplateSelected( GeneTemplate.Self ) ]"
				down = "[RulerDesignerWindow.HasMorphTemplateSelected( GeneTemplate.Self ) ]"
			}
		}
	}

	type vbox_accessory_gene_buttons = vbox
	{
		spacing = 3

		item = {
			button_tertiary_push = {
				name = "accessory_button"
				visible = "[RulerDesignerWindow.IsModifierValid( RulerDesignerPortraitModifier.Self )]"
				layoutpolicy_horizontal = expanding
				
				text = "[RulerDesignerPortraitModifier.GetName]"
				onclick = "[RulerDesignerWindow.OnPortraitModifierSelected( GeneCategory.Self, RulerDesignerPortraitModifier.Self )]"
				down = "[RulerDesignerWindow.IsPortraitModifierSelected( GeneCategory.Self, RulerDesignerPortraitModifier.Self )]"
			}
		}
	}

	type vbox_color_picker = vbox
	{
		margin = { 10 10 }

		background = {
			using = Background_Area_Dark
			alpha = 0.7
		}

		background = {
			using = Background_Frame
			alpha = 0.7
			margin = { -5 -5 }
		}

		button_normal = {
			size = { 256 256 }
			onclick = "[ColorGenePicker.OnClick( PdxGuiWidget.Self )]"
			texture = "[ColorGenePicker.GetTexture]"
			effectname = "NoHighlight"

			icon = {
				name = "current"
				size = { 15 15 }
				texture = "gfx/interface/icons/color_picker.dds"
				position = "[Subtract_CVector2f( ColorGenePicker.GetPosition, '(CVector2f)8,8' )]"
			}
		}

		text_multi = {
			text = "[ColorGenePicker.GetPositionInfo]"
			default_format = "#D"
			autoresize = yes
			max_width = 250
			visible = "[InDebugMode]"
		}
	}

	type vbox_trait_selection_content = vbox
	{
		datacontext = "[GetNullCharacter]"
		spacing = 3

		item = {
			button_standard_hover = {
				name = "trait_item"
				visible = "[And( Trait.ShowInRulerDesigner, Not( RulerDesignerWindow.HasTrait( Trait.Self ) ) )]"
				enabled = "[RulerDesignerWindow.CanPickTrait( Trait.Self )]"
				layoutpolicy_horizontal = expanding
				size = { 0 50 }
				onclick = "[RulerDesignerWindow.FinishTraitEditing( Trait.Self )]"
				onclick = "[VariableSystem.ClearIf( 'trait_select_window_open', VariableSystem.Exists( 'trait_select_window_replace' ) )]"
				onclick = "[VariableSystem.Clear( 'trait_select_window_replace' )]"
				tooltip = "[RulerDesignerWindow.CanPickTraitDesc( Trait.Self )]"

				hbox = {
					margin = { 5 0 }
					margin_right = 10
					spacing = 10

					icon_trait = {
						blockoverride "faith_context"
						{
							datacontext = "[RulerDesignerWindow.GetFaith]"
						}
						blockoverride "tooltip_placement"
						{
							using = tooltip_ws
						}
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "[Trait.GetNameNoTooltip( Character.Self )]"
						default_format = "#clickable"
					}

					text_single = {
						name = "point_cost"
						text = "[Trait.GetRulerDesignerCost|=]"
						align = nobaseline
					}
				}
			}
		}
	}
	#Warcraft
	type vbox_race_trait_selection_content = vbox
	{
		datacontext = "[GetNullCharacter]"
		spacing = 3

		item = {
			button_standard_hover = {
				name = "trait_item"
				visible = "[Not( RulerDesignerWindow.HasTrait( Trait.Self ) )]"
				enabled = "[RulerDesignerWindow.CanPickTrait( Trait.Self )]"
				layoutpolicy_horizontal = expanding
				size = { 0 50 }
				onclick = "[RulerDesignerWindow.FinishTraitEditing( Trait.Self )]"
				onclick = "[VariableSystem.ClearIf( 'trait_select_window_open', VariableSystem.Exists( 'trait_select_window_replace' ) )]"
				onclick = "[VariableSystem.Clear( 'trait_select_window_replace' )]"
				tooltip = "[RulerDesignerWindow.CanPickTraitDesc( Trait.Self )]"
				onclick = "[VariableSystem.Set( 'picked_race_trait', 'yes' )]"

				hbox = {
					margin = { 5 0 }
					margin_right = 10
					spacing = 10

					icon_trait = {
						blockoverride "faith_context"
						{
							datacontext = "[RulerDesignerWindow.GetFaith]"
						}
						blockoverride "tooltip_placement"
						{
							using = tooltip_ws
						}
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "[Trait.GetNameNoTooltip( Character.Self )]"
						default_format = "#clickable"
					}

					text_single = {
						name = "point_cost"
						text = "[Trait.GetRulerDesignerCost|=]"
						align = nobaseline
					}
				}
			}
		}
	}

	type button_trait_slot_entry = button_trait
	{
		datacontext = "[TraitSlot.GetTrait]"

		blockoverride "faith_context"
		{
			datacontext = "[RulerDesignerWindow.GetFaith]"
		}

		block "button_trait_onclick"
		{
		}

		state = {
			name = "_mouse_enter"
			on_start = "[PdxGuiWidget.FindChild('remove_icon').TriggerAnimation('show')]"
		}

		state = {
			name = "_mouse_leave"
			on_start = "[PdxGuiWidget.FindChild('remove_icon').TriggerAnimation('hide')]"
		}

		button_close = {
			name = "remove_icon"
			parentanchor = center
			alwaystransparent = yes
			alpha = 0

			state = {
				name = "show"
				using = Animation_FadeIn_Quick
				duration = 0.05
			}

			state = {
				name = "hide"
				alpha = 0
				using = Animation_FadeOut_Quick
			}

			background = {
				texture = "gfx/interface/component_masks/mask_fade_circle.dds"
				color = { 0.18 0.18 0.18 0.8 }
				margin = {20 20}
			}
		}

		onclick = "[TraitSlotArray.RemoveTrait( TraitSlot.Self )]"
		button_ignore = none
	}

	type hbox_trait_slot = hbox
	{
		hbox = {
			margin_bottom = 4

			text_label_left = {
				min_width = 125
				block "trait_slots_header_text"
				{
					raw_text = "FILL ME IN"
					default_format = "#D"
				}
			}
		}

		hbox = {
			block "trait_list"
			{
				hbox = {
					name = "current_traits_less_than_equal_6"
					layoutpolicy_horizontal = expanding

					size = { 300 50 }

					datamodel = "[TraitSlotArray.AccessSlots]"
					visible = "[And( DataModelHasItems( TraitSlotArray.AccessSlots ), LessThanOrEqualTo_int32( GetDataModelSize( TraitSlotArray.AccessSlots ), '(int32)6' ) )]"

					item = {
						container = {
							button_trait_slot_entry = {}
						}
					}
				}
				overlappingitembox = {
					name = "current_traits_more_than_6"
					layoutpolicy_horizontal = expanding

					size = { 300 50 }

					datamodel = "[TraitSlotArray.AccessSlots]"
					visible = "[And( DataModelHasItems( TraitSlotArray.AccessSlots ), GreaterThan_int32( GetDataModelSize( TraitSlotArray.AccessSlots ), '(int32)6' ) )]"

					item = {
						container = {
							button_trait_slot_entry = {}
						}
					}
				}
			}

			block "plus_button"
			{
				widget = {
					size = { 50 50 }
					name = "add_trait_slot"

					button_plus = {
						name = "add_trait_button"
						parentanchor = center

						tooltip = "RULER_DESIGNER_ADD_TRAIT_SLOT_TOOLTIP"

						onclick = "[TraitSlotArray.StartEditing]"

						block "plus_onclick"
						{
							onclick = "[VariableSystem.Set( 'trait_select_window_open', 'true' )]"
						}
					}
				}
			}
		}

		expand = {}
	}
	#Warcraft
	type hbox_race_trait_slot = hbox
	{
		hbox = {
			margin_bottom = 4

			text_label_right = {
				min_width = 125
				margin_right = 10
				block "trait_slots_header_text"
				{
					raw_text = "FILL ME IN"
					default_format = "#bold"
				}
			}
		}

		hbox = {
			block "trait_list"
			{
				hbox = {
					name = "current_traits_less_than_equal_6"
					layoutpolicy_horizontal = expanding

					size = { 300 50 }

					datamodel = "[TraitSlotArray.AccessSlots]"
					visible = "[And( DataModelHasItems( TraitSlotArray.AccessSlots ), LessThanOrEqualTo_int32( GetDataModelSize( TraitSlotArray.AccessSlots ), '(int32)6' ) )]"

					item = {
						container = {
							ignoreinvisible = yes
							button_trait_slot_entry = {visible = "[Trait.IsTraitGroup( GetTraitGroup('race') )]" onclick = "[GetVariableSystem.Clear( 'picked_race_trait' )]" }
						}
					}
				}
				overlappingitembox = {
					name = "current_traits_more_than_6"
					layoutpolicy_horizontal = expanding

					size = { 300 50 }

					datamodel = "[TraitSlotArray.AccessSlots]"
					visible = "[And( DataModelHasItems( TraitSlotArray.AccessSlots ), GreaterThan_int32( GetDataModelSize( TraitSlotArray.AccessSlots ), '(int32)6' ) )]"

					item = {
						container = {
							ignoreinvisible = yes
							button_trait_slot_entry = {visible = "[Trait.IsTraitGroup( GetTraitGroup('race') )]" onclick = "[GetVariableSystem.Clear( 'picked_race_trait' )]" }
						}
					}
				}
			}

			block "plus_button"
			{
				widget = {
					size = { 50 50 }
					visible = "[Not(VariableSystem.Exists( 'picked_race_trait' ))]"
					name = "add_trait_slot"

					button_plus = {
						name = "add_trait_button"
						parentanchor = center

						tooltip = "RULER_DESIGNER_ADD_TRAIT_SLOT_TOOLTIP"

						onclick = "[TraitSlotArray.StartEditing]"

						block "plus_onclick"
						{
							onclick = "[VariableSystem.Set( 'trait_select_window_open', 'true' )]"
						}
					}
				}
			}
		}

		expand = {}
	}

	type vbox_dynasty_edit_fields = vbox
	{
		minimumsize = { 350 -1 }
		spacing = 8

		vbox = {
			layoutpolicy_horizontal = expanding
			spacing = 10

			hbox = {
				layoutpolicy_horizontal = expanding

				text_label_left = {
					layoutpolicy_horizontal = expanding
					text = "CUSTOMIZATION_NAMING_HEADER"
					using = Font_Size_Medium
				}
			}

			blockoverride "header_label"
			{
				text = "CUSTOMIZATION_NAMING_HEADER"
			}

			editbox_standard_with_label = {
				name = "name_field"
				layoutpolicy_horizontal = expanding

				blockoverride "editbox_label"
				{
					text = "HOUSE_NAME_FIELD"
				}

				blockoverride "editbox_properties"
				{
					text = "[RulerDesignerWindow.GetDynastyName]"
					ontextedited = "[RulerDesignerWindow.OnEditDynastyName]"
					maxcharacters = 40
				}

				blockoverride "editbox_right_side"
				{
					spacing = 5

					button_randomize = {
						onclick = "[RulerDesignerWindow.RandomizeDynastyName]"
						tooltip = RULER_DESIGNER_RANDOMIZE_DYNASTY_NAME
						using = tooltip_se
					}
				}
			}

			editbox_standard_with_label = {
				name = "motto_field"
				layoutpolicy_horizontal = expanding
				minimumsize = { -1 140 }

				blockoverride "editbox_label"
				{
					text = "HOUSE_MOTTO_FIELD"
				}

				blockoverride "editbox_properties"
				{
					ontextedited = "[RulerDesignerWindow.OnEditHouseMotto]"
					using = house_motto_editbox_length
				}

				tooltip = RULER_DESIGNER_HOUSE_MOTTO_TT
				tooltip_visible = "[Not( RulerDesignerWindow.HasHouseMotto )]"
			}
		}

		expand = {}
	}

	type vbox_title_edit_fields = vbox
	{
		minimumsize = { 300 -1 }
		spacing = 10

		vbox = {
			layoutpolicy_horizontal = expanding
			margin = { 10 5 }
			margin_bottom = 8
			spacing = 10

			hbox = {
				layoutpolicy_horizontal = expanding

				text_label_left = {
					layoutpolicy_horizontal = expanding
					text = "CUSTOMIZATION_NAMING_HEADER"
					using = Font_Size_Medium
				}
			}

			blockoverride "header_label"
			{
				text = "CUSTOMIZATION_NAMING_HEADER"
			}

			editbox_standard_with_label = {
				layoutpolicy_horizontal = expanding

				blockoverride "editbox_label"
				{
					text = "TITLE_NAME_FIELD"
				}

				blockoverride "editbox_properties"
				{
					text = "[RulerDesignerWindow.GetTitleName]"
					ontextedited = "[RulerDesignerWindow.OnEditTitleName]"
				}
			}

			button_checkbox_label = {
				name = "definite_form"
				layoutpolicy_horizontal = expanding

				tooltip = "TITLE_CUSTOMIZATION_DEFINITE_FORM_TOOLTIP"
				onclick = "[RulerDesignerWindow.ToggleTitleUsesDefiniteForm]"

				blockoverride "text"
				{
					text = "TITLE_CUSTOMIZATION_DEFINITE_FORM"
				}
				blockoverride "checkbox"
				{
					checked = "[RulerDesignerWindow.TitleUsesDefiniteForm]"
				}
			}

			editbox_standard_with_label = {
				layoutpolicy_horizontal = expanding

				blockoverride "editbox_label"
				{
					text = "TITLE_ADJECTIVE_FIELD"
				}

				blockoverride "editbox_properties"
				{
					text = "[RulerDesignerWindow.GetTitleAdjective]"
					ontextedited = "[RulerDesignerWindow.OnEditTitleAdjective]"
				}
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding

			spacing = 10
			margin = { 10 5 }
			margin_bottom = 8

			text_single = {
				layoutpolicy_horizontal = expanding
				text = "MAP_COLOR_HEADER"
			}

			colorpicker_simple = {
				layoutpolicy_horizontal = expanding
				color = "[RulerDesignerWindow.GetTitleMapColor]"
				oncoloredited = "[RulerDesignerWindow.SetTitleMapColor]"
			}
		}

		expand = {}
	}
}

template Button_Close_Select_Faith
{
	onclick = "[VariableSystem.Clear( 'faith_select_window_open' )]"
}

template Button_Select_Faith
{
	onclick = "[RulerDesignerWindow.SetFaith( Faith.Self )]"
	using = Button_Close_Select_Faith
}

template Button_Close_Select_Culture
{
	onclick = "[VariableSystem.Clear( 'culture_select_window_open' )]"
}

template Button_Select_Culture
{
	onclick = "[RulerDesignerWindow.SetCulture( CultureTemplate.Self )]"
	using = Button_Close_Select_Culture
}

template ProgressBar_Achievements
{
	size = { 200 20 }
	value = "[CurrentAndMaxToProgressbarValueInt32( RulerDesignerWindow.GetPointsUsed, GetDefine( 'NRulerDesigner', 'IRONMAN_POINT_MAX' ) )]"
}
