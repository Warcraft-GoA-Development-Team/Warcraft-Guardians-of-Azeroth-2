# Custom CBs for FP1

# fp1_scandi_adventurer_conquest is kept in event wars due to being AI-only & for performance reasons.

fp1_varangian_adventurer_conquest = {
	group = conquest

	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }

	allowed_for_character = {
		culture = {
			has_innovation = innovation_varangian_adventurers
			
			# Warcraft
			# Can only be fired in the Tribal Era.
			has_viking_adventurers_era_trigger = yes
		}
		OR = {
			# Players can always use this.
			is_ai = no
			# The AI has some stricter requirements.
			AND = {
				# First up, they need a suitable personality.
				OR = {
					AND = {
						has_trait = ambitious
						calc_true_if = {
							amount >= 2
							has_trait = greedy
							has_trait = brave
							has_trait = arrogant
							has_trait = adventurer
						}
					}
					# And if you *wanted* a viking apocalypse...
					has_game_rule = fp1_scandi_adventurers_apocalyptic
				}
				# Then, they need to hold all their territories within Scandinavia.
				any_realm_county = {
					count = all
					
					# Warcraft
					title_province = { geographical_region = dlc_fp1_region_core_mainland_scandinavia }
				}
			}
		}
	}

	allowed_for_character_display_regardless = {
		# Ensure that this is only done every now and then.
		is_independent_ruler = yes
		highest_held_title_tier <= tier_duchy
		trigger_if = {
			limit = { is_ai = no }
			trigger_if = {
				limit = {
					culture = {
						has_cultural_parameter = cb_lower_prestige_level_requirement
					}
				}
				prestige_level >= 1
			}
			trigger_else = {
				prestige_level >= 2
			}
		}
		trigger_else = {
			trigger_if = {
				limit = {
					culture = {
						has_cultural_parameter = cb_lower_prestige_level_requirement
					}
				}
				prestige_level >= 0
			}
			trigger_else = {
				prestige_level >= 1
			}
		}
		is_at_war = no
	}

	allowed_against_character = {
		# Cannot adventure against other adventuring cultures.
		NOT = {
			culture = { has_innovation = innovation_varangian_adventurers }
		}
		# Players vs. AI filtering.
		OR = {
			# Can always target the AI.
			is_ai = yes
			# Cannot target a player unless they completely control at least two duchies.
			any_sub_realm_duchy = {
				count >= 2
				save_temporary_scope_as = player_controlled_duchy
				# Custom description to suppress errors.
				custom_description = {
					text = SUPPRESS
					scope:defender = { completely_controls = scope:player_controlled_duchy }
				}
			}
		}
		# Scope:defender cannot be bordering your realm.
		scope:defender = {
			NOT = { character_is_land_realm_neighbor = scope:attacker }
		}
	}
	target_titles = all
	target_title_tier = duchy
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder

	ai_can_target_all_titles = { always = yes }
	ai_score_mult = { value = varangian_adventure_ai_targeting_value }

	valid_to_start = {
	}

	should_invalidate = {
		OR = {
			NOT = {
				any_in_list = {
					list = target_titles
					any_in_de_jure_hierarchy = {
						tier = tier_county
						holder = {
							target_is_same_character_or_above = scope:defender
						}
					}
				}
			}
			scope:attacker = {
				OR = {
					is_independent_ruler = no
					highest_held_title_tier >= tier_kingdom
				}
			}
			
		}
	}

	on_invalidated_desc = msg_county_conquest_war_invalidated_message
	
	on_invalidated = {
	}

	cost = {
		piety = {
			add = fp1_varangian_adventure_base_piety_cost

			multiply = common_cb_piety_cost_multiplier
		}
		prestige = {
			value = varangian_adventurer_cb_cost
			multiply = common_cb_prestige_cost_multiplier
		}
	}

	on_declaration = {
		on_declared_war = yes
		# Dish out event troops, if appropriate.
		## We give out x200 troops per same-culture same-faith core mainland Scandinavian county, up to a maximum of ten counties.
		## These are evenly split between good MaA -> average MaA -> good MaA again, to give a decent bell curve.
		scope:attacker = {
			if = {
				limit = {
					# Must have valid cause for event troops.
					OR = {
						# Scandinavian criteria.
						fp1_va_eligible_for_scandinavian_troops_trigger = yes
						# Adventure Legacy criteria.
						AND = {
							exists = dynasty
							dynasty = { has_dynasty_perk = fp1_adventure_legacy_1 }
						}
					}
					# And who haven't already had a bash at an adventure.
					NOT = { has_variable = va_cb_tally }
				}
				# Grab capital for loc
				capital_barony = { save_scope_as = capital_barony }
				# Send the actual troops.
				send_interface_toast = {
					title = fp1_varangian_adventurer_conquest.troops_raised.tt
					left_icon = scope:attacker
					# Due to spawn_army parameter limitations and balancing concerns, we have to do this somewhat grossly.
					## Base Army
					if = {
						limit = { fp1_va_eligible_for_scandinavian_troops_trigger = yes }
						# +100 Varangian Veterans, +100 levies (to keep the count even).
						if = {
							limit = { varangian_adventurers_bonus_levies_value = 1 }
							spawn_army = {
								men_at_arms = {
									type = varangian_veterans
									stacks = 1
								}
								levies = 100
								inheritable = yes
								location = scope:attacker.capital_province
								war = scope:war
								war_keep_on_attacker_victory = yes
								save_scope_as = new_army
								name = scandi_adventurer_event_troops
							}
						}
						# +200 Varangian Veterans
						if = {
							limit = { varangian_adventurers_bonus_levies_value = 2 }
							spawn_army = {
								men_at_arms = {
									type = varangian_veterans
									stacks = 3
								}
								levies = 100
								inheritable = yes
								location = scope:attacker.capital_province
								war = scope:war
								war_keep_on_attacker_victory = yes
								save_scope_as = new_army
								name = scandi_adventurer_event_troops
							}
						}
						# +200 Bondi
						if = {
							limit = { varangian_adventurers_bonus_levies_value = 3 }
							spawn_army = {
								men_at_arms = {
									type = varangian_veterans
									stacks = 3
								}
								men_at_arms = {
									type = bondi
									stacks = 2
								}
								levies = 100
								inheritable = yes
								location = scope:attacker.capital_province
								war = scope:war
								war_keep_on_attacker_victory = yes
								save_scope_as = new_army
								name = scandi_adventurer_event_troops
							}
						}
						# +200 Bondi
						if = {
							limit = { varangian_adventurers_bonus_levies_value = 4 }
							spawn_army = {
								men_at_arms = {
									type = varangian_veterans
									stacks = 3
								}
								men_at_arms = {
									type = bondi
									stacks = 4
								}
								levies = 100
								inheritable = yes
								location = scope:attacker.capital_province
								war = scope:war
								war_keep_on_attacker_victory = yes
								save_scope_as = new_army
								name = scandi_adventurer_event_troops
							}
						}
						# +200 Vigmen
						if = {
							limit = { varangian_adventurers_bonus_levies_value = 5 }
							spawn_army = {
								men_at_arms = {
									type = varangian_veterans
									stacks = 3
								}
								men_at_arms = {
									type = bondi
									stacks = 4
								}
								men_at_arms = {
									type = vigmen
									stacks = 2
								}
								levies = 100
								inheritable = yes
								location = scope:attacker.capital_province
								war = scope:war
								war_keep_on_attacker_victory = yes
								save_scope_as = new_army
								name = scandi_adventurer_event_troops
							}
						}
						# +200 Vigmen
						if = {
							limit = { varangian_adventurers_bonus_levies_value = 6 }
							spawn_army = {
								men_at_arms = {
									type = varangian_veterans
									stacks = 3
								}
								men_at_arms = {
									type = bondi
									stacks = 4
								}
								men_at_arms = {
									type = vigmen
									stacks = 4
								}
								levies = 100
								inheritable = yes
								location = scope:attacker.capital_province
								war = scope:war
								war_keep_on_attacker_victory = yes
								save_scope_as = new_army
								name = scandi_adventurer_event_troops
							}
						}
						# +200 Vigmen
						if = {
							limit = { varangian_adventurers_bonus_levies_value = 7 }
							spawn_army = {
								men_at_arms = {
									type = varangian_veterans
									stacks = 3
								}
								men_at_arms = {
									type = bondi
									stacks = 4
								}
								men_at_arms = {
									type = vigmen
									stacks = 6
								}
								levies = 100
								inheritable = yes
								location = scope:attacker.capital_province
								war = scope:war
								war_keep_on_attacker_victory = yes
								save_scope_as = new_army
								name = scandi_adventurer_event_troops
							}
						}
						# +200 Vigmen
						if = {
							limit = { varangian_adventurers_bonus_levies_value = 8 }
							spawn_army = {
								men_at_arms = {
									type = varangian_veterans
									stacks = 3
								}
								men_at_arms = {
									type = bondi
									stacks = 4
								}
								men_at_arms = {
									type = vigmen
									stacks = 8
								}
								levies = 100
								inheritable = yes
								location = scope:attacker.capital_province
								war = scope:war
								war_keep_on_attacker_victory = yes
								save_scope_as = new_army
								name = scandi_adventurer_event_troops
							}
						}
						# +200 Huscarls
						if = {
							limit = { varangian_adventurers_bonus_levies_value = 9 }
							spawn_army = {
								men_at_arms = {
									type = varangian_veterans
									stacks = 3
								}
								men_at_arms = {
									type = bondi
									stacks = 4
								}
								men_at_arms = {
									type = vigmen
									stacks = 8
								}
								men_at_arms = {
									type = huscarl
									stacks = 2
								}
								levies = 100
								inheritable = yes
								location = scope:attacker.capital_province
								war = scope:war
								war_keep_on_attacker_victory = yes
								save_scope_as = new_army
								name = scandi_adventurer_event_troops
							}
						}
						# +200 Huscarls
						if = {
							limit = { varangian_adventurers_bonus_levies_value >= 10 }
							spawn_army = {
								men_at_arms = {
									type = varangian_veterans
									stacks = 3
								}
								men_at_arms = {
									type = bondi
									stacks = 4
								}
								men_at_arms = {
									type = vigmen
									stacks = 8
								}
								men_at_arms = {
									type = huscarl
									stacks = 4
								}
								levies = 100
								inheritable = yes
								location = scope:attacker.capital_province
								war = scope:war
								war_keep_on_attacker_victory = yes
								save_scope_as = new_army
								name = scandi_adventurer_event_troops
							}
						}
					}
					## Perk Army
 					### +400 Varangian Veterans, +400 Vigmen, +100 Bondi, +100 levies (to keep the count even).
 					if = {
						limit = {
							dynasty = { has_dynasty_perk = fp1_adventure_legacy_1 }
						}
						spawn_army = {
							men_at_arms = {
								type = varangian_veterans
								stacks = 4
							}
							men_at_arms = {
								type = vigmen
								stacks = 4
							}
							men_at_arms = {
								type = bondi
								stacks = 1
							}
							levies = 100
							inheritable = yes
							location = scope:attacker.capital_province
							war = scope:war
							war_keep_on_attacker_victory = yes
							save_scope_as = new_army
							name = scandi_adventurer_event_troops
						}
					}
				}
			}
		}
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:attacker = { is_local_player = yes }
				}
				desc = county_conquest_cb_victory_desc_attacker
			}
			desc = county_conquest_cb_victory_desc
		}
	}

	on_victory = {
		# Organise general results for the attacker.
		scope:attacker = {
			# Set up titles in the new colony.
			## First up, hand over counties in the target duchy to scope:attacker.
			create_title_and_vassal_change = {
				type = conquest
				save_scope_as = change
				add_claim_on_loss = yes
			}
			every_in_list = {
				list = target_titles
				custom_tooltip = CONQUEST_CB_TITLE
				every_in_de_jure_hierarchy = {
					continue = {
						OR = {
							NOT = {
								exists = holder
							}
							NOT = {
								holder = {
									target_is_liege_or_above = scope:defender
								}
							}
							AND = {
								scope:attacker.faith = {
									faith_hostility_level_comparison = {
										prev.holder.faith <= scope:defender.faith
									}
								}
								holder = {
									OR = {
										this = scope:defender
										target_is_liege_or_above = scope:defender
									}
								}
							}
						}
						tier > tier_county
					}
					limit = {
						tier = tier_county
						exists = holder
						holder = {
							OR = {
								this = scope:defender
								target_is_liege_or_above = scope:defender
							}
						}
					}
					if = {
						limit = {
							OR = {
								scope:attacker.faith = {
									faith_hostility_level_comparison = { prev.holder.faith >= scope:defender.faith }
								}
								holder.primary_title.tier >= scope:attacker.primary_title.tier
							}
						}
						add_to_temporary_list = titles_taken
					}
					else = {
						holder = { add_to_temporary_list = vassals_taken }
					}
				}
			}
			every_in_list = {
				list = titles_taken
				change_title_holder = {
					holder = scope:attacker
					change = scope:change
					take_baronies = yes
				}
			}
			every_in_list = {
				list = vassals_taken
				change_liege = {
					liege = scope:attacker
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
			## Grab the appropriate duchy for future independence checks.
			random_in_list = {
				list = target_titles
				limit = { tier = tier_duchy }
				save_scope_as = target_duchy
			}
			## Next, if the appropriate duchy doesn't already exist, create it.
			if = {
				limit = {
					any_in_list = {
						list = target_titles
						tier = tier_duchy
						is_title_created = no
					}
				}
				random_in_list = {
					list = target_titles
					limit = { tier = tier_duchy }
					save_scope_as = new_duchy
				}
				create_title_and_vassal_change = {
					type = created
					save_scope_as = change
					add_claim_on_loss = no
				}
				scope:new_duchy = {
					change_title_holder = {
						holder = scope:attacker
						change = scope:change
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			## Else if it does & is a part of scope:defender's sub-realm, usurp it.
			else_if = {
				limit = {
					any_in_list = {
						list = target_titles
						tier = tier_duchy
						holder = {
							OR = {
								this = scope:defender
								any_liege_or_above = { this = scope:defender }
							}
						}
					}
				}
				random_in_list = {
					list = target_titles
					# No need to check all triggers, since there'll only ever be one duchy in the list.
					limit = { tier = tier_duchy }
					save_scope_as = new_duchy
				}
				create_title_and_vassal_change = {
					type = usurped
					save_scope_as = change
					add_claim_on_loss = yes
				}
				scope:new_duchy = {
					change_title_holder = {
						holder = scope:attacker
						change = scope:change
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			## Else we want a titular duchy.
			else = {
				# To keep tooltips neat, show the core duchy as transferring (preventing a messy "unlanded of" from appearing).
				show_as_tooltip = {
					random_in_list = {
					list = target_titles
						limit = { tier = tier_duchy }
						save_scope_as = new_duchy
					}
					create_title_and_vassal_change = {
						type = created
						save_scope_as = change
						add_claim_on_loss = no
					}
					scope:new_duchy = {
						change_title_holder = {
							holder = scope:attacker
							change = scope:change
						}
					}
					resolve_title_and_vassal_change = scope:change
				}
				# Actual transfer.
				hidden_effect = {
					# Randomising the names a little.
					random_list = {
						25 = {
							create_dynamic_title = {
								tier = duchy
								name = VIKING_STATE_TITLE_NAME
							}
						}
						25 = {
							create_dynamic_title = {
								tier = duchy
								name = NORDIC_STATE_TITLE_NAME
							}
						}
						
						# Warcraft
						
						25 = {
							create_dynamic_title = {
								tier = duchy
								name = NORSE_STATE_TITLE_NAME
							}
						}
					}
					create_title_and_vassal_change = {
						type = created
						save_scope_as = change
						add_claim_on_loss = no
					}
					scope:new_title = {
						set_destroy_on_gain_same_tier = yes
						set_no_automatic_claims = yes
						set_can_be_named_after_dynasty = no
						change_title_holder = {
							holder = scope:attacker
							change = scope:change
						}
						save_scope_as = new_duchy
					}
					resolve_title_and_vassal_change = scope:change
					# Generate a new CoA
					## We do this in a separate block so that the effect has time to see that the title has a holder, since it'll error otherwise.
					scope:new_title = { generate_coa = yes }
				}
			}
			## Set a new capital.
			### We prefer the de jure capital of the other.
			if = {
				limit = {
					any_in_list = {
						list = target_titles
						this = duchy.title_capital_county
					}
				}
				random_in_list = {
					list = target_titles
					limit = { this = duchy.title_capital_county }
					save_temporary_scope_as = new_capital
					scope:attacker = { set_realm_capital = scope:new_capital }
				}
			}
			### Otherwise, tribals go by pure levy count.
			else_if = {
				limit = {
					scope:attacker = { has_government = tribal_government }
				}
				ordered_in_list = {
					list = target_titles
					limit = { tier = tier_county }
					order_by = total_county_levies
					save_temporary_scope_as = new_capital
					scope:attacker = { set_realm_capital = scope:new_capital }
				}
			}
			### Everyone else prefers the highest development.
			else = {
				ordered_in_list = {
					list = target_titles
					limit = { tier = tier_county }
					order_by = { add = development_level }
					save_temporary_scope_as = new_capital
					scope:attacker = { set_realm_capital = scope:new_capital }
				}
			}
			# Then re-order stuff in the Old Country.
			## First, we destroy any other ducal titles scope:attacker holds (excepting HoF titles).
			if = {
				limit = {
					any_held_title = {
						tier = tier_duchy
						NOR = {
							this = scope:new_duchy
							is_head_of_faith = yes
						}
					}
				}
				every_held_title = {
					limit = {
						tier = tier_duchy
						NOR = {
							this = scope:new_duchy
							is_head_of_faith = yes
						}
					}
					save_temporary_scope_as = excess_duchy
					scope:attacker = { destroy_title = scope:excess_duchy }
				}
			}
			## Sort out vassalised family.
			custom_tooltip = fp1_varangian_adventurer_conquest.summaries.family_transfer
			every_vassal_or_below = {
				limit = { dynasty = scope:attacker.dynasty }
				add_to_list = vassalised_family_list
			}
			every_held_title = {
				limit = {
					duchy = { is_in_list = target_titles }
					tier = tier_county
				}
				add_to_list = spare_counties_list
			}
			## If there are any to account for, we bring over other landed family members from the Old Country & try to give them counties in the colony.
			if = {
				limit = {
					any_in_list = {
						list = vassalised_family_list
						count >= 1
					}
				}
				# Then iterate through the family members, dishing out titles as appropriate.
				every_in_list = {
					list = vassalised_family_list
					# Players first.
					limit = { is_ai = no }
					# Then NPCs, prioritising counts.
					alternative_limit = { highest_held_title_tier = tier_county }
					# We don't process barons, they can just go landless.
					# Grab the currently affected vassal.
					save_temporary_scope_as = receiving_vassal
					# Then, if there's anything in that list, look at handing out titles.
					if = {
						limit = {
							any_in_list = {
								list = spare_counties_list
								NOT = { this = scope:attacker.capital_county }
								holder = scope:attacker
							}
						}
						random_in_list = {
							list = spare_counties_list
							limit = {
								NOT = { this = scope:attacker.capital_county }
								tier = tier_county
								holder = scope:attacker
							}
							save_temporary_scope_as = spare_county
							create_title_and_vassal_change = {
								type = granted
								save_scope_as = change
								add_claim_on_loss = no
							}
							scope:spare_county = {
								change_title_holder = {
									holder = scope:receiving_vassal
									change = scope:change
								}
							}
							resolve_title_and_vassal_change = scope:change
						}
						# And add them to the post-processing list so we can divy out their lands elsewhere.
						add_to_list = vassal_family_processed_list
					}
					# Otherwise, we're going to have to do something special with this character, so take note of them for later.
					else = { add_to_list = vassal_family_not_processed_list }
				}
			}
			## Distribute scope:attacker's old domains to peasant vassals of the local culture/faith.
			custom_tooltip = fp1_varangian_adventurer_conquest.summaries.old_domains
			every_held_title = {
				limit = {
					tier = tier_county
					duchy = {
						NOT = { this = scope:target_duchy }
					}
				}
				# Grab the county for ease of reference.
				save_temporary_scope_as = current_county
				# Create an elevated peasant to claim the county.
				create_character = {
					location = scope:current_county.title_province
					template = old_country_local_warlord_template
					save_temporary_scope_as = local_warlord
				}
				# Assign the seceding title to the new upstart.
				create_title_and_vassal_change = {
					type = usurped
					save_scope_as = change
					add_claim_on_loss = no
				}
				hidden_effect = {
					scope:current_county = {
						change_title_holder = {
							holder = scope:local_warlord
							change = scope:change
							take_baronies = yes
						}
					}
				}
				resolve_title_and_vassal_change = scope:change
				# And give them their independence.
				create_title_and_vassal_change = {
					type = independency
					save_scope_as = change
					add_claim_on_loss = no
				}
				hidden_effect = {
					scope:local_warlord = {
						becomes_independent = { change = scope:change }
						save_scope_as = truce_loc
						add_truce_both_ways = {
							character = scope:attacker
							days = 14600
							name = FP1_VARANGIAN_ADVENTURER_INDEPENDENCE_TRUCE_NAME
						}
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			## Distribute landed family's domains outside of the colony to peasant vassals of the local culture/faith.
			custom_tooltip = fp1_varangian_adventurer_conquest.summaries.landed_family_old_domains
			every_in_list = {
				list = vassal_family_processed_list
				every_held_title = {
					limit = {
						tier = tier_county
						duchy = {
							NOT = { this = scope:target_duchy }
						}
					}
					# Grab the county for ease of reference.
					save_temporary_scope_as = current_county
					# Create an elevated peasant to claim the county.
					create_character = {
						location = scope:current_county.title_province
						template = old_country_local_warlord_template
						save_temporary_scope_as = local_warlord
					}
					# Assign the seceding title to the new upstart.
					create_title_and_vassal_change = {
						type = usurped
						save_scope_as = change
						add_claim_on_loss = no
					}
					hidden_effect = {
						scope:current_county = {
							change_title_holder = {
								holder = scope:local_warlord
								change = scope:change
								take_baronies = yes
							}
						}
					}
					resolve_title_and_vassal_change = scope:change
					# And give them their independence.
					create_title_and_vassal_change = {
						type = independency
						save_scope_as = change
						add_claim_on_loss = no
					}
					hidden_effect = {
						scope:local_warlord = {
							becomes_independent = { change = scope:change }
							save_scope_as = truce_loc
							add_truce_both_ways = {
								character = scope:attacker
								days = 14600
								name = FP1_VARANGIAN_ADVENTURER_INDEPENDENCE_TRUCE_NAME
							}
						}
					}
					resolve_title_and_vassal_change = scope:change
				}
			}
			## Give all old vassals outside of the target_titles independence.
			custom_tooltip = fp1_varangian_adventurer_conquest.summaries.old_vassals
			every_vassal = {
				limit = {
					NOT = {
						any_held_title = { duchy = scope:target_duchy }
					}
				}
				create_title_and_vassal_change = {
					type = independency
					save_scope_as = change
					add_claim_on_loss = no
				}
				hidden_effect = {
					becomes_independent = { change = scope:change }
					save_scope_as = truce_loc
					add_truce_both_ways = {
						character = scope:attacker
						days = 14600
						name = FP1_VARANGIAN_ADVENTURER_INDEPENDENCE_TRUCE_NAME
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			# Sort the governance of the colony.
			## Adjusting the government type as appropriate.
			# Conquering tribes makes you tribal.
			if = {
				limit = {
					capital_province = { has_holding_type = tribal_holding }
					NOT = { has_government = tribal_government }
				}
				# Change government to tribal.
				change_government = tribal_government
			}
			# Conquering elsewhere as a tribal makes you feudal.
			else_if = {
				limit = {
					NOT = {
						capital_province = { has_holding_type = tribal_holding }
					}
					# Might have turned theocratic before from gaining a new capital holding
					#has_government = tribal_government
				}
				# Change government to feudal.
				change_government = feudal_government
			}
			## Seizing control so things *vaguely* work.
			custom_tooltip = fp1_varangian_adventurer_conquest.summaries.control_rebate
			scope:attacker = { trigger_event = fp1_varangian_adventures.0001 }
			## And giving them a gold bounty to keep them afloat.
			scope:attacker = { add_gold = varangian_adventures_bounty_amount_value }
			# Finally, general cleanup.
			## Move any remaining newly-landless family to scope:attacker's court.
			every_in_list = {
				list = vassal_family_not_processed_list
				limit = { is_ruler = no }
				save_temporary_scope_as = landless_family
				scope:attacker = { add_courtier = scope:landless_family }
			}
			## If scope:attacker wasn't the house head, they found a new house. We ignore their probable-tribalism.
			if = {
				limit = {
					NOT = { this = house.house_head }
				}
				found_cadet_house_decision_effect = {
					CHARACTER = this
					PRESTIGE = 0
				}
			}
			## If scope:attacker *was* the house head, then all landed members of their house not in their new realm found new houses.
			else = {
				house = {
					ordered_house_member = {
						limit = {
							is_ruler = yes
							NOR = {
								# Exempt scope:attacker.
								this = scope:attacker
								# And anyone who made the trip with them.
								any_liege_or_above = { this = scope:attacker }
							}
						}
						order_by = age
						max = 100	# Basically, all of them.
						check_range_bounds = no
						found_cadet_house_decision_effect = {
							CHARACTER = this
							PRESTIGE = 0
						}
					}
				}
			}
			## If scope:attacker wasn't an adventurer before, make them one.
			if = {
				limit = {
					NOT = { has_trait = adventurer }
				}
				add_trait = adventurer
			}
			## Increment their Varangian Adventurer CB tally.
			if = {
				limit = {
					NOT = { has_variable = va_cb_tally }
				}
				set_variable = {
					name = va_cb_tally
					# We set to two initially, since the first war cost prestige already, so we want to pretend you had a value of 1 the first time around.
					value = 2
				}
			}
			else = {
				change_variable = {
					name = va_cb_tally
					add = 1
				}
			}
			# Aaaaaand track the A Dangerous Business achievement.
			if = {
				limit = {
					has_trait = dwarf
					NOT = {
						capital_county = {
							# Warcraft
							title_province = { europe_like_region_trigger = yes } 
						}
					}
				}
			}
		}

		# Prestige Progress for the Attacker
		every_in_list = {
			list = target_titles
			scope:attacker = {
				add_prestige_experience = medium_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Break alliances now out of diplo range
		if = {
			limit = {
				scope:attacker = {
					any_ally = {
						NOT = { in_diplomatic_range = scope:attacker }
					}
				}
			}
			scope:attacker = {
				every_ally = {
					limit = {
						NOT = { in_diplomatic_range = scope:attacker }
					}
					break_alliance = scope:attacker
				}
			}
		}

		# Truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_white_peace_desc_defender
			}
			desc = county_conquest_cb_white_peace_desc
		}
	}

	on_white_peace = {
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = minor_prestige_value
				multiply = -1.0
			}
			stress_impact = {
				ambitious = medium_stress_impact_gain
				arrogant = medium_stress_impact_gain
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker # Not important as the scales are identical
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		scope:defender = {
			stress_impact = {
				arrogant = medium_stress_impact_gain
			}
		}

		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
						has_targeting_faction = yes
					}
				}
				desc = county_conquest_cb_defeat_desc_attacker
			}
			desc = county_conquest_cb_defeat_desc
		}
	}

	on_defeat = {

		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 3
			}
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for Defender
		scope:defender = {
			add_prestige_war_defender_effect = {
				PRESTIGE_VALUE = major_prestige_value
			}
		}

# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:defender
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}

		on_lost_aggression_war_discontent_loss = yes
	}

	transfer_behavior = transfer

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "FP1_VARANGIAN_ADVENTURER_WAR_NAME"
	war_name_base = "FP1_VARANGIAN_ADVENTURER_WAR_NAME_BASE"
	cb_name = "FP1_VARANGIAN_ADVENTURER_CB_NAME"

	interface_priority = 79

	use_de_jure_wargoal_only = yes

	attacker_wargoal_percentage = 0.8
}
