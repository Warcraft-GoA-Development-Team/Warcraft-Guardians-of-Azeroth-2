# wc_magic_cast_spell_interaction = {
# 	common_interaction = yes
# 	use_diplomatic_range = yes
# 	category = interaction_category_wc_magic
# 	icon = wc_spellbook_icon

# 	is_shown = {
# 		scope:actor = {
# 			is_magic_user_trigger = yes
# 			can_cast_another_spell_trigger = yes
# 		}
# 	}

# 	on_accept = {
# 		scope:actor = {
# 			set_global_variable = {
# 				name = spellbook_open
# 				value = yes
# 			}
# 			set_variable = {
# 				name = spellbook_type_cast
# 				value = yes
# 			}
# 			custom_tooltip = wc_magic_cast_spell_interaction_tt
# 		 	set_variable = { name = spell_recipient value = scope:recipient }
# 		}
# 		scope:recipient = {
# 			custom_tooltip = wc_magic_cast_spell_interaction_tt_r
# 		}
# 	}

# 	auto_accept = yes
# }

# wc_magic_stop_channeling_spell_interaction = {

# }

wc_spell_reflect_character_interaction = {
    common_interaction = yes
    use_diplomatic_range = yes
    category = interaction_category_wc_magic
    icon = wc_spellbook_icon

    is_shown = {
        always = yes
    }

    hidden = yes

    on_accept = {
        scope:actor = {
            set_variable = { name = true_target value = scope:secondary_recipient }
            remove_variable = reflect_interaction
            remove_variable = landed_only

            if = {
                limit = {
                    exists = scope:reveal_scheme
                    scope:reveal_scheme = yes
                }

                scope:scheme = {
                    expose_scheme = yes
                }
            }
        }
    }

    populate_recipient_list = {
        scope:actor = {
            every_courtier = {
                add_to_list = characters
            }
            every_vassal = {
                add_to_list = characters
            }
        }

        every_in_list = {
            list = characters
            if = {
                limit = {
                    scope:actor = {
                        has_variable = landed_only
                    }
                }

                if = {
                    limit = {
                        is_landed = no
                    }

                    remove_from_list = characters
                }
            }
        }
    }

    send_options_exclusive = no

    send_option = {
        is_shown = { always = yes }
        current_description = wc_spell_reflect_character_interaction_reveal_desc
        flag = reveal_scheme
        localization = wc_spell_reflect_character_interaction_reveal
        starts_enabled = { always = no }
        can_be_changed = { NOT = { scope:scheme = { is_scheme_exposed = yes } } }
    }

    auto_accept = yes

    ai_frequency = 1

    ai_potential = {
        has_variable = reflect_interaction
    }

    ai_targets = {
        ai_recipients = vassals
        max = 10
    }
    ai_targets = {
        ai_recipients = courtiers
        max = 10
    }

    ai_will_do = {
        base = 100

        modifier = {
            factor = 0
            scope:actor = {
                has_variable = landed_only
            }
            scope:secondary_recipient = {
                is_landed = no
            }
        }
    }
}

wc_spell_reflect_artifact_interaction = {
    common_interaction = yes
    use_diplomatic_range = yes
    category = interaction_category_wc_magic
    icon = wc_spellbook_icon

    target_type = artifact
    target_filter = actor_artifacts

    is_shown = {
        always = yes
    }

    hidden = yes

    can_be_picked_artifact = {
        scope:actor = {
            any_character_artifact = {
                this = scope:target
            }
        }
    }

    on_accept = {
        scope:actor = {
            set_variable = { name = true_target value = scope:target }
            remove_variable = reflect_interaction

            if = {
                limit = {
                    exists = scope:reveal_scheme
                    scope:reveal_scheme = yes
                }

                scope:scheme = {
                    expose_scheme = yes
                }
            }
        }
    }

    send_options_exclusive = no

    send_option = {
        is_shown = { always = yes }
        current_description = wc_spell_reflect_character_interaction_reveal_desc
        flag = reveal_scheme
        localization = wc_spell_reflect_character_interaction_reveal
        starts_enabled = { always = no }
        can_be_changed = { NOT = { scope:scheme = { is_scheme_exposed = yes } } }
    }

    auto_accept = yes

    ai_frequency = 1

    ai_potential = {
        has_variable = reflect_interaction
    }

    ai_targets = {
        ai_recipients = vassals
        max = 10
    }
    ai_targets = {
        ai_recipients = courtiers
        max = 10
    }

    ai_will_do = {
        base = 100

        modifier = {
            factor = 0
            scope:actor = {
                has_variable = landed_only
            }
            scope:secondary_recipient = {
                is_landed = no
            }
        }
    }
}