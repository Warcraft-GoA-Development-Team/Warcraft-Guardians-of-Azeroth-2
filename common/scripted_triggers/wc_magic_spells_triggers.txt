any_spell_trigger = {
    OR = {
        $TRIGGER$ = { SPELL = flag:backdraft }
        $TRIGGER$ = { SPELL = flag:summon_fire_elemental }
        $TRIGGER$ = { SPELL = flag:lava_lash }
        $TRIGGER$ = { SPELL = flag:flame_wall }
        $TRIGGER$ = { SPELL = flag:flame_shock }
        $TRIGGER$ = { SPELL = flag:burnout }
        $TRIGGER$ = { SPELL = flag:planar_fire }
        $TRIGGER$ = { SPELL = flag:cauterize_wound }
        $TRIGGER$ = { SPELL = flag:vernal_solstice }
        $TRIGGER$ = { SPELL = flag:polymorph }
        $TRIGGER$ = { SPELL = flag:counterspell }
        $TRIGGER$ = { SPELL = flag:spellsteal }
        $TRIGGER$ = { SPELL = flag:scry }
        $TRIGGER$ = { SPELL = flag:haste }
        $TRIGGER$ = { SPELL = flag:conjure_refreshment }
        $TRIGGER$ = { SPELL = flag:chronomancy }`
        $TRIGGER$ = { SPELL = flag:fire_shield }
        $TRIGGER$ = { SPELL = flag:scorch }
        $TRIGGER$ = { SPELL = flag:pyroblast }
        $TRIGGER$ = { SPELL = flag:flamestrike }
        $TRIGGER$ = { SPELL = flag:frostbolt }
        $TRIGGER$ = { SPELL = flag:frost_nova }
        $TRIGGER$ = { SPELL = flag:frost_armor }
        $TRIGGER$ = { SPELL = flag:blizzard }
        $TRIGGER$ = { SPELL = flag:frostfire_bolt }
        $TRIGGER$ = { SPELL = flag:evocation }
        $TRIGGER$ = { SPELL = flag:arcane_dome }
        $TRIGGER$ = { SPELL = flag:flash_of_light }
        $TRIGGER$ = { SPELL = flag:dispel }
        $TRIGGER$ = { SPELL = flag:lightwell }
        $TRIGGER$ = { SPELL = flag:holy_fire }
        $TRIGGER$ = { SPELL = flag:judgement }
        $TRIGGER$ = { SPELL = flag:exorcism }
        $TRIGGER$ = { SPELL = flag:expulsion }
        $TRIGGER$ = { SPELL = flag:avenging_wrath }
    }
}

is_known_spell_trigger = {
    custom_description = {
        text = is_known_spell_trigger
        AND = {
            has_variable_list = known_spells
            is_target_in_variable_list = { name = known_spells target = $SPELL$ }
        }
    }
}

spell_on_cooldown_trigger = {
    custom_description = {
        text = spell_on_cooldown_trigger
        AND = {
            has_variable_list = spells_cd
            is_target_in_variable_list = { name = spells_cd target = $SPELL$ }
        }
    }
}

ritual_on_cooldown_trigger = {
    custom_description = {
        text = ritual_on_cooldown_trigger
        trigger_if = {
            limit = {
                spell_is_ritual_trigger = { SPELL = $SPELL$ }
            }
            OR = {
                any_spell_trigger = { TRIGGER = ritual_on_cooldown_sub_trigger }
                has_character_flag = any_ritual_cd
            }
        }
        trigger_else = { always = no }
    }
}

ritual_on_cooldown_sub_trigger = {
    spell_is_ritual_trigger = { SPELL = $SPELL$ }
    spell_on_cooldown_trigger = { SPELL = $SPELL$ }
}

has_unlocked_spell_rank_trigger = {
    trigger_if = {
        limit = { # You know all ranks of the spell if you know the spell and it has no ranks
            NOT = { spell_has_ranks_trigger = { SPELL = $SPELL$ } }
        }
        is_known_spell_trigger = { SPELL = $SPELL$ }
    }
    trigger_else_if = {
        limit = {
            $SPELL_RANK$ = flag:rank_1
        }
        has_variable_list = known_spells
        is_target_in_variable_list = {
            name = known_spells
            target = $SPELL$
        }
    }
    trigger_else_if = {
        limit = {
            $SPELL_RANK$ = flag:rank_2
        }
        has_variable_list = known_rank_2_spells
        is_target_in_variable_list = {
            name = known_rank_2_spells
            target = $SPELL$
        }
    }
    trigger_else_if = {
        limit = {
            $SPELL_RANK$ = flag:rank_3
        }
        has_variable_list = known_rank_3_spells
        is_target_in_variable_list = {
            name = known_rank_3_spells
            target = $SPELL$
        }
    }
    trigger_else = {
        always = no
    }
}

can_cast_another_spell_trigger = {
    custom_description = {
        text = can_cast_another_spell_trigger
        # Only up to 5 spells casting at once, and you cant cast the same spell at once
        trigger_if = {
            limit = {
                has_variable_list = current_spells_casting
            }
            variable_list_size = { name = current_spells_casting value < 5 }
        }
    }
}

is_casting_spell_trigger = {
    custom_description = {
        text = is_casting_spell_trigger
        has_variable_list = current_spells_casting
        is_target_in_variable_list = { name = current_spells_casting target = $SPELL$ }
    }
}

has_sufficient_mana_trigger = {
    custom_description = {
        text = has_sufficient_mana_trigger
        exists = var:current_spell_mana_cost
        var:current_spell_mana_cost <= var:wc_current_mana_variable
    }
}

has_sufficient_mana_value_trigger = {
    custom_description = {
        text = has_sufficient_mana_trigger
        trigger_if = {
            limit = {
                has_variable = wc_current_mana_variable
            }
            $VALUE$ <= var:wc_current_mana_variable
        }
    }
}

spell_hack_activated_trigger = {
    exists = var:wc_spell_hack_activated
}

wc_presence_of_mind_activated_trigger = {
    exists = var:wc_presence_of_mind_activated
}

wc_reverse_causality_activated_trigger = {
    exists = var:wc_reverse_causality_activated
}

all_requirements_for_casting_satisfied_trigger = {
	has_variable = current_spell_name
	has_variable = current_spell_rank
    has_variable = current_spell_mana_cost
    has_spell_selected_trigger = yes
    has_sufficient_mana_trigger = yes
    has_selected_spell_rank_trigger = yes
    has_selected_elemental_type_trigger = yes
    has_spell_target_selected_trigger = yes
    NOR = {
        custom_tooltip = {
            text = spell_target_is_self_trigger
            AND = {
                spell_target_is_self_trigger = {
                    SPELL = var:current_spell_name
                    RANK_VALUE = var:current_spell_rank
                }
                trigger_if = {
                    limit = {
                        var:current_target_type = flag:character
                        exists = var:spell_recipient
                    }
                    NOT = {
                        var:spell_recipient ?= root
                    }
                }
                trigger_else_if = {
                    limit = {
                        exists = var:original_recipient
                    }
                    NOT = {
                        var:original_recipient ?= root
                    }
                }
                trigger_else = { always = no }
            }
        }
        custom_description = {
            text = target_has_max_stacks_trigger
            AND = {
                has_variable_list = spell_targets_list
                any_in_list = {
                    variable = spell_targets_list
                    root = {
                        target_has_max_stacks_trigger = {
                            SPELL = var:current_spell_name
                            TARGET = prev
                            RANK = var:current_spell_rank
                        }
                    }
                }
            }
        }
        custom_description = {
            text = target_has_max_stacks_trigger
            AND = {
                exists = var:spell_recipient
                target_has_max_stacks_trigger = {
                    SPELL = var:current_spell_name
                    TARGET = var:spell_recipient
                    RANK = var:current_spell_rank
                }
            }
        }
        custom_tooltip =  { # Recipient must have a knight
            text = wc_spell_no_knights
            #OR = {
            var:current_spell_name ?= flag:flame_shock
            #}
            var:spell_recipient ?= { any_knight = { count = 0 }}
        }
        custom_tooltip =  { # Recipient must be a magic user
            text = wc_spell_is_magic_user
            #OR = {
            var:current_spell_name ?= flag:burnout
            #}
            var:spell_recipient = { is_magic_user_trigger = no }
        }
		custom_tooltip = {
			text = wc_spell_ice_block
			trigger_if = {
				limit = {
					has_variable = current_target_type
					var:current_target_type = flag:character
					has_variable = spell_recipient
				}
				var:spell_recipient = { has_trait = ice_block }
			}
			trigger_else = { always = no }
		}
		custom_tooltip = {
			text = wc_spell_ice_block
			trigger_if = {
				limit = {
					has_variable = current_target_type
					var:current_target_type = flag:character_list
					has_variable_list = spell_targets_list
				}
				any_in_list = {
					variable = spell_targets_list
					has_trait = ice_block
				}
			}
			trigger_else = { always = no }
		}
		custom_tooltip = {
			text = IS_INCAPABLE_TRIGGER
			is_incapable = yes
		}
	}
}

has_spell_selected_trigger = {
    custom_description = {
        text = has_spell_selected_trigger
        exists = var:current_spell_name
    }
}

has_spell_target_selected_trigger = {
    custom_description = {
        text = has_spell_target_selected_trigger
        OR = {
            exists = var:spell_recipient
            has_variable_list = spell_targets_list
        }
    }
}

has_spell_selected_targets_trigger = {
    custom_description = {
        text = has_spell_selected_targets_trigger
        OR = {
            exists = var:spell_recipient
            has_variable_list = spell_targets_list
        }
    }
}

has_selected_spell_rank_trigger = {
    custom_description = {
        text = has_selected_spell_rank_trigger
        exists = var:current_spell_name
        OR = {
            AND = {
                exists = var:current_spell_rank
                NOT = { var:current_spell_rank = 0 }
                spell_has_ranks_trigger = {
                    SPELL = var:current_spell_name
                }
            }
            NOT = {
                spell_has_ranks_trigger = {
                    SPELL = var:current_spell_name
                }
            }
        }
    }
}

has_selected_elemental_type_trigger  = {
    custom_description = {
        text = has_selected_elemental_type_trigger
        trigger_if = {
            limit = {
                exists = var:current_spell_name
                spell_is_elemental_trigger = {
                    SPELL = var:current_spell_name
                }
            }
            exists = var:elemental_type
        }
    }
}

has_max_targets_trigger = {
    custom_description = {
        text = has_max_targets_trigger
        AND = {
            has_variable_list = spell_targets_list
            variable_list_size = {
                name = spell_targets_list
                value >= 3
            }
        }
    }
}

# ### IF YOUR SPELL CAN BE CHANNELED # REMOVING THIS FOR NOW
# can_channel_spell_trigger = {
# 	# spell names here
# }

### SPELL TARGET TRIGGERS ###
## ONLY ONE CAN BE TRUE PER RANK ###
## THESE DON'T NEED LOCALIZATION, FOR NOW ##
### IF THE SPELL HAS NO RANKS, PUT RANK_VALUE AS 0 ###
### IF THE SPELL HAS RANKS, ONLY ONE CAN BE TRUE FOR EACH RANK. ###

target_has_max_stacks_trigger = {
    exists = var:current_spell_name
    custom_description = {
        text = target_has_max_stacks_trigger
        trigger_if = {
            limit = {
                OR = {
                    $SPELL$ = flag:planar_fire
                    $SPELL$ = flag:chronomancy # TODO: Chronomancy flag check
                    $SPELL$ = flag:divine_storm
                    $SPELL$ = flag:judgement
                }
            } # No such thing as stacks
            always = no
        }
        trigger_else_if = {
            limit = {
                $SPELL$ = flag:summon_fire_elemental
                $RANK$ = 1
            } # Max 1 stack
            $TARGET$ = { has_character_modifier = wc_summon_fire_elemental_modifier }
        }
        trigger_else_if = {
            limit = {
                $SPELL$ = flag:summon_fire_elemental
                $RANK$ >= 2
            } # Max 1 stack
            OR = {
                $TARGET$.holder ?= { has_character_flag = has_fire_elemental_maa }
                $TARGET$.liege ?= { has_character_flag = has_fire_elemental_maa }
            }
        }
        trigger_else_if = {
            limit = {
                $SPELL$ = flag:lava_lash
            } # 3 stacks
            $TARGET$.title_province = { has_variable = lava_lash_3 }
        }
        trigger_else_if = {
            limit = {
                $SPELL$ = flag:exorcism
            } # 3 stacks
            $TARGET$ = { has_variable = exorcism_3 }
        }
        trigger_else_if = {
            limit = {
                $SPELL$ = flag:backdraft
                $RANK$ <= 2
            } # Max 1 stack
            $TARGET$.title_province = { has_variable = backdraft_monitor }
        }
        trigger_else_if = {
            limit = {
                $SPELL$ = flag:backdraft
                $RANK$ = 3
            } # Max 1 stack
            $TARGET$ = { has_variable = backdraft_monitor }
        }
        trigger_else_if = {
            limit = {
                $SPELL$ = flag:flame_wall
            } # Max 1 stack
            OR = {
                $TARGET$ = { has_variable = flame_wall_remainder }
                $TARGET$.army_commander = { has_character_modifier = wc_flame_wall_good_modifier }
                $TARGET$.army_commander = { has_character_modifier = wc_flame_wall_bad_modifier }
            }
        }
		trigger_else_if = {
			limit = {
				OR = {
					$SPELL$ = flag:flame_shock
					$SPELL$ = flag:scorch
				}
			} # worst trait
			$TARGET$ = { has_trait = burned_3 }
		}
		trigger_else_if = {
			limit = {
				OR = {
					$SPELL$ = flag:frostbolt
				}
			} # worst trait
			$TARGET$ = { has_character_modifier = wc_frostbolt_modifier }
		}
		trigger_else_if = {
			limit = {
				$SPELL$ = flag:burnout
			} # Max 1 stack
			OR = {
				has_character_modifier = wc_burnout_modifier 
				has_character_modifier = wc_burnout_good_modifier 
				$TARGET$ = { has_character_modifier = wc_burnout_modifier }
				$TARGET$ = { has_character_modifier = wc_burnout_good_modifier }
			}
		}
		trigger_else_if = {
			limit = {
				$SPELL$ = flag:cauterize_wound
			} # worst trait
			$TARGET$ = { has_character_modifier = wc_cauterized_wound_modifier }
		}
		trigger_else_if = {
			limit = {
				$SPELL$ = flag:vernal_solstice
			}
			$TARGET$ = {
				OR = {
					any_de_jure_county = {
						has_county_modifier = wc_vernal_solstice_modifier
					}
					any_de_jure_county = {
						has_county_modifier = wc_vernal_solstice_cooldown_modifier
					}
				}
			}
		}
		trigger_else_if = {
			limit = {
				$SPELL$ = flag:polymorph
			} # worst trait
			$TARGET$ = { has_trait = polymorph }
		}
		trigger_else_if = {
			limit = {
				$SPELL$ = flag:counterspell
			} # worst trait
			$TARGET$ = { has_character_modifier = wc_counterspell_modifier }
		}
		trigger_else_if = {
			limit = {
				$SPELL$ = flag:pyroblast
			}
			AND = {
				$TARGET$.army_commander = { has_trait = burned_3 }
				$TARGET$.army_owner = {
					NOT = {
						any_knight = {
							exists = knight_army
							knight_army = $TARGET$
							NOT = {
								has_trait = burned_3
							}
						}
					}
				}
			}
		}
		trigger_else_if = {
			limit = {
				$SPELL$ = flag:flamestrike
			}
			NOT = {
				$TARGET$ = {
					NOT = {
						any_de_jure_county = {
							has_county_modifier = wc_flamestrike_modifier
						}
					}
				}
			}
		}
		trigger_else_if = {
			limit = {
				$SPELL$ = flag:blizzard
			}
			NOT = {
				$TARGET$ = {
					NOT = {
						any_de_jure_county = {
							has_county_modifier = wc_blizzard_county_modifier
						}
					}
				}
			}
		}
		trigger_else_if = {
			limit = {
				$SPELL$ = flag:fire_shield
			}
			$TARGET$ = {
				has_character_modifier = wc_fire_shield_modifier
			}
		}
		trigger_else_if = {
			limit = {
				$SPELL$ = flag:frost_armor
			}
			$TARGET$ = {
				has_character_modifier = wc_frost_armor_modifier
				has_trait = ice_block
			}
		}
		trigger_else_if = {
			limit = {
				$SPELL$ = flag:frostfire_bolt
			}
			OR = {
				$TARGET$ = { has_variable = frostfire_bolt_remainder }
				$TARGET$.army_commander = { has_character_modifier = wc_frostfire_bolt_good_modifier }
				$TARGET$.army_commander = { has_character_modifier = wc_frostfire_bolt_bad_modifier }
			}
		}
		trigger_else_if = {
			limit = {
				$SPELL$ = flag:frost_nova
			}
			OR = {
				$TARGET$ = { has_variable = frost_nova_remainder }
				$TARGET$.army_commander = { has_character_modifier = wc_frost_nova_modifier }
			}
		}
		trigger_else_if = {
			limit = {
				$SPELL$ = flag:scry
			} # worst trait
			$TARGET$ = { has_character_modifier = wc_scry_modifier }
		}
		trigger_else_if = {
			limit = {
				$SPELL$ = flag:haste
			} # worst trait
			$TARGET$ = {
				trigger_if = {
					limit = {
						$TARGET$ = root
					}
					has_character_modifier = wc_haste_modifier
				}
				trigger_else = {
					has_character_modifier = wc_slow_modifier
				}
			}
		}
		trigger_else_if = {
			limit = {
				$SPELL$ = flag:conjure_refreshment
			} # worst trait
			$TARGET$ = {
				OR = {
					AND = {
						has_character_modifier = wc_conjure_food_modifier
						has_character_modifier = wc_conjure_drink_modifier
					}
					has_character_modifier = wc_conjure_feast_modifier
				}
			}
		}
		trigger_else_if = {
			limit = {
				$SPELL$ = flag:spellsteal
			} # worst trait
			$TARGET$ = {
				target_and_root_has_modifier_trigger = { MODIFIER = wc_summon_fire_elemental_modifier }
				target_and_root_has_modifier_trigger = { MODIFIER = wc_empowered_fire_elemental_modifier }
				target_and_root_has_modifier_trigger = { MODIFIER = wc_animate_rage_modifier }
				target_and_root_has_modifier_trigger = { MODIFIER = wc_backdraft_proc }
				target_and_root_has_modifier_trigger = { MODIFIER = wc_flame_wall_good_modifier }
				target_and_root_has_modifier_trigger = { MODIFIER = wc_pyromania_modifier }
				target_and_root_has_modifier_trigger = { MODIFIER = wc_cauterized_wound_modifier }
				target_and_root_has_modifier_trigger = { MODIFIER = wc_counterspell_modifier }
				target_and_root_has_modifier_trigger = { MODIFIER = wc_scry_modifier }
				target_and_root_has_modifier_trigger = { MODIFIER = wc_haste_modifier }
				target_and_root_has_modifier_trigger = { MODIFIER = wc_conjure_food_modifier }
				target_and_root_has_modifier_trigger = { MODIFIER = wc_conjure_drink_modifier }
				target_and_root_has_modifier_trigger = { MODIFIER = wc_conjure_feast_modifier }
				target_and_root_has_modifier_trigger = { MODIFIER = wc_fire_shield_modifier }
				target_and_root_has_modifier_trigger = { MODIFIER = wc_frostfire_bolt_good_modifier }
				target_and_root_has_modifier_trigger = { MODIFIER = wc_frost_armor_modifier }
			}
		}
		trigger_else_if = {
			limit = {
				$SPELL$ = flag:pyroblast
			}
			AND = {
				$TARGET$.army_commander = { has_trait = burned_3 }
				$TARGET$.army_owner = {
					NOT = {
						any_knight = {
							exists = knight_army
							knight_army = $TARGET$
							NOT = {
								has_trait = burned_3
							}
						}
					}
				}
			}
		}
		trigger_else_if = {
			limit = {
				$SPELL$ = flag:flamestrike
			}
			NOT = {
				$TARGET$ = {
					NOT = {
						any_de_jure_county = {
							has_county_modifier = wc_flamestrike_modifier
						}
					}
				}
			}
		}
		trigger_else_if = {
			limit = {
				$SPELL$ = flag:blizzard
			}
			NOT = {
				$TARGET$ = {
					NOT = {
						any_de_jure_county = {
							has_county_modifier = wc_blizzard_county_modifier
						}
					}
				}
			}
		}
		trigger_else_if = {
			limit = {
				$SPELL$ = flag:fire_shield
			}
			$TARGET$ = {
				has_character_modifier = wc_fire_shield_modifier
			}
		}
		trigger_else_if = {
			limit = {
				$SPELL$ = flag:frost_armor
			}
			$TARGET$ = {
				has_character_modifier = wc_frost_armor_modifier
				has_trait = ice_block
			}
		}
		trigger_else_if = {
			limit = {
				$SPELL$ = flag:frostfire_bolt
			}
			OR = {
				$TARGET$ = { has_variable = frostfire_bolt_remainder }
				$TARGET$.army_commander = { has_character_modifier = wc_frostfire_bolt_good_modifier }
				$TARGET$.army_commander = { has_character_modifier = wc_frostfire_bolt_bad_modifier }
			}
		}
		trigger_else_if = {
			limit = {
				$SPELL$ = flag:frost_nova
			}
			OR = {
				$TARGET$ = { has_variable = frost_nova_remainder }
				$TARGET$.army_commander = { has_character_modifier = wc_frost_nova_modifier }
			}
		}
		trigger_else_if = {
			limit = {
				$SPELL$ = flag:evocation
			}
			$TARGET$ = { has_province_modifier = wc_evocation_province_modifier }
		}
		trigger_else_if = {
			limit = {
				$SPELL$ = flag:arcane_dome
			}
			$TARGET$ = { has_county_modifier = wc_arcane_dome_county_modifier }
		}
        trigger_else_if = { # FOR DISPELS
			limit = {
				spell_is_dispel_type_trigger = { SPELL = $SPELL$ }
			}
			$TARGET$ = { has_character_flag = wc_recently_dispelled_flag }
		}
        trigger_else_if = {
			limit = {
				$SPELL$ = flag:holy_fire
			}
			$TARGET$ = {
				has_character_modifier = wc_holy_fire_modifier
			}
		}
        trigger_else_if = {
			limit = {
				$SPELL$ = flag:lightwell
			}
			$TARGET$ = {
				has_character_modifier = wc_lightwell_modifier
			}
		}
        trigger_else_if = {
            limit = {
                $SPELL$ = flag:avenging_wrath
            }
            $TARGET$ = {
                has_trait = holy_wrath
            }
        }
		trigger_else = {
			always = yes
		}
	}
}

target_and_root_has_modifier_trigger = {
	AND = {
		has_character_modifier = $MODIFIER$
		root = {
			has_character_modifier = $MODIFIER$
		}
	}
}

spell_target_is_character_list_trigger = { # Multiple characters
    #OR = {
    AND = { $SPELL$ = flag:rebuke $RANK_VALUE$ = 2 }
    #}
}

spell_target_is_province_or_title_trigger = { # One title
    OR = {							# Works for ranks 2 AND 3
        AND = { $SPELL$ = flag:summon_fire_elemental $RANK_VALUE$ >= 2  }
        AND = { $SPELL$ = flag:lava_lash $RANK_VALUE$ = 0 }
        AND = { $SPELL$ = flag:backdraft $RANK_VALUE$ = 1 }
        AND = { $SPELL$ = flag:vernal_solstice $RANK_VALUE$ = 0 }
        AND = { $SPELL$ = flag:flamestrike $RANK_VALUE$ = 0 }
        AND = { $SPELL$ = flag:blizzard $RANK_VALUE$ = 0 }
        AND = { $SPELL$ = flag:evocation $RANK_VALUE$ = 0 }
        AND = { $SPELL$ = flag:arcane_dome $RANK_VALUE$ = 0 }
        AND = { $SPELL$ = flag:consecration $RANK_VALUE$ = 0 }
        AND = { $SPELL$ = flag:rebuke $RANK_VALUE$ = 3 }
    }
}

spell_target_is_province_or_title_list_trigger = { # Multiple titles
    OR = {
        AND = { $SPELL$ = flag:backdraft $RANK_VALUE$ >= 2 }
        AND = { $SPELL$ = flag:blessed_bastion $RANK_VALUE$ = 0 }
    }
}

spell_target_is_character_trigger = { # One character
    OR = {
        AND = { $SPELL$ = flag:dispel $RANK_VALUE$ = 0 }
        AND = { $SPELL$ = flag:flame_shock $RANK_VALUE$ = 0 }
        AND = { $SPELL$ = flag:burnout $RANK_VALUE$ = 0 }
        AND = { $SPELL$ = flag:planar_fire $RANK_VALUE$ = 0 }
        AND = { $SPELL$ = flag:cauterize_wound $RANK_VALUE$ = 0 }
        AND = { $SPELL$ = flag:summon_fire_elemental $RANK_VALUE$ = 1 }
        AND = { $SPELL$ = flag:polymorph $RANK_VALUE$ = 0 }
        AND = { $SPELL$ = flag:counterspell $RANK_VALUE$ = 0 }
        AND = { $SPELL$ = flag:spellsteal $RANK_VALUE$ = 0 }
        AND = { $SPELL$ = flag:scry $RANK_VALUE$ = 0 }
        AND = { $SPELL$ = flag:haste $RANK_VALUE$ = 0 }
        AND = { $SPELL$ = flag:conjure_refreshment $RANK_VALUE$ > 0 }
        AND = { $SPELL$ = flag:chronomancy $RANK_VALUE$ = 0 }
        AND = { $SPELL$ = flag:scorch $RANK_VALUE$ = 0 }
        AND = { $SPELL$ = flag:fire_shield $RANK_VALUE$ = 0 }
        AND = { $SPELL$ = flag:frostbolt $RANK_VALUE$ = 0 }
        AND = { $SPELL$ = flag:frost_armor $RANK_VALUE$ = 0 }
        AND = { $SPELL$ = flag:flash_of_light $RANK_VALUE$ >= 1 }
        AND = { $SPELL$ = flag:lightwell $RANK_VALUE$ = 0  }
        AND = { $SPELL$ = flag:holy_fire $RANK_VALUE$ = 0  }
        AND = { $SPELL$ = flag:bless $RANK_VALUE$ >= 1 }
        AND = { $SPELL$ = flag:rebuke $RANK_VALUE$ = 1 }
        AND = { $SPELL$ = flag:avenging_wrath $RANK_VALUE$ = 0 }
        AND = { $SPELL$ = flag:judgement $RANK_VALUE$ = 0 }
        AND = { $SPELL$ = flag:divine_shield $RANK_VALUE$ = 0 }
        AND = { $SPELL$ = flag:exorcism $RANK_VALUE$ = 0 }
        AND = { $SPELL$ = flag:salvation $RANK_VALUE$ = 0 }
        AND = { $SPELL$ = flag:divine_storm $RANK_VALUE$ = 0 }
        AND = { $SPELL$ = flag:expulsion $RANK_VALUE$ = 0 }
    }
}

### for spells that target title, must specify which kind of title and rak.
spell_target_title_subtype_province_trigger = {
	OR = {
		AND = { $SPELL$ = flag:summon_fire_elemental $RANK_VALUE$ >= 2  }
		AND = { $SPELL$ = flag:lava_lash $RANK_VALUE$ = 0 }
		AND = { $SPELL$ = flag:backdraft $RANK_VALUE$ <= 2 }
		AND = { $SPELL$ = flag:evocation $RANK_VALUE$ = 0 }
	}
}

spell_target_title_subtype_county_trigger = {
    OR = {
        AND = { $SPELL$ = flag:backdraft $RANK_VALUE$ = 3 }
        AND = { $SPELL$ = flag:rebuke $RANK_VALUE$ = 3 }
        AND = { $SPELL$ = flag:arcane_dome $RANK_VALUE$ = 0 }
    }
}

spell_target_title_subtype_duchy_trigger = {
	OR = {
		AND = { $SPELL$ = flag:vernal_solstice $RANK_VALUE$ = 0 }		
		AND = { $SPELL$ = flag:flamestrike $RANK_VALUE$ = 0 }
		AND = { $SPELL$ = flag:blizzard $RANK_VALUE$ = 0 }
	}
}

# Use this if all ranks only target self
# For rank value use spell_target_is_self_trigger
spell_target_is_only_self_trigger = {
    OR = {
        $SPELL$ = flag:planar_fire
        $SPELL$ = flag:divine_storm
        $SPELL$ = flag:chronomancy
    }
}

# Use this if specific ranks only target self
spell_target_is_self_trigger = {
    $SPELL$ = flag:poop # To prevent errors
    $RANK_VALUE$ = 5
    # OR = {
    # }
}

## can be both friendly and enemy army but if they are in both triggers, they both must have different effects
spell_target_is_friendly_army_trigger = {
    OR = {
        AND = { $SPELL$ = flag:flame_wall $RANK_VALUE$ = 0 }
        AND = { $SPELL$ = flag:frostfire_bolt $RANK_VALUE$ = 0 }
    }
}

spell_target_is_enemy_army_trigger = {
    OR = {
        AND = { $SPELL$ = flag:flame_wall $RANK_VALUE$ = 0 }
        AND = { $SPELL$ = flag:pyroblast $RANK_VALUE$ = 0 }
        AND = { $SPELL$ = flag:frostfire_bolt $RANK_VALUE$ = 0 }
        AND = { $SPELL$ = flag:frost_nova $RANK_VALUE$ = 0 }
    }
}

## ELEMENTAL SPELLS GO HERE
spell_is_elemental_trigger = {
    OR = {
        $SPELL$ = flag:summon_fire_elemental
        $SPELL$ = flag:lava_lash
        $SPELL$ = flag:backdraft
        $SPELL$ = flag:flame_wall
        $SPELL$ = flag:flame_shock
        $SPELL$ = flag:burnout
        $SPELL$ = flag:planar_fire
        $SPELL$ = flag:cauterize_wound
        $SPELL$ = flag:vernal_solstice
    }
}

spell_is_arcane_chronomancy_trigger = {
    OR = {
        $SPELL$ = flag:haste
        $SPELL$ = flag:chronomancy
    }
}

spell_is_arcane_fire = {
    OR = {
        $SPELL$ = flag:scorch
        $SPELL$ = flag:fire_shield
        $SPELL$ = flag:pyroblast
        $SPELL$ = flag:flamestrike
        $SPELL$ = flag:frostfire_bolt
    }
}


spell_is_arcane_frost = {
    OR = {
        $SPELL$ = flag:frostbolt
        $SPELL$ = flag:frost_nova
        $SPELL$ = flag:frost_armor
        $SPELL$ = flag:blizzard
        $SPELL$ = flag:frostfire_bolt
    }
}


## if it's not either or both, you don't need to put. just wont get opinion modifier/add opinion modifier manually in spell
spell_is_harmful_trigger = { # To the recipient(s)
    OR = {
        $SPELL$ = flag:lava_lash
        $SPELL$ = flag:flame_shock
        $SPELL$ = flag:burnout
        $SPELL$ = flag:polymorph
        $SPELL$ = flag:scorch
        $SPELL$ = flag:pyroblast
        $SPELL$ = flag:flamestrike
        $SPELL$ = flag:frostbolt
        $SPELL$ = flag:frost_nova
        $SPELL$ = flag:blizzard
        $SPELL$ = flag:spellsteal
        $SPELL$ = flag:scorch
        $SPELL$ = flag:pyroblast
        $SPELL$ = flag:flamestrike
        $SPELL$ = flag:frostbolt
        $SPELL$ = flag:frost_nova
        $SPELL$ = flag:blizzard
        $SPELL$ = flag:holy_fire
        $SPELL$ = flag:judgement
        $SPELL$ = flag:exorcism
    }
}

spell_is_helpful_trigger = { # To the recipient(s)
    OR = {
        $SPELL$ = flag:summon_fire_elemental
        $SPELL$ = flag:cauterize_wound
        $SPELL$ = flag:vernal_solstice
        $SPELL$ = flag:counterspell
        $SPELL$ = flag:fire_shield
        $SPELL$ = flag:frost_armor
        $SPELL$ = flag:scry
        $SPELL$ = flag:conjure_refreshment
        $SPELL$ = flag:fire_shield
        $SPELL$ = flag:frost_armor
        $SPELL$ = flag:evocation
        $SPELL$ = flag:arcane_dome
        $SPELL$ = flag:dispel
        $SPELL$ = flag:flash_of_light
        $SPELL$ = flag:lightwell
        $SPELL$ = flag:bless
        $SPELL$ = flag:rebuke
        $SPELL$ = flag:divine_shield
        $SPELL$ = flag:expulsion
        $SPELL$ = flag:salvation
    }
}

## IF YOUR SPELL HAS RANKS IT GOES HERE
spell_has_ranks_trigger = {
    OR = {
        $SPELL$ = flag:summon_fire_elemental
        $SPELL$ = flag:backdraft
        $SPELL$ = flag:conjure_refreshment
        $SPELL$ = flag:bless
        $SPELL$ = flag:rebuke
        $SPELL$ = flag:flash_of_light
    }
}

spell_is_ritual_trigger = { # RITUALS GO HERE
    OR = {
        $SPELL$ = flag:planar_fire
        $SPELL$ = flag:vernal_solstice
        $SPELL$ = flag:evocation
        $SPELL$ = flag:arcane_dome
        $SPELL$ = flag:salvation
        $SPELL$ = flag:divine_storm
        $SPELL$ = flag:blessed_bastion
    }
}

## SPECIAL SPELL TRIGGERS. IF YOUR SPELL HAS NO SPECIAL TRIGGERS TO CAST, JUST DO ALWAYS = YES ##
## ADD A CUSTOM DESCRIPTION FOR THE PLAYER IF NEEDED. ##
## IF THE TRIGGER REFERENCES THE TARGET, PUT THE TRIGGER IN A SUB TRIGGER LIKE satisfy_spell_triggers_character TO AVOID ERROR SPAMMING ##
## CAN ALSO USE all_requirements_for_casting_satisfied_trigger IF YOU WANT IT TO CALL AFTER THE TARGET & SPELL IS SELECTED ##
satisfy_spell_triggers = {
    trigger_if = { # For spells that have no special triggers
        limit = {
            OR = {
                $SPELL$ = flag:summon_fire_elemental
                $SPELL$ = flag:lava_lash
                $SPELL$ = flag:backdraft
                $SPELL$ = flag:flame_shock
                $SPELL$ = flag:planar_fire
                $SPELL$ = flag:vernal_solstice
                $SPELL$ = flag:polymorph
                $SPELL$ = flag:counterspell
                $SPELL$ = flag:scorch
                $SPELL$ = flag:flamestrike
                $SPELL$ = flag:fire_shield
                $SPELL$ = flag:frostfire_bolt
                $SPELL$ = flag:frostbolt
                $SPELL$ = flag:frost_nova
                $SPELL$ = flag:frost_armor
                $SPELL$ = flag:blizzard
                $SPELL$ = flag:scry
                $SPELL$ = flag:haste
                $SPELL$ = flag:conjure_refreshment
                $SPELL$ = flag:chronomancy
                $SPELL$ = flag:scorch
                $SPELL$ = flag:flamestrike
                $SPELL$ = flag:fire_shield
                $SPELL$ = flag:frostfire_bolt
                $SPELL$ = flag:frostbolt
                $SPELL$ = flag:frost_nova
                $SPELL$ = flag:frost_armor
                $SPELL$ = flag:blizzard
                $SPELL$ = flag:evocation
                $SPELL$ = flag:arcane_dome
                $SPELL$ = flag:lightwell
                $SPELL$ = flag:holy_fire
                $SPELL$ = flag:consecration
                $SPELL$ = flag:rebuke
                $SPELL$ = flag:avenging_wrath
                $SPELL$ = flag:divine_shield
                $SPELL$ = flag:divine_storm
                $SPELL$ = flag:blessed_bastion
            }
        }
        always = yes
    }
    trigger_else_if = { # You need to be at war to cast this spell
        limit = {
            OR = {
                $SPELL$ = flag:flame_wall
                $SPELL$ = flag:pyroblast
            }
        }
        is_at_war = yes
    }
    trigger_else_if = {
        limit = {
            trigger_if = {
                limit = { exists = var:spell_recipient }
                var:spell_recipient ?= {
                    is_character_trigger = yes
                }
            }
            trigger_if = {
                limit = { exists = var:original_recipient }
                var:original_recipient ?= {
                    is_character_trigger = yes
                }
            }
        }
        satisfy_spell_triggers_character = { SPELL = $SPELL$ }
    }
    trigger_else = { always = no }
}

# If your spell CANT be learned with Arcane's 'Spell Hack'
spell_cant_be_hacked_trigger = {
    custom_description = {
        text = spell_cant_be_hacked_trigger
        OR = {
            # Can't steal dispels
            spell_is_dispel_type_trigger = { SPELL = $SPELL$ }
            # No rituals
            spell_is_ritual_trigger = { SPELL = $SPELL$ }
            # No arcane spells... just learn it yourself bozo
            AND = {
                has_global_variable_list = order_spells
                any_in_global_list = {
                    variable = order_spells
                    this = $SPELL$
                }
            }
            # Can't learn a spell you already know
            is_known_spell_trigger = {
                SPELL = scope:spell
            }
            # Any other exceptions should go here !
        }
    }
}
# If your spell is a 'dispel' type of spell
spell_is_dispel_type_trigger = {
    OR = {
        $SPELL$ = flag:flash_of_light
        $SPELL$ = flag:dispel
     	$SPELL$ = flag:expulsion
    # 	$SPELL$ = flag:natures_cure
    # 	$SPELL$ = flag:invigorate
    # 	$SPELL$ = flag:coagulation
    # 	$SPELL$ = flag:stonemend
    # 	$SPELL$ = flag:drain_essence
    # 	$SPELL$ = flag:mania
    }
}

satisfy_spell_triggers_character = {
    trigger_if = { # The target must be landed
        limit = {
            #OR = {
            $SPELL$ = flag:flame_shock
            #}
        }
        OR = {
            var:spell_recipient ?= {
                is_landed = yes
            }
            var:original_recipient ?= {
                is_landed = yes
            }
        }
    }

    trigger_else_if = { # Target must have some kind of positive magic modifier
        limit = {
            #OR = {
            $SPELL$ = flag:spellsteal
            #}
        }
        custom_tooltip = {
            text = wc_spell_has_modifier
            OR = {
                var:spell_recipient ?= { has_character_modifier = wc_summon_fire_elemental_modifier }
                var:original_recipient ?= { has_character_modifier = wc_summon_fire_elemental_modifier }
                var:spell_recipient ?= { has_character_modifier = wc_empowered_fire_elemental_modifier }
                var:original_recipient ?= { has_character_modifier = wc_empowered_fire_elemental_modifier }
                var:spell_recipient ?= { has_character_modifier = wc_animate_rage_modifier }
                var:original_recipient ?= { has_character_modifier = wc_animate_rage_modifier }
                var:spell_recipient ?= { has_character_modifier = wc_backdraft_proc }
                var:original_recipient ?= { has_character_modifier = wc_backdraft_proc }
                var:spell_recipient ?= { has_character_modifier = wc_flame_wall_good_modifier }
                var:original_recipient ?= { has_character_modifier = wc_flame_wall_good_modifier }
                var:spell_recipient ?= { has_character_modifier = wc_pyromania_modifier }
                var:original_recipient ?= { has_character_modifier = wc_pyromania_modifier }
                var:spell_recipient ?= { has_character_modifier = wc_cauterized_wound_modifier }
                var:original_recipient ?= { has_character_modifier = wc_cauterized_wound_modifier }
                var:spell_recipient ?= { has_character_modifier = wc_counterspell_modifier }
                var:original_recipient ?= { has_character_modifier = wc_counterspell_modifier }
                var:spell_recipient ?= { has_character_modifier = wc_scry_modifier }
                var:original_recipient ?= { has_character_modifier = wc_scry_modifier }
                var:spell_recipient ?= { has_character_modifier = wc_haste_modifier }
                var:original_recipient ?= { has_character_modifier = wc_haste_modifier }
                var:spell_recipient ?= { has_character_modifier = wc_conjure_food_modifier }
                var:original_recipient ?= { has_character_modifier = wc_conjure_food_modifier }
                var:spell_recipient ?= { has_character_modifier = wc_conjure_drink_modifier }
                var:original_recipient ?= { has_character_modifier = wc_conjure_drink_modifier }
                var:spell_recipient ?= { has_character_modifier = wc_conjure_feast_modifier }
                var:original_recipient ?= { has_character_modifier = wc_conjure_feast_modifier }
                var:spell_recipient ?= { has_character_modifier = wc_fire_shield_modifier }
                var:original_recipient ?= { has_character_modifier = wc_fire_shield_modifier }
                var:spell_recipient ?= { has_character_modifier = wc_frostfire_bolt_good_modifier }
                var:original_recipient ?= { has_character_modifier = wc_frostfire_bolt_good_modifier }
                var:spell_recipient ?= { has_character_modifier = wc_frost_armor_modifier }
                var:original_recipient ?= { has_character_modifier = wc_frost_armor_modifier }
                var:spell_recipient ?= { has_character_modifier = wc_lightwell_modifier }
                var:original_recipient ?= { has_character_modifier = wc_lightwell_modifier }
            }
        }
    }
    trigger_if = { # The target must be landed
        limit = {
            #OR = {
            $SPELL$ = flag:flame_shock
            #}
        }
        OR = {
            var:spell_recipient ?= {
                is_landed = yes
            }
            var:original_recipient ?= {
                is_landed = yes
            }
        }
    }
    trigger_else_if = { # You can't cast on yourself
        limit = {
            OR = {
                $SPELL$ = flag:burnout
                $SPELL$ = flag:bless
                $SPELL$ = flag:exorcism
                $SPELL$ = flag:salvation
            }
        }
        custom_tooltip = {
            text = wc_spell_is_self
            NOR = {
                var:spell_recipient ?= root
                var:original_recipient ?= root
            }
        }
    }
    trigger_else_if = { # Target must have some kind of phyiscal injury
        limit = {
            #OR = {
            $SPELL$ = flag:cauterize_wound
            #}
        }
        custom_tooltip = {
            text = target_has_valid_debuff_trigger
            OR = {
                AND = {
                    exists = var:spell_recipient
                    OR = {
                        var:spell_recipient = { target_has_injury_trigger = yes }
                        var:spell_recipient = { target_has_magic_injury_trigger = yes }
                    }
                }
                AND = {
                    exists = var:original_recipient
                    OR = {
                        var:original_recipient = { target_has_injury_trigger = yes }
                        var:original_recipient = { target_has_magic_injury_trigger = yes }
                    }
                }
            }
        }
    }

    trigger_else_if = { # Target must have some kind of phyiscal injury, magic injury, disease
        limit = {
            #OR = {
            $SPELL$ = flag:flash_of_light
            #}
        }
        custom_description = {
            text = target_has_valid_debuff_trigger
            OR = {
                AND = {
                    exists = var:spell_recipient
                    OR = {
                        var:spell_recipient = { target_has_injury_trigger = yes }
                        var:spell_recipient = { target_has_magic_injury_trigger = yes }
                        var:spell_recipient = { target_has_illness_trigger = yes }
                        var:spell_recipient = { target_has_magic_illness_trigger = yes }
                    }
                }
                AND = {
                    exists = var:original_recipient
                    OR = {
                        var:original_recipient = { target_has_injury_trigger = yes }
                        var:original_recipient = { target_has_magic_injury_trigger = yes }
                        var:original_recipient = { target_has_illness_trigger = yes }
                        var:original_recipient = { target_has_magic_illness_trigger = yes }
                    }
                }
            }
        }
    }
    trigger_else_if = { # Target must have some kind of negative magic modifier
        limit = {
            #OR = {
            $SPELL$ = flag:dispel
            #}
        }

        custom_description = {
            text = target_has_valid_debuff_trigger
            OR = {
                var:spell_recipient ?= { has_character_modifier = wc_burnout_modifier }
                var:original_recipient ?= { has_character_modifier = wc_burnout_modifier }
                var:spell_recipient ?= { has_character_modifier = wc_frostbolt_modifier }
                var:original_recipient ?= { has_character_modifier = wc_frostbolt_modifier }
                var:spell_recipient ?= { has_character_modifier = wc_blizzard_character_modifier }
                var:original_recipient ?= { has_character_modifier = wc_blizzard_character_modifier }
                var:spell_recipient ?= { has_character_modifier = wc_frost_nova_modifier }
                var:original_recipient ?= { has_character_modifier = wc_frost_nova_modifier }
                var:spell_recipient ?= { has_character_modifier = wc_slow_modifier }
                var:original_recipient ?= { has_character_modifier = wc_slow_modifier }
                var:spell_recipient ?= { has_character_modifier = wc_arcane_dome_character_modifier }
                var:original_recipient ?= { has_character_modifier = wc_arcane_dome_character_modifier }
                var:spell_recipient ?= { has_character_modifier = wc_holy_fire_modifier }
                var:original_recipient ?= { has_character_modifier = wc_holy_fire_modifier }
                var:spell_recipient ?= { has_character_modifier = wc_exorcism_modifier }
                var:original_recipient ?= { has_character_modifier = wc_exorcism_modifier }
            }
        }
    }
    trigger_else_if = { # Must have a secret
        limit = {
            #OR = {
            $SPELL$ = flag:judgement
            #}
        }
        custom_description = {
            text = has_any_secrets_trigger
            OR = {
                var:spell_recipient ?= { has_any_secrets = yes }
                var:original_recipient ?= { has_any_secrets = yes }
            }
        }
    }
    trigger_else_if = { # Must have a psych illess
        limit = {
            #OR = {
            $SPELL$ = flag:expulsion
            #}
        }
        custom_description = {
            text = target_has_psych_illness_trigger
            OR = {
                AND = {
                    exists = var:spell_recipient
                    var:spell_recipient = { target_has_psych_illness_trigger = yes }
                }
                AND = {
                    exists = var:original_recipient
                    var:original_recipient = { target_has_psych_illness_trigger = yes }
                }
            }
        }
    }
    else = {
        always = no
    }
}

target_has_magic_illness_trigger = {
    custom_description = {
        text = target_has_magic_illness_trigger
        has_trait_with_flag = magic_illness
    }
}

target_has_illness_trigger = { # Works for major illnesses too
    custom_description = {
        text = target_has_illness_trigger
        has_trait_with_flag = illness
    }
}

target_has_major_illness_trigger = {
    custom_description = {
        text = target_has_illness_trigger # TODO: write trigger for this
        has_trait_with_flag = debilitating_illness
    }
}

target_has_injury_trigger = {
    custom_description = {
        text = target_has_injury_trigger
        has_trait_with_flag = injury
    }
}

target_has_major_injury_trigger = { # Works for regular injuries too
    custom_description = {
        text = target_has_major_injury_trigger
        has_trait_with_flag = major_injury
    }
}

target_has_magic_injury_trigger = {
    custom_description = {
        text = target_has_magic_injury_trigger
        has_trait_with_flag = magic_injury
    }
}

target_has_psych_illness_trigger = {
    custom_description = {
        text = target_has_psych_illness_trigger
        has_trait_with_flag = psych_illness
    }
}