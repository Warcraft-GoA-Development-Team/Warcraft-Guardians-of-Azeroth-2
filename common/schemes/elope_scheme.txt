elope = {
	
	skill = intrigue
	desc = elope_desc_general
	hostile = no
	icon = icon_scheme_elope
	
	allow = {
		is_adult = yes
		is_landed = yes
		is_imprisoned = no
		is_travelling = no
		scope:target = {
			is_travelling = no
		}
	}
	
	valid = {
		# Warcraft
		NOT = { is_isolated_from_trigger = { target = scope:target } }
		
		scope:target = {
			is_alive = yes
			is_imprisoned = no
			is_courtier = yes
			NOT = { is_courtier_of = scope:owner }
			could_marry_character_trigger = { CHARACTER = scope:owner }
			has_relation_lover = scope:owner
			in_diplomatic_range = scope:owner
		}
		custom_description = {
			object = scope:target
			text = you_have_been_caught_trying_to_elope_with_target
			scope:target.liege = {
				NOT = {
					has_opinion_modifier = {
						target = scope:owner
						modifier = attempted_elopement_opinion
					}
				}
			}
		}
	}

	valid_agent = {
		# Warcraft
		age >= age_14_value
	}
	
	agent_join_chance = {
		base = 0
		
		# Base Reluctance, including negative AI Energy
		modifier = {
			add = {
				value = -20
				if = {
					limit = {
						ai_energy < 0
					}
					add = {
						value = ai_energy
						multiply = 0.5
					}
				}
			}
			desc = BASE_RELUCTANCE
		}

		#Is Owner sending a gift in the invite interaction?
		modifier = {
			add = bribe_acceptance_value
			exists = scope:gift
			always = scope:gift
			NOT = {
				OR = {
					scope:target = { is_parent_of = root }
					root = { is_parent_of = scope:target }
				}
			}
			desc = "SCHEME_WITH_GIFT"
		}

		#Default Hostile Scheme modifiers
		hostile_scheme_agent_base_join_chance_modifier = yes
	}
	
	base_success_chance = {
		base = 25 #So there is some chance even if their intrigue is stronger than yours
		#Language
		modifier = {
			add = 5
			desc = YOU_SPEAK_THE_LANGUAGE
			scope:owner = { knows_language_of_culture = scope:target.culture }
		}
		
		# Intrigue modifiers
		modifier = {
			add = {
				value = scope:owner.intrigue
				multiply = 2.5
			}
			desc = ELOPE_SUCCESS_OWNER_INTRIGUE
		}
		modifier = {
			add = {
				value = scope:target.intrigue
				multiply = 2.5
			}
			desc = ELOPE_SUCCESS_TARGET_INTRIGUE
		}
		modifier = {
			add = {
				value = scope:target.liege.intrigue
				multiply = -2.5
			}
			desc = ELOPE_SUCCESS_TARGETS_LIEGE_INTRIGUE
		}
		modifier = {
			exists = scope:target.liege.cp:councillor_spymaster
			NOR = {
				scope:target.liege.cp:councillor_spymaster = scope:target
				scope:owner = {
					any_scheme = {
						scheme_target = scope:target
						scheme_is_character_agent = scope:target.liege.cp:councillor_spymaster
					}
				}
			}
			add = {
				value = scope:target.liege.cp:councillor_spymaster.intrigue
				multiply = -2.5
			}
			desc = ELOPE_SUCCESS_TARGETS_LIEGES_SPYMASTER_INTRIGUE
		}

		# Bonus if unimportant target
		modifier = {
			scope:target = {
				NOR = {
					is_of_major_interest_trigger = { CHARACTER = scope:target.liege }
					is_of_minor_interest_trigger = { CHARACTER = scope:target.liege }
				}
			}
			desc = ELOPE_SUCCESS_UNIMPORTANT
			add = 15
		}

		# Diarchs are better at schemes within their liege's realm
		diarch_scheming_within_realm_bonus_modifier = yes

		# Bonus Courtship Perk
		modifier = {
			add = courtship_court_success_chance_bonus_value
			desc = SCHEME_COURTSHIP_PERK
			scope:owner = {
				has_perk = courtship_perk
			}
		}

		# NO Thicker Than Water Perk bonus as the "opponent" in this scheme is not target but target's liege
		
		# Penalty if the relationship is known
		modifier = {
			add = -20
			desc = ELOPE_SUCCESS_TARGETS_LIEGE_KNOWS_ABOUT_RELATIONSHIP
			scope:owner = {
				OR = {
					# There is no secret
					NOT = {
						any_secret = {	
							secret_type = secret_lover
							secret_target = scope:target
						}
					}
					# Liege knows the secret
					any_secret = {
						secret_type = secret_lover
						secret_target = scope:target
						is_known_by = scope:target.liege
					}
				}
			}
		}

		# Penalty if target is imprisoned
		modifier = {
			add = -30
			scope:target = { is_imprisoned = yes }
			desc = ELOPE_SUCCESS_IMPRISONED
		}

		# Penalty if target doesn't like you anymore
		opinion_modifier = {
			trigger = {
				scope:target = {
					opinion = {
						target = scope:owner
						value < 0
					}
				}
			}
			who = scope:target
			opinion_target = scope:owner
			multiplier = 3
		}

		#Family Feud
		house_feud_sway_scheme_success_modifier = yes
	}
	
	agent_success_chance = {
		base = 0
		
		hostile_scheme_agent_success_chance_modifier = yes #Adds a value depending on their "closeness" to target
	}
	
	agent_leave_threshold = -25
		
	cooldown = { years = 10 }
	is_secret = yes
	base_secrecy = 10



	on_ready = {
		scheme_owner = {
			#Do I want to proceed to a roll?
			if = {
				limit = {
					is_ai = no
				}
				trigger_event = elope.0001
			}
			#Jump straight to roll
			else = {
				trigger_event = elope.0002
			}
		}
	}

	on_monthly = {
		hostile_scheme_discovery_chance_effect = yes
		if = {
			limit = {
				NOT = { exists = scope:discovery_event_happening }
			}			
			scheme_owner = {
				trigger_event = {
					on_action = elope_ongoing
					days = { 1 15 }
				}
			}
		}
	}

	on_invalidated = {
		scheme_target = {
			save_scope_as = target
		}
		scheme_owner = {
			save_scope_as = owner
		}
		if = {
			limit = {
				scope:target = { is_alive = no }
			}
			scope:owner = {
				send_interface_toast = {
					title = elope_scheme_invalidated_title
					left_icon = scope:target
					custom_description_no_bullet = {
						object = scope:target
						text = scheme_target_died
					}
				}
			}
		}
		else_if = {
			limit = {
				scope:owner = { 
				 	NOT = { has_relation_lover = scope:target }
				}
			}
			scope:owner = {
				send_interface_toast = {
					title = elope_scheme_invalidated_title
					left_icon = scope:target
					custom_description_no_bullet = {
						object = scope:target
						text = scheme_target_no_longer_lover
					}
				}
			}
		}

		if = {
			limit = {
				scope:target = { is_imprisoned = yes }
			}
			scope:target.imprisoner = {
				save_scope_as = other_imprisoner
			}
			scope:owner = {
				send_interface_toast = {
					title = elope_scheme_invalidated_title
					left_icon = scope:target
					right_icon = scope:other_imprisoner
					custom_description_no_bullet = {
						subject = scope:other_imprisoner
						object = scope:target
						text = scheme_target_imprisoned_by_other
					}
				}
			}
		}
		if = {
			limit = {
				scope:target = {
					is_courtier = no
					exists = var:last_visited_ruler
				}
			}
			scope:target.var:last_visited_ruler = { save_scope_as = target_liege }
			scope:owner = {
				send_interface_toast = {
					title = elope_scheme_invalidated_title
					left_icon = scope:target
					custom_description_no_bullet = {
						subject = scope:target_liege
						object = scope:target
						text = scheme_target_no_longer_courtier
					}
				}
			}
		}
		if = {
			limit = {
				scope:target = {
					is_courtier = no
					NOT = { exists = var:last_visited_ruler }
				}
			}
			scope:owner = {
				send_interface_toast = {
					title = elope_scheme_invalidated_title
					left_icon = scope:target
					custom_description_no_bullet = {
						subject = scope:target
						text = scheme_target_no_longer_courtier_no_var
					}
				}
			}
		}
		if = {
			limit = {
				scope:target = { is_courtier_of = scope:owner }
			}
			scope:owner = {
				send_interface_toast = {
					title = elope_scheme_invalidated_title
					left_icon = scope:target
					custom_description_no_bullet = {
						subject = scope:target
						text = scheme_target_is_your_courtier
					}
				}
			}
		}
		if = {
			limit = {
				scope:target = { is_courtier_of = scope:owner }
			}
			scope:owner = {
				send_interface_toast = {
					title = elope_scheme_invalidated_title
					left_icon = scope:target
					custom_description_no_bullet = {
						subject = scope:target
						text = scheme_target_is_your_courtier
					}
				}
			}
		}
		if = {
			limit = {
				scope:target = { 
					NOT = { in_diplomatic_range = scope:owner } 
				}
			}
			scope:owner = {
				send_interface_toast = {
					title = elope_scheme_invalidated_title
					left_icon = scope:target
					custom_description_no_bullet = {
						object = scope:target
						text = scheme_target_not_in_diplomatic_range
					}
				}
			}
		}
	}
	
	power_per_skill_point = 10.0
	resistance_per_skill_point = 0
	power_per_agent_skill_point = 2
	
	minimum_progress_chance = 60
	maximum_progress_chance = 90
	minimum_success = 5
	maximum_secrecy = 95
	maximum_success = 95
	
	success_desc = "ELOPE_SUCCESS_DESC"
	#discovery_desc = "ELOPE_DISCOVERY_DESC"

	freeze_scheme_when_traveling = yes
	freeze_scheme_when_traveling_target = yes
}
