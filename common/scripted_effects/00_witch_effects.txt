###CHILD CONVERSION EFFECTS###

child_witch_conversion_success_effect = {
	scope:child = {
		give_witch_secret_or_trait_effect = yes
		house = {
			house_head = {
				add_to_list = witch_message
			}
		}
		every_parent = {
			limit = {
				is_ruler = yes
				is_witch_trigger = yes
			}
			add_to_list = witch_message
		}
		random_relation = {
			type = guardian
			add_to_list = witch_message
			save_scope_as = guardian
		}
	}
	every_in_list = {
		list = witch_message
		limit = {
			NOT = { this = scope:child }
		}
		save_scope_as = witch_knower
		send_interface_message = {
			type = event_generic_good
			title = witch.1001.message
			left_icon = scope:child
			scope:child = {
				if = {
					limit = { has_trait = witch }
					show_as_tooltip = { add_trait = witch }
				}
				else_if = {
					limit = { exists = scope:witch_secret }
					scope:witch_secret = { reveal_to = scope:witch_knower }
				}
				add_opinion = {
					target = PREV
					modifier = impressed_opinion
					opinion = 20
				}
			}
			random_secret = {
				limit = {
					NOT = { is_known_by = scope:child }
					secret_type = secret_witch
				}
				reveal_to = scope:child
			}
		}
	}
}

child_witch_conversion_failure_effect = {
	scope:guardian = {
		send_interface_toast = {
			title = child_witch_conversion_failure_effect.desc
			left_icon = scope:child
		}
		scope:child = {
		 	add_opinion = {
				target = scope:guardian
				modifier = suspicion_opinion
				opinion = -15
			}
		}
		scope:guardian = {
			if = {
				limit = { this = root }
				hidden_effect = {
					add_opinion = {
						target = scope:child
						modifier = disappointed_opinion
						opinion = -15
					}
				}
			}
			else = {
				add_opinion = {
					target = scope:child
					modifier = disappointed_opinion
					opinion = -15
				}
			}
		}
	}
}

child_witch_conversion_critical_failure_effect = {
	scope:guardian = {
		send_interface_toast = {
			title = child_witch_conversion_critical_failure_effect.desc
			left_icon = scope:child

			scope:child = {
			 	add_opinion = {
					target = scope:guardian
					modifier = hate_opinion
					opinion = -30
				}
			}
		}
		scope:child = {
			scope:guardian = {
				random_secret = {
					limit = {
						secret_type = secret_witch
					}
					save_scope_as = guardian_witch_secret
					if = {
						limit = { NOT = { is_known_by = scope:child } }
						reveal_to = scope:child
					}
					if = {
						limit = {
							exists = scope:child.liege
							NOR = {
								is_known_by = scope:child.liege
								scope:child = { is_ruler = yes }
							}
						}
						scope:child.liege = {
							send_interface_message = {
								title = child_witch_conversion_critical_failure_effect.liege.desc
								left_icon = scope:guardian
								right_icon = scope:child
								scope:guardian_witch_secret = { reveal_to = scope:child.liege }
							}
						}
					}
				}
			}
		}
		scope:guardian = {
			if = {
				limit = { this = root }
				hidden_effect = {
					add_opinion = {
						target = scope:child
						modifier = hate_opinion
						opinion = -30
					}
				}
			}
			else = {
				add_opinion = {
					target = scope:child
					modifier = hate_opinion
					opinion = -30
				}
			}
		}
	}
}

#Creates a witch and saves it as created_witch
#WHO is character who will interact with the witch and TEMPLATE is the character whose culture should be used
create_witch_effect = {
	#Gender
	random_list = {
		50 = { #Female
			modifier = {
				$WHO$ = { is_attracted_to_women = yes }
				add = 30
			}
			dummy_female = { save_temporary_scope_as = witch_gender }
		}
		50 = { #Male
			modifier = {
				$WHO$ = { is_attracted_to_men = yes }
				add = 30
			}
			dummy_male = { save_temporary_scope_as = witch_gender }
		}
	}

	#Create them
	create_character = {
		location = $WHO$.capital_province
		culture = $WHO$.culture
		faith = $WHO$.faith
		gender = scope:witch_gender
		template = witchy_template
		random_traits = no

		after_creation = {
			give_witch_secret_or_trait_effect = yes

			#Sometimes adjust sexuality to create compatibility with WHO
			if = {
				limit = {
					$WHO$ = { is_attracted_to_gender_of = prev }
					NOT = { is_attracted_to_gender_of = $WHO$ }
				}
				random = {
					chance = 65
					set_sexuality = bisexual
				}
			}
		}
		
		save_scope_as = created_witch
	}
}

