murder_method_selection = {
	first_valid_on_action = {
		travel_murder_method_selection
		infant_murder_method_selection
		child_murder_method_selection
		incapable_murder_method_selection
		dungeon_murder_method_selection
		house_arrest_murder_method_selection
		standard_murder_method_selection
	}
}

travel_murder_method_selection = {
	trigger = {
		scope:scheme.scheme_target = {
			is_travelling = yes 
		}
	}
	first_valid = {
		murder_outcome.0107 # Sunken ship
		murder_outcome.0102 # Hired Thugs
	}
} 

infant_murder_method_selection = {
	trigger = {
		scope:scheme.scheme_target = {
			# Warcraft
			age_in_relation_to_humans_less_than_trigger = { age = 3 }
		}
	}
	random_events = {
		100 = murder_outcome.0202 # Infant Stabbed to Death
		100 = murder_outcome.0203 # Leave venomous creepy crawly in child's cradle
	}
}

child_murder_method_selection = {
	trigger = {
		scope:scheme.scheme_target = {
			is_adult = no
		}
	}
	random_events = {
		100 = murder_outcome.0201 # Leave a child in the forest
		100 = murder_outcome.0204 # Poisoned candy
		100 = murder_outcome.0205 # Child pushed to death
	}
}

incapable_murder_method_selection = {
	trigger = {
		scope:scheme.scheme_target = {
			has_trait = incapable
		}
	}
	random_events = {
		100 = murder_outcome.0401 #Strangling Incapable
	}
}

dungeon_murder_method_selection = {
	trigger = {
		scope:scheme.scheme_target = {
			is_in_prison_type = dungeon
		}
	}
	random_events = {
		100 = murder_outcome.0301 #Beat to death in a dungeon
	}
}


house_arrest_murder_method_selection = {
	trigger = {
		scope:scheme.scheme_target = {
			is_in_prison_type = house_arrest
		}
	}
	random_events = {
		100 = murder_outcome.0302
	}
}


standard_murder_method_selection = {
	random_events = {
		100 = murder_outcome.0101 # Hire an assassin
		100 = murder_outcome.0102 # Hire some thugs
		100 = murder_outcome.0103 # Poison food at a feast
		100 = murder_outcome.0104 # Release a creepy-crawly in their room
		100 = murder_outcome.0105 # A riled-up mob
		100 = murder_outcome.0106 # Immurement
		100 = murder_outcome.0107 # Sink a boat they're on
		100 = murder_outcome.0108 # Poison their drink
	}
}

murder_setup = {
	# Occurs when you execute the murder scheme. Pick out the murder method set in murder_ongoing.0001.
	first_valid = {
		murder_outcome.1001 #Assassin in bedchamber
		murder_outcome.1002 #Hired thugs
		murder_outcome.1003 #Poison food
		murder_outcome.1004 #Creepy-crawly
		murder_outcome.1005 #A riled-up mob
		murder_outcome.1006 #Immurement
		murder_outcome.1007 #Sink a boat they're on
		murder_outcome.1008 #Poison drink
		murder_outcome.1201 #Lure child into forest
		murder_outcome.1202 #Stab infant
		murder_outcome.1203 #Infant bitten by creepy crawly
		murder_outcome.1204 #Poisoned candy
		murder_outcome.1205 #Child pushed to death
		murder_outcome.1301 #Beaten to death in a cell
		murder_outcome.1302 #Unwelcome guest during House Arrest
		murder_outcome.1401 #Strangling Incapable
	}
}


murder_save_roll = {
	random_events = {
		200 = murder_save.9999 #Murder succeeds

		#Lover saves you from an assassin
		50 = murder_save.0001

		#Lover saves you from a creepy crawly
		100 = murder_save.0002

		#Mindbreak character saves you from an assassin
		100 = murder_save.0003

		#Warhorse saves you from a band of thugs
		100 = murder_save.0004

		#Your Prison Pet saves you in prison
		100 = murder_save.0005

		#Their personal guard protects them from a band of thugs
		100 = murder_save.0006

		#Your cat saves you!
		100 = murder_save.0007

		#Your dog saves you!
		100 = murder_save.0008

		# Dynasty Perk: Family Connections
		700 = murder_save.0009

		# A Varangian saves them
		300 = murder_save.0010

		# Saved from poisoned food by cat
		50 = murder_save.0011

		# Saved from poisoned food by dog
		50 = murder_save.0012

		# Saved from poisoned food by gluttonous trait
		500 = murder_save.0013

		# Saved from assassin by language skills
		100 = murder_save.0014

		#Saved by timely artifact
		100 = murder_save.0015

		# Saved from poisoned food by food taster
		100 = court_position.9001

		# Saved from poison by cup-bearer
		50 = court_position.9011

		# A Bodyguard saves you from an assassin
		100 = court_position.9021

		# A Shieldmaiden saves them
		600 = fp1_shieldmaiden.0021

	}
}

murder_save_response = {
	first_valid = {
		murder_save.1001
		murder_save.1002
		murder_save.1003
		murder_save.1004
		murder_save.1005
		murder_save.1006
		murder_save.1007
		murder_save.1008
		murder_save.1009
		murder_save.1010
		murder_save.1011
		murder_save.1012
		fp1_shieldmaiden.0022
		murder_save.1013
		murder_save.1014
		murder_save.1015
		court_position.9002
		court_position.9012
		court_position.9022
	}
}

murder_succeeded = {
	# Picks out the correct success event depending on setup.
	first_valid = {
		murder_outcome.2000 #Target was already dead
		murder_outcome.2001 #Assassin
		murder_outcome.2002 #Hired thugs
		murder_outcome.2003 #Poison food
		murder_outcome.2004 #Creepy-crawlies
		murder_outcome.2005 #A riled-up mob
		murder_outcome.2006 #Immurement
		murder_outcome.2007 #Sink a boat they're on
		murder_outcome.2008 #Poison drink
		murder_outcome.2201 #Leave a child in the forest
		murder_outcome.2202 #Stab infant
		murder_outcome.2203 #Creepy crawly bites infant
		murder_outcome.2204 #Poisoned candy
		murder_outcome.2205 #Child pushed to death
		murder_outcome.2301 #Beat to death in prison
		murder_outcome.2302 #Unwelcome guest during House Arrest
		murder_outcome.2401 #Strangling incapable
	}
	effect = {

		play_music_cue = "mx_cue_murder"

		root = {
			# Warcraft
			if = { # BP2: If you did a murder based on your imaginary friend, fire the follow-up event
				limit = { var:imaginary_friend_murder_target ?= scope:scheme.scheme_target }
				# if you have murdered a sufficient amount, we fire a special ending 
				if = {
					limit = {
						has_variable = imaginary_friend_murder_count
						var:imaginary_friend_murder_count >= 4
					}
					trigger_event = {
						id = bp2_yearly.2025
						days = 1
					}
				}
				else = {
					trigger_event = {
						id = bp2_yearly.2022
						days = 1
					}
				}
			}
		}

		create_character_memory = {
			type = successful_murder
			participants = {
				victim = scope:scheme.scheme_target
			}
		}
	}
}

murder_failed = {
	# Picks out the correct failure event depending on setup/save.
	first_valid = {
		murder_outcome.4001 #Hired assassin
		murder_outcome.4002 #Hired thugs
		murder_outcome.4003 #Used poison
		murder_outcome.4004 #Creepy-crawlies
		murder_outcome.4005 #A riled-up mob
		murder_outcome.4006 #Immurement
		murder_outcome.4007 #Sink a boat they're on
		murder_outcome.4008 #Poison drink
		murder_outcome.4201 #Lured child into forest
		murder_outcome.4202 #Stab infant
		murder_outcome.4203 #Creepy crawly bites infant
		murder_outcome.4204 #Poisoned candy
		murder_outcome.4205 #Child pushed to death
		murder_outcome.4301 #Beat to death in prison
		murder_outcome.4302 #Unwelcome guest during House Arrest
		murder_outcome.4401 #Strangling incapable
	}
}

murder_ongoing = {
	# Events that can happen while planning to murder someone.
	trigger = {
		exists = scope:scheme
	}
	effect = {
		trigger_event = murder_ongoing.3302
	}
	
	random_events = {
		chance_to_happen = 10
		200 = 0
		################
		## Generic Intrigue Scheme events#
		################
		##Agents:
		200 = intrigue_scheme_ongoing.1001 	# Pay gold for Scheme Progress
		100 = intrigue_scheme_ongoing.1002 	# Zealous agent promotes your agenda
		100 = intrigue_scheme_ongoing.1004 	# A Gregarious agent is a little too loose-lipped
		100 = intrigue_scheme_ongoing.1006 	# A Lazy agent is a little careless
		30 = intrigue_scheme_ongoing.1007 	# Caring agent wants you to stop
		50 = intrigue_scheme_ongoing.1008 	# Agent close to being discovered
		50 = intrigue_scheme_ongoing.1009 	# Close relation is willing to join your scheme after all
		50 = intrigue_scheme_ongoing.2003 	# Discover a secret about someone else than your target
		50 = murder_ongoing.3010			# Drunkard Agent
		100 = intrigue_scheme_ongoing.5019 	# Find old architectural papers
		100 = intrigue_scheme_ongoing.5026 	# Court chaplain is in on it

		##Target:
		100 = intrigue_scheme_ongoing.2001 	# Trusting target
		100 = intrigue_scheme_ongoing.2002 	# Drunkard target
		##Owner:
		50 = intrigue_scheme_ongoing.3001 	# Being Just Causes Stress
		50 = intrigue_scheme_ongoing.3002 	# Being Compassionate Causes Pain
		##Child target:
		200 = intrigue_scheme_ongoing.4001 	# Agent is put in charge of a group of children
		200 = intrigue_scheme_ongoing.4002 	# Child is gullible
		150 = intrigue_scheme_ongoing.4003 	# Agent has second thoughts
		##Other
		100 = intrigue_scheme_ongoing.5001 	# Distract guards with itching powder
		100 = intrigue_scheme_ongoing.5002 	# Convince mystic to give target omen
		100 = intrigue_scheme_ongoing.5005 	# Gift them poisonous gold
		100 = intrigue_scheme_ongoing.5009 	# "Friend of Animals" gets some help
		10 = intrigue_scheme_ongoing.5011 	# You mess up with venomous animals
		50 = intrigue_scheme_ongoing.5014 	# You buy them a plush and exotic carpet
		100 = intrigue_scheme_ongoing.5016 	# Lower their courtiers opinion of them
		50 = intrigue_scheme_ongoing.5017 	# Lower their spouse's opinion of them
		100 = intrigue_scheme_ongoing.5018 	# Target at war - send camp followers to them
		100 = intrigue_scheme_ongoing.5024 	# Encourage local celebration
		50 = murder_ongoing.3301 			# Lose your knife
		100 = intrigue_scheme_ongoing.3005 	# Messenger pigeon
		100 = intrigue_scheme_ongoing.3003 	# Mapping the local surroundings

		100 = intrigue_scheme_ongoing.3010  # Translate letters yourself
		100 = intrigue_scheme_ongoing.3011  # Complex language code

		#############
		# Lifestyle events
		#############
		100 = intrigue_scheme_lifestyle.1001 	# Opportunity for a general to set up a soldier spy ring
		50 = intrigue_scheme_lifestyle.1002 	# Your soldier spy ring has been compromised!
		100 = intrigue_scheme_lifestyle.3001 	# Study the targets habits
		100 = intrigue_scheme_lifestyle.3101 	# Convert informants in target´s court
		50 = intrigue_scheme_lifestyle.3102 	# Informants are revealed!
		100 = intrigue_scheme_lifestyle.3201 	# Intercept communication
		100 = intrigue_scheme_lifestyle.3301 	# Possible to gain hook - ends the scheme
		100 = intrigue_scheme_lifestyle.3401 	# Convince courtier at target's court to inform on them
	}
}
