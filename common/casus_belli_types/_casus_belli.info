key = {
	group = key 	# Which CB group it belongs to. The group itself can define extra restrictions
	icon = key 											# What icon to use. Optional; defaults to the CB key
	
	# These values are based on defines if *not* set in the CB itself
	attacker_ticking_warscore_delay = { months = 12 }	# How much ticking War Score should be delayed before increasing for the Attacker
	defender_ticking_warscore_delay = { months = 12 }	# How much ticking War Score should be delayed before increasing for the Defender
	attacker_ticking_warscore = 0.1						# How much ticking warscore increases every day for the attacker
	defender_ticking_warscore = 0.1						# How much ticking warscore increases every day for the Defender
	attacker_wargoal_percentage = 0.75					# How much the Attacker need to occupy of a wargoal to gain ticking War Score. 0.0 means "at least one occupation"
	defender_wargoal_percentage = 0.75					# How much the Defender need to occupy of a wargoal to gain ticking War Score. 0.0 means "at least one occupation"
	attacker_score_from_occupation_scale = 100			# War Score from occupation by the Attacker is modified by this value
	defender_score_from_occupation_scale = 100			# War Score from occupation by the defender is modified by this value
	attacker_score_from_battles_scale = 40				# War Score from battles won by the Attacker is modified by this value
	defender_score_from_battles_scale = 50				# War Score from battles won by the Defender is modified by this value
	max_attacker_score_from_battles = 50				# How much War Score the Attacker can gain from battles in total
	max_defender_score_from_battles = 100				# How much War Score the Defender can gain from battles in total
	max_attacker_score_from_occupation = 50				# How much War Score the Attacker can gain from occupation in total
	max_defender_score_from_occupation = 100			# How much War Score the Defender can gain from occupation in total
	full_occupation_by_defender_gives_victory = no 		# Full occupation by the defender won't automatically give 100% warscore
	full_occupation_by_attacker_gives_victory = no 		# Full occupation by the attacker won't automatically give 100% warscore
	landless_attacker_needs_armies = no 				# If set to no, being landless and having no armies doesn't automatically give the other side 100% warscore
	allow_hostages = yes								# Controls if hostages can be used in peace negotiations. Defaults to yes

	occupation_participation_mult = 1.0					# What to multiply occupation participation scoring by. Defaults to 1
	siege_participation_mult = 1.0						# What to multiply siege participation scoring by. Defaults to 1
	battle_participation_mult = 1.0						# What to multiply battle participation scoring by. Defaults to 1

	cost = { gold = ... piety = ... prestige = ... }	# How much it costs to declare the war

	attacker_capital_gives_war_score = no 				# No warscore from attacker capital
	defender_capital_gives_war_score = no 				# No warscore from defender capital
	imprisonment_by_attacker_give_war_score = no 		# No warscore when the attackers imprisons people
	imprisonment_by_defender_give_war_score = no 		# No warscore when the defenders imprisons people

	on_declaration = { ... }
	on_victory = { ... }
	on_white_peace = { ... }
	on_defeat = { ... }
	on_invalidated = { ... }

	on_victory_desc = {...}		# Dynamic descriptions to each ot the possible oputputs of the war. Uses the same scope as the effects.
	on_defeat_desc = {...}
	on_white_peace_desc = {...}

	should_invalidate = { ... }
	mutually_exclusive_titles = { ... } # If this evaluates to true, only one title can be targeted
	combine_into_one = yes				# If set, then we show all the instances of this CB (E.G., Holy War for X, Holy War for Y, Holy War for Z) as a single entry that lets you select between the different targets

	# scope:attacker and scope:defender. root is the attacker
	# scope:defender only exists in allowed_against[...]
	allowed_for_character = { ... }
	allowed_for_character_display_regardless = { ... } # Failing this one won't prevent displaying the CB
	# scope:attacker and scope:defender. root is the defender
	allowed_against_character = { ... }
	allowed_against_character_display_regardless = { ... } # Failing this one won't prevent displaying the CB

	# scope:attacker, scope:defender, and scope:target (if there's a target title). root is the attacker
	valid_to_start = { ... }
	valid_to_start_display_regardless = { ... } # Failing this one won't prevent displaying the CB

	# scope:attacker, scope:defender, and scope:claimant. root is the title
	is_allowed_claim_title = { ... }


	target_titles = none/neighbor_land/neighbor_water/neighbor_land_or_water/de_jure_claim/title_claim/all # Determines what titles this CB can be used against. "none" if it targets a realm rather than a title
	target_title_tier = tier # If set, the CB can only be used against this tier of title
	target_de_jure_regions_above = yes # If set, then the CB can target anyone who holds dejure land within a valid title, rather than just anyone who holds a valid title

	use_de_jure_wargoal_only = yes # If set, everything dejure under the target title is considered part of the wargoal for ticking score. If not set, then everything defacto under the target title that isn't dejure under another title the defender personally holds is considered part of the wargoal

	war_name = string
	my_war_name = string # Used when the claimant and attacker is the same person
	war_name_base = string
	my_war_name_base = string

	truce_days = int
	ignore_effect = effect name # This kind of effect is skipped in the effects desc. Can be defined multiple times. E.G., ignore_effect = change_title_holder

	on_primary_attacker_death = invalidate/inherit/inherit_faction
	on_primary_defender_death = invalidate/inherit/inherit_faction
	transfer_behavior = invalidate/transfer

	check_attacker_inheritance_validity = yes/no # If set to "no", we don't check if the replacement is valid before doing it
	check_defender_inheritance_validity = yes/no # If set to "no", we don't check if the replacement is valid before doing it
	attacker_allies_inherit = yes/no # Should allies in war inherit being in the war?
	defender_allies_inherit = yes/no # Should allies in war inherit being in the war?

	interface_priority = int # Determines the order it shows up in the list of CBs. The higher it is, the higher it shows up. Ties are broken by definition order

	max_ai_diplo_distance_to_title = int # If the title is further away than this, the AI will never consider it

	ai_only_against_liege = yes # If set, the AI will only check this CB against its liege
	ai_only_against_neighbors = yes # If set, the AI will only check this CB against its land and sea neighbors
	ai_can_target_all_titles = { # If used, the AI will use the scripted title target if it suceeds, otherwise neighbor_land_or_water
		# Trigger, character scope
	}
	ai = no # If set, the AI will ignore this CB entirely

	white_peace_possible = no # If set to "no", white peaces can't happen; only victory, defeat, or invalidation
	check_all_defenders_for_ticking_war_score = yes # If set to "yes", then we check land held by all defenders within the wargoal
	ticking_war_score_targets_entire_realm = yes # If set to "yes" we check the whole realm instead of the wargoal

	gui_attacker_faith_might_join = yes # If set, we show a warning saying that others of the attacker's faith might join. Has no gameplay effect
	gui_defender_faith_might_join = yes # If set, we show a warning saying that others of the defender's faith might join. Has no gameplay effect
	defender_faith_can_join = yes # If set, the game will add defenders of the same faith if they fulfill the can_defensively_join_holy_war script rule, and holy_war_defensive_join_value is greater than zero for them
	is_great_holy_war = yes # Is this a Great Holy War?
	target_top_liege_if_outside_realm = no # Bypass checks that if you're not in a realm, you can only target the top liege. Only used by scripted wars, like Peasant Revolts; will not work in the UI

	should_check_for_interface_availability = no # If set, we don't show check this CB when checking if you've got a CB available (E.G., using the trigger has_any_cb_on)

	ai_score = { # Script value, standard war scopes. Added to the hard-coded scoring from titles, if there are any
	}

	ai_score_mult = { # Script value, standard war scopes. Multiplied with the scoring from titles
	}
}

All effects and triggers are in CB scope unless otherwise specified.

	
