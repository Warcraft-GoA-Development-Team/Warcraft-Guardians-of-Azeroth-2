#Bring a character to your court
add_to_court_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	is_shown = {
		debug_only = yes
		NOT = { scope:recipient = scope:actor }
		scope:recipient = {
			NOT = {
				is_courtier_of = scope:actor
			}
		}
	}
	
	on_accept = {
		scope:actor = {
			add_courtier = scope:recipient
		}
	}
	
	auto_accept = yes
}

give_secrets_to_court_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	common_interaction = yes
	icon = debug_secret
	interface_priority = -2
	
	is_shown = {
		debug_only = yes
	}
	on_accept = {
		scope:recipient = {
			random_list = {
				30 = {
					give_deviant_secret_or_trait_effect = yes
				}
				30 = {
					give_homosexual_secret_or_nothing_effect = yes
				}
			}
			hidden_effect = {
				every_courtier = {	
					give_random_likely_secret_effect = yes
				}
			}
		}
	}
	
	auto_accept = yes
}

set_up_secrets_in_realm_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes

	is_shown = {
		debug_only = yes
	}
	on_accept = {
		scope:recipient.top_liege = {
			hidden_effect = {
				# Start by adding all realm characters and neighbouring realm characters to a list
				add_to_list = secret_setup
				every_vassal_or_below = {
					add_to_list = secret_setup
					every_courtier_or_guest = {
						add_to_list = secret_setup
					}
				}
				every_neighboring_top_liege_realm_owner = {
					add_to_list = secret_setup
					every_vassal_or_below = {
						add_to_list = secret_setup
						every_courtier_or_guest = {
							add_to_list = secret_setup
						}
					}
				}
				every_in_list = { # Give everyone in the list a 50% chance of getting a secret
					list = secret_setup
					random_list = {
						60 = { give_random_likely_secret_effect = yes }
						60 = { }
					}
				}
				random_in_list = { # Reveal one secret to the character the decision is used on, from the same realm
					list = secret_setup
					limit = {
						top_liege = scope:recipient.top_liege
						any_secret = {
							NOT = { is_known_by = scope:recipient }
						}
					}
					random_secret = {
						limit = {
							NOT = { is_known_by = scope:recipient }
						}
						reveal_to = scope:recipient
					}
				}
				random_in_list = { # Reveal one secret to the character the decision is used on, NOT from the same realm
					list = secret_setup
					limit = {
						NOT = { top_liege = scope:recipient.top_liege }
						any_secret = {
							NOT = { is_known_by = scope:recipient }
						}
					}
					random_secret = {
						limit = {
							NOT = { is_known_by = scope:recipient }
						}
						reveal_to = scope:recipient
					}
				}
				every_in_list = { # Everyone in the list has a chance to get to know of a secret anyone else has in the list
					list = secret_setup
					save_scope_as = reveal_to_me
					random = {
						chance = 75
						random_in_list = {
							list = secret_setup
							limit = {
								any_secret = {
									NOT = { is_known_by = scope:reveal_to_me }
								}
							}
							random_secret = {
								limit = {
									NOT = { is_known_by = scope:reveal_to_me }
								}
								reveal_to = scope:reveal_to_me
							}
						}
					}
				}
				random_in_list = { # Imprison someone with a secret you know about
					list = secret_setup
					limit = {
						any_secret = {
							is_known_by = scope:recipient
						}
						NOT =  { this = scope:recipient }
						is_foreign_court_guest = no
					}
					save_scope_as = prisoner_secret
					scope:recipient = {
						imprison = {
							target = scope:prisoner_secret
							type = dungeon
						}
					}
				}
				random_in_list = { # Imprison someone who has a secret you don't know about
					list = secret_setup
					limit = {
						any_secret = {
							NOT = { is_known_by = scope:recipient }
						}
						NOT =  { this = scope:recipient }
						is_foreign_court_guest = no
					}
					save_scope_as = prisoner_secret
					scope:recipient = {
						imprison = {
							target = scope:prisoner_secret
							type = dungeon
						}
					}
				}
			}
		}
	}
	
	auto_accept = yes
}

add_weak_hook_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	common_interaction = yes
	interface_priority = -1
	icon = hook_icon

	is_shown = {
		debug_only = yes
		NOT = { scope:recipient = scope:actor }
	}
	auto_accept = yes
	on_accept = {
		scope:actor = {
			add_hook = {
				target = scope:recipient
				type = favor_hook
			}
		}
	}
}

add_strong_hook_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	common_interaction = yes
	interface_priority = -1
	icon = hook_strong

	is_shown = {
		debug_only = yes
		NOT = { scope:recipient = scope:actor }
	}
	auto_accept = yes
	on_accept = {
		scope:actor = {
			add_hook = {
				target = scope:recipient
				type = strong_test_hook
			}
		}
	}
}

set_relation_debug = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	common_interaction = yes
	icon = debug_chars
	is_shown = {
		debug_only = yes
		NOT = {
			scope:recipient = scope:actor
		}
	}
	
	send_option = {
		is_valid = {
			scope:actor = {
				NOR = {
					has_relation_potential_friend = scope:recipient
					has_relation_friend = scope:recipient
					has_relation_best_friend = scope:recipient
				}
			}
		}
		flag = potential_friend
		localization = set_relation_debug_potential_friend
	}
	send_option = {
		is_valid = {
			scope:actor = {
				NOR = {
					has_relation_potential_rival = scope:recipient
					has_relation_rival = scope:recipient
					has_relation_nemesis = scope:recipient
				}
			}
		}
		flag = potential_rival
		localization = set_relation_debug_potential_rival
	}
	send_option = {
		is_valid = {
			scope:actor = {
				NOR = {
					has_relation_potential_lover = scope:recipient
					has_relation_lover = scope:recipient
					has_relation_soulmate = scope:recipient
				}
			}
		}
		flag = potential_lover
		localization = set_relation_debug_potential_lover
	}
	send_option = {
		is_valid = {
			scope:actor = {
				NOR = {
					has_relation_friend = scope:recipient
					has_relation_best_friend = scope:recipient
				}
			}
		}
		flag = friend
		localization = set_relation_debug_friend
	}
	send_option = {
		is_valid = {
			scope:actor = {
				NOR = {
					has_relation_rival = scope:recipient
					has_relation_nemesis = scope:recipient
				}
			}
		}
		flag = rival
		localization = set_relation_debug_rival
	}
	send_option = {
		is_valid = {
			scope:actor = {
				NOR = {
					has_relation_lover = scope:recipient
					has_relation_soulmate = scope:recipient
				}
			}
		}
		flag = lover
		localization = set_relation_debug_lover
	}
	send_option = {
		is_valid = {
			scope:actor = {
				NOT = {
					has_relation_best_friend = scope:recipient
				}
			}
		}
		flag = best_friend
		localization = set_relation_debug_best_friend
	}
	send_option = {
		is_valid = {
			scope:actor = {
				NOT = {
					has_relation_nemesis = scope:recipient
				}
			}
		}
		flag = nemesis
		localization = set_relation_debug_nemesis
	}
	send_option = {
		is_valid = {
			scope:actor = {
				NOT = {
					has_relation_soulmate = scope:recipient
				}
			}
		}
		flag = soulmate
		localization = set_relation_debug_soulmate
	}
	send_option = {
		is_valid = {
			scope:actor = {
				NOT = {
					has_relation_bully = scope:recipient
				}
			}
		}
		flag = bully
		localization = set_relation_debug_bully
	}
	send_option = {
		is_valid = {
			scope:actor = {
				NOT = {
					has_relation_victim = scope:recipient
				}
			}
		}
		flag = victim
		localization = set_relation_debug_victim
	}
	send_option = {
		is_valid = {
			scope:actor = {
				NOT = {
					has_relation_crush = scope:recipient
				}
			}
		}
		flag = crush
		localization = set_relation_debug_crush
	}
	send_option = {
		is_valid = {
			scope:recipient = {
				NOT = {
					has_relation_crush = scope:actor
				}
			}
		}
		flag = crush_on_me
		localization = set_relation_debug_crush_on_me
	}
	
	on_accept = {
		scope:recipient = {
			hidden_effect = {
				if = {
					limit = { scope:potential_friend = yes }
					set_relation_potential_friend = scope:actor
				}
				else_if = {
					limit = { scope:potential_rival = yes }
					set_relation_potential_rival = scope:actor
				}
				else_if = {
					limit = { scope:potential_lover = yes }
					set_relation_potential_lover = scope:actor
				}
				else_if = {
					limit = { scope:friend = yes }
					set_relation_friend = { reason = test_friend_desc target = scope:actor }
				}
				else_if = {
					limit = { scope:rival = yes }
					set_relation_rival = { reason = test_rival_desc target = scope:actor }
				}
				else_if = {
					limit = { scope:lover = yes }
					#set_relation_lover = { reason = test_lover_desc target = scope:actor }
					random_independent_ruler = {
						save_scope_as = test_2
					}
					set_relation_lover = { reason = lover_hunters_tumble target = scope:actor involved_character = scope:test_2 province = scope:test_2.capital_province }
				}
				else_if = {
					limit = { scope:best_friend = yes }
					set_relation_best_friend = { reason = best_friend_poetry copy_reason = friend target = scope:actor }
				}
				else_if = {
					limit = { scope:nemesis = yes }
					set_relation_nemesis = { reason = test_nemesis_desc copy_reason = rival target = scope:actor }
				}
				else_if = {
					limit = { scope:soulmate = yes }
					set_relation_soulmate = { reason = test_soulmate_desc copy_reason = lover target = scope:actor }
				}
				else_if = {
					limit = { scope:crush = yes }
					scope:actor = { set_relation_crush = scope:recipient }
				}
				else_if = {
					limit = { scope:crush_on_me = yes }
					set_relation_crush = scope:actor
				}
				else_if = {
					limit = { scope:bully = yes }
					set_relation_bully = scope:actor
				}
				else_if = {
					limit = { scope:victim = yes }
					set_relation_victim = scope:actor
				}
			}
		}
	}
	auto_accept = yes
}

add_character_weight_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes

	is_shown = {
		debug_only = yes
	}

	on_accept = {
		scope:recipient = {
			change_current_weight = 25
		}
	}
	auto_accept = yes
}

remove_character_weight_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes

	is_shown = {
		debug_only = yes
	}

	on_accept = {
		scope:recipient = {
			change_current_weight = -25
		}
	}
	auto_accept = yes
}

slay_character_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	
	interface_priority = -1

	is_shown = {
		debug_only = yes
	}

	on_accept = {
		random_independent_ruler = {
			save_scope_as = rando
		}
		scope:recipient = {
			death = {
				death_reason = death_duel
				killer = scope:rando
			}
		}
	}
	auto_accept = yes
}


give_bubonic_plague_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	
	interface_priority = -1

	is_shown = {
		debug_only = yes
	}

	on_accept = {
		scope:recipient = {
			add_trait = bubonic_plague
		}
	}
	auto_accept = yes
}

increase_cultural_acceptance_debug_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	
	interface_priority = -1

	is_shown = {
		debug_only = yes
		NOT = {
			scope:actor.culture = scope:recipient.culture
		}
	}

	on_accept = {
		scope:recipient.culture = {
			change_cultural_acceptance = {
				target = scope:actor.culture value = 25
				desc = debug
			}
		}
	}
	auto_accept = yes
}

decrease_cultural_acceptance_debug_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	
	interface_priority = -1

	is_shown = {
		debug_only = yes
		NOT = {
			scope:actor.culture = scope:recipient.culture
		}
	}

	on_accept = {
		scope:recipient.culture = {
			change_cultural_acceptance = {
				target = scope:actor.culture value = -25
				desc = debug
			}
		}
	}
	auto_accept = yes
}

learn_language_debug_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = icon_culture
	
	interface_priority = -1

	is_shown = {
		debug_only = yes
		NOT = {
			scope:actor = {
				knows_language_of_culture = scope:recipient.culture
			}
		}
	}

	on_accept = {
		scope:actor = {
			learn_language_of_culture = scope:recipient.culture
		}
	}
	auto_accept = yes
}

#Start a duel or board game against another character
start_bout_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = icon_combat
	is_shown = {
		debug_only = yes
		NOT = { scope:recipient = scope:actor }
	}
	
	on_accept = {
		# Duels.
		if = {
			limit = { scope:single_combat = yes }
			scope:actor = { trigger_event = single_combat.1004 }
		}
		# Board Games.
		if = {
			limit = {
				OR = {
					scope:board_game_chess = yes
					scope:board_game_pachisi = yes
					scope:board_game_tabula = yes
					scope:board_game_hnefatafl = yes
				}
			}
			scope:actor = { trigger_event = board_games.0102 }
		}
	}

	send_option = {
		flag = single_combat
		localization = start_bout_interaction_single_combat
	}
	
	send_option = {
		flag = board_game_chess
		localization = start_bout_interaction_board_game_chess
	}

	send_option = {
		flag = board_game_pachisi
		localization = start_bout_interaction_board_game_pachisi
	}

	send_option = {
		flag = board_game_tabula
		localization = start_bout_interaction_board_game_tabula
	}

	send_option = {
		flag = board_game_hnefatafl
		localization = start_bout_interaction_board_game_hnefatafl
	}

	auto_accept = yes
}

add_artifact_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = artifact
	is_shown = {
		debug_only = yes
	}
	
	send_option = {
		flag = weapon
		localization = add_artifact_interaction_weapon
	}
	send_option = {
		flag = armor
		localization = add_artifact_interaction_armor
	}
	send_option = {
		flag = shinies
		localization = add_artifact_interaction_shinies
	}
	send_option = {
		flag = book
		localization = add_artifact_interaction_book
	}
	send_option = {
		flag = furniture
		localization = add_artifact_interaction_furniture
	}
	send_option = {
		flag = trinket
		localization = add_artifact_interaction_trinket
	}

	on_accept = {
		custom_tooltip = add_artifact_interaction


		save_scope_value_as = {
			name = quality
			value = 100
		}
		scope:recipient = {
			hidden_effect = {	
				save_scope_as = owner
				if = {
					limit = { scope:weapon = yes }
					random_dummy_gender_effect = yes
					create_artifact_weapon_effect = {
						OWNER = scope:owner
						CREATOR = scope:dummy_gender
						SET_WEAPON_TYPE = flag:no
					}
				}
				else_if = {
					limit = { scope:armor = yes }
					random_dummy_gender_effect = yes
					create_artifact_armor_effect = {
						OWNER = scope:owner
						CREATOR = scope:dummy_gender
						SET_ARMOR_TYPE = flag:no
					}
				}
				else_if = {
					limit = { scope:shinies = yes }
					random_list = {
						10 = {
							create_artifact_regalia_effect = {
								OWNER = scope:owner
								SMITH = scope:owner
							}
						}
						10 = {
							create_artifact_crown_effect = {
								OWNER = scope:owner
								SMITH = scope:owner
							}
						}
						10 = {
							create_artifact_brooch_effect = {
								OWNER = scope:owner
								SMITH = scope:owner
							}
						}
					}
				}
				else_if = {
					limit = { scope:book = yes }
					random_dummy_gender_effect = yes
					create_artifact_book_effect = {
						OWNER = scope:owner
						CREATOR = scope:dummy_gender
						SET_SUBJECT = flag:no
						SET_TOPIC = flag:no
					}
				}
				else_if = {
					limit = { scope:furniture = yes }
					random_list = {
						10 = {
							create_artifact_throne_effect = {
								OWNER = scope:owner
								MAKER = scope:owner
							}
						}
						10 = {
							create_artifact_tapestry_effect = {
								OWNER = scope:owner
								WEAVER = scope:owner
							}
						}
						10 = {
							create_artifact_box_small_effect = {
								OWNER = scope:owner
								CARPENTER = scope:owner
							}
						}
						10 = {
							create_artifact_box_medium_effect = {
								OWNER = scope:owner
								CARPENTER = scope:owner
							}
						}
						10 = {
							create_artifact_goblet_effect = {
								OWNER = scope:owner
								SMITH = scope:owner
							}
						}
						10 = {
							create_artifact_animal_hide_big_effect = {
								OWNER = scope:owner
								HUNTER = scope:owner
							}
						}
						10 = {
							create_artifact_animal_hide_medium_effect = {
								OWNER = scope:owner
								HUNTER = scope:owner
							}
						}
						10 = {
							create_artifact_animal_hide_small_effect = {
								OWNER = scope:owner
								HUNTER = scope:owner
							}
						}
						10 = {
							create_artifact_wall_banner_effect = {
								OWNER = scope:owner
								CREATOR = scope:owner
								TARGET = scope:owner.primary_title
							}
						}
						10 = {
							create_artifact_wall_skull_effect = {
								OWNER = scope:owner
								HUNTER = scope:owner
							}
						}
						10 = {
							create_artifact_sculpture_effect = {
								OWNER = scope:owner
								SCULPTER = scope:owner
							}
						}
						10 = {
							create_artifact_wall_shield_effect = {
								OWNER = scope:owner
								TARGET = scope:owner.house
								CREATOR = scope:owner
							}
						}
					}
				}
				else_if = {
					limit = { scope:trinket = yes }
					create_artifact = {
						name = cuckoldry_psalter_name
						description = cuckoldry_psalter_description
						type = miscellaneous
						visuals = book
						modifier = artifact_monthly_prestige_penalty_modifier
					}
				}
			}
		}
	}
	auto_accept = yes
}

take_artifact_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = artifact

	target_type = artifact
	target_filter = recipient_artifacts

	is_shown = {
		debug_only = yes
		scope:recipient = {
			any_character_artifact = { exists = this }
		}
		NOT = {
			scope:recipient = scope:actor
		}
	}
	
	is_highlighted = {
		always = yes
	}

	on_accept = {
		scope:target = {
			set_owner = scope:actor
		}
	}

	auto_accept = yes
	
	ai_accept = {
		base = 100
	}
	
	auto_accept = yes
}

add_random_artifact_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	is_shown = {
		debug_only = yes
	}
	
	on_accept = {
		custom_tooltip = add_random_artifact_interaction

		scope:recipient = {
			hidden_effect = {	
				save_scope_as = owner
				random_list = {
					10 = {
						random_dummy_gender_effect = yes
						create_artifact_weapon_effect = {
							OWNER = scope:owner
							CREATOR = scope:dummy_gender
							SET_WEAPON_TYPE = flag:no
						}
					}
					10 = {
						random_dummy_gender_effect = yes
						create_artifact_armor_effect = {
							OWNER = scope:owner
							CREATOR = scope:dummy_gender
							SET_ARMOR_TYPE = flag:no
						}
					}
					10 = {
						create_artifact_regalia_effect = {
							OWNER = scope:owner
							SMITH = scope:owner
						}
					}
					10 = {
						create_artifact_crown_effect = {
							OWNER = scope:owner
							SMITH = scope:owner
						}
					}
					10 = {
						create_artifact_brooch_effect = {
							OWNER = scope:owner
							SMITH = scope:owner
						}
					}
				}
			}
		}
	}

	auto_accept = yes
}

# Warcraft
# add_relic_interaction = {

add_claim_on_artifact_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes

	target_type = artifact
	target_filter = recipient_artifacts

	is_shown = {
		debug_only = yes
	}

	is_valid = {
		scope:recipient = {
			any_character_artifact = { exists = this }
		}
	}
	
	on_accept = {
		custom_tooltip = add_claim_on_artifact_interaction

		hidden_effect = {
			scope:actor = {
				add_personal_artifact_claim = scope:target
			}
		}
	}
	
	auto_accept = yes	
}

add_house_claim_on_artifact_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes

	target_type = artifact
	target_filter = recipient_artifacts

	is_shown = {
		debug_only = yes
	}

	is_valid = {
		scope:recipient = {
			any_character_artifact = { exists = this }
		}
	}
	
	on_accept = {
		custom_tooltip = add_house_claim_on_artifact_interaction

		hidden_effect = {
			scope:actor.house = {
				add_house_artifact_claim = scope:target
			}
		}
	}
	
	auto_accept = yes	
}

destroy_artifact_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes

	target_type = artifact
	target_filter = recipient_artifacts


	is_shown = {
		debug_only = yes
	}

	is_valid = {
		scope:recipient = {
			any_character_artifact = { exists = this }
		}
	}
	
	on_accept = {
		custom_tooltip = destroy_artifact_interaction

		hidden_effect = {	
			scope:target = {
				add_durability = -999
			}
		}
	}
	
	auto_accept = yes
}

inspire_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes

	is_shown = {
		debug_only = yes
		scope:recipient = {
			NOT = { exists = inspiration }
			has_completed_inspiration = no
			is_ruler = no
			is_landed = no
		}
	}

	send_option = {
		flag = weapon_inspiration
		localization = debug_inspiration_weapon
	}
	send_option = {
		flag = armor_inspiration
		localization = debug_inspiration_armor
	}
	send_option = {
		flag = book_inspiration
		localization = debug_inspiration_book
	}
	send_option = {
		flag = weaver_inspiration
		localization = debug_inspiration_weaver
	}
	send_option = {
		flag = adventure_inspiration
		localization = debug_inspiration_adventure
	}
	send_option = {
		flag = artisan_inspiration
		localization = debug_inspiration_artisan
	}
	send_option = {
		flag = smith_inspiration
		localization = debug_inspiration_smith
	}
	send_option = {
		flag = alchemy_inspiration
		localization = debug_inspiration_alchemy
	}
	
	on_accept = {
		scope:recipient = {
			if = {
				limit = {
					always = scope:book_inspiration
				}
				create_inspiration = book_inspiration
				custom_tooltip = inspire_interaction_book
			}
			else_if = {
				limit = {
					always = scope:weaver_inspiration
				}
				create_inspiration = weaver_inspiration
				custom_tooltip = inspire_interaction_weaver
			}
			else_if = {
				limit = {
					always = scope:adventure_inspiration
				}
				create_inspiration = adventure_inspiration
				custom_tooltip = inspire_interaction_adventure
			}
			else_if = {
				limit = {
					always = scope:artisan_inspiration
				}
				create_inspiration = artisan_inspiration
				custom_tooltip = inspire_interaction_artisan
			}
			else_if = {
				limit = {
					always = scope:smith_inspiration
				}
				create_inspiration = smith_inspiration
				custom_tooltip = inspire_interaction_smith
			}
			else_if = {
				limit = {
					always = scope:alchemy_inspiration
				}
				create_inspiration = alchemy_inspiration
				custom_tooltip = inspire_interaction_alchemy
			}
			else_if = {
				limit = {
					always = scope:armor_inspiration
				}
				create_inspiration = armor_inspiration
				custom_tooltip = inspire_interaction_armor
			}
			else = {
				create_inspiration = weapon_inspiration
				custom_tooltip = inspire_interaction_weapon
			}
		}
	}
	
	auto_accept = yes
}


give_away_random_artifact_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes

	is_shown = {
		debug_only = yes
	}

	is_valid = {
		scope:recipient = {
			any_character_artifact = { exists = this }
			any_neighboring_top_liege_realm = { exists = this }
		}
	}
	
	on_accept = {
		custom_tooltip = give_away_random_artifact_interaction

		hidden_effect = {	
			
			scope:recipient = {
				random_neighboring_top_liege_realm = {
					holder = {
						save_scope_as = new_owner
					}
				}
				random_character_artifact = {
					set_owner = scope:new_owner
				}
			}
		}
	}
	
	auto_accept = yes
}

sponsor_inspiration_debug = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	auto_accept = yes

	is_shown = {
		debug_only = yes
		exists = scope:recipient.inspiration
	}
	
	is_valid_showing_failures_only = {
		scope:actor = {
			can_sponsor_inspiration = scope:recipient.inspiration
		}
	}
	
	is_valid = {
		scope:actor = {
			can_sponsor_inspiration = scope:recipient.inspiration
		}
	}

	on_accept = {
		scope:actor = {
			sponsor_inspiration = scope:recipient.inspiration
		}
	}
}

test_effect_localization_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no

	is_shown = {
		debug_only = yes
		scope:actor = { is_ai = no }
		NOT = { scope:actor = scope:recipient }
		always = no
	}
	on_accept = {
		# Effects are shown under the actor and recipient entries
		scope:actor = { add_prestige = 50 }
		scope:recipient = { add_prestige = 50 }

		# Effects on the same things are collected together into their existing actor and recipient block
		scope:actor = { add_piety = 50 }
		scope:recipient = { add_piety = 50 }

		# Effects in a self contained list are shown in the general text output and will explicitly name the involved characters, including the actor and recipient, with respect to first person pronouns if the player
		scope:actor = {
			random = {
				chance = 30
				scope:actor = {
					add_gold = 200 
					random_courtier = { remove_short_term_gold = 50 }
				}
				scope:recipient = { add_piety = 200 }
			}
			random_list = {
				50 = {
					scope:actor = { 
						add_gold = 50 
						random_courtier = { add_gold = 10 }
					}
					scope:recipient = { add_piety = 50 }
				}
				50 = {
					scope:actor = { 
						remove_short_term_gold = 50 
						random_courtier = { remove_short_term_gold = 10 }
					}
					scope:recipient = { add_piety = -50 }
				}
			}
			duel = {
				skill = diplomacy
				target = scope:recipient
				50 = {
					compare_modifier = {
						value = scope:duel_value
						multiplier = 3.5
						min = -49
					}
					scope:actor = { 
						add_gold = 50 
						random_courtier = { add_gold = 10 }
					}
					scope:recipient = { add_piety = 50 }
				}
				50 = {
					compare_modifier = {
						value = scope:duel_value
						multiplier = -3.5
						min = -49
					}
					scope:actor = { 
						remove_short_term_gold = 50 
						random_courtier = { remove_short_term_gold = 10 }
					}
					scope:recipient = { add_piety = -50 }
				}
			}
		}

		# Effects on non core targets get their own separate entries
		scope:actor = {
			every_courtier = {
				add_gold = 10
			}
		}
		# And multiple effects on the same objects are collected into their existing entries
		scope:actor = {
			every_courtier = {
				add_piety = 10
			}
		}
	}

	auto_accept = yes
}

#Give the character a criminal trait that allows actor to imprison them
give_criminal_trait_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes

	is_shown = {
		debug_only = yes
		NOT = {
			scope:actor = {
				has_imprisonment_reason = scope:recipient
			}
		}
	}

	on_accept = {
		custom_tooltip = give_criminal_trait_interaction_tt
		hidden_effect = {
			scope:recipient = {
				random_list = {
					10 = {
						trigger = {
							trait_is_criminal_in_faith_trigger = {
								TRAIT = adulterer
								GENDER_CHARACTER = scope:recipient
								FAITH = scope:actor.faith
							}
							NOT = { has_trait = adulterer }
						}
						add_trait = adulterer
					}
					10 = {
						trigger = {
							trait_is_criminal_in_faith_trigger = {
								TRAIT = kinslayer_3
								GENDER_CHARACTER = scope:recipient
								FAITH = scope:actor.faith
							}
							NOT = { has_trait = kinslayer_3 }
						}
						add_trait = kinslayer_3
					}
					10 = {
						trigger = {
							trait_is_criminal_in_faith_trigger = {
								TRAIT = witch
								GENDER_CHARACTER = scope:recipient
								FAITH = scope:actor.faith
							}
							NOT = { has_trait = witch }
						}
						add_trait = witch
					}
					10 = {
						trigger = {
							trait_is_criminal_in_faith_trigger = {
								TRAIT = cannibal
								GENDER_CHARACTER = scope:recipient
								FAITH = scope:actor.faith
							}
							NOT = { has_trait = cannibal }
						}
						add_trait = cannibal
					}
					10 = {
						trigger = {
							trait_is_criminal_in_faith_trigger = {
								TRAIT = deviant
								GENDER_CHARACTER = scope:recipient
								FAITH = scope:actor.faith
							}
							NOT = { has_trait = deviant }
						}
						add_trait = deviant
					}
					10 = {
						trigger = {
							trait_is_criminal_in_faith_trigger = {
								TRAIT = fornicator
								GENDER_CHARACTER = scope:recipient
								FAITH = scope:actor.faith
							}
							NOT = { has_trait = fornicator }
						}
						add_trait = fornicator
					}
				}

				#If they're still not a criminal we have them murder someone close to you
				if = {
					limit = {
						NOT = {
							scope:actor = {
								has_imprisonment_reason = scope:recipient
							}
						}
						any_close_family_member = {
							NOT = { this = scope:recipient }
						}
					}
					random_close_family_member = {
						limit = {
							NOT = { this = scope:recipient }
						}
						save_scope_as = family
						known_murder_effect = {
							VICTIM = scope:family
							MURDERER = scope:recipient
							EXPOSER = scope:recipient
						}
					}
				}
			}
		}
	}
	
	auto_accept = yes
}

generate_artifact_with_history_interaction = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes

	is_shown = {
		debug_only = yes
		NOT = { scope:recipient = scope:actor }
	}
	
	on_accept = {
		scope:actor = { trigger_event = debug.400 }
	}
	
	auto_accept = yes
	
}

# Have (or trigger the aftermath of) sex with the target character
debug_sex_interaction = { # Sleep With Character
	icon = seducer
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	is_shown = {
		debug_only = yes
		NOT = { scope:recipient = scope:actor }
	}
	
	on_accept = { scope:actor = { trigger_event = debug.410 } }
	auto_accept = yes
}

debug_change_every_county = {
	category = interaction_debug_main
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = "gfx/interface/icon_holding_city" # todo_cd this should work, but currently is not functional (this is why the one above just copied over the icon)
	
	is_shown = { debug_only = yes }
	send_option = { # Set Control to Max (100)
		flag = debug_change_every_county_max_control
		localization = debug_change_every_county.a
	}
	send_option = { # Here goes anything else you may want to do in the future, just add another send_option and then an if on the accept
		flag = auto_formatter_complains_if_I_do_not_do_this
		localization = debug_start_era_of_crusades_interaction # use debug_change_every_county.b
	}

	on_accept = {
		if = { # Set Control to Max (100)
			limit = { scope:debug_change_every_county_max_control = yes }
			scope:recipient = { every_held_county = { change_county_control = 100 } }
		}
	}
	
	auto_accept = yes
	ai_accept = {
		base = 100
	}
}
