namespace = murder_save

##################################################
# GENERAL SCRIPTED TRIGGERS & EFFECTS

# When toggled on, this'll spoof an event's standard scopes so that loc and such can be tested without setting up a scheme and hoping for the result.
scripted_effect debug_sort_scheme_save_scopes_for_testing_effect = {
# 	if = {
# 		limit = { always = no }
# 		hidden_effect = {
# 			every_scheme = { end_scheme = yes }
# 			start_scheme = {
# 				type = murder
# 				target_character = title:e_byzantium.holder
# 			}
# 			save_scope_as = owner
# 			random_scheme = {
# 				limit = { scheme_target_character = title:e_byzantium.holder }
# 				save_scope_as = scheme
# 				scheme_target_character = { save_scope_as = target }
# 				random_scheme_agent_slot = { save_scope_as = slot_temp }
# 			}
# 			title:k_france.holder = { add_to_agent_slot = scope:slot_temp }
# 			random_memory = { save_scope_as = bad_memory }
# 			# Misc secondary controls.
# 			if = {
# 				limit = { always = yes }
# 				save_scope_value_as = {
# 					name = scheme_discovered
# 					value = yes
# 				}
# 				scope:owner = { save_scope_as = owner_to_reveal }
# 			}
# 			if = {
# 				limit = { always = yes }
# 				save_scope_value_as = {
# 					name = return_feud_as_true_for_debug
# 					value = yes
# 				}
# 			}
# 			if = {
# 				limit = { always = yes }
# 				title:k_france.holder = { save_scope_as = assassin }
# 			}
# 		}
# 	}
# 	if = {
# 		limit = { always = no }
# 		hidden_effect = {
# 			random_scheme = {
# 				save_scope_as = scheme
# 				scheme_owner = { save_scope_as = owner }
# 				scheme_target_character = { save_scope_as = target }
# 				random_scheme_agent_character = { save_scope_as = assassin }
# 			}
# 			random_memory = { save_scope_as = bad_memory }
# 			# Misc secondary controls.
# 			if = {
# 				limit = { always = yes }
# 				save_scope_value_as = {
# 					name = scheme_discovered
# 					value = yes
# 				}
# 				scope:owner = { save_scope_as = owner_to_reveal }
# 			}
# 			if = {
# 				limit = { always = yes }
# 				save_scope_value_as = {
# 					name = return_feud_as_true_for_debug
# 					value = yes
# 				}
# 			}
# 		}
# 	}
}












##################################################
# SAVES — REPEATABLE

#############################
# Saved from Thugs by Personal Guard
# by Petter Vilberg
#############################

# Owner POV
murder_save.0006 = {
	type = character_event
	window = scheme_failed_event
	title = murder_save.0006.t
	desc = {
		desc = murder_save.0006.opening
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:target = {
						is_married = yes
					}
				}
				desc = murder_save.0006.spouse
			}
			desc = murder_save.0006.no_spouse
		}
		desc = murder_save.0006.end
	}
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = fear
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		scope:target = { has_character_modifier = spouse_martial_personal_guard_modifier }
	}

	immediate = {
		debug_sort_scheme_save_scopes_for_testing_effect = yes
		scope:target = {
			if = {
				limit = { is_married = yes }
				ordered_spouse = {
					order_by = { value = martial }
					save_scope_as = spouse
				}
			}
		}
		murder_failure_effect = yes
	}

	option = {
		name = murder_save.0001.a
		scope:scheme = { end_scheme = yes }
	}

	option = {
		name = murder_save.0001.b
		trigger = {
			NOT = { exists = scope:scheme_discovered }
		}
		restart_murder_scheme_effect = yes
	}

	# Fire the rest of the outcome.
	after = {
		scope:target = { trigger_event = murder_save.1006 }
	}
}

# Target POV
murder_save.1006 = {
	type = character_event
	window = scheme_target_event
	title = murder_save.0006.t
	desc = {
		desc = murder_save.1006.opening
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = scope:spouse
				}
				desc = murder_save.1006.spouse
			}
			desc = murder_save.1006.no_spouse
		}
		desc = murder_save.1006.end
	}
	theme = murder_scheme
	left_portrait = {
		character = root
		animation = shock
	}
	right_portrait = {
		character = scope:owner_to_reveal
		animation = anger
	}

	# Who could do such a thing?
	option = {
		name = murder_save.1001.a
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	# Vengeance!
	option = {
		name = murder_save.1001.b
		trigger = {
			exists = scope:scheme_discovered
		}
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	after = {
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
	}
}

#############################
# Saved from Assassin by Varangian Guard
# by Petter Vilberg
#############################
scripted_trigger murder_save_0010_varangian_trigger = {
	OR = {
		has_trait = varangian
		#has_character_flag = is_currently_varangian
	}
	bodyguard_will_actually_do_job_trigger = yes
}

# Owner POV
murder_save.0010 = {
	type = character_event
	window = scheme_failed_event
	title = murder_save.0010.t
	desc = {
		desc = murder_save.0010.desc
		triggered_desc = {
			trigger = { exists = local_var:varangian_dies }
			desc = murder_save.0010.varangian_dies
		}
	}
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = shock
	}
	right_portrait = {
		character = scope:varangian
		animation = pain
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = {
		scope:target = {
			# OR = {
			# 	has_title = title:e_byzantium
			# 	has_title = title:e_roman_empire
			# }
			OR = {
				any_court_position_holder = {
					type = bodyguard_court_position
					murder_save_0010_varangian_trigger = yes
				}
				# This second one is strictly flavour: you won't get the boost without Varangians as bodyguards, so they'll basically pop in to steal the valour from whoever actually passed the role.
				any_foreign_court_guest = { murder_save_0010_varangian_trigger = yes }
			}
		}
	}

	immediate = {
		debug_sort_scheme_save_scopes_for_testing_effect = yes
		scope:target = {
			# Sort our Varangian.
			## We prefer to get a bodyguard.
			ordered_court_position_holder = {
				type = bodyguard_court_position
				limit = { murder_save_0010_varangian_trigger = yes }
				order_by = { value = murder_weight_best_bodyguard_value }
				save_scope_as = varangian
			}
			## But otherwise, grab a back-up.
			if = {
				limit = {
					NOT = { exists = scope:varangian }
				}
				ordered_foreign_court_guest = {
					limit = { murder_save_0010_varangian_trigger = yes }
					order_by = { value = murder_weight_best_bodyguard_value }
					save_scope_as = varangian
				}
			}
		}
		# Take care of death.
		hidden_effect = {
			random = {
				chance = {
					value = 75
					subtract = scope:varangian.prowess
				}
				set_local_variable = {
					name = varangian_dies
					value = yes
				}
			}
		}
		if = {
			limit = { exists = local_var:varangian_dies }
			show_as_tooltip = {
				murder_interception_handle_extra_deaths_effect = {
					VICTIM = scope:varangian
					REASON = death_murder
				}
			}
		}
		random_dummy_gender_assassin_effect = yes
		murder_failure_effect = yes
	}

	option = {
		name = murder_save.0010.a
		scope:scheme = { end_scheme = yes }
	}

	option = {
		name = murder_save.0010.b
		trigger = {
			NOT = { exists = scope:scheme_discovered }
		}
		restart_murder_scheme_effect = yes
	}

	# Fire the rest of the outcome.
	after = {
		scope:target = { trigger_event = murder_save.1010 }
	}
}

# Target POV
murder_save.1010 = {
	type = character_event
	window = scheme_target_event
	title = murder_save.0010.t
	desc = {
		desc = murder_save.1010.desc
		triggered_desc = {
			trigger = { exists = local_var:varangian_dies }
			desc = murder_save.1010.varangian_dies
		}
		triggered_desc = {
			trigger = { exists = scope:scheme_discovered }
			desc = murder_save.1010.owner_discovered
		}
	}
	theme = murder_scheme
	left_portrait = {
		character = scope:varangian
		animation = pain
	}
	right_portrait = {
		character = scope:owner_to_reveal
		animation = anger
	}

	immediate = {
		# Warcraft - Removed (Handle the death of the Varangian if necessary)
		# if = {
		# 	limit = { exists = local_var:varangian_dies }
		# 	save_scope_as = emperor
		# 	scope:varangian.liege = {
		# 		trigger_event = {
		# 			id = varangian.3001
		# 			days = 1
		# 		}
		# 	}
		# 	murder_interception_handle_extra_deaths_effect = {
		# 		VICTIM = scope:varangian
		# 		REASON = death_murder
		# 	}
		# }
	}

	# Who could do such a thing?
	option = {
		name = murder_save.1010.a
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	# Vengeance!
	option = {
		name = murder_save.1010.b
		trigger = {
			exists = scope:scheme_discovered
		}
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	after = {
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
	}
}

#############################
# Saved from poisoned food by Gluttonous trait
# by Maxence Voleau
#############################

# Owner POV
murder_save.0013 = {
	type = character_event
	window = scheme_failed_event
	title = murder_save.0013.t
	desc = murder_save.0013.desc
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = shock
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = {
		scope:target = { has_trait = gluttonous }
	}
	
	immediate = {
		debug_sort_scheme_save_scopes_for_testing_effect = yes
		murder_failure_effect = yes
	}

	option = {
		name = murder_save.0001.a
		scope:scheme = { end_scheme = yes }
	}

	option = {
		name = murder_save.0001.b
		trigger = {
			NOT = { exists = scope:scheme_discovered }
		}
		restart_murder_scheme_effect = yes
	}

	# Fire the rest of the outcome.
	after = {
		scope:target = { trigger_event = murder_save.1013 }
	}
}

# Target POV
murder_save.1013 = {
	type = character_event
	window = scheme_target_event
	title = murder_save.0013.t
	desc = murder_save.1013.desc
	theme = murder_scheme
	left_portrait = {
		character = root
		animation = anger
	}
	right_portrait = {
		character = scope:owner_to_reveal
		animation = anger
	}

	# Who could do such a thing?
	option = {
		name = murder_save.1001.a
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	# Vengeance!
	option = {
		name = murder_save.1001.b
		trigger = {
			exists = scope:scheme_discovered
		}
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	after = {
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
	}
}

##################################################
# SAVES — REPEATABLE (OTHER)

# For legacy reasons, we also have the following repeatable event saves stored elsewhere:
## court_position.9001		—	Saved from poisoned food by food taster
## court_position.9011		—	Saved from poison by cup-bearer
## court_position.9021		—	A bodyguard saves you from an assassin
## fp1_shieldmaiden.0021	—	A shieldmaiden saves them











##################################################
# SAVES — UNIQUE

#############################
# Saved from Assassin by Lover
# by Petter Vilberg
#############################

# Owner POV
murder_save.0001 = {
	type = character_event
	window = scheme_failed_event
	title = murder_save.0001.t
	desc = {
		desc = murder_save.0001.opening
		triggered_desc = {
			trigger = {
				OR = {
					is_close_or_extended_family_of = scope:lover
					is_consort_of = scope:lover
					is_employer_of = scope:lover
					has_any_scripted_relation = scope:lover
				}
			}
			desc = murder_save.0001.rel_to_me
		}
		desc = murder_save.0001.end
	}
	
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = grief
	}
	right_portrait = {
		character = scope:lover
		animation = pain
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = { scope:interception_unique = flag:sacrifice_lover }

	immediate = {
		debug_sort_scheme_save_scopes_for_testing_effect = yes
		scope:target = {
			random_relation = {
				type = lover
				# Grab soulmates first, as they have boosted chances.
				limit = {
					has_relation_soulmate = scope:target
					available_lover_to_sacrifice_in_murder_trigger = { TARGET = scope:target }
				}
				# Then regular lovers.
				alternative_limit = {
					available_lover_to_sacrifice_in_murder_trigger = { TARGET = scope:target }
				}
				weight = {
					base = 1
					modifier = {
						add = 5
						OR = {
							has_opinion_modifier = {
								target = root
								modifier = love_opinion
							}
							has_relation_soulmate = root
						}
					}
				}
				save_scope_as = lover
			}
		}
		random_dummy_gender_assassin_effect = yes
		murder_failure_effect = yes
	}

	option = {
		name = murder_save.0001.a
		scope:scheme = { end_scheme = yes }
	}

	option = {
		name = murder_save.0001.b
		trigger = {
			NOT = { exists = scope:scheme_discovered }
		}
		restart_murder_scheme_effect = yes
	}

	# Fire the rest of the outcome.
	after = {
		scope:target = { trigger_event = murder_save.1001 }
	}
}

# Target POV
murder_save.1001 = {
	type = character_event
	window = scheme_target_event
	title = murder_save.0001.t
	desc = murder_save.1001.desc
	theme = murder_scheme
	left_portrait = {
		character = root
		animation = grief
	}
	right_portrait = {
		character = scope:lover
		animation = pain
	}
	lower_left_portrait = scope:owner_to_reveal

	immediate = {
		set_variable = {
			name = block_death_event_from
			value = scope:lover
			days = 3
		}
		murder_interception_handle_extra_deaths_effect = {
			VICTIM = scope:lover
			REASON = death_murder
		}
		#add_achievement_flag_effect = { FLAG = achievement_the_things_love_does_for_us_flag }
	}

	# Who could do such a thing?
	option = {
		name = murder_save.1001.a
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	# Vengeance!
	option = {
		name = murder_save.1001.b
		trigger = {
			exists = scope:scheme_discovered
		}
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	# Who could do such a thing?
	option = {
		name = murder_save.1001.c
		trigger = {
			NOT = { exists = scope:scheme_discovered }
			OR = {
				has_trait = callous
				has_trait = sadistic
			}
		}
		exclusive = yes
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	after = {
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
	}
}

#############################
# Saved from Venomous Creature by Lover
# by Petter Vilberg
#############################

# Owner POV
murder_save.0002 = {
	type = character_event
	window = scheme_failed_event
	title = murder_save.0002.t
	desc = {
		desc = murder_save.0002.opening
		triggered_desc = {
			trigger = {
				OR = {
					is_close_or_extended_family_of = scope:lover
					is_consort_of = scope:lover
					is_employer_of = scope:lover
					has_any_scripted_relation = scope:lover
				}
			}
			desc = murder_save.0002.rel_to_me
		}
		desc = murder_save.0002.end
	}
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = grief
	}
	right_portrait = {
		character = scope:lover
		animation = pain
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = { scope:interception_unique = flag:sacrifice_lover }

	immediate = {
		debug_sort_scheme_save_scopes_for_testing_effect = yes
		scope:target = {
			random_relation = {
				type = lover
				# Grab soulmates first, as they have boosted chances.
				limit = {
					has_relation_soulmate = scope:target
					available_lover_to_sacrifice_in_murder_trigger = { TARGET = scope:target }
				}
				# Then regular lovers.
				alternative_limit = {
					available_lover_to_sacrifice_in_murder_trigger = { TARGET = scope:target }
				}
				weight = {
					base = 1
					modifier = {
						add = 5
						has_opinion_modifier = {
							target = root
							modifier = love_opinion
						}
					}
				}
				save_scope_as = lover
			}
		}
		murder_failure_effect = yes
	}

	option = {
		name = murder_save.0001.a
		scope:scheme = { end_scheme = yes }
	}

	option = {
		name = murder_save.0001.b
		trigger = {
			NOT = { exists = scope:scheme_discovered }
		}
		restart_murder_scheme_effect = yes
	}

	# Fire the rest of the outcome.
	after = {
		scope:target = { trigger_event = murder_save.1002 }
	}
}

# Target POV
murder_save.1002 = {
	type = character_event
	window = scheme_target_event
	title = murder_save.0002.t
	desc = murder_save.1002.desc
	theme = murder_scheme
	left_portrait = {
		character = root
		animation = grief
	}
	right_portrait = {
		character = scope:lover
		animation = pain
	}
	lower_left_portrait = scope:owner_to_reveal

	immediate = {
		set_variable = {
			name = block_death_event_from
			value = scope:lover
			days = 3
		}
		murder_interception_handle_extra_deaths_effect = {
			VICTIM = scope:lover
			REASON = death_poison
		}
		#add_achievement_flag_effect = { FLAG = achievement_the_things_love_does_for_us_flag }
	}

	# Who could do such a thing?
	option = {
		name = murder_save.1001.a
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	# Vengeance!
	option = {
		name = murder_save.1001.b
		trigger = {
			exists = scope:scheme_discovered
		}
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	after = {
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
	}
}

#############################
# Saved from Assassin by Mindbreak character
# by Petter Vilberg
#############################

# Owner POV
murder_save.0003 = {
	type = character_event
	window = scheme_failed_event
	title = murder_save.0003.t
	desc = murder_save.0003.desc
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = grief
	}
	right_portrait = {
		character = scope:broken_person
		animation = pain
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = { scope:interception_unique = flag:sacrifice_mindbreak }

	immediate = {
		debug_sort_scheme_save_scopes_for_testing_effect = yes
		scope:target.var:mind_broken_victim = { save_scope_as = broken_person }
		murder_failure_effect = yes
	}

	option = {
		name = murder_save.0003.a
		scope:scheme = { end_scheme = yes }
	}

	option = {
		name = murder_save.0003.b
		trigger = {
			NOT = { exists = scope:scheme_discovered }
		}
		restart_murder_scheme_effect = yes
	}

	# Fire the rest of the outcome.
	after = {
		scope:target = { trigger_event = murder_save.1003 }
	}
}

# Target POV
murder_save.1003 = {
	type = character_event
	window = scheme_target_event
	title = murder_save.0003.t
	desc = murder_save.1003.desc
	theme = murder_scheme
	left_portrait = {
		character = root
		animation = shock
	}
	right_portrait = {
		character = scope:broken_person
		animation = pain
	}
	lower_left_portrait = scope:owner_to_reveal

	immediate = {
		murder_interception_handle_extra_deaths_effect = {
			VICTIM = scope:broken_person
			REASON = death_murder
		}
	}

	# Who could do such a thing?
	option = {
		name = murder_save.1003.a
		trigger = {
			NOT = { exists = scope:scheme_discovered }
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	# Vengeance!
	option = {
		name = murder_save.1003.a
		trigger = {
			exists = scope:scheme_discovered
		}
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	after = {
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
	}
}

#############################
# Saved from Thugs by War Horse
# by Petter Vilberg
#############################

# Owner POV
murder_save.0004 = {
	type = character_event
	window = scheme_failed_event
	title = murder_save.0004.t
	desc = murder_save.0004.desc
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = shock
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = { scope:interception_unique = flag:sacrifice_warhorse }

	immediate = {
		debug_sort_scheme_save_scopes_for_testing_effect = yes
		random = {
			chance = 30
			save_scope_value_as = {
				name = warhorse_survives
				value = yes
			}
		}
		murder_failure_effect = yes
	}

	option = {
		name = murder_save.0001.a
		scope:scheme = { end_scheme = yes }
	}

	option = {
		name = murder_save.0001.b
		trigger = {
			NOT = { exists = scope:scheme_discovered }
		}
		restart_murder_scheme_effect = yes
	}

	after = {
		# Fire the rest of the outcome.
		scope:target = { trigger_event = murder_save.1004 }
		if = {
			limit = {
				NOT = { exists = scope:warhorse_survives }
			}
			custom_tooltip = murder_save_failure_warhorse_tt
			show_as_tooltip = {
				scope:target = {
					remove_horse_story_modifiers_effect = yes
				}
			}
			scope:target = {
				random_owned_story = {
					limit = { story_type = story_cycle_martial_lifestyle_warhorse }
					hidden_effect = { end_story = yes }
				}
			}
		}
	}
}

# Target POV
murder_save.1004 = {
	type = character_event
	window = scheme_target_event
	title = murder_save.0004.t
	desc = {
		desc = murder_save.1004.opening
		triggered_desc = {
			trigger = { NOT = { exists = scope:warhorse_survives } }
			desc = murder_save.1004.warhorse_dies
		}
	}
	theme = murder_scheme
	left_portrait = {
		character = root
		animation = shock
	}
	right_portrait = {
		character = scope:owner_to_reveal
		animation = anger
	}

	# Who could do such a thing?
	option = {
		name = murder_save.1004.a
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
			exists = scope:warhorse_survives
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	# Vengeance!
	option = {
		name = murder_save.1004.b
		trigger = {
			exists = scope:scheme_discovered
			exists = scope:warhorse_survives
		}
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	# Who could do such a thing?
	option = {
		name = murder_save.1004.c
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
			NOT = { exists = scope:warhorse_survives }
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	# Vengeance!
	option = {
		name = murder_save.1004.d
		trigger = {
			exists = scope:scheme_discovered
			NOT = { exists = scope:warhorse_survives }
		}
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	after = {
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
		if = {
			limit = {
				NOT = { exists = scope:warhorse_survives }
			}
			custom_tooltip = murder_save_warhorse_dies_to_thugs
			show_as_tooltip = {
				remove_horse_story_modifiers_effect = yes
			}
			hidden_effect = {
				if = {
					limit = {
						owns_story_of_type = story_cycle_martial_lifestyle_warhorse
					}
					random_owned_story = {
						limit = {
							story_type = story_cycle_martial_lifestyle_warhorse
						}
						end_story = yes
					}
				}
			}
		}
	}
}

#############################
# Saved from Being Beaten to Death by Prison Pet
# by Petter Vilberg
#############################

# Owner POV
murder_save.0005 = {
	type = character_event
	window = scheme_failed_event
	title = murder_save.0005.t
	desc = murder_save.0005.desc
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = grief
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = { scope:interception_unique = flag:sacrifice_pet_prison }

	immediate = {
		debug_sort_scheme_save_scopes_for_testing_effect = yes
		murder_failure_effect = yes
	}

	option = {
		name = murder_save.0001.a
		scope:scheme = { end_scheme = yes }
	}

	option = {
		name = murder_save.0001.b
		trigger = {
			NOT = { exists = scope:scheme_discovered }
		}
		restart_murder_scheme_effect = yes
	}

	# Fire the rest of the outcome.
	after = {
		scope:target = { trigger_event = murder_save.1005 }
	}
}

# Target POV
murder_save.1005 = {
	type = character_event
	window = scheme_target_event
	title = murder_save.0005.t
	desc = murder_save.1005.desc
	theme = murder_scheme
	left_portrait = {
		character = root
		animation = grief
	}
	right_portrait = {
		character = scope:owner_to_reveal
		animation = anger
	}

	immediate = {
		if = {
			limit = {
				exists = scope:scheme_discovered
			}
			scope:owner = {
				save_scope_as = owner_to_reveal
			}
		}
		random = {
			chance = 50
			save_scope_value_as = {
				name = prison_pet_survives
				value = yes
			}
		}
	}

	# Who could do such a thing?
	option = {
		name = murder_save.1005.a
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
			exists = scope:prison_pet_survives
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	# Vengeance!
	option = {
		name = murder_save.1005.a
		trigger = {
			exists = scope:scheme_discovered
			exists = scope:prison_pet_survives
		}
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	# Who could do such a thing?
	option = {
		name = murder_save.1005.b
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
			NOT = { exists = scope:prison_pet_survives }
		}
		prison_pet_death_effect = yes
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	# Vengeance!
	option = {
		name = murder_save.1005.b
		trigger = {
			exists = scope:scheme_discovered
			NOT = { exists = scope:prison_pet_survives }
		}
		prison_pet_death_effect = yes
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	after = {
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
	}
}

#############################
# Saved from creepy crawlies by cat
# by Linnéa Thimrén
#############################

# Owner POV
murder_save.0007 = {
	type = character_event
	window = scheme_failed_event
	title = murder_save.0007.t
	desc = murder_save.0007.desc
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = shock
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = { scope:interception_unique = flag:sacrifice_cat }

	immediate = {
		debug_sort_scheme_save_scopes_for_testing_effect = yes
		random = {
			chance = 70
			save_scope_value_as = {
				name = cat_survives
				value = yes
			}
		}
		murder_failure_effect = yes
	}

	option = {
		name = murder_save.0001.a
		scope:scheme = { end_scheme = yes }
	}

	option = {
		name = murder_save.0001.b
		trigger = {
			NOT = { exists = scope:scheme_discovered }
		}
		restart_murder_scheme_effect = yes
	}

	after = {
		# Fire the rest of the outcome.
		scope:target = { trigger_event = murder_save.1007 }
		if = {
			limit = {
				NOT = { exists = scope:cat_survives }
			}
			custom_tooltip = murder_save_failure_cat_tt
			show_as_tooltip = {
				scope:target = {
					remove_cat_story_modifiers_effect = yes
				}
			}
			scope:target = {
				random_owned_story = {
					limit = { story_type = story_cycle_pet_cat }
					hidden_effect = { end_story = yes }
				}
			}
		}
	}
}

# Target POV
murder_save.1007 = {
	type = character_event
	window = scheme_target_event
	title = murder_save.0007.t
	desc = {
		desc = murder_save.1007.opening
		triggered_desc = {
			trigger = { NOT = { exists = scope:cat_survives } }
			desc = murder_save.1007.cat_dies
		}
	}
	theme = murder_scheme
	left_portrait = {
		character = root
		triggered_animation = {
			trigger = { NOT = { exists = scope:cat_survives } }
			animation = grief
		}
		triggered_animation = {
			trigger = { always = yes }
			animation = shock
		}
	}
	right_portrait = {
		character = scope:owner_to_reveal
		animation = anger
	}

	# Who could do such a thing?
	option = {
		name = murder_save.1007.a
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
			exists = scope:cat_survives
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	# Vengeance!
	option = {
		name = murder_save.1007.b
		trigger = {
			exists = scope:scheme_discovered
			exists = scope:cat_survives
		}
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	# Who could do such a thing?
	option = {
		name = murder_save.1007.c
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
			NOT = { exists = scope:cat_survives }
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	# Vengeance!
	option = {
		name = murder_save.1007.d
		trigger = {
			exists = scope:scheme_discovered
			NOT = { exists = scope:cat_survives }
		}
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	after = {
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
		if = {
			limit = {
				NOT = { exists = scope:cat_survives }
			}
			custom_tooltip = murder_save_creepy_crawlies_cat_dies
			show_as_tooltip = {
				remove_cat_story_modifiers_effect = yes
			}
			hidden_effect = {
				if = {
					limit = {
						owns_story_of_type = story_cycle_pet_cat
					}
					random_owned_story = {
						limit = {
							story_type = story_cycle_pet_cat
						}
						end_story = yes
					}
				}
			}
		}
	}
}

#############################
# Saved from assassin by dog
# by Linnéa Thimrén
#############################

# Owner POV
murder_save.0008 = {
	type = character_event
	window = scheme_failed_event
	title = murder_save.0008.t
	desc = murder_save.0008.desc
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = shock
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = { scope:interception_unique = flag:sacrifice_dog }

	immediate = {
		debug_sort_scheme_save_scopes_for_testing_effect = yes
		murder_failure_effect = yes
	}

	option = {
		name = murder_save.0001.a
		scope:scheme = { end_scheme = yes }
	}

	option = {
		name = murder_save.0001.b
		trigger = {
			NOT = { exists = scope:scheme_discovered }
		}
		restart_murder_scheme_effect = yes
	}

	# Fire the rest of the outcome.
	after = {
		scope:target = { trigger_event = murder_save.1008 }
	}
}

# Target POV
murder_save.1008 = {
	type = character_event
	window = scheme_target_event
	title = murder_save.0008.t
	desc = murder_save.1008.desc
	theme = murder_scheme
	left_portrait = {
		character = root
		animation = shock
	}
	right_portrait = {
		character = scope:owner_to_reveal
		animation = anger
	}

	# Who could do such a thing?
	option = {
		name = murder_save.1008.a
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	# Vengeance!
	option = {
		name = murder_save.1001.b
		trigger = {
			exists = scope:scheme_discovered
		}
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	after = {
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
	}
}

#############################
# Family Connections (Murder Save)
# by Petter Vilberg
#############################

# Owner POV
murder_save.0009 = {
	type = character_event
	window = scheme_failed_event
	title = murder_save.0009.t
	desc = murder_save.0009.desc
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = scheme
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = { scope:interception_unique = flag:family_connections_dynleg }

	immediate = {
		debug_sort_scheme_save_scopes_for_testing_effect = yes
		murder_failure_effect = yes
	}

	option = {
		name = murder_save.0009.a
		scope:scheme = { end_scheme = yes }
	}

	option = {
		name = murder_save.0009.b
		trigger = {
			NOT = { exists = scope:scheme_discovered }
		}
		restart_murder_scheme_effect = yes
	}

	after = {
		# Fire the rest of the outcome.
		scope:target = { trigger_event = murder_save.1009 }
		custom_tooltip = murder_save.targets_guile_legacy_save_used_up
	}
}

# Target POV
murder_save.1009 = {
	type = character_event
	window = scheme_target_event
	title = murder_save.0009.t
	desc = {
		desc = murder_save.1009.opening
		first_valid = {
			triggered_desc = {
				trigger = { exists = scope:scheme_discovered }
				desc = murder_save.1009.owner_discovered
			}
			desc = murder_save.1009.owner_not_discovered
		}
		desc = murder_save.1009.end
	}
	theme = murder_scheme
	left_portrait = {
		character = root
		animation = scheme
	}
	right_portrait = {
		character = scope:owner_to_reveal
		animation = anger
	}

	immediate = { add_character_flag = guile_legacy_5_save_used }

	# Who could do such a thing?
	option = {
		name = murder_save.1009.a
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
		custom_tooltip = murder_save.used_up_guile_legacy_5_save
	}

	# Vengeance!
	option = {
		name = murder_save.1001.b
		trigger = {
			exists = scope:scheme_discovered
		}
		custom_tooltip = murder_save.failure_known_owner_tt
		custom_tooltip = murder_save.used_up_guile_legacy_5_save
	}

	after = {
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
		#To give players a notification if this character was important
		hidden_effect = {
			every_player = {
				limit = {
					NOT = { this = root }
					dynasty = root.dynasty
					OR = {
						liege ?= scope:target
						is_close_family_of = scope:target
						is_consort_of = scope:target
					}
				}
				send_interface_message = {
					type = event_dynasty_good
					title = murder_save.dynasty_member_used_guile_legacy_5_save
					desc = murder_save.dynasty_member_used_guile_legacy_5_save_desc
					
					left_icon = scope:target
					
				}
			}
		}
	}
}

#############################
# Saved from poisoned food by cat
# by Linnéa Thimrén
#############################

# Owner POV
murder_save.0011 = {
	type = character_event
	window = scheme_failed_event
	title = murder_save.0011.t
	desc = murder_save.0011.desc
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = shock
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = { scope:interception_unique = flag:sacrifice_cat }

	immediate = {
		debug_sort_scheme_save_scopes_for_testing_effect = yes
		murder_failure_effect = yes
	}

	option = {
		name = murder_save.0001.a
		scope:scheme = { end_scheme = yes }
	}

	option = {
		name = murder_save.0001.b
		trigger = {
			NOT = { exists = scope:scheme_discovered }
		}
		restart_murder_scheme_effect = yes
	}

	after = {
		# Fire the rest of the outcome.
		scope:target = { trigger_event = murder_save.1011 }
		custom_tooltip = murder_save_poison_cat_tt
		show_as_tooltip = {
			scope:target = {
				remove_cat_story_modifiers_effect = yes
			}
		}
	}
}

# Target POV
murder_save.1011 = {
	type = character_event
	window = scheme_target_event
	title = murder_save.0011.t
	desc = murder_save.1011.desc
	theme = murder_scheme
	left_portrait = {
		character = root
		animation = grief
	}
	right_portrait = {
		character = scope:owner_to_reveal
		animation = anger
	}

	# Who could do such a thing?
	option = {
		name = murder_save.1001.a
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	# Vengeance!
	option = {
		name = murder_save.1001.b
		trigger = {
			exists = scope:scheme_discovered
		}
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	after = {
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
		custom_tooltip = murder_save_poison_cat_dies
		show_as_tooltip = {
			remove_cat_story_modifiers_effect = yes
		}
		hidden_effect = {
			if = {
				limit = {
					owns_story_of_type = story_cycle_pet_cat
				}
				random_owned_story = {
					limit = {
						story_type = story_cycle_pet_cat
					}
					end_story = yes
				}
			}
		}
	}
}

#############################
# Saved from poisoned food by dog
# by Linnéa Thimrén
#############################

# Owner POV
murder_save.0012 = {
	type = character_event
	window = scheme_failed_event
	title = murder_save.0012.t
	desc = murder_save.0012.desc
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = shock
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = { scope:interception_unique = flag:sacrifice_dog }

	immediate = {
		debug_sort_scheme_save_scopes_for_testing_effect = yes
		murder_failure_effect = yes
	}

	option = {
		name = murder_save.0001.a
		scope:scheme = { end_scheme = yes }
	}

	option = {
		name = murder_save.0001.b
		trigger = {
			NOT = { exists = scope:scheme_discovered }
		}
		restart_murder_scheme_effect = yes
	}

	after = {
		# Fire the rest of the outcome.
		scope:target = { trigger_event = murder_save.1012 }
		custom_tooltip = murder_save_poison_dog_tt
		show_as_tooltip = {
			scope:target = {
				remove_dog_story_modifiers_effect = yes
			}
		}
	}
}

# Target POV
murder_save.1012 = {
	type = character_event
	window = scheme_target_event
	title = murder_save.0012.t
	desc = murder_save.1012.desc
	theme = murder_scheme
	left_portrait = {
		character = root
		animation = grief
	}
	right_portrait = {
		character = scope:owner_to_reveal
		animation = anger
	}

	# Who could do such a thing?
	option = {
		name = murder_save.1001.a
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	# Vengeance!
	option = {
		name = murder_save.1001.b
		trigger = {
			exists = scope:scheme_discovered
		}
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	after = {
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
		custom_tooltip = murder_save_poison_dog_dies
		show_as_tooltip = {
			remove_dog_story_modifiers_effect = yes
		}
		hidden_effect = {
			if = {
				limit = {
					owns_story_of_type = story_cycle_pet_dog
				}
				random_owned_story = {
					limit = {
						story_type = story_cycle_pet_dog
					}
					end_story = yes
				}
			}
		}
	}
}

#############################
# Saved from assassin by LINGUISTICS
# by Daniel Moore
#############################

# Owner POV
murder_save.0014 = {
	type = character_event
	window = scheme_failed_event
	title = murder_save.0014.t
	desc = murder_save.0014.desc
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = shock
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = { scope:interception_unique = flag:knowledge_bilingual }

	immediate = {
		debug_sort_scheme_save_scopes_for_testing_effect = yes
		murder_failure_effect = yes
		# Log that we've used this culture.
		## It's fine that we're checking against culture rather than language: we can't easily store languages in a list, so this a simple-ish compromise.
		scope:target = {
			add_to_variable_list = {
				name = bilingual_murder_saves
				target = scope:owner.culture
			}
		}
	}

	option = {
		name = murder_save.0001.a
		scope:scheme = { end_scheme = yes }
	}

	option = {
		name = murder_save.0001.b
		trigger = {
			NOT = { exists = scope:scheme_discovered }
		}
		restart_murder_scheme_effect = yes
	}

	# Fire the rest of the outcome.
	after = {
		scope:target = { trigger_event = murder_save.1014 }
	}
}

# Target POV
murder_save.1014 = {
	type = character_event
	window = scheme_target_event
	title = murder_save.0014.t
	desc = murder_save.1014.desc
	theme = murder_scheme
	left_portrait = {
		character = root
		animation = anger
	}
	right_portrait = {
		character = scope:owner_to_reveal
		animation = rage
	}

	# Who could do such a thing?
	option = {
		name = murder_save.1014.a
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
		}
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	# Vengeance!
	option = {
		name = murder_save.1001.b
		trigger = {
			exists = scope:scheme_discovered
		}
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	after = {
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
	}
}

#############################
# Saved from assassin by artifact
# by Daniel Moore
#############################

scripted_effect murder_save_unique_damage_artefact_effect = {
	add_durability = {
		value = scope:this_artifact.artifact_durability
		multiply = -0.25
	}
}

# Owner POV
murder_save.0015 = {
	type = character_event
	window = scheme_failed_event
	title = murder_save.0015.t
	desc = murder_save.0015.desc
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = shock
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	artifact = { 
		target = scope:this_artifact 
		position = lower_center_portrait 
	}
	
	trigger = { scope:interception_unique = flag:sacrifice_artefact }

	immediate = {
		debug_sort_scheme_save_scopes_for_testing_effect = yes
		scope:target = {
			random_character_artifact = {
				limit = {
					NOT = {  has_variable = saved_from_assassination }
				}
				save_scope_as = this_artifact
			}
		}
		scope:this_artifact = {
			show_as_tooltip = { murder_save_unique_damage_artefact_effect = yes }
			set_variable = saved_from_assassination
		}
		murder_failure_effect = yes
	}

	option = {
		name = murder_save.0001.a
		scope:scheme = { end_scheme = yes }
	}

	option = {
		name = murder_save.0001.b
		trigger = {
			NOT = { exists = scope:scheme_discovered }
		}
		restart_murder_scheme_effect = yes
	}

	# Fire the rest of the outcome.
	after = {
		scope:target = { trigger_event = murder_save.1015 }
	}
}

# Target POV
murder_save.1015 = {
	type = character_event
	window = scheme_target_event
	title = murder_save.0015.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:this_artifact = {
						OR = {
							artifact_type = tapestry
							artifact_type = animal_hide
							artifact_type = animal_hide_big
							artifact_type = necklace
							artifact_type = wall_big
							#has_variable = christian_loincloth
							#has_variable = christian_girdle
						}
						
					}
				}
				desc = murder_save.1015.strangling_artifact.desc
			}
			triggered_desc = {
				trigger = {
					scope:this_artifact = {
						OR = {
							artifact_type = brooch
							artifact_type = philosophers_stone
							#has_variable = christian_veil
							#has_variable = buddhism_tongue
						}
					}
				}
				desc = murder_save.1015.small_artifact.desc
			}
			triggered_desc = {
				trigger = {
					scope:this_artifact = {
							artifact_type = throne
					}
				}
				desc = murder_save.1015.throne_artifact.desc
			}
			triggered_desc = {
				trigger = {
					scope:this_artifact = {
						artifact_type = throne_special
					}
				}
				desc = murder_save.1015.throne_special_artifact.desc
			}
			triggered_desc = {
				trigger = {
					scope:this_artifact = {
						OR = {
							artifact_type = sculpture
							artifact_type = cabinet
						}
					}
				}
				desc = murder_save.1015.sculpture_artifact.desc
			}
			triggered_desc = {
				trigger = {
					scope:this_artifact = {
						artifact_type = chest
					}
				}
				desc = murder_save.1015.chest_artifact.desc
			}
			triggered_desc = {
				trigger = {
					scope:this_artifact = {
						artifact_slot_type = primary_armament
					}
				}
				desc = murder_save.1015.actual_weapon_artifact.desc
			}
			triggered_desc = {
				desc = murder_save.1015.blunt_artifact.desc
			}
		}
	}
	theme = murder_scheme
	left_portrait = {
		character = root
		animation = anger
	}
	right_portrait = {
		character = scope:attempted_assassin
		animation = loss_1
	}
	artifact = {
		target = scope:this_artifact
		position = lower_center_portrait
	}

	immediate = {
		# Pick a localation for this to happen.
		if = {
			limit = { exists = capital_province }
			capital_province = { save_scope_as = home_province }
		}
		else = {
			location = { save_scope_as = home_province }
		}
		# Configure out assassin.
		## Try to grab a guest...
		if = {
			limit = {
				any_pool_guest = {
					has_no_particular_noble_roots_trigger = yes
					is_available_ai_adult = yes
				}
			}
			random_pool_guest = {
				limit = {
					has_no_particular_noble_roots_trigger = yes
					is_available_ai_adult = yes
				}
				save_scope_as = attempted_assassin
			}
		}
		## ... otherwise, create one.
		else = {
			create_character = {
				gender_female_chance = 50
				location = scope:home_province
				template_character = scope:target
				save_scope_as = attempted_assassin
			}
		}
		## Plus, whack 'em around a lil bit.
		scope:attempted_assassin = {
			hidden_effect = {
				add_trait = peasant_leader
				increase_wounds_effect = { REASON = fight }
			}
		}
	}

	# Who could do such a thing?
	option = {
		name = murder_save.1001.a
		trigger = {
			NOT = { exists = scope:scheme_discovered }
		}
		scope:this_artifact = { murder_save_unique_damage_artefact_effect = yes }
		custom_tooltip = murder_save.failure_unknown_owner_tt
	}

	# Vengeance!
	option = {
		name = murder_save.1001.b
		trigger = { exists = scope:scheme_discovered }
		scope:this_artifact = { murder_save_unique_damage_artefact_effect = yes }
		custom_tooltip = murder_save.failure_known_owner_tt
	}

	after = {
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
		scope:attempted_assassin = {
			override_death_killer_artifact_effect = {
				death_reason = death_murder
				killer = scope:target
				artifact = scope:this_artifact
			}
		}
		if = {
			limit = {
				scope:target = { highest_held_title_tier >= tier_kingdom }
			}
			scope:this_artifact = {
				if = {
					limit = {
						OR = {
							artifact_type = tapestry
							artifact_type = animal_hide
							artifact_type = animal_hide_big
							artifact_type = wall_big
						}
					}
					set_artifact_description = new_artifact_loc_banner
				}
				else = { set_artifact_description = new_artifact_loc }
			}
		}
	}
}
