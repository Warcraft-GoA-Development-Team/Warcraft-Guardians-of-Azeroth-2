#Events fired for the settlement of declaration of war

namespace = war_event


#Your war has been invalidated since your Liege declared war on the defender, text by Bianca Savazzi
war_event.1001 = {
	type = character_event
	title = war_event.1001.t
	desc = war_event.1001.desc
	theme = war
	right_portrait = {
		character = scope:liege_invalidator
		animation = war_attacker
	}
	left_portrait = {
		character = scope:recipient
		animation = war_defender
	}

	immediate = {
		liege = {
			save_scope_as = liege_invalidator #needed for loc, and only players can invalidate other player's war
		}
		save_scope_as = invalidator
	}

	option = {
		name = war_event.1001.a
		ai_chance = {
			base = 10
			ai_value_modifier = {
				ai_greed = 0.1
				ai_vengefulness = 0.3
			}
		}
		
		if = {
			limit = { is_ai = yes }
			add_opinion = {
				modifier = disappointed_opinion
				target = scope:liege_invalidator
				opinion = -20
			}
		}
	}

	after = {
		show_as_tooltip = {
			every_character_war = {
				limit = {
					primary_defender = scope:recipient
				}
				end_war = invalidated #Actually ended in the recipient's event
			}
		}
		scope:recipient = {
			trigger_event = war_event.2003
		}
	}
}



#A war got transferred scope:war & scope:defender, text by Mathilda Bjarnehed
war_event.2001 = {
	type = character_event

	title = war_event.2001.t
	desc = war_event.2001.desc
	theme = war
	left_portrait = {
		character = scope:defender
		animation = war_defender
	}

	option = {
		name = war_event.2001.a
		custom_tooltip = war_event.2001.a.tt
	}
	
	option = {
		name = war_event.2001.b
		show_as_tooltip = {
			scope:war = {
				end_war = invalidated
			}
		}

		save_scope_as = invalidator
		scope:defender = {
			trigger_event = war_event.2002
		}
	}
}

war_event.2002 = { #by Mathilda Bjarnehed
	type = letter_event
	opening = war_event.2002.t
	desc = war_event.2002.desc
	sender = scope:invalidator

	immediate = {
		if = {
			limit = {
				exists = scope:war
			}
			scope:war = {
				end_war = invalidated
			}
		}
		else = {
			every_character_war = {
				limit = {
					primary_attacker = {
						is_vassal_or_below_of = scope:liege_invalidator
						trigger_if = { #Ai should never invalidate a player's war!
							limit = {
								this = { is_ai = no }
							}
							scope:invalidator = {
								is_ai = no
							}
						}
					}
				}
				end_war = invalidated
			}
		}
	}

	option = {
		name = war_event.2002.a
	}
}

war_event.2003 = { #by Linnéa Thimrén
	type = letter_event
	opening = war_event.2002.t
	desc = war_event.2003.desc
	sender = scope:invalidator

	immediate = {
		if = {
			limit = {
				exists = scope:war
			}
			scope:war = {
				end_war = invalidated
			}
		}
		else = {
			every_character_war = {
				limit = {
					primary_attacker = {
						is_vassal_or_below_of = scope:liege_invalidator
						trigger_if = { #Ai should never invalidate a player's war!
							limit = {
								this = { is_ai = no }
							}
							scope:invalidator = {
								is_ai = no
							}
						}
					}
				}
				end_war = invalidated
			}
		}
	}

	option = {
		name = war_event.2003.a
	}
}

#########################################
# Ally mad at you for not contributing	#
# by Sean Hughes						#
# 3000-3002								#
#########################################

scripted_trigger has_not_contributed_to_allied_war_trigger = {
	exists = scope:war
	scope:war = {
		OR = {
			AND = {
				is_attacker = root
				primary_attacker = {
					is_ai = yes
					save_temporary_scope_as = war_owner
				}
			}
			AND = {
				is_defender = root
				primary_defender = {
					is_ai = yes
					save_temporary_scope_as = war_owner
				}
			}
		}
		exists = scope:war_owner
		NOT = {
			scope:war_owner = {
				any_character_war = {
					war_contribution = {
						target = root
						value > 0
					}
				}
			}
		}
	}
}

war_event.3000 = {
	hidden = yes

	immediate = {
		trigger_event = {
			id = war_event.3001
			days = 730
		}
	}
}

war_event.3001 = {
	type = letter_event
	opening = war_event.3001.t
	desc = war_event.3001.desc
	sender = {
		character = scope:war_owner
		animation = disapproval
	}

	trigger = {
		# These events only exist to prevent human players from exploiting one-sided alliances with AI rulers.
		is_ai = no

		# This event will not trigger if the player currently has war contribution in ANY war of their ally.
		# Also will not trigger if a player has been flagged as having recently contributed in ANY ally's war.
		has_not_contributed_to_allied_war_trigger = yes
		NOT = { has_character_flag = recently_contributed_to_allys_war }

		# It gets weird if you're defending against someone else at the same time, so we block the event in that case
		any_character_war = {
			NOT = { this = scope:war }
			is_defender = root
		}
	}

	on_trigger_fail = {
		if = {
			# If we currently have war contribution in ANY ally's war...
			limit = {
				has_not_contributed_to_allied_war_trigger = no
			}
			# Add a 2-year grace period to firing this type of event for the player.
			add_character_flag = {
				flag = recently_contributed_to_allys_war
				years = 2
			}
		}
	}

	immediate = {
		scope:war = {
			if = {
				limit = {
					is_attacker = root
				}
				primary_attacker = {
					save_scope_as = war_owner
				}
			}
			else = {
				primary_defender = {
					save_scope_as = war_owner
				}
			}
		}

		scope:war_owner = {
			add_opinion = {
				modifier = disappointed_opinion
				target = root
				opinion = -20
			}
		}
	}

	option = {
		name = war_event.3001.a
		custom_tooltip = war_event.3001.a.tt
		trigger_event = {
			id = war_event.3002
			days = 365
		}
	}

	option = {
		name = war_event.3001.b
		custom_tooltip = war_event.3001.b.tt
		pay_short_term_gold = {
			target = scope:war_owner
			gold = major_gold_value
		}

		#This blocks you from being goaded multiple times if you are in multiple wars.
		add_character_flag = {
			flag = recently_contributed_to_allys_war
			years = 1
		}
	}

	option = {
		name = war_event.3001.c
		add_prestige = medium_prestige_loss
		break_alliance = scope:war_owner
	}
}

scripted_trigger war_event_3002_wont_break_alliance_trigger = {
	is_spouse_of = scope:war_owner
	scope:war_owner = {
		opinion = {
			target = root
			value >= 20
		}
	}	
}

war_event.3002 = {
	type = letter_event
	opening = war_event.3001.t
	desc = {
		desc = war_event.3002.desc.start
		first_valid = {
			triggered_desc = {
				trigger = {
					war_event_3002_wont_break_alliance_trigger = yes
				}
				desc = war_event.3003.desc.end.2
			}
			desc = war_event.3002.desc.end.1
		}

	}
	sender = {
		character = scope:war_owner
		animation = anger
	}

	trigger = {
		# These events only exist to prevent human players from exploiting one-sided alliances with AI rules.
		is_ai = no

		# This event will not trigger if the player currently has war contribution in ANY war of their ally.
		# Also will not trigger if a player has been flagged as having recently contributed in ANY ally's war.
		has_not_contributed_to_allied_war_trigger = yes
		NOT = { has_character_flag = recently_contributed_to_allys_war }
	}

	on_trigger_fail = {
		if = {
			# If we currently have war contribution in ANY ally's war...
			limit = {
				has_not_contributed_to_allied_war_trigger = no
			}
			# Add a 2-year grace period to firing this type of event for the player.
			add_character_flag = {
				flag = recently_contributed_to_allys_war
				years = 2
			}
		}
	}

	immediate = {
		# Find out who the sender should be.
		scope:war = {
			if = {
				limit = {
					is_attacker = root
				}
				primary_attacker = {
					save_scope_as = war_owner
				}
			}
			else = {
				primary_defender = {
					save_scope_as = war_owner
				}
			}
		}

		# Apply penalties for failing to fulfill obligations
		
		scope:war_owner = {
			add_opinion = {
				modifier = angry_opinion
				target = root
				opinion = -50
			}
		}

		if = {
			limit = {
				war_event_3002_wont_break_alliance_trigger = no
			}
			scope:war_owner = {
				break_alliance = root
			}
		}

		add_prestige_level = -1
	}


	# Sender breaks their aliance with you.
	option = {
		name = war_event.3002.1.a
		trigger = {
			war_event_3002_wont_break_alliance_trigger = no
		}
	}

	# Maintain the aliance, for now...
	option = {
		name = war_event.3003.2.a
		trigger = {
			war_event_3002_wont_break_alliance_trigger = yes
		}
	}

	# Choose to break off the alliance yourself.
	option = {
		name = war_event.3003.2.b
		trigger = {
			war_event_3002_wont_break_alliance_trigger = yes
		}
		break_alliance = scope:war_owner
	}
}


################################
# Holy wars "soft invalidated" by faith change
############################################

#If attacker in a holy war, might prompt you to end war or take a penalty
war_event.3100 = { #by Mathilda Bjarnehed
	type = character_event
	hidden = yes
	
		immediate = {
			every_character_war = {
				if = {
					limit = {
						using_non_ghw_holy_war_cb_trigger = yes
					}
				}
				save_scope_as = war
				primary_defender = { save_scope_as = defender }
				primary_attacker = { save_scope_as = attacker }

				#Am I a defender in a holy war and changed my faith so that attacker is no longer considering me hostile?
				if = {
					limit = {
						root = scope:defender
						scope:war = { using_holy_war_cb_trigger = yes } #Should only trigger of holy wars
						scope:attacker.faith = {
							NOT = {
								faith_hostility_level = {
									target = scope:defender.faith
									value >= religious_cb_enabled_hostility_level
								}
							}
						}
						NOT = { exists = var:invalidate_defender_faith_change } #If this var is already set through interaction, don't send event
					}
					#Prompt attacker to quit or take a penalty
					scope:attacker = {
						trigger_event = war_event.3101
					}
				}
				#Am I an attacker in a holy war and changed by faith so that it is no longer valid?
				else_if = {
					limit = {
						root = scope:attacker
						scope:attacker.faith = {
							NOT = {
								faith_hostility_level = {
									target = scope:defender.faith
									value >= religious_cb_enabled_hostility_level
								}
							}
						}
					}
					#Then we invalidate immediately
					set_variable = {
						name = invalidate_attacker_faith_change
						value = yes
					}
				}
			}
		}
}

#Attacker in holy war no longer has a proper cause
war_event.3101 = { #by Mathilda Bjarnehed
	type = character_event
	title = war_event.3101.t
	desc = war_event.3101.desc
	theme = war
	left_portrait = {
		character = scope:defender
		animation = war_defender
	}

	# Put down swords
	option = {
		name = war_event.3101.a
			
	
		scope:war = {
			show_as_tooltip = {
				end_war = invalidated
			}
			set_variable = {
				name = invalidate_defender_faith_change
				value = yes
			}
		}

		ai_chance = {
			base = 100
		}
	}

	# Refuse to end war (only for players)
	option = {
		name = war_event.3101.b

		add_piety_level = -1
		custom_tooltip = war_event.3101.b.tt

		scope:defender = {
 			trigger_event = {
 				id = war_event.3102
 				days = 7
 			}
 		}

		ai_chance = {
			base = 0
		}
	}
}

#Defender is told the player won't stop the war
war_event.3102 = { #by Mathilda Bjarnehed
	type = letter_event
	opening = war_event.3102.t
	desc = war_event.3102.desc
	sender = {
		character = scope:attacker
		animation = war_attacker
	}

	option = {
		name = war_event.3102.a
	}
}
