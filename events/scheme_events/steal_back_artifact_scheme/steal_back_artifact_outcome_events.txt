#Events handling Stealing outcomes

namespace = steal_back_artifact_outcome

#################################
# Positive Outcomes
# 1000-1999
#################################

# Generic successful heist notification event to scheme owner
steal_back_artifact_outcome.1001 = {
	type = character_event
	title = steal_back_artifact_outcome.1001.t
	desc = steal_back_artifact_outcome.1001.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:target

	artifact = { # To display the artifact in the event-window
		target = scope:artifact #artifact scope
		position = lower_center_portrait 
		trigger = { exists = scope:artifact } #trigger for displaying the portrait
	}

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	immediate = {
		if = {
			limit = { exists = scope:target.capital_province }
			set_local_variable = {
				name = location
				value = scope:target.capital_province
			}
		}
		else_if = {
			limit = { exists = scope:target.location }
			set_local_variable = {
				name = location
				value = scope:target.location
			}
		}

		scope:artifact = {
			save_scope_as = artifact_to_steal
			hidden_effect = {
				if = {
					limit = {
						exists = var:location
					}
					set_owner = {
						target = scope:owner
						history = {
							type = stolen
							actor = scope:target #stolen from
							recipient = scope:owner #stealer
							location = var:location
						}
					}
				}
				else = { #If no location exists it is "conquered"
					set_owner = {
						target = scope:owner
						history = {
							type = conquest
							actor = scope:owner #stealer
							recipient = scope:target #stolen from
						}
					}
				}
				if = {
					limit = {
						NOT = { has_variable = stolen_artifact }
					}
					set_variable = {
						name = stolen_artifact
						value = 1
					}
				}
				else = {
					change_variable = {
						name = stolen_artifact
						add = 1
					}
				}
			}
		}
		scope:target = {
			add_personal_artifact_claim = scope:artifact_to_steal
		}
		root = { 
			send_interface_message = {
				type = event_intrigue_good
				title = steal_back_artifact_success_message
				left_icon = scope:target
				right_icon = scope:artifact
				show_as_tooltip = { 
					scope:artifact_to_steal = {
						set_owner = scope:owner 
					}
				}
			}
		}
	}

	option = {
		name = steal_back_artifact_outcome.1001.a
		steal_back_artifact_success_effect = yes

		show_as_tooltip = { 
			scope:artifact_to_steal = {
				set_owner = scope:owner 
			}
		}
		scope:scheme = {
			end_scheme = yes
		}

		scope:target = {
			trigger_event = steal_back_artifact_outcome.1002 #Notify target that stuff's stolen
		}
	}
}

# Generic successful heist notification event to scheme target
steal_back_artifact_outcome.1002 = {
	type = character_event
	title = steal_back_artifact_outcome.1002.t
	desc = steal_back_artifact_outcome.1002.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:owner
	artifact = { 
		target = scope:artifact_to_steal 
		position = lower_center_portrait 
		trigger = { exists = scope:artifact_to_steal } 
	}

	option = {
		name = steal_back_artifact_outcome.1002.a

		show_as_tooltip = { 
			scope:artifact_to_steal = {
				set_owner = scope:owner 
			}
		}
	}
}

#################################
# Negative Outcomes
# 2000-2999
#################################

#
steal_back_artifact_outcome.2001 = {
	type = character_event
	title = steal_back_artifact_outcome.2001.t
	desc = steal_back_artifact_outcome.2001
	theme = generic_intrigue_scheme

	left_portrait = scope:target
	artifact = { 
		target = scope:artifact
		position = lower_center_portrait 
		trigger = { exists = scope:artifact } 
	}

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		NOT = {
			has_character_flag = had_steal_back_artifact_outcome_2001
		}
	}

	immediate = {
		add_character_flag = {
			flag = had_steal_back_artifact_outcome_2001
			years = 5
		}
	}

	option = {
		name = steal_back_artifact_outcome.2001.a

		steal_back_artifact_failure_effect = yes
		scope:scheme = {
			end_scheme = yes
		 }
	}
}
