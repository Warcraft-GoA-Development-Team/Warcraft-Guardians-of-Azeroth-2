#Scripted effects relating to Murder Schemes

#####################################################################
# EFFECT LIST
#####################################################################
# !!! Remember to add all new effects with a short description here !!!

######################################################################
# EFFECTS
######################################################################

########################
# COURT SCHEME EFFECTS #
########################

court_success_prestige_effect = {

	if = {
		limit = { court_love_is_shunned_or_criminal_trigger = no }  #Only if it's not a taboo courtship

		#Whose tier matters?
		if = {
			limit = {
				scope:target = {
					is_ruler = no
					exists = liege
					OR = {
						is_spouse_of = this.liege
						is_close_or_extended_family_of = this.liege
					}
				}
			}
			scope:target = { liege = { save_scope_as = prestige_comparison } }
		}
		else = {
			scope:target = { save_scope_as = prestige_comparison }
		}

		#Epic
		if = {
			limit = {
				#They are at least two levels above you or empire level
				OR = {
					tier_difference = {
						target = scope:prestige_comparison
						value <= -2
					}
					scope:prestige_comparison.highest_held_title_tier = tier_empire
				}
			}
			add_prestige = massive_prestige_gain
		}
		#Great
		else_if = {
			limit = {
				OR = {
					#They are one level above you or kingdom level
					tier_difference = {
						target = scope:prestige_comparison
						value = -1
					}
					scope:prestige_comparison.highest_held_title_tier = tier_kingdom
				}
			}
			add_prestige = major_prestige_gain
		}
		#Good
		else_if = {
			limit = {
				#They're your level or duchy level
				OR = {
					scope:prestige_comparison.highest_held_title_tier = this.highest_held_title_tier
					scope:prestige_comparison.highest_held_title_tier = tier_duchy
				}
			}
			add_prestige = medium_prestige_value
		}
		#Okay
		else_if = {
			limit = {
				#They're at least county level
				scope:prestige_comparison.highest_held_title_tier >= tier_county
			}
			add_prestige = minor_prestige_value
		}
		#Everything else (everyone targeting barons/unlanded)
		else = {
			add_prestige = miniscule_prestige_value
		}
	}
}




court_ongoing_1010_good_duel_outcome_effect = {
	add_prestige = medium_prestige_gain
	scope:scheme = {
		add_scheme_modifier = {
			type = courting_act_of_heroism_modifier
		}
	}
}

court_ongoing_fetch_gift_modifier_effect = {
	#Wolf pelt
	if = {
		limit = { 
			scope:target = { has_character_flag = court_ongoing_wolf_pelt_flag }
			has_royal_court = yes # Since these are court artifacts and serve no real purpose to those without a court
		}
		create_artifact_animal_hide_effect = {
			OWNER = scope:target
			HUNTER = scope:target
			LEGENDARY = no
			ANIMAL = flag:wolf
		}
	} 
	# Necklace
	else_if = {
		limit = { 
			scope:target = { has_character_flag = court_ongoing_necklace_flag }
		}
		create_artifact_necklace_effect = {
			OWNER = scope:target
			SMITH = scope:target
		}
		hidden_effect_new_object = {
			scope:newly_created_artifact = {
				flag_as_trash_artifact = yes
			}
		}
	}
	# Flower
	else_if = {
		limit = { 
			scope:target = { has_character_flag = court_ongoing_orchid_flag }
		}
		save_scope_value_as = {
			name = flower_species
			value = flag:flower_type_orchid
		}
		create_artifact_pressed_flower_effect = { OWNER = scope:target } 
		clear_saved_scope = flower_species
		hidden_effect_new_object = {
			scope:newly_created_artifact = {
				flag_as_trash_artifact = yes
			}
		}
	}
	else = {
		add_character_modifier = {
			modifier = $GIFT$_modifier
			years = 20
		}
	}
}

court_ongoing_fetch_gift_target_outcome_effect = {
	hidden_effect = {
		scope:target = {
			if = {
				limit = { is_ai = no }
			}
			save_temporary_scope_value_as = {
				name = gift_outcome
				value = flag:$OUTCOME$
			}

			if = {
				limit = {
					scope:gift_outcome = flag:success
				}
				send_interface_toast = {
					title = court_ongoing.1021.$GIFT$.success
					left_icon = scope:owner
					court_ongoing_fetch_gift_modifier_effect = { GIFT = $GIFT$ }
				}
			}
			else_if = {
				limit = {
					scope:gift_outcome = flag:failure
				}
				send_interface_toast = {
					title = court_ongoing.1021.$GIFT$.failure
					left_icon = scope:owner
				}
			}
			#Flag clean up 
			remove_character_flag = court_ongoing_wolf_pelt_flag
			remove_character_flag = court_ongoing_necklace_flag
			remove_character_flag = court_ongoing_orchid_flag
		}
	}
}

court_ongoing_1030_dog_modifier_effect = {
	if = {
		limit = {
			NOT = { has_character_flag = had_dog_story }
		}
		start_dog_story_cycle_effect = yes
	}
}

court_ongoing_1030_cat_modifier_effect = {
	 if = {
		limit = {
			NOT = { has_character_flag = had_cat_story }
		}
		start_cat_story_cycle_effect = yes
	}
}

court_ongoing_1030_failure_effect = {
	reverse_add_opinion = {
		target = scope:target
		modifier = disappointed_opinion
		opinion = -10
	}
}


court_ongoing_1100_outcome_effect = {
	show_as_tooltip = {
		random_list = {
			1 = {
				desc = court_ongoing.1100.success.tt
				show_chance = no
				scope:scheme = {
					add_scheme_modifier = {
						type = courting_charm_modifier
					}
				}
			}
			1 = {
				desc = court_ongoing.1100.neutral.tt
				show_chance = no
			}
			1 = {
				desc = court_ongoing.1100.failure.tt
				show_chance = no
				reverse_add_opinion = {
					target = scope:target
					modifier = insult_opinion
					opinion = -10
				}
			}
		}
	}

	hidden_effect = {
		scope:target = {
			trigger_event = {
				id = court_ongoing.1101
				days = { 3 7 }
			}
		}
	}
}

court_consummate_effect = {
	if = {
		limit = { this = scope:owner }
		
	}
	else = {
		set_relation_soulmate = scope:owner
	}
}

court_kiss_effect = {
	
	hidden_effect = {
		if = {
			limit = { NOT = { has_relation_potential_lover = scope:target } }
			set_relation_potential_lover = scope:target
		}
	}
}

target_success_opinion_bonus_effect = {
	reverse_add_opinion = {
		target = scope:owner
		modifier = love_opinion
		opinion = 30
	}
}


end_court_scheme_effect = {
	save_temporary_scope_value_as = {
		name = court_outcome
		value = flag:$OUTCOME$
	}

	scope:owner = {
		# SUCCESS: SOULMATES
		# (This is the only one which target also needs to see, run it in owner scope in show_as_tooltip first and then execute in target's scope)
		if = {
			limit = { scope:court_outcome = flag:success_soulmate }
			
			scope:target = { set_relation_soulmate = { reason = $REASON$ target = prev } }
			had_sex_with_effect = { #Run this in target scope because owner has own tooltip
				CHARACTER = scope:target
				PREGNANCY_CHANCE = pregnancy_chance
			}	
			reverse_add_opinion = {
				target = scope:target
				modifier = romance_scheme_courtship_opinion #Blocks courtship
			}

			#Maybe break of existing lover relationships
			hidden_effect = {
				scope:target = {
					if = {
						limit = {
							has_trait = lustful
							is_ai = yes
							any_relation = {
								type = lover
								NOT = { this = scope:owner }
							}
						}
						every_relation = {
							type = lover
							random = {
								chance = 90
								opinion_modifier = { #Less likely if they really like the lover
									who = scope:target
									opinion_target = this
									multiplier = -0.5
									min = -20
								}
								modifier = { #More likely if they have more lovers
									add = 10
									scope:target = {
										any_relation = {
											type = lover
											count >= 2
										}
									}
								}
								lover_breakup_effect = {
									BREAKER = scope:target
									LOVER = this
								}
							}
						}
					}
				}
			}
		}
		# SUCCESS: KISS
		else_if = {
			limit = { scope:court_outcome = flag:success_kiss }
			custom_tooltip = court_outcome.kiss.tt
			reverse_add_opinion = {
				target = scope:target
				modifier = romance_scheme_courtship_opinion #Blocks courtship
			}
		}
		# FAILURE: SOFT
		else_if = {
			limit = { scope:court_outcome = flag:failure_soft }
			#Shared effect with Seduce because failure in one scheme should block the other
			scope:target = { seduction_cooldown_for_character_effect = { CHARACTER = scope:owner } }
		}
		# FAILURE: HARD
		else_if = {
			limit = { scope:court_outcome = flag:failure_hard }
			#Shared effect with Seduce because failure in one scheme should block the other
			scope:target = { seduction_block_character_effect = { CHARACTER = scope:owner } }
		}
		
		# Tradition bonuses
		if = {
			limit = {
				OR = {
					scope:court_outcome = flag:success_soulmate
					scope:court_outcome = flag:success_kiss
				}
				culture = {
					has_cultural_parameter = romance_scheme_bonuses
				}
				exists = dynasty
			}
			dynasty = {
				add_dynasty_prestige = minor_dynasty_prestige_gain
			}
		}
		else_if = {
			limit = {
				OR = {
					scope:court_outcome = flag:failure_soft
					scope:court_outcome = flag:failure_hard
				}
				culture = {
					has_cultural_parameter = romance_scheme_bonuses
				}
			}
			add_stress = medium_stress_impact_gain
		}
	}

	scope:scheme = { end_scheme = yes }
}
