
diplomacy_scheme_trigger = {
	OR = {
		scheme_type = befriend
		scheme_type = sway
		scheme_type = courting
	}
}

intrigue_scheme_trigger = {
	OR = {
		scheme_type = murder
		scheme_type = abduct
		scheme_type = fabricate_hook
		scheme_type = steal_back_artifact
	}
}

# Should be synced with the schemes listed in can_start_hostile_scheme_against_trigger.
hostile_scheme_trigger = {
	OR = {
		scheme_type = murder
		scheme_type = abduct
		scheme_type = claim_throne
		scheme_type = fabricate_hook
		scheme_type = steal_back_artifact
	}
}

friendly_scheme_trigger = {
	OR = {
		scheme_type = seduce
		scheme_type = befriend
		scheme_type = sway
		scheme_type = courting
	}
}

# Should be synced with the schemes listed in hostile_scheme_trigger.
can_start_hostile_scheme_against_trigger = {
	OR = {
		can_start_scheme = {
			type = murder
			target = $TARGET$
		}
		can_start_scheme = {
			type = abduct
			target = $TARGET$
		}
		can_start_scheme = {
			type = claim_throne
			target = $TARGET$
		}
		can_start_scheme = {
			type = fabricate_hook
			target = $TARGET$
		}
		can_start_scheme = {
			type = steal_back_artifact
			target = $TARGET$
		}
	}
}

agent_valid_to_be_discovered_by_spymaster = {
	trigger_if = {
		limit = {
			exists = scope:target.court_owner.cp:councillor_spymaster
		}
		NOT = {
			this = scope:target.court_owner.cp:councillor_spymaster
		}
	}
	NOT = {
		has_character_flag = free_to_scheme
	}
	trigger_if = {
			limit = {
				exists = scope:target.court_owner
			}
		NOR = {
			reverse_has_opinion_modifier = {
				target = scope:target.court_owner
				modifier = scheming_against_me
			}
			reverse_has_opinion_modifier = {
				target = scope:target.court_owner
				modifier = schemed_against_me
			}
		}
	}
}




personal_scheme_success_compare_target_liege_tier_trigger = {
	is_landed = no
	exists = liege
	OR = {
		is_spouse_of = liege
		is_close_family_of = liege
		dynasty = liege.dynasty
	}
}

is_good_familial_murder_target_trigger = {
	root = {
		can_start_scheme = {
			target = prev
			type = murder
		}
		OR = {
			AND = { # Psychopaths ignore opinion...
				ai_greed >= very_high_positive_ai_value
				ai_compassion <= very_high_negative_ai_value
				has_trait = sadistic # Make sadistic people able to murder their own children
			}
			AND = { # Very greedy and non-compassionate characters almost ignore opinion...
				ai_greed >= very_high_positive_ai_value
				ai_compassion <= high_negative_ai_value
				opinion = {
					target = prev
					value <= medium_positive_opinion
				}
			}
			AND = { # Significantly greedy and non-compassionate characters can murder even at positive opinion
				ai_greed >= high_positive_ai_value
				ai_compassion < 0
				opinion = {
					target = prev
					value <= low_positive_opinion
				}
			}
			AND = { # Somewhat greedy characters can murder people they just barely dislike...
				ai_greed >= medium_positive_ai_value
				opinion = {
					target = prev
					value <= low_negative_opinion
				}
			}
			AND = { # Otherwise, their opinion must be rather poor...
				opinion = {
					target = prev
					value <= medium_negative_opinion
				}
			}
		}
	}
	NOR = {
		has_opinion_modifier = {
			modifier = received_title_county
			target = root
		}
		has_opinion_modifier = {
			modifier = received_title_duchy
			target = root
		}
		has_opinion_modifier = {
			modifier = received_title_kingdom
			target = root
		}
		has_opinion_modifier = {
			modifier = received_title_empire
			target = root
		}
	}
	OR = {
		any_held_title = {
			tier >= root.highest_held_title_tier
			place_in_line_of_succession = {
				target = root
				value <= {
					value = 2
					if = {
						limit = { root.highest_held_title_tier > tier_barony }
						add = 1
					}
				}
			}
		}
		any_heir_title = {
			NOT = { holder = root }
			tier >= root.highest_held_title_tier
			place_in_line_of_succession = {
				target = root
				value <= {
					value = 2
					if = {
						limit = { root.highest_held_title_tier > tier_barony }
						add = 1
					}
				}
			}
		}
	}
}

# This trigger is a bit contrived in some way to ensure absolutely everyone gets evaluated without any early-outing
# It should always return true
# We use "count = all" and trigger_ifs to ensure that all have to be evaluated, and that all return
build_murder_targets_trigger = {
	any_relation = { # Rivals are good targets for murder schemes
		type = rival
		count = all
		trigger_if = {
			limit = {
				root = {
					ai_honor <= low_positive_ai_value
					can_start_scheme = {
						target = prev
						type = murder
					}
				}
			}
			add_to_temporary_list = murder_targets
		}
	}
	any_relation = { # Same with nemeses
		type = nemesis
		count = all
		trigger_if = {
			limit = {
				root = {
					ai_honor <= medium_positive_ai_value
					can_start_scheme = {
						target = prev
						type = murder
					}
				}
			}
			add_to_temporary_list = murder_targets
		}
	}
	trigger_if = { # Greedy people have no qualms murdering their way up the succession...
		limit = {
			ai_greed >= low_positive_ai_value
			exists = dynasty
		}
		dynasty = {
			any_dynasty_member = {
				count = all
				trigger_if = {
					limit = {
						is_good_familial_murder_target_trigger = yes
					}
					add_to_temporary_list = murder_targets
				}
			}
		}
		any_close_or_extended_family_member = {
			count = all
			trigger_if = {
				limit = {
					NOT = { is_in_list = murder_targets }
					is_good_familial_murder_target_trigger = yes
				}
				add_to_temporary_list = murder_targets
			}
		}
	}
	trigger_if = { # Greedy people want to murder their liege's high aptitude tax collector...
		limit = {
			ai_greed >= low_positive_ai_value
			is_independent_ruler = no
			exists = liege
			liege = {
				any_tax_collector = {
					any_tax_collector_vassal = {
						this = root
					}
					check_tax_collector_aptitude = {
						CHARACTER = this
						VALUE >= 4
					}
					add_to_temporary_list = murder_targets
				}
			}
		}
	}
	trigger_if = { # Some Clan members want to murder Extolled people out of pure spite and malice
		limit = {
			ai_greed >= 0
			ai_vengefulness >= 0
			ai_compassion <= medium_negative_ai_value
			house.house_head ?= {
				is_ruler = yes
				government_has_flag = government_is_clan
			}
			ai_wants_low_unity = yes
		}
		house = {
			any_house_member = {
				has_trait = extolled
				add_to_temporary_list = murder_targets
			}
		}
	}
	any_consort = { # Unfaithful spouses
		trigger_if = {
			limit = {
				root = {
					ai_compassion <= 0
					can_start_scheme = {
						target = prev
						type = murder
					}
				}
				exposed_cheating_on_spouse_trigger = { SPOUSE = root }
				add_to_temporary_list = murder_targets
			}
		}
	}
	trigger_if = { # Certain vassals will plot against their liege under certain conditions
		limit = {
			highest_held_title_tier > tier_barony
			exists = liege
			liege = {
				tyranny >= medium_tyranny
			}
			opinion = {
				target = liege
				value <= high_negative_opinion
			}
			ai_rationality >= medium_positive_ai_value
		}
		liege = {
			add_to_temporary_list = murder_targets
		}
	}
	trigger_if = { # Murdering troublesome claimants is something you want to do...
		limit = {
			is_landed = yes
			primary_title.tier >= tier_duchy
			any_targeting_faction = {
			  	faction_is_type = claimant_faction
				special_character = {
					add_to_temporary_list = murder_targets
				}
			}
		}
	}
	trigger_if = { # Paranoid characters want to murder claimants to their titles
		limit = {
			has_trait = paranoid
			ai_compassion <= low_negative_ai_value
			ai_rationality <= 0
			is_landed = yes
			primary_title.tier >= tier_duchy
			any_held_title = {
				any_claimant = {
					add_to_temporary_list = murder_targets
				}
			}
		}
	}
	any_spouse = { # Murder infertile spouses if you've yet to have an heir (and you're heartless...)
		trigger_if = {
			limit = {
				root = {
					is_landed = yes
					ai_compassion <= 0
					ai_honor <= 0
					fertility > 0.1
					NOT = {
						any_child = {
							is_heir_of = root
						}
					}
					can_start_scheme = {
						target = prev
						type = murder
					}
				}
				is_ai = yes
				fertility < 0.1
				add_to_temporary_list = murder_targets
			}
		}
	}
}

scheme_is_still_valid_trigger = {
	scope:target = {
		OR = {
			exists = location
			in_diplomatic_range = scope:owner
		}
	}
}

can_use_befriend_scheme_trigger = {
	OR = {
		has_perk = befriend_perk
		AND = {
			exists = dynasty
			dynasty = {
				has_dynasty_perk = fp1_adventure_legacy_5
			}
			target_is_vassal_or_below = $TARGET$
		}
		culture = { has_cultural_parameter = automatic_befriend_access }
		# Warcraft
		#any_character_struggle = {
		#	involvement = involved
		#	has_struggle_phase_parameter = struggle_unlocks_befriend_schemes_for_everyone
		#}
		AND = {
			government_has_flag = government_is_clan
			is_in_same_clan_as_trigger = { CHARACTER = $TARGET$ }
			house = { has_house_unity_stage = harmonious }	
		}
	}
}

# Need to separate travel triggers from rest
can_seduce_scheme_trigger = {
	$OWNER$ = {
		is_adult = yes
		is_imprisoned = no
		OR = {
			is_ai = no	#Players may override their character's sexuality for the purposes of cynical seductions.
			is_attracted_to_gender_of = $TARGET$
		}
		is_below_ai_lover_soft_cap_trigger = yes
		NOR = {
			has_trait = celibate
			has_character_flag = is_party_baron
			has_relation_lover = $TARGET$
			guaranteed_under_20_incest_rejection_trigger = {
				TARGET = $TARGET$
				SEDUCER = $OWNER$
			}
			AND = {
				has_character_modifier = rejected_from_marriage_bed_modifier
				is_spouse_of = $TARGET$
			}
		}
	}
	$TARGET$ = {
		is_adult = yes
		is_imprisoned = no
		is_attracted_to_gender_of = $OWNER$
		NOR = {
			has_character_flag = block_seduce_attempts
			has_trait = intellect_bad_3
			is_incapable_trigger = yes
			has_trait = celibate
			has_opinion_modifier = {
				modifier = seduce_permanent_blocker_opinion
				target = $OWNER$
			}
			has_opinion_modifier = {
				modifier = seduce_regular_cooldown_opinion
				target = $OWNER$
			}
		}
		OR = {
			exists = location
			in_diplomatic_range = $OWNER$
		}
		trigger_if = {
			limit = {
				$OWNER$ = { is_ai = yes }
			}
			is_below_ai_lover_soft_cap_trigger = yes
			trigger_if = { # Block AI from seducing lowborn nobodies in the players court
				limit = {
					liege ?= { is_ai = no }
					NOR = {
						is_courtier_of = $OWNER$
						is_foreign_court_or_pool_guest_of = $OWNER$
					}
				}
				OR = {
					is_lowborn = no
					is_landed = yes
				}
			}
			trigger_if = { #So players don't get spammed by AI seduction
				limit = { is_ai = no }
				NOT = {
					any_targeting_scheme = { scheme_type = seduce }
				}
			}
		}
	}
}
