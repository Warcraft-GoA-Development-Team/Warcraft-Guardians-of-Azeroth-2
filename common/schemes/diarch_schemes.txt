overthrow_regent = {
	skill = intrigue
	desc = "overthrow_regent_desc_general"
	hostile = yes
	icon = icon_scheme_claim_throne

	power_per_skill_point = 5
	resistance_per_skill_point = 5
	power_per_agent_skill_point = 1

	minimum_progress_chance = 10
	maximum_progress_chance = 90
	minimum_success = 5
	maximum_secrecy = 85
	maximum_success = 85

	allow = {
		exists = liege
		liege ?= diarch
		NOT = { this = liege.diarch }
		liege = { has_dark_government = no }
	}

	valid = {
		is_incapable = no
		scope:target = {
			is_diarch = yes
			is_imprisoned = no
			exists = location
			in_diplomatic_range = scope:owner
		}
		# You can't scheme to become diarch if you'd immediately invalidate out of it.
		scope:owner = { is_diarch_valid_trigger = yes }
		# You can't overthrow non-regencies. At least not this way.
		scope:owner.liege ?= { has_diarchy_parameter = diarchy_is_regency }
	}

	valid_agent = {
		#Warcraft
		age >= age_14_value
	}

	agent_join_chance = {
		base = 0

		# Base Reluctance, including negative AI Energy
		modifier = {
			add = {
				value = -20
				if = {
					limit = {
						ai_energy < 0
					}
					add = {
						value = ai_energy
						multiply = 0.5
					}
				}
			}
			desc = BASE_RELUCTANCE
		}

		#Is Owner sending a gift in the invite interaction?
		modifier = {
			add = bribe_acceptance_value
			exists = scope:gift
			always = scope:gift
			NOT = {
				OR = {
					scope:target = { is_parent_of = root }
					root = { is_parent_of = scope:target }
				}
			}
			desc = "SCHEME_WITH_GIFT"
		}

		#Scope:target has caused internal strife in the realm
		character_hates_scope_due_to_strife_plus_desc_modifier = { TARGET = scope:target }

		#Family Feud
		house_feud_hostile_scheme_agent_modifier = yes

		#Default Hostile Scheme modifiers
		hostile_murder_agent_base_join_chance_modifier = yes
	}

	base_success_chance = {
		base = 0

		hostile_scheme_base_chance_modifier = yes

		# Spiritual Head of Faith
		modifier = {
			add = -50
			desc = "SCHEME_VS_SPIRITUAL_HOF"
			scope:target = {
				faith = scope:owner.faith
				faith = {
					has_doctrine = doctrine_spiritual_head
				}
				faith = {
					exists = religious_head
					religious_head = {
			 			this = scope:target
			 		}
				}
			}
		}

		# Scope:target's strife.
		modifier = {
			add = {
				value = scope:target.strife_opinion
				multiply = 0.25
				min = 5
				max = 40
			}
			scope:target = { strife_opinion >= 1 }
		}

		# Family Feud
		house_feud_hostile_scheme_success_modifier = yes

		# At War
		first_valid = {
			modifier = {
				add = -200
				desc = "SCHEME_AT_WAR"
				scope:target = {
					is_at_war_with = scope:owner
				}
			}
			modifier = {
				add = -150
				scope:target = {
					is_landed = no
					exists = liege
					liege = {
						is_at_war_with = scope:owner
					}
				}
				desc = "SCHEME_AT_WAR_WITH_LIEGE"
			}
			modifier = {
				add = -100
				scope:target = {
					is_landed = yes
					exists = liege
					liege = {
						is_at_war_with = scope:owner
					}
				}
				desc = "SCHEME_AT_WAR_WITH_LIEGE"
			}
		}
	}

	agent_success_chance = {
		base = 0

		hostile_scheme_agent_success_chance_modifier = yes #Adds a value depending on their "closeness" to target
	}

	agent_leave_threshold = -25

	cooldown = { years = 5 }
	is_secret = yes
	base_secrecy = 10

	on_ready = {
		scheme_owner = {
			if = {
				limit = {
					has_character_flag = is_in_event_diarchy_0501
				}
				trigger_event = {
					id = diarchy.0501
					days = 1
				}
			}
			else = { trigger_event = diarchy.0501 }
		}
	}

	on_monthly = {
		hostile_scheme_discovery_chance_effect = yes
		if = {
			limit = {
				NOT = { exists = scope:discovery_event_happening }
			}
			scheme_owner = {
				trigger_event = {
					on_action = abduct_ongoing
					days = { 1 30 }
				}
			}
		}
	}

	on_invalidated = {
		scheme_target = { save_scope_as = target }
		scheme_owner = { save_scope_as = owner }
		# Scope:target is dead.
		if = {
			limit = {
				scope:target = { is_alive = no }
			}
			scope:owner = {
				send_interface_toast = {
					title = overthrow_regent_scheme_invalidated_title
					left_icon = scope:target
					custom_description_no_bullet = {
						object = scope:target
						text = scheme_target_died
					}
				}
			}
		}
		# Scope:target has been preemptively 
		else_if = {
			limit = {
				scope:target = {
					is_imprisoned = yes
					imprisoner = scope:owner
				}
				scope:owner = {
					NOT = { has_character_flag = is_in_event_diarchy_0501 }
				}
			}
			scope:owner = {
				send_interface_message = {
					title = overthrow_regent_scheme_invalidated_title
					type = abduct_invalidated_i_imprisoned_message
					desc = overthrow_regent_scheme_i_imprisoned_them_message
					left_icon = scope:target
				}
			}
		}
		else_if = {
			limit = {
				scope:target = {
					is_imprisoned = yes
					NOT = { imprisoner = scope:owner }
				}
			}
			scope:target.imprisoner = { save_scope_as = other_imprisoner }
			scope:owner = {
				send_interface_toast = {
					title = overthrow_regent_scheme_invalidated_title
					left_icon = scope:target
					right_icon = scope:other_imprisoner
					custom_description_no_bullet = {
						subject = scope:other_imprisoner
						object = scope:target
						text = scheme_target_imprisoned_by_other
					}
				}
			}
		}
		else_if = {
			limit = {
				scope:target = {
					NOT = { in_diplomatic_range = scope:owner }
				}
			}
			scope:owner = {
				send_interface_toast = {
					title = overthrow_regent_scheme_invalidated_title
					left_icon = scope:target
					custom_description_no_bullet = {
						object = scope:target
						text = scheme_target_not_in_diplomatic_range
					}
				}
			}
		}
		else_if = {
			limit = {
				scope:owner = { is_diarch_valid_trigger = no }
			}
			scope:owner = {
				send_interface_toast = {
					title = overthrow_regent_scheme_cannot_become_regent
					left_icon = scope:target
					custom_description_no_bullet = {
						object = scope:target
						text = i_could_not_take_their_place
					}
				}
			}
		}
	}

	success_desc = "OVERTHROW_REGENT_SUCCESS_DESC"
	discovery_desc = "OVERTHROW_REGENT_DISCOVERY_DESC"
}
