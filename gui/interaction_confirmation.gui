######################################################
############# INTERACTION CONFIRMATION ###############
######################################################

window = {
	name = "character_interaction_confirmation_window"
	position = { 0 20 }
	parentanchor = center
	allow_outside = yes
	layer = middle

	using = Window_Size_MainTab
	using = Window_Background
	using = Window_Decoration_Spike

	state = {
		name = _show
		on_start = "[GetVariableSystem.Clear( 'character_interaction_change_title' )]"
		on_start = "[GetVariableSystem.Clear( 'character_interaction_change_artifact' )]"
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
	}

	vbox = {
		set_parent_size_to_minimum = yes
		using = Window_Margins

		# Warcraft
		state = { # Forcibly keep the game paused.
			name = _show
			trigger_when = "[And(Not(IsGamePaused), GetPlayer.MakeScope.Var('reflect_interaction').IsSet)]"
			on_start = "[OnPause]"
		}
		# End Warcraft

		hbox = {
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding
			margin_bottom = -4

			header_pattern_interaction = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding
				minimumsize = { 100% -1 }
	
				blockoverride "header_text" {
					text = "[CharacterInteractionConfirmationWindow.GetSendName]"
				}
	
				blockoverride "button_close"
				{
					onclick = "[CharacterInteractionConfirmationWindow.Close]"
					onclick = "[GetScriptedGui( 'close_scheme_reflect_interaction' ).Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]" # Warcraft
				}
	
				icon_character_interaction = {
					size = { 50 50 }
					position = { 0 0 }
					tooltip = "[CharacterInteractionConfirmationWindow.GetInteractionTooltip]"
				}
			}
		}

		# Title Picker
		vbox = {
			visible = "[CharacterInteractionConfirmationWindow.UsesTitleTarget]"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			hbox = {
				layoutpolicy_vertical = expanding
				visible = "[CharacterInteractionConfirmationWindow.HasSelectedTitle]"
				spacing = 5

				coa_title_medium_crown = {
					datacontext = "[CharacterInteractionConfirmationWindow.GetSelectedTitle]"
					name = "selected_title_flag"
				}

				text_single = {
					datacontext = "[CharacterInteractionConfirmationWindow.GetSelectedTitle]"
					text = "[Title.GetNameNoTooltip|U]"
					using = Font_Size_Medium
					align = nobaseline
				}

				button_round = {
					name = "change"
					datacontext = "[GetVariableSystem]"
					visible = "[CharacterInteractionConfirmationWindow.CanChangeTitle]"
					onclick = "[VariableSystem.Toggle( 'character_interaction_change_title' )]"

					tooltip = "CHARACTER_INTERACTION_WINDOW_SELECT_TITLE_TOOLTIP"
					using = tooltip_below

					button_replace = {
						parentanchor = center
						alwaystransparent = yes
					}
				}
			}

			hbox = {
				visible = "[Not( CharacterInteractionConfirmationWindow.HasSelectedTitle )]"
				minimumsize = { 0 112 }
				margin = { 10 10 }

				text_single = {
					text = "CHARACTER_INTERACTION_NO_TARGET_SELECTED"
					using = Font_Size_Medium
					align = nobaseline
				}
			}

			#### replaces character effects ###
			scrollbox = {
				visible = "[GetVariableSystem.Exists('character_interaction_change_title')]"
				layoutpolicy_horizontal = expanding
				size = { 500 400 }

				blockoverride "scrollbox_content"
				{
					vbox_list_interaction_title_selection = {
						maximumsize = { 450 400 }
						layoutpolicy_horizontal = expanding

						blockoverride "button_toggles" {}
					}
				}
			}
		}

		vbox_character_interaction_three_characters = {
			visible = "[And(Not(GetVariableSystem.Exists('character_interaction_change_title')), CharacterInteractionConfirmationWindow.ShowThreeCharacters)]"
			layoutpolicy_horizontal = expanding
		}

		# Artifact Picker
		vbox = {
			visible = "[CharacterInteractionConfirmationWindow.UsesArtifactTarget]"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin = { 14 10 }

			hbox = {
				visible = "[CharacterInteractionConfirmationWindow.HasSelectedArtifact]"
				datacontext = "[CharacterInteractionConfirmationWindow.GetSelectedArtifact]"
				layoutpolicy_vertical = expanding
				spacing = 5

				widget = {
					size = { 80 80 }
					alwaystransparent = yes

					icon_artifact = {
						size = { 100% 100% }
					}

					tooltipwidget = {
						artifact_tooltip = {}
					}
				}

				text_single = {
					text = "[Artifact.GetName]"
					using = Font_Size_Medium
					align = nobaseline

					tooltipwidget = {
						artifact_tooltip = {}
					}
				}

				button_round = {
					name = "change"
					datacontext = "[GetVariableSystem]"
					onclick = "[VariableSystem.Toggle( 'character_interaction_change_artifact' )]"

					tooltip = "CHARACTER_INTERACTION_WINDOW_SELECT_ARTIFACT_TOOLTIP"
					using = tooltip_below

					button_replace = {
						parentanchor = center
						alwaystransparent = yes
					}
				}
			}

			hbox = {
				visible = "[Not( CharacterInteractionConfirmationWindow.HasSelectedArtifact )]"
				minimumsize = { 0 112 }
				margin = { 10 10 }

				text_single = {
					text = "CHARACTER_INTERACTION_NO_TARGET_SELECTED"
					using = Font_Size_Medium
					align = nobaseline
				}
			}

			#### replaces character effects ###
			scrollbox = {
				visible = "[GetVariableSystem.Exists( 'character_interaction_change_artifact' )]"
				layoutpolicy_horizontal = expanding
				size = { 400 400 }
			
				blockoverride "scrollbox_content"
				{
					vbox_list_interaction_artifact_selection = {
						maximumsize = { 250 400 }
						layoutpolicy_horizontal = expanding
					
						blockoverride "button_toggles" {}
					}
				}
			}
		}

		### EDUCATE CHILD ###
		vbox = {
			layoutpolicy_horizontal = expanding

			widget_character_interaction_four_characters = {
				visible = "[CharacterInteractionConfirmationWindow.ShowFourCharacters]"
				layoutpolicy_horizontal = expanding
			}

			vbox_interaction_character_list = {
				datacontext = "[CharacterInteractionConfirmationWindow.GetCharacterList]"
				layoutpolicy_horizontal = expanding
				minimumsize = { 640 500 }

				blockoverride "item_size"
				{
					size = { 600 110 }
					layoutpolicy_horizontal = expanding

				}
			}
		}

		## Effects on Characters
		vbox_character_interaction_effects = {
			visible = "[And(And(And( Not(GetVariableSystem.Exists('character_interaction_change_title') ), Not(GetVariableSystem.Exists('character_interaction_change_artifact') ) ), CharacterInteractionConfirmationWindow.HasPickedCharacters ), InteractionEffectsDescription.GetDisplayedEffects.HasAnyEffects )]"
			datacontext = "[CharacterInteractionConfirmationWindow.GetEffectsDescription]"
			layoutpolicy_horizontal = expanding
		}

		expand = {}

		## Scheme Information
		vbox_scheme_info = {
			visible = "[CharacterInteractionConfirmationWindow.ShouldShowScheme]"
			datacontext = "[CharacterInteractionConfirmationWindow.GetSchemeInfo]"
			layoutpolicy_horizontal = expanding
		}

		## Options
		vbox_interaction_options = {
			visible = "[CharacterInteractionConfirmationWindow.HasOptions]"
		}

		### Acceptance
		hbox_character_interaction_acceptance = {
			visible = "[CharacterInteractionConfirmationWindow.ShouldShowAnswer]"
			layoutpolicy_horizontal = expanding
		}

		text_multi_on_decline_summary = {}

		hbox = {
			visible = "[CharacterInteractionConfirmationWindow.HasCost]"
			tooltip = "[CharacterInteractionConfirmationWindow.GetCostTooltip]"

			text_single = {
				text = "INTERACTION_COST"
			}

			text_single = {
				text = "[CharacterInteractionConfirmationWindow.GetCostDescription]"
			}
		}

		## Send Button
		hbox = {
			name = "button"
			margin = { 20 10 }
			spacing = 10

			button_primary_big = {
				text = "[CharacterInteractionConfirmationWindow.GetSendName]"

				onclick = "[CharacterInteractionConfirmationWindow.Send]"
				enabled = "[CharacterInteractionConfirmationWindow.CanSend]"
				tooltip = "[CharacterInteractionConfirmationWindow.GetCanSendDescription]"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_confirm"
			}

			button_standard = {
				visible = "[InDebugMode]"
				size = { 42 42 }
				raw_text = "#D R#!"
				tooltip = "[CharacterInteractionConfirmationWindow.GetDebugInfo]"
			}
		}
	}

	window_character_filter = {
		datacontext = "[CharacterInteractionConfirmationWindow.GetCharacterList]"
		blockoverride "addition_filter" {

			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('ruler_filter')]"
			}

			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('religion_filter')]"
			}

			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('culture_filter')]"
			}

			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('dynasty_filter')]"
			}
		}
	}
}
