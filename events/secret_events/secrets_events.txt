#Events for having secrets

namespace = secrets

#0001-0499: Secret Exposed (sent from secrets on_exposure)
#0500-0999: Secret Discovered (sent from secrets on_discover)
#1000-1999: Secret being discovered
#2000-2999: Reactions to secrets
#3000-3999: Other characters interacting with Secrets

#######################
# Secret Exposed Events
# 0001-0499
#######################

#I have been exposed as a Deviant
# by Petter Vilberg
secrets.0001 = {
	type = character_event
	title = secrets.0001.t
	desc = secrets.0001.desc
	theme = secret
	left_portrait = scope:secret_exposer
	
	immediate = {
		secret_exposed_owner_effects_effect = { SECRET = scope:secret POV = root }
		secret_exposed_owner_opinion_effects_effect = yes
		play_music_cue = "mx_cue_secret"
	}

	option = {
		name = secrets.0001.a
	}
}

#Someone I care about has been exposed as a Deviant
secrets.0101 = { #by Mathilda Bjarnehed
	type = character_event
	title = secrets.0106.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { has_negative_attitude_towards_trait_trigger = { TRAIT = deviant GENDER_CHARACTER = scope:owner } }
				desc = secrets.0101.negative.desc
			}
			desc = secrets.0101.positive_1.desc
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					any_secret = {
						secret_type = secret_deviant
					}
				}
				desc = secrets.0101.worried.desc
			}
			triggered_desc = {
				trigger = { NOT = { has_negative_attitude_towards_trait_trigger = { TRAIT = deviant GENDER_CHARACTER = scope:owner } } }
				desc = secrets.0101.positive_2.desc
			}
		}
	}
	theme = secret
	override_background = {
		trigger = { allowed_to_imprison_character_trigger = { CHARACTER = scope:owner } } # Show throne room if you can order imprisonment
		event_background = throne_room
	}
	left_portrait = scope:owner
	right_portrait = scope:secret_exposer

	immediate = {
		secret_exposed_notification_effects_effect = { SECRET = scope:secret CHARACTER = scope:owner }

		play_music_cue = "mx_cue_secret"
	}

	option = {
		trigger = {
			NAND = {
				allowed_to_imprison_character_trigger = { CHARACTER = scope:owner }
				trait_is_criminal_in_faith_trigger = { TRAIT = deviant FAITH = root.faith GENDER_CHARACTER = scope:owner }
			}
		}
		name = {
			trigger = {
				has_negative_attitude_towards_trait_trigger = { TRAIT = deviant GENDER_CHARACTER = scope:owner }
				opinion = {
					target = scope:owner
					value >= high_positive_opinion
				}
			}
			text = secrets.0106.likes_negative
		}
		name = {
			trigger = {
				has_negative_attitude_towards_trait_trigger = { TRAIT = deviant GENDER_CHARACTER = scope:owner }
				opinion = {
					target = scope:owner
					value < high_positive_opinion
				}
			}
			text = secrets.0106.dislikes_negative
		}
		name = {
			trigger = {
				NOT = { has_negative_attitude_towards_trait_trigger = { TRAIT = deviant GENDER_CHARACTER = scope:owner } }
				opinion = {
					target = scope:owner
					value >= high_positive_opinion
				}
			}
			text = secrets.0106.likes_positive
		}
		name = {
			trigger = {
				NOT = { has_negative_attitude_towards_trait_trigger = { TRAIT = deviant GENDER_CHARACTER = scope:owner } }
				opinion = {
					target = scope:owner
					value < high_positive_opinion
				}
			}
			text = secrets.0106.dislikes_positive
		}	
	}


	#For liege: imprison
	option = {
		trigger = {
			allowed_to_imprison_character_trigger = { CHARACTER = scope:owner }
			trait_is_criminal_in_faith_trigger = { TRAIT = deviant FAITH = root.faith GENDER_CHARACTER = scope:owner }
		}
		name = secrets.0101.b

		imprison_character_effect = {
			TARGET = scope:owner
			IMPRISONER = root
		}
		
		stress_impact = {
			deviant = major_stress_impact_gain
		}

		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_zeal = low_chance_impact_positive_ai_value
			}
			modifier = {
				has_trait = zealous
				add = 100
			}
			modifier = {
				opinion = {
					target = scope:owner
					value < 0
				}
				add = 100
			}
			modifier = {
				OR = {
					is_close_family_of = scope:owner
					is_spouse_of = scope:owner
					has_relation_lover = scope:owner
					has_relation_friend = scope:owner
				}
				add = -100
			}
		}
	}

	#For liege: forgive
	option = {
		trigger = {
			allowed_to_imprison_character_trigger = { CHARACTER = scope:owner }
			trait_is_criminal_in_faith_trigger = { TRAIT = deviant FAITH = root.faith GENDER_CHARACTER = scope:owner }
		}
		name = secrets.0107.c

		reverse_add_opinion = {
			target = scope:owner
			modifier = grateful_opinion
			opinion = 30
		}

		#add_piety_level = -1
		
		stress_impact = {
			zealous = medium_stress_impact_gain
		}

		ai_chance = {
			base = 10
			ai_value_modifier = {
				ai_compassion = low_chance_impact_positive_ai_value
			}
			modifier = {
				has_trait = cynical
				add = 100
			}
			modifier = {
				scope:owner = { is_ai = no }
				add = 50
			}
			modifier = {
				NOT = { has_negative_attitude_towards_trait_trigger = { TRAIT = deviant GENDER_CHARACTER = scope:owner } }
				add = 100
			}
		}
	}
}



#I have been exposed as a Sodomite
# by Petter Vilberg
secrets.0003 = {
	type = character_event
	title = secrets.0001.t
	desc = secrets.0003.desc
	theme = secret
	left_portrait = scope:secret_exposer
	
	immediate = {
		secret_exposed_owner_effects_effect = { SECRET = scope:secret POV = root }
		secret_exposed_owner_opinion_effects_effect = yes
		play_music_cue = "mx_cue_murder"
	}

	option = {
		name = secrets.0003.a
	}
}

#Someone I care about has been exposed as a Sodomite
secrets.0103 = { #by Mathilda Bjarnehed
	type = character_event
	title = secrets.0106.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { has_negative_attitude_towards_trait_trigger = { TRAIT = sodomite GENDER_CHARACTER = scope:owner } }
				desc = secrets.0103.negative.desc
			}
			desc = secrets.0103.positive_1.desc
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					any_secret = {
						secret_type = secret_lover
						secret_target = scope:owner
					}
					NOT = { sex_opposite_of = scope:owner }
				}
				desc = secrets.0106.worried.desc
			}
			triggered_desc = {
				trigger = {
					any_secret = {
						secret_type = secret_homosexual
					}
					any_secret = {
						secret_type = secret_lover
						secret_target = { NOT = { sex_opposite_of = root } }
					}
				}
				desc = secrets.0103.worried_2.desc
			}
			triggered_desc = {
				trigger = {
					OR = {
						has_sexuality = homosexual
						has_sexuality = bisexual
					}
				}
				desc = secrets.0103.worried_3.desc
			}
			triggered_desc = {
				trigger = { NOT = { has_negative_attitude_towards_trait_trigger = { TRAIT = sodomite GENDER_CHARACTER = scope:owner } } }
				desc = secrets.0103.positive_2.desc
			}
		}
	}
	theme = secret
	override_background = {
		trigger = { allowed_to_imprison_character_trigger = { CHARACTER = scope:owner } } # Show throne room if you can order imprisonment
		event_background = throne_room
	}
	left_portrait = scope:owner
	right_portrait = scope:secret_exposer

	immediate = {
		secret_exposed_notification_effects_effect = { SECRET = scope:secret CHARACTER = scope:owner }
		#For loc
		random_relation = {
			type = lover
			limit = { NOT = { sex_opposite_of = root } }
			save_scope_as = lover
		}

		play_music_cue = "mx_cue_secret"
	}

	option = {
		trigger = {
			NAND = {
				allowed_to_imprison_character_trigger = { CHARACTER = scope:owner }
				trait_is_criminal_in_faith_trigger = { TRAIT = sodomite FAITH = root.faith GENDER_CHARACTER = scope:owner }
			}
		}
		name = {
			trigger = {
				has_negative_attitude_towards_trait_trigger = { TRAIT = sodomite GENDER_CHARACTER = scope:owner }
				opinion = {
					target = scope:owner
					value >= high_positive_opinion
				}
			}
			text = secrets.0106.likes_negative
		}
		name = {
			trigger = {
				has_negative_attitude_towards_trait_trigger = { TRAIT = sodomite GENDER_CHARACTER = scope:owner }
				opinion = {
					target = scope:owner
					value < high_positive_opinion
				}
			}
			text = secrets.0103.dislikes_negative
		}
		name = {
			trigger = {
				NOT = { has_negative_attitude_towards_trait_trigger = { TRAIT = sodomite GENDER_CHARACTER = scope:owner } }
				opinion = {
					target = scope:owner
					value >= high_positive_opinion
				}
			}
			text = secrets.0106.likes_positive
		}
		name = {
			trigger = {
				NOT = { has_negative_attitude_towards_trait_trigger = { TRAIT = sodomite GENDER_CHARACTER = scope:owner } }
				opinion = {
					target = scope:owner
					value < high_positive_opinion
				}
			}
			text = secrets.0106.dislikes_positive
		}	
	}


	#For liege: imprison
	option = {
		trigger = {
			allowed_to_imprison_character_trigger = { CHARACTER = scope:owner }
			trait_is_criminal_in_faith_trigger = { TRAIT = sodomite FAITH = root.faith GENDER_CHARACTER = scope:owner }
		}
		name = secrets.0103.b

		imprison_character_effect = {
			TARGET = scope:owner
			IMPRISONER = root
		}
		
		stress_impact = {
			sodomite = medium_stress_impact_gain
		}

		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_zeal = low_chance_impact_positive_ai_value
			}
			modifier = {
				has_trait = zealous
				add = 100
			}
			modifier = {
				opinion = {
					target = scope:owner
					value < 0
				}
				add = 100
			}
			modifier = {
				OR = {
					is_close_family_of = scope:owner
					is_spouse_of = scope:owner
					has_relation_lover = scope:owner
					has_relation_friend = scope:owner
				}
				add = -100
			}
		}
	}

	#For liege: forgive
	option = {
		trigger = {
			allowed_to_imprison_character_trigger = { CHARACTER = scope:owner }
			trait_is_criminal_in_faith_trigger = { TRAIT = sodomite FAITH = root.faith GENDER_CHARACTER = scope:owner }
		}
		name = secrets.0107.c

		reverse_add_opinion = {
			target = scope:owner
			modifier = grateful_opinion
			opinion = 30
		}

		#add_piety_level = -1
		
		stress_impact = {
			zealous = medium_stress_impact_gain
		}

		ai_chance = {
			base = 10
			ai_value_modifier = {
				ai_compassion = low_chance_impact_positive_ai_value
			}
			modifier = {
				has_trait = cynical
				add = 100
			}
			modifier = {
				scope:owner = { is_ai = no }
				add = 50
			}
			modifier = {
				NOT = { has_negative_attitude_towards_trait_trigger = { TRAIT = sodomite GENDER_CHARACTER = scope:owner } }
				add = 100
			}
		}
	}
}



#I have been exposed as a Cannibal
# by Petter Vilberg
secrets.0004 = {
	type = character_event
	title = secrets.0001.t
	desc = secrets.0004.desc
	theme = secret
	right_portrait = scope:secret_exposer
	
	immediate = {
		secret_exposed_owner_effects_effect = { SECRET = scope:secret POV = root }
		secret_exposed_owner_opinion_effects_effect = yes
		play_music_cue = "mx_cue_murder"
	}

	option = {
		name = secrets.0004.a
		if = {
			limit = {
				dread > 50
			}
			set_nickname_effect = { NICKNAME = nick_the_dragon }
		}
		else = {
			set_nickname_effect = { NICKNAME = nick_the_cannibal }
		}
	}
}

#Someone I care about has been exposed as a Cannibal
secrets.0104 = { #by Mathilda Bjarnehed
	type = character_event
	title = secrets.0106.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { has_negative_attitude_towards_trait_trigger = { TRAIT = cannibal GENDER_CHARACTER = scope:owner } }
				desc = secrets.0104.negative.desc
			}
			desc = secrets.0104.positive_1.desc
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					any_secret = {
						secret_type = secret_cannibal
					}
				}
				desc = secrets.0104.worried.desc
			}
			triggered_desc = {
				trigger = { NOT = { has_negative_attitude_towards_trait_trigger = { TRAIT = cannibal GENDER_CHARACTER = scope:owner } } }
				desc = secrets.0104.positive_2.desc
			}
		}
	}
	theme = secret
	override_background = {
		trigger = { allowed_to_imprison_character_trigger = { CHARACTER = scope:owner } } # Show throne room if you can order imprisonment
		event_background = throne_room
	}
	left_portrait = scope:owner
	right_portrait = scope:secret_exposer

	immediate = {
		secret_exposed_notification_effects_effect = { SECRET = scope:secret CHARACTER = scope:owner }

		play_music_cue = "mx_cue_secret"
	}

	option = {
		trigger = {
			NAND = {
				allowed_to_imprison_character_trigger = { CHARACTER = scope:owner }
				trait_is_criminal_in_faith_trigger = { TRAIT = cannibal FAITH = root.faith GENDER_CHARACTER = scope:owner }
			}
		}
		name = {
			trigger = {
				has_negative_attitude_towards_trait_trigger = { TRAIT = cannibal GENDER_CHARACTER = scope:owner }
				opinion = {
					target = scope:owner
					value >= high_positive_opinion
				}
			}
			text = secrets.0106.likes_negative
		}
		name = {
			trigger = {
				has_negative_attitude_towards_trait_trigger = { TRAIT = cannibal GENDER_CHARACTER = scope:owner }
				opinion = {
					target = scope:owner
					value < high_positive_opinion
				}
			}
			text = secrets.0104.dislikes_negative
		}
		name = {
			trigger = {
				NOT = { has_negative_attitude_towards_trait_trigger = { TRAIT = cannibal GENDER_CHARACTER = scope:owner } }
				opinion = {
					target = scope:owner
					value >= high_positive_opinion
				}
			}
			text = secrets.0106.likes_positive
		}
		name = {
			trigger = {
				NOT = { has_negative_attitude_towards_trait_trigger = { TRAIT = cannibal GENDER_CHARACTER = scope:owner } }
				opinion = {
					target = scope:owner
					value < high_positive_opinion
				}
			}
			text = secrets.0106.dislikes_positive
		}	
	}


	#For liege: imprison
	option = {
		trigger = {
			allowed_to_imprison_character_trigger = { CHARACTER = scope:owner }
			trait_is_criminal_in_faith_trigger = { TRAIT = cannibal FAITH = root.faith GENDER_CHARACTER = scope:owner }
		}
		name = secrets.0104.b

		imprison_character_effect = {
			TARGET = scope:owner
			IMPRISONER = root
		}
		
		stress_impact = {
			cannibal = medium_stress_impact_gain
		}

		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_zeal = low_chance_impact_positive_ai_value
			}
			modifier = {
				has_trait = zealous
				add = 100
			}
			modifier = {
				opinion = {
					target = scope:owner
					value < 0
				}
				add = 100
			}
			modifier = {
				OR = {
					is_close_family_of = scope:owner
					is_spouse_of = scope:owner
					has_relation_lover = scope:owner
					has_relation_friend = scope:owner
				}
				add = -100
			}
		}
	}

	#For liege: forgive
	option = {
		trigger = {
			allowed_to_imprison_character_trigger = { CHARACTER = scope:owner }
			trait_is_criminal_in_faith_trigger = { TRAIT = cannibal FAITH = root.faith GENDER_CHARACTER = scope:owner }
		}
		name = secrets.0107.c

		reverse_add_opinion = {
			target = scope:owner
			modifier = grateful_opinion
			opinion = 30
		}

		#add_piety_level = -1
		
		stress_impact = {
			zealous = medium_stress_impact_gain
		}

		ai_chance = {
			base = 10
			ai_value_modifier = {
				ai_compassion = low_chance_impact_positive_ai_value
			}
			modifier = {
				has_trait = cynical
				add = 100
			}
			modifier = {
				scope:owner = { is_ai = no }
				add = 50
			}
			modifier = {
				NOT = { has_negative_attitude_towards_trait_trigger = { TRAIT = cannibal GENDER_CHARACTER = scope:owner } }
				add = 100
			}
		}
	}
}

#I have been exposed as a Non-Believer
# by Petter Vilberg & Mathilda Bjarnehed
secrets.0005 = {
	type = character_event
	title = secrets.0001.t
	desc = secrets.0005.desc
	theme = secret
	right_portrait = scope:secret_exposer
	
	immediate = {
		secret_exposed_owner_effects_effect = { SECRET = scope:secret POV = root }
		secret_exposed_owner_opinion_effects_effect = yes
		play_music_cue = "mx_cue_secret"
	}

	option = {
		name = secrets.0005.a
	}
}

#Someone I care about has been exposed as a Non-Believer
scripted_trigger secrets_0105_dislikes_non_believers_trigger = {
	OR = {
		has_trait = zealous
		NOR = {
			has_character_modifier = known_non_believer
			has_trait = cynical
			this.num_virtuous_traits < this.num_sinful_traits
		}
	}
}

secrets.0105 = { #by Mathilda Bjarnehed
	type = character_event
	title = secrets.0106.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					secrets_0105_dislikes_non_believers_trigger = yes
				}
				desc = secrets.0105.negative.desc
			}
			desc = secrets.0105.positive_1.desc
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					any_secret = {
						secret_type = secret_non_believer
					}
				}
				desc = secrets.0105.worried.desc
			}
			triggered_desc = {
				trigger = {
					secrets_0105_dislikes_non_believers_trigger = no
				}
				desc = secrets.0105.positive_2.desc
			}
		}
	}
	theme = secret
	left_portrait = scope:owner
	right_portrait = scope:secret_exposer

	immediate = {
		secret_exposed_notification_effects_effect = { SECRET = scope:secret CHARACTER = scope:owner }

		play_music_cue = "mx_cue_secret"
	}

	option = {
		name = {
			trigger = {
				secrets_0105_dislikes_non_believers_trigger = yes
				opinion = {
					target = scope:owner
					value >= high_positive_opinion
				}
			}
			text = secrets.0106.likes_negative
		}
		name = {
			trigger = {
				secrets_0105_dislikes_non_believers_trigger = yes
				opinion = {
					target = scope:owner
					value < high_positive_opinion
				}
			}
			text = secrets.0105.dislikes_negative
		}
		name = {
			trigger = {
				secrets_0105_dislikes_non_believers_trigger = no
				opinion = {
					target = scope:owner
					value >= high_positive_opinion
				}
			}
			text = secrets.0105.likes_positive
		}
		name = {
			trigger = {
				secrets_0105_dislikes_non_believers_trigger = no
				opinion = {
					target = scope:owner
					value < high_positive_opinion
				}
			}
			text = secrets.0106.dislikes_positive
		}	
	}
}

#I have been exposed as Incestuous
# by Petter Vilberg
secrets.0006 = {
	type = character_event
	title = secrets.0001.t
	desc = secrets.0006.desc
	theme = secret
	
	left_portrait = scope:secret_exposer
	
	immediate = {
		secret_exposed_owner_effects_effect = { SECRET = scope:secret POV = root }
		secret_exposed_owner_opinion_effects_effect = yes
		play_music_cue = "mx_cue_secret"
	}

	option = {
		name = secrets.0006.a
	}
}

#Someone I care about has been exposed as incestuous
secrets.0106 = { #by Mathilda Bjarnehed
	type = character_event
	title = secrets.0106.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { has_negative_attitude_towards_trait_trigger = { TRAIT = incestuous GENDER_CHARACTER = scope:owner } }
				desc = secrets.0106.negative.desc
			}
			desc = secrets.0106.positive_1.desc
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					any_secret = {
						secret_type = secret_lover
						secret_target = scope:owner
					}
					relation_with_character_is_incestuous_in_my_faith_trigger = { CHARACTER = scope:owner }
				}
				desc = secrets.0106.worried.desc
			}
			triggered_desc = {
				trigger = {
					NOT = { has_negative_attitude_towards_trait_trigger = { TRAIT = incestuous GENDER_CHARACTER = scope:owner } }
				}
				desc = secrets.0106.positive_2.desc
			}
		}
	}
	theme = secret
	left_portrait = scope:owner
	right_portrait = scope:secret_exposer

	immediate = {
		secret_exposed_notification_effects_effect = { SECRET = scope:secret CHARACTER = scope:owner }

		play_music_cue = "mx_cue_secret"
	}

	option = {
		name = {
			trigger = {
				has_negative_attitude_towards_trait_trigger = { TRAIT = incestuous GENDER_CHARACTER = scope:owner }
				opinion = {
					target = scope:owner
					value >= high_positive_opinion
				}
			}
			text = secrets.0106.likes_negative
		}
		name = {
			trigger = {
				has_negative_attitude_towards_trait_trigger = { TRAIT = incestuous GENDER_CHARACTER = scope:owner }
				opinion = {
					target = scope:owner
					value < high_positive_opinion
				}
			}
			text = secrets.0106.dislikes_negative
		}
		name = {
			trigger = {
				NOT = { has_negative_attitude_towards_trait_trigger = { TRAIT = incestuous GENDER_CHARACTER = scope:owner } }
				opinion = {
					target = scope:owner
					value >= high_positive_opinion
				}
			}
			text = secrets.0106.likes_positive
		}
		name = {
			trigger = {
				NOT = { has_negative_attitude_towards_trait_trigger = { TRAIT = incestuous GENDER_CHARACTER = scope:owner } }
				opinion = {
					target = scope:owner
					value < high_positive_opinion
				}
			}
			text = secrets.0106.dislikes_positive
		}	
	}
}

#I have been exposed as a Witch
# by Petter Vilberg
secrets.0007 = {
	type = character_event
	title = secrets.0001.t
	desc = secrets.0007.desc
	theme = secret
	right_portrait = scope:secret_exposer

	immediate = {
		secret_exposed_owner_effects_effect = { SECRET = scope:secret POV = root }
		secret_exposed_owner_opinion_effects_effect = yes
		play_music_cue = "mx_cue_stress"
	}

	option = {
		name = secrets.0007.a
	}
}

#Someone I care about has been exposed as a witch
secrets.0107 = { #by Mathilda Bjarnehed
	type = character_event
	title = secrets.0106.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { has_negative_attitude_towards_trait_trigger = { TRAIT = witch GENDER_CHARACTER = scope:owner } }
				desc = secrets.0107.negative.desc
			}
			desc = secrets.0107.positive_1.desc
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					any_secret = { secret_type = secret_witch }
				}
				desc = secrets.0107.worried.desc
			}
			triggered_desc = {
				trigger = { NOT = { has_negative_attitude_towards_trait_trigger = { TRAIT = witch GENDER_CHARACTER = scope:owner } } }
				desc = secrets.0107.positive_2.desc
			}
		}
	}
	theme = secret
	override_background = {
		trigger = { allowed_to_imprison_character_trigger = { CHARACTER = scope:owner } } # Show throne room if you can order imprisonment
		event_background = throne_room
	}
	left_portrait = scope:owner
	right_portrait = scope:secret_exposer

	immediate = {
		secret_exposed_notification_effects_effect = { SECRET = scope:secret CHARACTER = scope:owner }

		play_music_cue = "mx_cue_secret"
	}

	#OK
	option = {
		trigger = {
			NAND = {
				allowed_to_imprison_character_trigger = { CHARACTER = scope:owner }
				trait_is_criminal_in_faith_trigger = { TRAIT = witch FAITH = root.faith GENDER_CHARACTER = scope:owner }
			}
		}
		name = {
			trigger = {
				has_negative_attitude_towards_trait_trigger = { TRAIT = witch GENDER_CHARACTER = scope:owner }
				opinion = {
					target = scope:owner
					value >= high_positive_opinion
				}
			}
			text = secrets.0106.likes_negative
		}
		name = {
			trigger = {
				has_negative_attitude_towards_trait_trigger = { TRAIT = witch GENDER_CHARACTER = scope:owner }
				opinion = {
					target = scope:owner
					value < high_positive_opinion
				}
			}
			text = secrets.0107.dislikes_negative
		}
		name = {
			trigger = {
				NOT = { has_negative_attitude_towards_trait_trigger = { TRAIT = witch GENDER_CHARACTER = scope:owner } }
				opinion = {
					target = scope:owner
					value >= high_positive_opinion
				}
			}
			text = secrets.0106.likes_positive
		}
		name = {
			trigger = {
				NOT = { has_negative_attitude_towards_trait_trigger = { TRAIT = witch GENDER_CHARACTER = scope:owner } }
				opinion = {
					target = scope:owner
					value < high_positive_opinion
				}
			}
			text = secrets.0106.dislikes_positive
		}	
	}

	#For liege: imprison
	option = {
		trigger = {
			allowed_to_imprison_character_trigger = { CHARACTER = scope:owner }
			trait_is_criminal_in_faith_trigger = { TRAIT = witch FAITH = root.faith GENDER_CHARACTER = scope:owner }
		}
		name = secrets.0107.b

		imprison_character_effect = {
			TARGET = scope:owner
			IMPRISONER = root
		}

		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_zeal = low_chance_impact_positive_ai_value
			}
			modifier = {
				has_trait = zealous
				add = 100
			}
			modifier = {
				opinion = {
					target = scope:owner
					value < 0
				}
				add = 100
			}
			modifier = {
				OR = {
					is_close_family_of = scope:owner
					is_spouse_of = scope:owner
					has_relation_lover = scope:owner
					has_relation_friend = scope:owner
				}
				add = -100
			}
		}
	}

	#For liege: forgive
	option = {
		trigger = {
			allowed_to_imprison_character_trigger = { CHARACTER = scope:owner }
			trait_is_criminal_in_faith_trigger = { TRAIT = witch FAITH = root.faith GENDER_CHARACTER = scope:owner }
		}
		name = secrets.0107.c

		reverse_add_opinion = {
			target = scope:owner
			modifier = grateful_opinion
			opinion = 30
		}

		#add_piety_level = -1
		
		stress_impact = {
			zealous = medium_stress_impact_gain
		}

		ai_chance = {
			base = 10
			ai_value_modifier = {
				ai_compassion = low_chance_impact_positive_ai_value
			}
			modifier = {
				has_trait = cynical
				add = 100
			}
			modifier = {
				scope:owner = { is_ai = no }
				add = 50
			}
			modifier = {
				NOT = { has_negative_attitude_towards_trait_trigger = { TRAIT = witch GENDER_CHARACTER = scope:owner } }
				add = 100
			}
		}
	}
}

#I have been exposed as having a Secret Lover
# by Petter Vilberg & Mathilda Bjarnehed
secrets.0008 = {
	type = character_event
	title = secrets.0001.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					OR = {
						relation_with_character_is_incestuous_in_faith_trigger = { CHARACTER = scope:target FAITH = root.faith }
						AND = {
							exists = scope:my_liege
							relation_with_character_is_incestuous_in_faith_trigger = { CHARACTER = scope:target FAITH = scope:my_liege.faith }
						}
						relation_with_character_is_sodomy_in_faith_trigger = { CHARACTER = scope:target FAITH = root.faith }
						AND = {
							exists = scope:my_liege
							relation_with_character_is_sodomy_in_faith_trigger = { CHARACTER = scope:target FAITH = scope:my_liege.faith }
						}
					}
				}
				desc = secrets.0008.forbidden.desc
			}
			desc = secrets.0008.desc
		}
	}
	theme = secret
	left_portrait = {
		character = scope:left_portrait
		animation = shame
	}
	right_portrait = {
		character = scope:right_portrait
		animation = personality_callous
	}

	immediate = {
		if = {
			limit = { exists = liege }
			liege = { save_scope_as = my_liege }
		}
		#Might add incest and homosexual traits
		secret_exposed_owner_effects_effect = { SECRET = scope:secret POV = root }
		secret_exposed_owner_opinion_effects_effect = yes
		play_music_cue = "mx_cue_murder"

		#Ensure no double-portraits.
		if = {
			limit = { scope:secret_exposer = scope:target }
			scope:secret_exposer = { save_scope_as = left_portrait }
		}
		else = {
			scope:target = { save_scope_as = left_portrait }
			scope:secret_exposer = { save_scope_as = right_portrait}
		}

		play_music_cue = "mx_cue_secret"
	}

	option = {
		name = secrets.0008.a
	}
}


#Someone I care about has been exposed as having a Secret Lover
#(Spouses & lovers are notified through infidelity_confrontation.1000)

secrets.0108 = { #by Mathilda Bjarnehed
	type = character_event
	title = secrets.0106.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					OR = {
						scope:secret_exposer = scope:owner
						scope:secret_exposer = scope:target
					}
				}
				desc = secrets.0108.no_exposer.desc
			}
			desc = secrets.0108.exposer.desc
		}
		first_valid = {
			triggered_desc = {
				trigger = { scope:lover_reaction = flag:incest_bad }
				desc = secrets.0108.incest_bad.desc
			}
			triggered_desc = {
				trigger = { scope:lover_reaction = flag:sodomy_bad }
				desc = secrets.0108.sodomy_bad.desc
			}
			triggered_desc = {
				trigger = { scope:lover_reaction = flag:adulterer_bad }
				desc = secrets.0108.adulterer_bad.desc
			}
			triggered_desc = {
				trigger = { scope:lover_reaction = flag:fornicator_bad }
				desc = secrets.0108.fornicator_bad.desc
			}
			triggered_desc = {
				trigger = {
					scope:lover_reaction = flag:all_is_good
					OR = {
						scope:owner = { relation_with_character_is_incestuous_in_my_faith_trigger = { CHARACTER = scope:target } }
						scope:target = { relation_with_character_is_incestuous_in_my_faith_trigger = { CHARACTER = scope:owner } }
					}
				}
				desc = secrets.0108.incest_is_good.desc
			}
			triggered_desc = {
				trigger = { scope:lover_reaction = flag:all_is_good }
				desc = secrets.0108.all_is_good.desc
			}
		}
	}
	theme = secret
	override_background = {
		trigger = {
			OR = {
				allowed_to_imprison_character_trigger = { CHARACTER = scope:owner }
				allowed_to_imprison_character_trigger = { CHARACTER = scope:target }
			}
		}	# Show throne room if you can order imprisonment
		event_background = throne_room
	}
	left_portrait = scope:left_portrait
	lower_right_portrait = scope:lower_right_portrait
	right_portrait = scope:right_portrait

	immediate = {
		# Used to determine if the owner or the target is more important to us (for ordering of character introductions in loc).
		save_scope_as = event_root
		if = {
			# Owner is of major interest, Target is not: Owner is primary character.
			limit = { 
				scope:owner = { is_of_major_interest_trigger = { CHARACTER = root } }
				NOT = {
					scope:target = { is_of_major_interest_trigger = { CHARACTER = root } }
				}
			}
			scope:owner = { save_scope_as = primary_character }
			scope:target = { save_scope_as = secondary_character }
		}
		else_if = {
			# Target is of major interest, Owner is not: Target is primary character.
			limit = { 
				scope:target = { is_of_major_interest_trigger = { CHARACTER = root } }
				NOT = {
					scope:owner = { is_of_major_interest_trigger = { CHARACTER = root } }
				}
			}
			scope:target = { save_scope_as = primary_character }
			scope:owner = { save_scope_as = secondary_character }
		}
		else_if = {
			# Owner is of minor interest, Target is not: Owner is primary character.
			limit = { 
				scope:owner = { is_of_minor_interest_trigger = { CHARACTER = root } }
				NOT = {
					scope:target = { is_of_minor_interest_trigger = { CHARACTER = root } }
				}
			}
			scope:owner = { save_scope_as = primary_character }
			scope:target = { save_scope_as = secondary_character }
		}
		else_if = {
			# Target is of minor interest, Owner is not: Target is primary character.
			limit = {
				scope:target = { is_of_minor_interest_trigger = { CHARACTER = root } }
				NOT = {
					scope:owner = { is_of_minor_interest_trigger = { CHARACTER = root } }
				}
			}
			scope:target = { save_scope_as = primary_character }
			scope:owner = { save_scope_as = secondary_character }
		}
		else = {
			# Fallback: Owner is primary character.
			scope:owner = { save_scope_as = primary_character }
			scope:target = { save_scope_as = secondary_character }
		}

		secret_exposed_notification_effects_effect = { SECRET = scope:secret CHARACTER = scope:owner }
		scope:target = {
			random_secret = {
				limit = {
					secret_type = secret_lover
					secret_target = scope:owner
				}
				save_scope_as = targets_secret
			}
			if = {
				limit = {
					exists = scope:targets_secret
				}
				secret_exposed_notification_effects_effect = { SECRET = scope:targets_secret CHARACTER = scope:target }
			}
		}

		#Which is the worst part? Used for loc
		if = {
			limit = { #Incest is always worst
				scope:primary_character = { relation_with_character_is_incestuous_in_faith_trigger = { CHARACTER = scope:secondary_character FAITH = root.faith } }
				has_negative_attitude_towards_trait_trigger = { TRAIT = incestuous GENDER_CHARACTER = scope:primary_character }
			}
			save_scope_value_as = {
				name = lover_reaction
				value = flag:incest_bad
			}
		}
		else_if = {
			limit = { #Sodomy is 2nd worst
				scope:primary_character = { relation_with_character_is_sodomy_in_faith_trigger = { CHARACTER = scope:secondary_character FAITH = root.faith } }
				has_negative_attitude_towards_trait_trigger = { TRAIT = sodomite GENDER_CHARACTER = scope:primary_character }
			}
			save_scope_value_as = {
				name = lover_reaction
				value = flag:sodomy_bad
			}
		}
		else_if = {
			limit = { #Adulterer is 3rd worst
				scope:primary_character = { is_married = yes }
				has_negative_attitude_towards_trait_trigger = { TRAIT = adulterer GENDER_CHARACTER = scope:primary_character }
			}
			save_scope_value_as = {
				name = lover_reaction
				value = flag:adulterer_bad
			}
		}
		else_if = {
			limit = { #Fornicator is 4th worst
				has_negative_attitude_towards_trait_trigger = { TRAIT = fornicator GENDER_CHARACTER = scope:primary_character }
			}
			save_scope_value_as = {
				name = lover_reaction
				value = flag:fornicator_bad
			}
		}
		else = {
			save_scope_value_as = {
				name = lover_reaction
				value = flag:all_is_good
			}
		}

		# Portrait saving
		if = {
			limit = {
				OR = {
					scope:secret_exposer = scope:primary_character
					scope:secret_exposer = scope:secondary_character
				}
			}
			scope:primary_character = { save_scope_as = left_portrait }
			scope:secondary_character = { save_scope_as = right_portrait }
		}
		else = {
			scope:secret_exposer = { save_scope_as = left_portrait }
			scope:primary_character = { save_scope_as = right_portrait }
			scope:secondary_character = { save_scope_as = lower_right_portrait }
		}

		play_music_cue = "mx_cue_secret"
	}

	#OK
	option = {
		trigger = {
			NAND = {
				OR = {
					AND = {
						allowed_to_imprison_character_trigger = { CHARACTER = scope:owner }
						scope:owner = { sexual_activity_with_partner_is_criminal_in_faith_trigger = { PARTNER = scope:target FAITH = root.faith } }
					}
					AND = {
						allowed_to_imprison_character_trigger = { CHARACTER = scope:target }
						scope:target = { sexual_activity_with_partner_is_criminal_in_faith_trigger = { PARTNER = scope:owner FAITH = root.faith } }
					}
				}
				NOT = { scope:target = root }
			}
		}
		name = {
			trigger = {
				NOT = { scope:lover_reaction = flag:all_is_good }
				opinion = {
					target = scope:owner
					value >= high_positive_opinion
				}
			}
			text = secrets.0106.likes_negative
		}
		name = {
			trigger = {
				NOT = { scope:lover_reaction = flag:all_is_good }
				opinion = {
					target = scope:owner
					value < high_positive_opinion
				}
			}
			text = secrets.0108.dislikes_negative
		}
		name = {
			trigger = {
				scope:lover_reaction = flag:all_is_good
				opinion = {
					target = scope:owner
					value >= high_positive_opinion
				}
			}
			text = secrets.0106.likes_positive
		}
		name = {
			trigger = {
				scope:lover_reaction = flag:all_is_good
				opinion = {
					target = scope:owner
					value < high_positive_opinion
				}
			}
			text = secrets.0106.dislikes_positive
		}	
	}

	#For liege: imprison
	option = {
		trigger = {
			OR = {
				AND = {
					allowed_to_imprison_character_trigger = { CHARACTER = scope:owner }
					scope:owner = { sexual_activity_with_partner_is_criminal_in_faith_trigger = { PARTNER = scope:target FAITH = root.faith } }
				}
				AND = {
					allowed_to_imprison_character_trigger = { CHARACTER = scope:target }
					scope:target = { sexual_activity_with_partner_is_criminal_in_faith_trigger = { PARTNER = scope:owner FAITH = root.faith } }
				}
			}
			NOT = { scope:target = root }
		}
		name = secrets.0108.b

		if = {
			limit = {
				allowed_to_imprison_character_trigger = { CHARACTER = scope:owner }
				scope:owner = { sexual_activity_with_partner_is_criminal_in_faith_trigger = { PARTNER = scope:target FAITH = root.faith } }
			}
			rightfully_imprison_character_effect = {
				TARGET = scope:owner
				IMPRISONER = root
			}
		}
		if = {
			limit = {
				allowed_to_imprison_character_trigger = { CHARACTER = scope:target }
				scope:target = { sexual_activity_with_partner_is_criminal_in_faith_trigger = { PARTNER = scope:owner FAITH = root.faith } }
			}
			rightfully_imprison_character_effect = {
				TARGET = scope:target
				IMPRISONER = root
			}
		}

		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_zeal = low_chance_impact_positive_ai_value
			}
			modifier = {
				has_trait = zealous
				add = 100
			}
			modifier = {
				OR = {
					opinion = {
						target = scope:owner
						value < 0
					}
					opinion = {
						target = scope:target
						value < 0
					}
				}
				add = 100
			}
			modifier = {
				OR = {
					is_close_family_of = scope:owner
					has_relation_friend = scope:owner
					is_close_family_of = scope:target
					has_relation_friend = scope:target
				}
				add = -100
			}
		}
	}

	#For liege: forgive
	option = {
		trigger = {
			OR = {
				AND = {
					allowed_to_imprison_character_trigger = { CHARACTER = scope:owner }
					scope:owner = { sexual_activity_with_partner_is_criminal_in_faith_trigger = { PARTNER = scope:target FAITH = root.faith } }
				}
				AND = {
					allowed_to_imprison_character_trigger = { CHARACTER = scope:target }
					scope:target = { sexual_activity_with_partner_is_criminal_in_faith_trigger = { PARTNER = scope:owner FAITH = root.faith } }
				}
			}
			NOT = { scope:target = root }
		}
		name = secrets.0107.c

		reverse_add_opinion = {
			target = scope:owner
			modifier = grateful_opinion
			opinion = 30
		}
		reverse_add_opinion = {
			target = scope:target
			modifier = grateful_opinion
			opinion = 30
		}

		#add_piety_level = -1
		
		stress_impact = {
			zealous = medium_stress_impact_gain
		}

		ai_chance = {
			base = 10
			ai_value_modifier = {
				ai_compassion = low_chance_impact_positive_ai_value
			}
			modifier = {
				has_trait = cynical
				add = 100
			}
			modifier = {
				scope:owner = { is_ai = no }
				add = 50
			}
			modifier = {
				exists = scope:lover_reaction
				scope:lover_reaction = flag:all_is_good
				add = 100
			}
		}
	}
}

#Someone I care about have been exposed as being a bastard/a parent of a bastard (Disputed Heritage Secret)
secrets.0110 = { #by Mathilda Bjarnehed
	type = character_event
	title = secrets.0106.t
	desc = {
		####INTRO: WHO IS INVOLVED###
		first_valid = {
			desc = secrets.0110.start.above_cutoff
			desc = secrets.0110.start.desc #Exposer
		}
		first_valid = {
			triggered_desc = {
				trigger = { has_RelationToMe_relation = { CHARACTER = scope:child } }
				desc = secrets.0110.single_child_relation.desc #Name of child I know (this to avoid awkwardness with character introductions)
			}
			desc = secrets.0110.single_child.desc
		}
		first_valid = {
			triggered_desc = { #For father: child isn't mine/aren't mine
				trigger = { root = scope:father }
				desc = secrets.0110.is_not_mine.desc #Single child
			}
			desc = secrets.0110.is_not_fathers.desc #For everyone else: child wasn't fathers/aren't fathers
		}
		first_valid = {
			triggered_desc = { #The real father is relative of mother! (incest)
				trigger = {
					faith = { save_temporary_scope_as = root_faith }
					scope:mother = {
						relation_with_character_is_incestuous_in_faith_trigger = {
							CHARACTER = scope:real_father
							FAITH = scope:root_faith
						}
					}
				}
				desc = secrets.0110.incest_real_father.desc
			}
			triggered_desc = {
				trigger = {
					exists = scope:secret_exposer
					scope:real_father = scope:secret_exposer
				}
				desc = secrets.0110.regular_real_father_self_expose
			}
			desc = secrets.0110.regular_real_father.desc #No incest
		}
		###REACTION###
		first_valid = {
			#FATHER REACTIONS#
			triggered_desc = {
				trigger = { root = scope:father }
				desc = {
					first_valid = { #What do I think about this
						triggered_desc = {
							trigger = { scope:child.age >= bastard_legitimacy_change_cutoff_age }
							desc = secrets.0110.father.child_above_cutoff #The child is too old to change the lineage
						}
						triggered_desc = {
							trigger = { has_character_flag = father_knows }
							desc = secrets.0110.father_knew.desc #I already knew
						}
						triggered_desc = {
							trigger = {
								OR = {
									opinion = {
										target = scope:mother
										value > 60
									}
									has_relation_lover = scope:mother
								}
							}
							desc = secrets.0110.father_love.desc #I love mother (single child)
						}
						triggered_desc = {
							trigger = {
								root = scope:father
							}
							desc = secrets.0110.father_no_love.desc #I don't love the mother
						}
					}
				}
			}
			#REACTION FOR CHILD's CONSORT IF INCEST
			triggered_desc = {
				trigger = {
					exists = scope:consort_bastard
					relation_with_character_is_incestuous_in_my_faith_trigger = {
						CHARACTER = scope:consort_bastard
					}
				}
				desc = {
					first_valid = {
						triggered_desc = {
							trigger = { accepts_incest_with_trigger = { CHARACTER = scope:consort_bastard } }
							desc = secrets.0110.incest_consort_accepted.desc #Accepts incest
						}
						desc = secrets.0110.incest_consort.desc #Accepts incest
					}
				}
			}
			#REACTION FOR MOTHER's CONSORT#
			triggered_desc = {
				trigger = { is_consort_of = scope:mother }
				desc = secrets.0110.mother_spouse.desc
			}
			#REACTION FOR REAL FATHER's CONSORT#
			triggered_desc = {
				trigger = { is_consort_of = scope:real_father }
				desc = secrets.0110.real_father_spouse.desc
			}
			#REACTION FOR MOTHER's FAMILY#
			triggered_desc = {
				trigger = { is_close_family_of = scope:mother }
				desc = secrets.0110.mother_family.desc
			}
			#REACTION FOR REAL FATHER's FAMILY#
			triggered_desc = {
				trigger = { is_close_family_of = scope:real_father }
				desc = secrets.0110.real_father_family.desc
			}
			#REACTION FOR EVERYONE ELSE#
			desc = secrets.0110.general_end.desc #Single child
		}
	}
	theme = secret
	left_portrait = scope:child
	right_portrait = scope:mother
	lower_right_portrait = scope:real_father
	
	immediate = {
		secret_exposed_notification_effects_effect = { SECRET = scope:secret CHARACTER = scope:owner }

		#Save scope for consort if your consort is mother or real_father or child
		if = {
			limit = { is_consort_of = scope:mother }
			scope:mother = { save_scope_as = consort_bastard_parent }
			scope:real_father = { save_scope_as = consort_bastard_parent_lover }
		}
		else_if = {
			limit = { is_consort_of = scope:real_father }
			scope:real_father = { save_scope_as = consort_bastard_parent }
			scope:mother = { save_scope_as = consort_bastard_parent_lover }
		}
		else_if = {
			limit = { is_consort_of = scope:child }
			scope:child = { save_scope_as = consort_bastard }
		}

		play_music_cue = "mx_cue_secret"
	}

	#OK (for non-spouses)
	option = {
		trigger = {
			NOT = { exists = scope:consort_bastard_parent }
		}
		#Regular option text
		name = {
			trigger = {
				NAND = {
					exists = scope:consort_bastard
					relation_with_character_is_incestuous_in_my_faith_trigger = {
						CHARACTER = scope:consort_bastard
					}
					NOT = { accepts_incest_with_trigger = { CHARACTER = scope:consort_bastard } }
				}
			}
			text = secrets.0110.a
		}
		#Option text for child's consort realizing it's incest
		name = {
			trigger = {
				exists = scope:consort_bastard
				relation_with_character_is_incestuous_in_my_faith_trigger = {
					CHARACTER = scope:consort_bastard
				}
				NOT = { accepts_incest_with_trigger = { CHARACTER = scope:consort_bastard } }
				
			}
			text = secrets.0110.a.incest
		}
	}

	#I must know! For spouses
	option = {
		trigger = {
			exists = scope:consort_bastard_parent
			scope:consort_bastard_parent_lover = { is_alive = yes }
			NOT = { #Don't make this choice if I'm an AI but the other bastard parent's spouse is player
				is_ai = yes
				scope:consort_bastard_parent_lover = {
					any_consort = { is_ai = no }
				}
			}
			#Not already out
			NOT = {
				scope:consort_bastard_parent = {
					has_relation_lover = scope:consort_bastard_parent_lover
					NOT = {
						any_secret = {
							secret_type = secret_lover
							secret_target = scope:consort_bastard_parent_lover
						}
					}
				}
			}
		}
		name = secrets.0110.b

		random_list = {
			1 = { #They tell you their secret
				desc = secrets.0110.b.success.desc
				show_chance = no
				modifier = {
					add = -1
					scope:consort_bastard_parent = {
						any_secret = {
							secret_type = secret_lover
							secret_target = scope:consort_bastard_parent_lover
						}
					}
				}
				send_interface_toast = {
					title = secrets.0110.b.success.desc
					left_icon = scope:consort_bastard_parent
					right_icon = scope:consort_bastard_parent_lover
					custom_tooltip = secrets.0110.b.success.tt
					hidden_effect = {
						scope:consort_bastard_parent = {
							random_secret = {
								limit = {
									secret_type = secret_lover
									secret_target = scope:consort_bastard_parent_lover
								}
								reveal_to = root
							}
						}
					}
				}
			}
			1 = {
				desc = secrets.0110.b.failure.desc
				show_chance = no
				modifier = {
					add = -1
					scope:consort_bastard_parent = {
						any_secret = {
							secret_type = secret_lover
							secret_target = scope:consort_bastard_parent_lover
						}
					}
				}
				send_interface_toast = {
					title = secrets.0110.b.failure.desc
					left_icon = scope:consort_bastard_parent
					right_icon = scope:consort_bastard_parent_lover
					reverse_add_opinion = {
						target = scope:consort_bastard_parent
						modifier = insult_opinion
						opinion = -15
					}
				}
			}
		}

		ai_chance = {
			base = 100
			modifier = {
				has_trait = paranoid
				add = 100
			}
		}
	}

	#I don't care for spouses
	option = {
		trigger = { exists = scope:consort_bastard_parent }
		name = secrets.0110.c

		ai_chance = {
			base = 20
			modifier = {
				has_trait = trusting
				add = 180
			}
		}
	}

	after = {
		if = {
			limit = { root = scope:father }
			scope:father = {
				remove_character_flag = father_knows
			}
		}
	}
}


#Someone I care about have been exposed as being a bastard/a parent of a bastard (secret_unmarried_illegitimate_child)
secrets.0112 = { #by Mathilda Bjarnehed
	type = character_event
	title = secrets.0106.t
	desc = {
		####INTRO: WHO IS INVOLVED###
		first_valid = {
			triggered_desc = {
				trigger = { scope:child.age >= bastard_legitimacy_change_cutoff_age }
				desc = secrets.0110.start.above_cutoff
			}			
			desc = secrets.0110.start.desc #Exposer
		}
		first_valid = {
			triggered_desc = {
				trigger = { has_RelationToMe_relation = { CHARACTER = scope:child } }
				desc = secrets.0112.single_child_relation.desc #Name of child I know (this to avoid awkwardness with character introductions)
			}
			desc = secrets.0112.single_child.desc
		}
		first_valid = {
			triggered_desc = { #The real father is relative of mother! (incest)
				trigger = {
					faith = { save_temporary_scope_as = root_faith }
					scope:mother = {
						relation_with_character_is_incestuous_in_faith_trigger = {
							CHARACTER = scope:real_father
							FAITH = scope:root_faith
						}
					}
				}
				desc = secrets.0110.incest_real_father.desc
			}
			triggered_desc = {
				trigger = {
					exists = scope:secret_exposer
					scope:real_father = scope:secret_exposer
				}
				desc = secrets.0110.regular_real_father_self_expose
			}
			desc = secrets.0110.regular_real_father.desc #No incest
		}
		###REACTION###
		first_valid = {
			#REACTION FOR CHILD's CONSORT IF INCEST
			triggered_desc = {
				trigger = {
					exists = scope:consort_bastard
					relation_with_character_is_incestuous_in_my_faith_trigger = {
						CHARACTER = scope:consort_bastard
					}
				}
				desc = {
					first_valid = {
						triggered_desc = {
							trigger = { accepts_incest_with_trigger = { CHARACTER = scope:consort_bastard } }
							desc = secrets.0110.incest_consort_accepted.desc #Accepts incest
						}
						desc = secrets.0110.incest_consort.desc #Accepts incest
					}
				}
			}
			#REACTION FOR MOTHER's CONSORT#
			triggered_desc = {
				trigger = { is_consort_of = scope:mother }
				desc = secrets.0110.mother_spouse.desc
			}
			#REACTION FOR REAL FATHER's CONSORT#
			triggered_desc = {
				trigger = { is_consort_of = scope:real_father }
				desc = secrets.0110.real_father_spouse.desc
			}
			#REACTION FOR MOTHER's FAMILY#
			triggered_desc = {
				trigger = { is_close_family_of = scope:mother }
				desc = secrets.0112.mother_family.desc
			}
			#REACTION FOR REAL FATHER's FAMILY#
			triggered_desc = {
				trigger = { is_close_family_of = scope:real_father }
				desc = secrets.0112.real_father_family.desc
			}
			#REACTION FOR EVERYONE ELSE#
			desc = secrets.0112.general_end.desc #Single child
		}
	}
	theme = secret
	left_portrait = scope:child
	right_portrait = scope:mother
	lower_right_portrait = scope:real_father
	
	immediate = {
		secret_exposed_notification_effects_effect = { SECRET = scope:secret CHARACTER = scope:owner }

		#Save scope for consort if your consort is mother or real_father or child
		if = {
			limit = { is_consort_of = scope:mother }
			scope:mother = { save_scope_as = consort_bastard_parent }
			scope:real_father = { save_scope_as = consort_bastard_parent_lover }
		}
		else_if = {
			limit = { is_consort_of = scope:real_father }
			scope:real_father = { save_scope_as = consort_bastard_parent }
			scope:mother = { save_scope_as = consort_bastard_parent_lover }
		}
		else_if = {
			limit = { is_consort_of = scope:child }
			scope:child = { save_scope_as = consort_bastard }
		}

		play_music_cue = "mx_cue_secret"
	}

	#OK (for non-spouses)
	option = {
		trigger = {
			NOT = { exists = scope:consort_bastard_parent }
		}
		#Regular option text
		name = {
			trigger = {
				NAND = {
					exists = scope:consort_bastard
					relation_with_character_is_incestuous_in_my_faith_trigger = {
						CHARACTER = scope:consort_bastard
					}
					NOT = { accepts_incest_with_trigger = { CHARACTER = scope:consort_bastard } }
				}
			}
			text = secrets.0112.a
		}
		#Option text for child's consort realizing it's incest
		name = {
			trigger = {
				exists = scope:consort_bastard
				relation_with_character_is_incestuous_in_my_faith_trigger = {
					CHARACTER = scope:consort_bastard
				}
				NOT = { accepts_incest_with_trigger = { CHARACTER = scope:consort_bastard } }
				
			}
			text = secrets.0110.a.incest
		}
	}

	#I must know! For spouses
	option = {
		trigger = {
			exists = scope:consort_bastard_parent
			NOT = { #Don't make this choice if I'm an AI but the other bastard parent's spouse is player
				is_ai = yes
				scope:consort_bastard_parent_lover = {
					any_consort = { is_ai = no }
				}
			}
			#Not already out
			NOT = {
				scope:consort_bastard_parent = {
					has_relation_lover = scope:consort_bastard_parent_lover
					NOT = {
						any_secret = {
							secret_type = secret_lover
							secret_target = scope:consort_bastard_parent_lover
						}
					}
				}
			}
		}
		name = secrets.0112.b

		random_list = {
			1 = { #They tell you their secret
				desc = secrets.0112.b.success.desc
				show_chance = no
				modifier = {
					add = -1
					scope:consort_bastard_parent = {
						any_secret = {
							secret_type = secret_lover
							secret_target = scope:consort_bastard_parent_lover
						}
					}
				}
				send_interface_toast = {
					title = secrets.0112.b.success.desc
					left_icon = scope:consort_bastard_parent
					right_icon = scope:consort_bastard_parent_lover
					custom_tooltip = secrets.0110.b.success.tt
					hidden_effect = {
						scope:consort_bastard_parent = {
							random_secret = {
								limit = {
									secret_type = secret_lover
									secret_target = scope:consort_bastard_parent_lover
								}
								reveal_to = root
							}
						}
					}
				}
			}
			1 = {
				desc = secrets.0110.b.failure.desc
				show_chance = no
				modifier = {
					add = -1
					scope:consort_bastard_parent = {
						any_secret = {
							secret_type = secret_lover
							secret_target = scope:consort_bastard_parent_lover
						}
					}
				}
				send_interface_toast = {
					title = secrets.0110.b.failure.desc
					left_icon = scope:consort_bastard_parent
					right_icon = scope:consort_bastard_parent_lover
					reverse_add_opinion = {
						target = scope:consort_bastard_parent
						modifier = insult_opinion
						opinion = -15
					}
				}
			}
		}

		ai_chance = {
			base = 100
			modifier = {
				has_trait = paranoid
				add = 100
			}
		}
	}

	#I don't care for spouses
	option = {
		trigger = { exists = scope:consort_bastard_parent }
		name = secrets.0112.c

		ai_chance = {
			base = 20
			modifier = {
				has_trait = trusting
				add = 180
			}
		}
	}
}


#I have been exposed as a someone who has Attempted Murder
secrets.0115 = { #by Mathilda Bjarnehed
	type = character_event
	title = secrets.0001.t
	desc = {
		desc = secrets.0115.start.desc
		first_valid = {
			triggered_desc = {
				trigger = { scope:victim = { is_alive = yes } }
				desc = secrets.0115.victim_alive.desc
			}
			desc = secrets.0115.victim_dead.desc
		}
	}
	theme = secret
	left_portrait = scope:secret_exposer
	right_portrait = scope:victim
	
	immediate = {
		secret_exposed_owner_effects_effect = { SECRET = scope:secret POV = root }
		secret_exposed_owner_opinion_effects_effect = yes
		play_music_cue = "mx_cue_murder"
	}

	option = {
		name = secrets.0115.a
	}
}	

#Someone I care about has been exposed for Attempted Murder/I care about the victim/I am the victim
scripted_trigger secrets_0116_dislikes_murder_attempt = {
	OR = {
		ai_compassion >= 0
		AND = {
			is_close_family_of = scope:victim
			has_relation_friend = scope:victim
			is_spouse_of = scope:victim
			has_relation_lover = scope:victim
		}
		root = scope:victim
	}
	OR = {
		opinion = {
			target = scope:victim
			value > medium_negative_opinion
		}
		root = scope:victim
	}
	NOT = {
		has_trait = sadistic
		opinion = {
			target = scope:victim
			value < medium_positive_opinion
		}
	}
}

secrets.0116 = { #by Mathilda Bjarnehed
	type = character_event
	title = secrets.0106.t
	desc = {
		first_valid = {
			#VICTIM DESC#
			triggered_desc = {
				trigger = { root = scope:victim }
				desc = {
					first_valid = {
						triggered_desc = {
							trigger = { has_character_flag = victim_knows }
							desc = secrets.0106.victim_knows.desc
						}
						desc = secrets.0106.victim.desc
					}
				}
			}
			#NON-VICTIM DESC
			desc = {
				first_valid = {
					triggered_desc = {
						trigger = { secrets_0116_dislikes_murder_attempt = yes }
						desc = secrets.0116.negative.desc
					}
					desc = secrets.0116.positive.desc
				}
			}
		}
	}
	theme = secret
	override_background = {
		trigger = { allowed_to_imprison_character_trigger = { CHARACTER = scope:owner } } # Show throne room if you can order imprisonment
		event_background = throne_room
	}
	left_portrait = scope:secret_exposer
	right_portrait = scope:murderer
	lower_right_portrait = scope:victim
	
	immediate = {
		secret_exposed_notification_effects_effect = { SECRET = scope:secret CHARACTER = scope:owner }
	}

	#Ok (for non-lieges)
	option = {
		trigger = {
			NAND = {
				allowed_to_imprison_character_trigger = { CHARACTER = scope:murderer }
				OR = {
					has_opinion_modifier = {
						target = scope:murderer
						modifier = attempted_murder_close_family_crime
					}
					has_opinion_modifier = {
						target = scope:murderer
						modifier = attempted_murder_me_crime
					}
				}
			}
		}
		name = {
			trigger = {
				has_character_flag = victim_knows
			}
			text = secrets.0116.victim_knows
		}
		name = {
			trigger = {
				NOT = { has_character_flag = victim_knows }
				secrets_0116_dislikes_murder_attempt = yes
				opinion = {
					target = scope:murderer
					value >= high_positive_opinion
				}
			}
			text = secrets.0116.likes_negative
		}
		name = {
			trigger = {
				NOT = { has_character_flag = victim_knows }
				secrets_0116_dislikes_murder_attempt = yes
				opinion = {
					target = scope:murderer
					value < high_positive_opinion
				}
			}
			text = secrets.0116.dislikes_negative
		}
		name = {
			trigger = {
				NOT = { has_character_flag = victim_knows }
				secrets_0116_dislikes_murder_attempt = no
				opinion = {
					target = scope:murderer
					value >= high_positive_opinion
				}
			}
			text = secrets.0116.likes_positive
		}
		name = {
			trigger = {
				NOT = { has_character_flag = victim_knows }
				secrets_0116_dislikes_murder_attempt = no
				opinion = {
					target = scope:murderer
					value < high_positive_opinion
				}
			}
			text = secrets.0106.dislikes_positive
		}	
	}

	#Imprison (for lieges)
	option = {
		trigger = {
			allowed_to_imprison_character_trigger = { CHARACTER = scope:murderer }
			OR = {
				has_opinion_modifier = {
					target = scope:murderer
					modifier = attempted_murder_close_family_crime
				}
				has_opinion_modifier = {
					target = scope:murderer
					modifier = attempted_murder_me_crime
				}
			}
		}
		name = secrets.0116.b

		imprison_character_effect = {
			TARGET = scope:murderer
			IMPRISONER = root
		}

		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_zeal = low_chance_impact_positive_ai_value
			}
			modifier = {
				has_trait = zealous
				add = 100
			}
			modifier = {
				OR = {
					opinion = {
						target = scope:murderer
						value < 0
					}
					opinion = {
						target = scope:victim
						value < 0
					}
				}
				add = 100
			}
			modifier = {
				OR = {
					is_close_family_of = scope:murderer
					has_relation_friend = scope:murderer
					is_close_family_of = scope:victim
					has_relation_friend = scope:victim
				}
				add = -100
			}
		}
	}

	#For liege: forgive
	option = {
		trigger = {
			allowed_to_imprison_character_trigger = { CHARACTER = scope:murderer }
			OR = {
				has_opinion_modifier = {
					target = scope:murderer
					modifier = attempted_murder_close_family_crime
				}
				has_opinion_modifier = {
					target = scope:murderer
					modifier = attempted_murder_me_crime
				}
			}
		}
		name = secrets.0116.c

		reverse_add_opinion = {
			target = scope:murderer
			modifier = grateful_opinion
			opinion = 30
		}
		if = {
			limit = { scope:victim = { is_alive = yes } }
			reverse_add_opinion = {
				target = scope:victim
				modifier = angry_opinion
				opinion = -30
			}
		}


		ai_chance = {
			base = 10
			ai_value_modifier = {
				ai_compassion = low_chance_impact_positive_ai_value
			}
			modifier = {
				has_trait = cynical
				add = 100
			}
			modifier = {
				scope:murderer = { is_ai = no }
				add = 50
			}
			modifier = {
				exists = scope:lover_reaction
				scope:lover_reaction = flag:all_is_good
				add = 100
			}
		}
	}
	

	after = {
		remove_character_flag = victim_knows
	}
}	


#I have been exposed as a Murderer
secrets.0117 = { #by Mathilda Bjarnehed
	type = character_event
	title = secrets.0001.t
	desc = {
		desc = secrets.0117.start.desc
		first_valid = {
			triggered_desc = { #Dynastic murder, dynastic head will be angry
				trigger = {
					murdering_character_is_kinslaying_in_my_or_same_dynasty_lieges_faith_trigger = { CHARACTER = scope:victim }
					has_dynasty = yes
					dynasty = {
						NOT = { dynast = { this = root } }
					}
				}
				desc = secrets.0117.kinslayer.desc
			}
			triggered_desc = { #Dynastic murder, dynasty will be angry
				trigger = {
					murdering_character_is_kinslaying_in_my_or_same_dynasty_lieges_faith_trigger = { CHARACTER = scope:victim }
					has_dynasty = yes
					dynasty = {
						dynast = { this = root }
					}
				}
				desc = secrets.0117.kinslayer_dynasty_head.desc
			}
			desc = secrets.0117.regular.desc
		}
	}

	theme = secret
	left_portrait = scope:secret_exposer
	right_portrait = scope:victim
	
	immediate = {
		secret_exposed_owner_effects_effect = { SECRET = scope:secret POV = root }
		secret_exposed_owner_opinion_effects_effect = yes
		play_music_cue = "mx_cue_murder"
		if = {
			limit = {
				exists = dynasty
				exists = dynasty.dynast
			}
			dynasty.dynast = { save_scope_as = dynast }
		}
	}

	option = {
		name = secrets.0117.a
	}
}	

#Someone I care about has been exposed as a Murderer/I care about the victim
scripted_trigger secrets_0118_dislikes_murder = {
	OR = {
		ai_compassion >= medium_negative_ai_value
		AND = {
			is_close_family_of = scope:victim
			has_relation_friend = scope:victim
			is_spouse_of_even_if_dead = scope:victim
			has_relation_lover = scope:victim
		}
	}
	NOT = {
		has_trait = sadistic
	}
}

secrets.0118 = { #by Mathilda Bjarnehed
	type = character_event
	title = {
		first_valid = {
			triggered_desc = {
				trigger = { exists = scope:known_murder }
				desc = secrets.0118.known_murder.t
			}
			desc = secrets.0106.t
		}
	}
	desc = {
		#NON-VICTIM DESC
		first_valid = {
			triggered_desc = {
				trigger = { secrets_0118_dislikes_murder = yes }
				desc = {
					first_valid = {
						triggered_desc = {
							trigger = { exists = scope:known_murder } #Murder is known, i.e. revealed instantly
							desc = secrets.0118.negative_start_known.desc
						}
						desc = secrets.0118.negative_start.desc
					}
					first_valid = {
						triggered_desc = {
							trigger = {
								OR = {
									is_close_family_of = scope:victim
									is_spouse_of_even_if_dead = scope:victim
								}
							}
							desc = secrets.0118.negative_end_family.desc
						}
						desc = secrets.0118.negative_end.desc
					}
				}
			}
			triggered_desc = {
				trigger = { exists = scope:known_murder } #Murder is known, i.e. revealed instantly
				desc = secrets.0118.positive_known.desc
			}
			desc = secrets.0118.positive.desc
		}
	}
	theme = secret
	override_background = {
		trigger = { allowed_to_imprison_character_trigger = { CHARACTER = scope:owner } } # Show throne room if you can order imprisonment
		event_background = throne_room
	}
	left_portrait = scope:left_portrait
	right_portrait = scope:right_portrait
	lower_right_portrait = scope:lower_right_portrait
	
	immediate = {
		# Portrait saving
		if = {
			limit = {
				exists = scope:known_murder
			}
			scope:murderer = { save_scope_as = left_portrait }
			scope:victim = { save_scope_as = right_portrait }
		}
		else = {
			scope:secret_exposer = { save_scope_as = left_portrait }
			scope:murderer = { save_scope_as = right_portrait }
			scope:victim = { save_scope_as = lower_right_portrait }
		}

		secret_exposed_notification_effects_effect = { SECRET = scope:secret CHARACTER = scope:owner }

		play_music_cue = "mx_cue_secret"
	}

	#Ok (for non-lieges)
	option = {
		trigger = {
			NAND = {
				allowed_to_imprison_character_trigger = { CHARACTER = scope:murderer }
				OR = {
					has_opinion_modifier = {
						target = scope:murderer
						modifier = murdered_close_family_crime
					}
					has_opinion_modifier = {
						target = scope:murderer
						modifier = kinslayer_crime_dynasty
					}
				}
			}
		}
		name = {
			trigger = {
				has_character_flag = victim_knows
			}
			text = secrets.0116.victim_knows
		}
		name = {
			trigger = {
				NOT = { has_character_flag = victim_knows }
				secrets_0118_dislikes_murder = yes
				opinion = {
					target = scope:murderer
					value >= high_positive_opinion
				}
			}
			text = secrets.0116.likes_negative
		}
		name = {
			trigger = {
				NOT = { has_character_flag = victim_knows }
				secrets_0118_dislikes_murder = yes
				opinion = {
					target = scope:murderer
					value < high_positive_opinion
				}
			}
			text = secrets.0116.dislikes_negative
		}
		name = {
			trigger = {
				NOT = { has_character_flag = victim_knows }
				secrets_0118_dislikes_murder = no
				opinion = {
					target = scope:murderer
					value >= high_positive_opinion
				}
			}
			text = secrets.0116.likes_positive
		}
		name = {
			trigger = {
				NOT = { has_character_flag = victim_knows }
				secrets_0118_dislikes_murder = no
				opinion = {
					target = scope:murderer
					value < high_positive_opinion
				}
			}
			text = secrets.0106.dislikes_positive
		}	
	}

	#Imprison (for lieges)
	option = {
		trigger = {
			allowed_to_imprison_character_trigger = { CHARACTER = scope:murderer }
			OR = {
				has_opinion_modifier = {
					target = scope:murderer
					modifier = murdered_close_family_crime
				}
				has_opinion_modifier = {
					target = scope:murderer
					modifier = kinslayer_crime_dynasty
				}
			}
		}
		name = secrets.0116.b

		imprison_character_effect = {
			TARGET = scope:murderer
			IMPRISONER = root
		}

		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_zeal = low_chance_impact_positive_ai_value
			}
			modifier = {
				has_trait = zealous
				add = 100
			}
			modifier = {
				OR = {
					opinion = {
						target = scope:murderer
						value < 0
					}
					opinion = {
						target = scope:victim
						value < 0
					}
				}
				add = 100
			}
			modifier = {
				OR = {
					is_close_family_of = scope:murderer
					has_relation_friend = scope:murderer
					is_close_family_of = scope:victim
					has_relation_friend = scope:victim
				}
				add = -50
			}
		}
	}

	#For liege: forgive
	option = {
		trigger = {
			allowed_to_imprison_character_trigger = { CHARACTER = scope:murderer }
			OR = {
				has_opinion_modifier = {
					target = scope:murderer
					modifier = murdered_close_family_crime
				}
				has_opinion_modifier = {
					target = scope:murderer
					modifier = kinslayer_crime_dynasty
				}
			}
		}
		name = secrets.0116.c

		reverse_add_opinion = {
			target = scope:murderer
			modifier = grateful_opinion
			opinion = 30
		}
		scope:victim = {
			every_close_family_member = {
				custom = all_close_family_and_spouses
				add_opinion = {
					modifier = angry_opinion
					opinion = -30
					target = root
				}
			}
			hidden_effect = {
				every_spouse = {
					add_opinion = {
						modifier = angry_opinion
						opinion = -30
						target = root
					}
				}
			}
		}

		ai_chance = {
			base = 10
			ai_value_modifier = {
				ai_compassion = low_chance_impact_positive_ai_value
			}
			modifier = {
				has_trait = cynical
				add = 100
			}
			modifier = {
				scope:murderer = { is_ai = no }
				add = 50
			}
			modifier = {
				exists = scope:lover_reaction
				scope:lover_reaction = flag:all_is_good
				add = 100
			}
		}
	}
}	


#######################
# Secret Discovery events
# 0500-0999
#######################

###BASTARD SECRETS###

#For "father" (who isn't actually father, after all)
secrets.0500 = { #by Mathilda Bjarnehed
	type = character_event
	title = secrets.0500.single_child.t
	desc = {
		desc = secrets.0500.start.desc
		desc = secrets.0500.single_child.desc
		first_valid = {
			triggered_desc = { #The real father is relative of mother! (incest)
				trigger = {
					faith = { save_temporary_scope_as = root_faith }
					scope:mother = {
						relation_with_character_is_incestuous_in_faith_trigger = {
							CHARACTER = scope:real_father
							FAITH = scope:root_faith
						}
					}
				}
				desc = secrets.0500.incest_real_father.desc
			}
			desc = secrets.0500.regular_real_father.desc #No incest
		}
		desc = secrets.0500.end.desc
	}
	theme = secret
	left_portrait = scope:child
	right_portrait = scope:mother
	lower_right_portrait = scope:real_father
	

	option = {
		name = secrets.0500.a
		hidden_effect = {
			if = {
				limit = {
					scope:mother = {
						any_secret = {
							secret_type = secret_lover
							secret_target = scope:real_father
						}
					}
				}
				scope:mother = {
					random_secret = {
						limit = {
							secret_type = secret_lover
							secret_target = scope:real_father
						}
						reveal_to = root
					}
				}
			}
		}
	}
}

#For child
secrets.0501 = {
	type = character_event
	title = secrets.0501.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = scope:incest_spouse
				}
				desc = secrets.0501.desc_incest_marriage
			}
			triggered_desc = {
				trigger = {
					scope:secret = {
						secret_type = secret_unmarried_illegitimate_child
					}
				}
				desc = secrets.0501.desc_unmarried_mother
			}
			desc = secrets.0501.desc_married_mother
		}
	}
	theme = secret
	left_portrait = scope:real_father
	lower_left_portrait = scope:father
	right_portrait = scope:mother

	immediate = {
		if = { #Did I accidentally marry my sibling? (to my knowledge)
			random_consort = {
				limit = {
					exists = this.father
					this.father = scope:real_father
				}
				save_scope_as = incest_spouse
			}
		}

		play_music_cue = "mx_cue_secret"
	}

	option = {
		name = secrets.0501.a
	}
}

#For real father
secrets.0502 = { #by Mathilda Bjarnehed
	type = character_event
	title = secrets.0502.single_child.t
	desc = {
		desc = secrets.0502.single_child_start.desc
		triggered_desc = {
			trigger = { has_relation_lover = scope:mother }
			desc = secrets.0502.lover.desc
		}	
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:secret = {
						secret_type = secret_unmarried_illegitimate_child
					}
				}
				desc = secrets.0502.unmarried.desc
			}
			desc = secrets.0502.married.desc
		}
		triggered_desc = {
			trigger = { exists = scope:father }
			desc = secrets.0502.end
		}
	}

	theme = secret
	left_portrait = scope:child
	right_portrait = scope:mother
	lower_right_portrait = scope:father


	option = {
		name = {
			trigger = {
				OR = {
					is_consort_of = scope:child
					has_relation_lover = scope:child
				}
			}
			text = secrets.0502.a.incest
		}
		name = {
			trigger = {
				NOR = {
					is_consort_of = scope:child
					has_relation_lover = scope:child
				}
			}
			text = secrets.0502.a
		}
	}
}

#For lover/consort if they've discovered that we're siblings
secrets.0503 = { #by Mathilda Bjarnehed
	type = character_event
	title = secrets.0503.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { accepts_incest_with_trigger = { CHARACTER = scope:sibling_partner } }
				desc = secrets.0503.incest_accepted.desc #Accepts incest
			}
			desc = secrets.0503.incest.desc
		}
	}
	theme = secret
	left_portrait = scope:sibling_partner
	right_portrait = scope:mother
	lower_right_portrait = scope:real_father

	option = {
		name = {
			trigger = { accepts_incest_with_trigger = { CHARACTER = scope:sibling_partner } }
			text = secrets.0502.likes_incest.a
		}
		name = {
			trigger = { NOT = { accepts_incest_with_trigger = { CHARACTER = scope:sibling_partner } } }
			text = secrets.0502.dislikes_incest.a
		}
	}
}


###MURDER SECRETS###

#Someone attempted to murder me
secrets.0510 = { #by Mathilda Bjarnehed
	type = character_event
	title = secrets.0510.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					OR = {
						is_close_or_extended_family_of = scope:murderer
						has_relation_friend = scope:murderer
						has_relation_lover = scope:murderer
						is_consort_of = scope:murderer
						scope:murderer = { liege = { this = root } }
					}
				}
				desc = secrets.0510.traitor.desc
			}
			desc = secrets.0510.regular.desc
		}
		first_valid = {
			triggered_desc = {
				trigger = { scope:murderer = { is_alive = yes } }
				desc = secrets.0510.alive.desc
			}
			desc = secrets.0510.dead.desc
		}
	}
	theme = secret
	
	left_portrait = scope:murderer
	

	option = {
		name = {
			trigger = { scope:murderer = { is_alive = yes } }
			text = secrets.0510.a.alive
		}
		name = {
			trigger = { scope:murderer = { is_alive = no } }
			text = secrets.0510.a.dead
		}
	}

	immediate = {
		play_music_cue = "mx_cue_murder"
	}
}

#Someone attempted to murder a child/heir/parent
secrets.0511 = { #by Mathilda Bjarnehed
	type = character_event
	title = secrets.0510.t
	desc = {
		desc = secrets.0511.regular.desc
		first_valid = {
			triggered_desc = {
				trigger = { scope:murderer = { is_alive = yes } }
				desc = secrets.0511.alive.desc
			}
			desc = secrets.0511.dead.desc
		}
	}
	theme = secret
	
	left_portrait = scope:murderer
	right_portrait = scope:victim
	
	option = {
		name = {
			trigger = { scope:murderer = { is_alive = yes } }
			text = secrets.0510.a.alive
		}
		name = {
			trigger = { scope:murderer = { is_alive = no } }
			text = secrets.0510.a.dead
		}
	}
}


#Someone murdered close family/spouse
secrets.0512 = { #by Mathilda Bjarnehed and Linnéa Thimrén
	type = character_event
	title = secrets.0510.t
	desc = {
		desc = secrets.0512.regular.desc
		triggered_desc = { #Someone you care about was immured (you found out after a siege)
		    trigger = {
				exists = var:immured_relation
				var:immured_relation = scope:victim
		    }
		    desc = secrets.0512.immured.desc
		}
		first_valid = {
			triggered_desc = {
				trigger = { scope:murderer = { is_alive = yes } }
				desc = secrets.0512.alive.desc
			}
			desc = secrets.0512.dead.desc
		}
	}
	theme = secret
	
	left_portrait = scope:murderer
	right_portrait = scope:victim
	
	option = {
		name = {
			trigger = { scope:murderer = { is_alive = yes } }
			text = secrets.0510.a.alive
		}
		name = {
			trigger = { scope:murderer = { is_alive = no } }
			text = secrets.0510.a.dead
		}
	}

	immediate = {
		play_music_cue = "mx_cue_murder"
	}
}


#####################
# Secret being discovered
# 1000 - 1999
#####################

#Stumble across a secret at court
# by Petter Vilberg
scripted_trigger secrets_1001_suitable_secret_trigger = {
	is_shunned_for = secret_owner
	NOT = { is_known_by = root }
}

scripted_trigger secrets_1001_suitable_courtier_trigger = {
	any_secret = {
		secrets_1001_suitable_secret_trigger = yes
	}
	trigger_if = {
		limit = { exists = root.cp:councillor_spymaster }
		NOT = { this = root.cp:councillor_spymaster }
	}
}
secrets.1001 = {
	type = character_event
	title = secrets.1001.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = scope:spymaster
				}
				desc = secrets.1001.opening_spymaster
			}
			desc = secrets.1001.opening_no_spymaster
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:secret = {
						OR = {
							secret_type = secret_homosexual
							secret_type = secret_deviant
						}
					}
				}
				desc = secrets.1001.sexual_habits
			}
			triggered_desc = {
				trigger = {
					scope:secret = {
						secret_type = secret_lover
					}
				}
				desc = secrets.1001.secret_relationships
			}
			desc = secrets.1001.fallback
		}
	}
	theme = secret
	
	left_portrait = scope:secret_holder
	right_portrait = {
		trigger = { exists = scope:spymaster }
		character = scope:spymaster
		animation = spymaster
	}
	lower_center_portrait = scope:target
	
	trigger = {
		any_courtier = {
			secrets_1001_suitable_courtier_trigger = yes
		}
		NOT = {
			has_character_flag = had_secrets_1001_event
		}
	}

	weight_multiplier = {
		base = 0
		compare_modifier = {
			value = intrigue
			multiplier = 0.1
		}
	}

	immediate = {
		add_character_flag = {
			flag = had_secrets_1001_event
			days = 365
		}
		random_courtier = {
			limit = {
				secrets_1001_suitable_courtier_trigger = yes
			}
			save_scope_as = secret_holder
			random_secret = {
				limit = {
					secrets_1001_suitable_secret_trigger = yes
				}
				save_scope_as = secret
			}	
		}

		#Set scopes for text and loc
		if = {
			limit = { exists = cp:councillor_spymaster }
			cp:councillor_spymaster = { save_scope_as = spymaster }
		}
		
		scope:secret = {
			if = {
				limit = { secret_type = secret_lover }
				secret_target = {
					save_scope_as = secret_lover
				}
			}
			if = {
				limit = {
					exists = secret_target
					NOT = { secret_target = root }
				}
				secret_target = {
					save_scope_as = target
				}
			}
		}

		play_music_cue = "mx_cue_secret"
	}

	option = {
		name = secrets.1001.a
		trigger = {
			scope:secret = {
				secret_type = secret_homosexual
			}
			NOT = {
				has_trait = lustful
			}
		}
		scope:secret = {
			reveal_to = root
		}
	}

	option = {
		name = secrets.1001.b
		trigger = {
			scope:secret = {
				secret_type = secret_homosexual
			}
			has_trait = lustful
		}
		trait = lustful
		scope:secret = {
			reveal_to = root
		}
		stress_impact = {
			base = minor_stress_loss
		}
	}

	option = {
		name = secrets.1001.c
		trigger = {
			scope:secret = {
				secret_type = secret_deviant
			}
		}
		scope:secret = {
			reveal_to = root
		}
	}

	option = {
		name = secrets.1001.f
		trigger = {
			scope:secret = {
				secret_type = secret_lover
			}
		}
		scope:secret = {
			reveal_to = root
		}
	}

	option = {
		name = secrets.1001.option_fallback
		fallback = yes
		scope:secret = {
			reveal_to = root
		}
	}
}


#Courtiers have a random chance of stumbling across court_owner's secrets
# by Petter Vilberg
secrets.1002 = {
	hidden = yes

	trigger = {
		any_courtier = {
			save_temporary_scope_as = courtier_check
		}
		any_secret = {
			is_shunned_for = secret_owner
			NOT = { is_known_by = scope:courtier_check }
		}
	}

	weight_multiplier = {
		base = 2
		compare_modifier = {
			value = intrigue
			multiplier = -0.1
		}
	}

	immediate = {
		random_courtier = {
			limit = {
				save_temporary_scope_as = courtier_check
				root = {
					any_secret = {
						is_shunned_for = secret_owner
						NOT = { is_known_by = scope:courtier_check }
					}
				}
			}
			save_scope_as = courtier
		}
		random_secret = {
			limit = {
				is_shunned_for = secret_owner
				NOT = { is_known_by = scope:courtier }
			}
			reveal_to = scope:courtier
		}
	}
}


#Courtiers have a chance of stumbling across court_owner's major secrets
# by Petter Vilberg
secrets.1003 = {
	hidden = yes

	trigger = {
		any_courtier = {
			save_temporary_scope_as = courtier_check
		}
		any_secret = {
			is_criminal_for = secret_owner
			NOT = { is_known_by = scope:courtier_check }
		}
	}

	weight_multiplier = {
		base = 2
		compare_modifier = {
			value = intrigue
			multiplier = -0.1
		}
		modifier = {
			factor = 0.25
			is_ai = no
		}
	}

	immediate = {
		random_courtier = {
			limit = {
				save_temporary_scope_as = courtier_check
				root = {
					any_secret = {
						NOT = { is_known_by = scope:courtier_check }
					}
				}
			}
			save_scope_as = courtier
		}
		random_secret = {
			limit = {
				NOT = { is_known_by = scope:courtier }
			}
			reveal_to = scope:courtier
		}
	}
}


#Courtiers learn another courtier's minor secret
# by Petter Vilberg
scripted_trigger secrets_1004_secret_trigger = {
	is_shunned_for = secret_owner
	NOT = { is_known_by = scope:courtier }
}

scripted_trigger secrets_1004_courtiers_trigger = {
	save_temporary_scope_as = secret_holder
	court_owner = {
		any_courtier = {
			NOT = { this = scope:secret_holder }
			save_temporary_scope_as = courtier
		}
	}
	any_secret = {
		secrets_1004_secret_trigger = yes
	}
}

secrets.1004 = {
	hidden = yes

	trigger = {
		any_courtier = {
			secrets_1004_courtiers_trigger = yes
		}
	}

	weight_multiplier = {
		base = 1
	}

	immediate = {
		random_courtier = {
			limit = {
				secrets_1004_courtiers_trigger = yes
			}
			save_scope_as = secret_holder
		}
		random_courtier = {
			limit = {
				save_temporary_scope_as = courtier
				scope:secret_holder = {
					any_secret = {
						secrets_1004_secret_trigger = yes
					}
				}
			}
			save_scope_as = courtier
		}
		scope:secret_holder = {
			random_secret = {
				limit = {
					secrets_1004_secret_trigger = yes
				}
				reveal_to = scope:courtier
			}
		}
	}
}


#Courtiers learn another courtier's major secret
# by Petter Vilberg
secrets.1005 = {
	hidden = yes

	trigger = {
		any_courtier = {
			save_temporary_scope_as = courtier_check
		}
		any_courtier = {
			NOT = { this = scope:courtier_check }
			any_secret = {
				is_criminal_for = secret_owner
				NOT = { is_known_by = scope:courtier_check }
			}
		}
	}

	weight_multiplier = {
		base = 1
	}

	immediate = {
		random_courtier = {
			limit = {
				any_secret = {
					is_criminal_for = secret_owner
				}	
				save_temporary_scope_as = secret_holder_check
			}
		}
		random_courtier = {
			limit = {
				save_temporary_scope_as = courtier_check
				scope:secret_holder_check = {
					any_secret = {
						is_criminal_for = secret_owner
						NOT = { is_known_by = scope:courtier_check }
					}
				}
			}
			save_scope_as = courtier
		}
		random_courtier = {
			limit = {
				any_secret = {
					is_criminal_for = secret_owner
					NOT = { is_known_by = scope:courtier }
				}
			}
			random_secret = {
				limit = {
					is_criminal_for = secret_owner
					NOT = { is_known_by = scope:courtier }
				}
				reveal_to = scope:courtier
			}
		}
	}
}


#A Friend learns your Lover Secret
# by Petter Vilberg
scripted_trigger secrets_1011_appropriate_secret_trigger = {
	secret_type = secret_lover
	secret_owner = root
}

scripted_trigger secrets_1011_suitable_character_trigger = {
	opinion = {
		target = root
		value > 50
	}
	save_temporary_scope_as = character_check
	NOT = { is_consort_of = root }
	NOT ={
		any_known_secret = {
			secrets_1011_appropriate_secret_trigger = yes
		}
	}
}

secrets.1011 = {
	hidden = yes

	trigger = {
		NOT = { has_character_flag = had_event_secrets_1011 }
		any_secret = {
			secrets_1011_appropriate_secret_trigger = yes
		}
		OR = {
			any_relation = {
				type = friend
				secrets_1011_suitable_character_trigger = yes
			}
			any_close_family_member = {
				secrets_1011_suitable_character_trigger = yes
			}
		}
	}

	immediate = {
		save_scope_as = first_lover
		add_character_flag = {
			flag = had_event_secrets_1011
			days = 3650
		}
		every_relation = {
			type = friend
			limit = {
				secrets_1011_suitable_character_trigger = yes
			}
			add_to_temporary_list = possible_characters
		}
		every_close_family_member = {
			limit = {
				secrets_1011_suitable_character_trigger = yes
			}
			add_to_temporary_list = possible_characters
		}
		random_in_list = {
			list = possible_characters
			save_scope_as = discovering_character
		}
		random_secret = {
			limit = {
				secrets_1011_appropriate_secret_trigger = yes
				NOT = { is_known_by = scope:discovering_character }
			}
			save_scope_as = secret
			secret_target = {
				save_scope_as = lover
			}
		}
		scope:discovering_character = {
			trigger_event = secrets.1012
		}
	}
}


secrets.1012 = {
	type = character_event
	title = secrets.1012.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:lover = {
						OR = {
							has_relation_friend = root
							has_relation_lover = root
							is_close_or_extended_family_of = root
						}
					}
				}
				desc = secrets.1012.close_relation
			}
			desc = secrets.1012.desc
		}
	}
	theme = secret
	left_portrait = scope:first_lover
	lower_left_portrait = scope:lover

	option = {
		name = secrets.1012.a
		scope:secret = {
			reveal_to = root
		}
	}

	immediate = {
		play_music_cue = "mx_cue_secret"
	}
}


#Discover that a Sibling is a Bastard
# by Petter Vilberg
scripted_trigger secrets_1100_bastard_secret_trigger = {
	OR = {
		secret_type = secret_disputed_heritage
		secret_type = secret_unmarried_illegitimate_child
	}
	secret_target = prev
}


scripted_trigger secrets_1100_suitable_bastard_trigger = {
	NOT = {
		real_father = prev.father
	}
	any_secret = {
		secrets_1100_bastard_secret_trigger = yes
	}
	OR = {
		NOT = { has_trait = bastard }
		AND = {
			has_trait = bastard
			father = 0
		}
	}
}

scripted_trigger secrets_1100_suitable_root_trigger = {
	NOT = { has_trait = bastard }
	NOT = {	
		any_secret = {
			secrets_1100_bastard_secret_trigger = yes
		}
	}
	any_sibling = {
		secrets_1100_suitable_bastard_trigger = yes
	}
}

#Check for appropriate characters to involve
secrets.1100 = {
	hidden = yes

	trigger = {
		OR = {
			secrets_1100_suitable_root_trigger = yes
			any_courtier = {
				secrets_1100_suitable_root_trigger = yes
			}
		}
	}

	immediate = {
		random_list = {
			50 = {
				trigger = {
					secrets_1100_suitable_root_trigger = yes
				}
				trigger_event = secrets.1101
			}
			50 = {
				trigger = {
					any_courtier = {
						secrets_1100_suitable_root_trigger = yes
					}
				}
				random_courtier = {
					limit = {
						secrets_1100_suitable_root_trigger = yes
					}
					trigger_event = secrets.1101
				}
			}
		}
	}
}

#Actual event
secrets.1101 = {
	type = character_event
	title = secrets.1101.t
	desc = {
		desc = secrets.1101.opening
		first_valid = {
			triggered_desc = {
				trigger = {
					opinion = {
						target = scope:bastard
						value > 10
					}
				}
				desc = secrets.1101.friendly
			}
			desc = secrets.1101.unfriendly
		}
		desc = secrets.1101.end
	}
	theme = secret
	left_portrait = scope:bastard
	right_portrait = scope:real_father

	immediate = {
		save_scope_as = father
		random_sibling = {
			limit = {
				secrets_1100_suitable_bastard_trigger = yes
			}
			save_scope_as = bastard
			random_secret = {
				limit = {
					secrets_1100_bastard_secret_trigger = yes
				}
				save_scope_as = secret
			}
			real_father = {
				save_scope_as = real_father
			}
		}
	}

	option = {
		name = secrets.1101.a
		scope:secret = {
			reveal_to = root
		}
		scope:bastard = {
			trigger_event = secrets.1102
		}
	}
}

secrets.1102 = {
	type = character_event
	title = secrets.1101.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					reverse_opinion = {
						target = scope:father
						value > 10
					}
				}
				desc = secrets.1102.friendly
			}
			desc = secrets.1102.unfriendly
		}
		desc = secrets.1102.end
	}
	theme = secret
	
	left_portrait = {
		character = scope:father
		triggered_animation = {
			trigger = {
				reverse_opinion = {
					target = scope:father
					value <= 10
				}
			}
			animation = disapproval
		}
	}
	right_portrait = scope:real_father
	
	option = {
		name = secrets.1102.a
		show_as_tooltip = {
			scope:secret = {
				reveal_to = scope:father
			}
		}
	}
}


#######################
# Reactions to Secrets
# 2000-2999
#######################

#A Just or Compassionate relation doesn't like your past murdering
# by Petter Vilberg
scripted_trigger secrets_2001_appropriate_secret_trigger = {
	secret_owner = root
	secret_type = secret_murder
}

scripted_trigger secrets_2001_appropriate_character_trigger = {
	any_known_secret = {
		secrets_2001_appropriate_secret_trigger = yes
	}
	OR = {
		has_trait = just
		has_trait = compassionate
	}
	NOT = {
		any_secret = {
			secret_type = secret_murder
			is_known_by = root
		}
	}
}


secrets.2001 = {
	hidden = yes

	trigger = {
		NOT = { has_character_flag = had_event_secrets_2001 }
		OR = {
			any_relation = {
				type = friend
				secrets_2001_appropriate_character_trigger = yes
			}
			any_relation = {
				type = lover
				secrets_2001_appropriate_character_trigger = yes
			}
			any_spouse = {
				secrets_2001_appropriate_character_trigger = yes
			}
			any_close_family_member = {
				opinion = {
					target = root
					value > 50
				}
				secrets_2001_appropriate_character_trigger = yes
			}
		}
	}

	immediate = {
		add_character_flag = {
			flag = had_event_secrets_2001
			days = 3650
		}
		save_scope_as = secret_holder
		every_relation = {
			type = friend
			limit = {
				secrets_2001_appropriate_character_trigger = yes
			}
			add_to_temporary_list = possible_characters
		}
		every_relation = {
			type = lover
			limit = {
				secrets_2001_appropriate_character_trigger = yes
			}
			add_to_temporary_list = possible_characters
		}
		every_spouse = {
			limit = {
				secrets_2001_appropriate_character_trigger = yes
			}
			add_to_temporary_list = possible_characters
		}
		every_close_family_member = {
			limit = {
				secrets_2001_appropriate_character_trigger = yes
			}
			add_to_temporary_list = possible_characters
		}
		random_in_list = {
			list = possible_characters
			limit = {
				OR = {
					is_of_major_interest_to_root_trigger = yes
					is_ai = no
				}
			}
			alternative_limit = {
				always = yes
			}
			save_scope_as = close_character
			random_known_secret = {
				limit = {
					secrets_2001_appropriate_secret_trigger = yes
				}
				secret_target = {
					save_scope_as = murdered_character
				}
				save_scope_as = secret
			}
			trigger_event = secrets.2002
		}
	}
}


#Event for close relation:
secrets.2002 = {
	type = character_event
	title = secrets.2002.t
	desc = secrets.2002.desc
	theme = secret
	
	left_portrait = scope:secret_holder
	right_portrait = scope:murdered_character
	
	option = { #I must tell them how I feel
		name = secrets.2002.a
		show_as_tooltip = {
			add_opinion = {
				target = scope:secret_holder
				modifier = disappointed_opinion
				opinion = -50
			}
		}
		custom_tooltip = secrets.2002.a.tt
		scope:secret_holder = {
			trigger_event = secrets.2003
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_boldness = 1
				ai_honor = 1
			}
		}
	}

	option = { #I can just leave it be
		name = secrets.2002.b
		stress_impact = {
			just = major_stress_impact_gain
			compassionate = major_stress_impact_gain
		}
		add_opinion = {
			target = scope:secret_holder
			modifier = respect_opinion
			opinion = -10
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_energy = -0.5
				ai_rationality = -0.25
			}
		}
	}
}


#Event for secret holder:
secrets.2003 = {
	type = character_event
	title = secrets.2002.t
	desc = secrets.2003.desc
	theme = secret
	
	left_portrait = {
		character = scope:close_character
		animation = disapproval
	}
	
	option = { #I did what I had to
		name = secrets.2003.a
		reverse_add_opinion = {
			target = scope:close_character
			modifier = disappointed_opinion
			opinion = -50
		}
		add_dread = minor_dread_gain
		stress_impact = {
			fickle = medium_stress_impact_gain	
			compassionate = medium_stress_impact_gain
			just = medium_stress_impact_gain
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_rationality = 0.5
				ai_boldness = 1
			}
		}
	}

	option = { #Do you not know how much I regret it?
		name = secrets.2003.b
		show_as_tooltip = {
			reverse_add_opinion = {
				target = scope:close_character
				modifier = disappointed_opinion
				opinion = -20
			}
		}
		scope:close_character = {
			trigger_event = {
				id = secrets.2004
				days = { 5 10 }
			}
		}
		stress_impact = {
			base = medium_stress_gain
			callous = minor_stress_impact_gain
			sadistic = medium_stress_impact_gain
			stubborn = medium_stress_impact_gain
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_vengefulness = -0.5
				ai_honor = 1
				ai_compassion = 1
			}
		}
	}
}

#Close character: Secret holder regrets
secrets.2004 = {
	type = character_event
	title = secrets.2002.t
	desc = secrets.2004.desc
	theme = secret
	left_portrait = {
		character = scope:secret_holder
		animation = sadness
	}
	
	option = { #Perhaps they can even be forgiven, with time
		name = secrets.2004.a
		add_opinion = {
			target = scope:secret_holder
			modifier = disappointed_opinion
			opinion = -20
		}
		ai_chance = {
			base = 100
		}
	}

	option = {
		name = secrets.2004.b
		trigger = { has_trait = forgiving }
		trait = forgiving
		add_opinion = {
			target = scope:secret_holder
			modifier = disappointed_opinion
			opinion = -5
		}
		ai_chance = {
			base = 1000
		}
	}
}



########################
# Other characters interacting with Secrets
# 3000-3999
########################

#A Close Relation disrupts a Spy On Scheme against you
# by Petter Vilberg
scripted_trigger secrets_3001_close_character_trigger = {
	is_available_ai_adult = yes
	opinion = {
		target = root
		value > 50
	}
	NOT = {
		any_scheme = {
			scheme_target = root
			is_scheme_exposed = yes
		}
	}
	save_temporary_scope_as = character_check
	NOT = {
		root = {
			any_targeting_scheme = {
				hostile_scheme_trigger = yes
				scheme_is_character_agent = scope:character_check
			}
		}
	}
}

scripted_trigger secrets_3001_valid_scheme_trigger = {
	hostile_scheme_trigger = yes
	scheme_progress >= 3
	scheme_progress <= 8
	scheme_owner = {
		is_ai = yes
	}
	any_scheme_agent = {
		NOT = { is_agent_exposed_in_scheme = prev }
	}
}

secrets.3001 = {
	type = character_event
	title = secrets.3001.t
	desc = {
		desc = secrets.3001.opening
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:scheme = {
						is_scheme_exposed = yes
					}
				}
				desc = secrets.3001.scheme_owner_known
			}
			triggered_desc = {
				trigger = {
					scope:scheme = {
						is_scheme_exposed = yes
					}
				}
				desc = secrets.3001.scheme_known
			}
			desc = secrets.3001.scheme_not_known
		}
	}
	left_portrait = {
		character = scope:close_character
		animation = worry
	}
	right_portrait = scope:agent
	lower_right_portrait = scope:known_scheme_owner
	theme = secret
	
	trigger = {
		any_targeting_scheme = {
			secrets_3001_valid_scheme_trigger = yes
		}
		OR = {
			any_relation = {
				type = friend
				secrets_3001_close_character_trigger = yes
			}
			any_relation = {
				type = lover
				secrets_3001_close_character_trigger = yes
			}
			any_close_family_member = {
				secrets_3001_close_character_trigger = yes
			}
		}
	}

	weight_multiplier = {
		base = 1
		modifier = {
			add = -0.5
			NOT = {
				any_targeting_scheme = {
					hostile_scheme_trigger = yes
					is_scheme_exposed = yes
				}
			}
		}
	}

	immediate = {
		every_relation = {
			type = friend
			limit = {
				secrets_3001_close_character_trigger = yes
			}
			add_to_temporary_list = potential_close_characters
		}
		every_relation = {
			type = lover
			limit = {
				secrets_3001_close_character_trigger = yes
			}
			add_to_temporary_list = potential_close_characters
		}
		every_close_family_member = {
			limit = {
				secrets_3001_close_character_trigger = yes
			}
			add_to_temporary_list = potential_close_characters
		}
		random_in_list = {
			list = potential_close_characters
			save_scope_as = close_character
		}
		random_targeting_scheme = {
			limit = {
				secrets_3001_valid_scheme_trigger = yes
			}
			save_scope_as = scheme
			random_scheme_agent = {
				limit = {
					NOT = { is_agent_exposed_in_scheme = scope:scheme }
				}
				save_scope_as = agent
			}
			if = {
				limit = {
					is_scheme_exposed = yes
				}
				scheme_owner = {
					save_scope_as = known_scheme_owner
				}
			}
		}
	}

	option = {
		name = secrets.3001.a
		if = {
			limit = {
				scope:scheme = {
					is_scheme_exposed = no
				}
			}
			scope:scheme = {
				expose_scheme = yes
			}
		}
		hidden_effect = {
			scope:scheme = {
				expose_scheme_agent = scope:agent
				add_scheme_progress = scheme_progress_loss
			}
		}
		add_opinion = {
			target = scope:close_character
			modifier = pleased_opinion
			opinion = 20
		}
	}
}


