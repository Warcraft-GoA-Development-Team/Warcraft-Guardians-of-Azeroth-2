### Character state
- Travel: The character is travelling to the location of the next phase
- Passive: The character has arrived at the location of the next phase and is waiting for it to begin
- Active: The character is at the location of the next phase and the phase has started

activity_type = {
	# Should the player see this activity type
	# root = character trying to host this activity
	is_shown = {
		<triggers>
	}

	# Can this activity be picked if visible, shows whether you meet or fail each trigger
	# root = character trying to host this activity
	# scope:on_create_variables = any saved scope targets that are added to the creation data will also be available here when validating if an activity can start. 
	can_start = {
		<triggers>
	}
	
	# Can this activity be picked if visible, only shows failing triggers
	# root = character trying to host this activity
	can_start_showing_failures_only = {
		<triggers>
	}

	# Do we prevent the player to start planning an activity
	# when additional requirements (i.e. not costs or cooldown)
	# have not been met.
	# Defaults to no.
	can_always_plan = bool
	
	# Is this activity valid to continue
	# root = the activity
	# scope:activity = the activity
	# scope:host = host of the activity
	is_valid = {
		<triggers>
	}

	# Ran if the activity fails the is valid checks
	# root = the activity
	# scope:activity = the activity
	# scope:host = host of the activity
	on_invalidated = {
		<effects>
	}

	# Ran if the host of the activity dies
	# root = the activity
	# scope:activity = the activity
	# scope:host = host of the activity
	on_host_death = {
		<effects>
	}

	# What list of provinces should phase's be evaluated as a place to potentially be located in
	# Defaults to capital only
	# WARNING: Using all is going to be noticeably slower, you almost certainly do not need to use it...
	province_filter = capital/domain/realm/top_realm/holy_sites/all

	# As above but for the AI, you can probably be more restrictive on them especially just picking capital/domain instead of elsewhere
	# Defaults to same as the base filter
	# WARNING: You really definitely do not want the AI using all...
	ai_province_filter = filter

	# Is the province valid to pick for this activity at all
	# root = the province
	# scope:host = host of the activity
	# scope:special_option = flag of the selected special option, not set if activity has no special option category
	is_location_valid = {
		<triggers>
	}

	# Script value to score how "good" the activity location is to host in
	# root = the province
	# scope:host = host of the activity
	province_score = {

	}

	# Optional, defaults to unlimited, if set we only show the top X scored provinces as map icons
	max_province_icons = 5

	# Activity options scripted per activity type
	options = {

		# Multiple categories allowed per activity, must be unique named categories
		option_category = {

			# Multiple options allowed per category, must be unique named
			option_1 = {
				# Is this option shown in the category
				# root = character trying to host this activity
				# scope:special_option = flag of the selected special option, not set if activity has no special option category
				is_shown = {
					<triggers>
				}

				# Is this option valid to pick in the category
				# root = character trying to host this activity
				# scope:special_option = flag of the selected special option, not set if activity has no special option category
				is_valid = {
					<triggers>
				}

				# Effects run when the activity is created
				# root = the activity
				# scope:activity = the activity
				# scope:host = host of the activity
				on_start = {

				}

				# Should this option be the default option, the first that is true will be picked, if not specified then it will not be used as a default
				# For simple constant defaults use default = yes to always have it as the default
				default = {
					<trigger>
				}

				# List of intents that are blocked for the host if this option is picked
				# This is required because when planning an activity some intents are blocked by certain options, but the activity does not yet
				# exist properly for the intent's definition itself to check the activity's current options
				blocked_intents = {
					murder kidnap
				}

				### Brief: ai_will_do (scripted value int32)
				# How likely is the AI to pick this option if valid? 
				# Options will be selected using weighted random.
				#
				# Root = character picking the option
				# scope:special_option = flag of the selected special option, not set if activity has no special option category
				ai_will_do = {
					value = 10
				}

				# Cost for this option being enabled
				# root = character trying to host this activity
				cost = {
					gold = {}
					piety = {}
					prestige = {}
					renown = {}
				}

				# Select which court characters are added to the travel entourage when this option is added.
				# (this will be run for both the host and the invited guests)
				# Weighted list is evaluated until all values are negative, or `max` is reached.
				travel_entourage_selection = {
					# List is all court characters.
					# root = character in the travel plan owners' court
					# scope:host = character hosting the activity
					# scope:owner = character owning the travel plan (host or guest)
					# scope:special_option = flag of the selected special option, not set if activity has no special option category
					weight = {
						value = 10
					}

					# Up to how many characters to select for a player
					max = 2
					
					# Up to how many characters to select for an AI
					ai_max = 2

					# What order, relative to the invite rule orders, should entourage members be invited in
					invite_rule_order = 3
				}
			}

			option_2 = {
				...
			}
		}

		other_category = {
			...
		}
	}

	### Special option category (optional)
	# When special option category is specified, the player will have to pick from this category before selecting a location.
	# Each option in this category requires an illustration in the ACTIVITY_OPTION_TEXTURE_PATH folder and a flat icon in the ACTIVTY_OPTION_ICON_PATH folder
	special_option_category = option_category

	# Active phases of of an activity, each activity has at least one active phase, each must be uniquely named
	phases = {
		archery = {
			# If this phase is predefined: always present and not removable
			# (if it is not predefined, it is a pickable phase)
			# Defaults to 'no'
			is_predefined = yes

			# Default to 1, how many times this phase can be picked as a unique phase, within one province
			# Only relevant if `is_predefined = no`
			number_of_picks = script_value

			# In what order should this phase occur in the entire activity
			# Phases with the same order will be in the order when they were added
			# (you should have unique order nr for your phases, if you have more than one phase)
			order = 1

			### How the phase will determine which location to use.
			# Possible values:
			#   pickable = Player/host picks which location (default)
			#   first_picked_phase = Select whichever location was picked first by a player
			#   last_picked_phase = Select whichever location was picked last by a player
			#   scripted = Let scripted effect pick the location (use 'select_scripted_location')
			location_source = pickable

			### Optional: Which location this phase should use, without user input
			# If defined, will set this phase to always have this location. (player cannot change)
			# Requires setting 'location_source = scripted'
			# Pick the location by doing 'save_scope_as = province' in the effect.
			# root = host
			# scope:special_option = flag of the selected special option, not set if activity has no special option category
			select_scripted_location = {
				<effects>
			}

			### Brief: ai_will_do (scripted value int32)
			# How likely is the AI to pick this phase if valid? Options will 
			# be selected using weighted random. If a phase can be selected
			# multiple times, it will have the same weight on every pass. This
			# will only be used for activities that have multiple phases to 
			# choose from that do not have a predetermined order. 
			#
			# Root = character picking the phase
			# scope:province = province the phase is being evaluated in
			# scope:special_option = flag of the selected special option, not set if activity has no special option category
			ai_will_do = { ... }

			# Is this phase valid to pick for the activity
			# root = character trying to host this activity
			# scope:special_option = flag of the selected special option, not set if activity has no special option category
			is_shown = {
				<triggers>
			}

			# Is this phase valid to pick for the activity
			# root = character trying to host this activity
			# scope:province = location to host the phase in
			# scope:special_option = flag of the selected special option, not set if activity has no special option category
			can_pick = {
				<triggers>
			}

			# Is this phase valid to execute for this ongoing activity
			# root = the activity
			# scope:host = activity host
			# scope:province = current phase location
			is_valid = {
				<triggers>
			}

			# Run when this phase is set as the current but not active phase
			# root = character in this phase
			# scope:activity = the activity
			# scope:host = host of the activity
			on_enter_phase = {
				<effects>
			}

			# Run when this phase is set as to be active
			# root = character in this phase
			# scope:activity = the activity
			# scope:host = host of the activity
			on_phase_active = {
				<effects>
			}

			# Run when this phase ends
			# root = character in this phase
			# scope:activity = the activity
			# scope:host = host of the activity
			on_end = {
				<effects>
			}

			# Run when when the active phase's monthly pulses with this phase
			# root = character in this phase
			# scope:activity = the activity
			# scope:host = host of the activity
			on_monthly_pulse = {
				<effects>
			}

			# Run when when the active phase's weekly pulses with this phase.
			# Use if extra time dilation is necessary. 
			# root = character in this phase
			# scope:activity = the activity
			# scope:host = host of the activity
			on_weekly_pulse = {
				<effects>
			}

			# Run if this phase is invalidated by its is_valid trigger 
			# root = character in this phase
			# scope:activity = the activity
			# scope:host = host of the activity
			# scope:province = current phase location
			on_invalidated = {
				<effects>
			}

			# Cost for this phase being planned
			# root = character trying to host this activity
			# scope:province = location this phase would be at
			# scope:previous_province = either the location of the phase that preceeds this one, or the player capital if this is the first/only phase
			# scope:special_option = flag of the selected special option, not set if activity has no special option category
			cost = {
				gold = {}
				piety = {}
				prestige = {}
				renown = {}
			}
		}
		dueling = {
			...
		}
		joust = {
			...
		} 
	}

	# How many phases can be picked by the player in this activity, defaults to 0.
	# (All phases with 'is_predefined = yes' are not counted towards this number).
	# Requires the DLC feature to be able to create an activity that has multiple phases
	# root = character trying to host this activity
	num_pickable_phases = script_value

	# How many phases can be picked in this activity per province location
	# Defaults to `num_pickable_phases`
	# root = character trying to host this activity
	max_pickable_phases_per_province = script_value

	# How many days this activity will wait before starting the active part of its first phase on top of the estimated
	# travel arrival date of the Host.
	#
	# Defaults to 0
	#
	# root = character trying to host this activity
	wait_time_before_start = {
		years/months/days etc.
	}

	# How many days this activity will delay the start date, to allow invited
	# guests to arrive.  Looks at rough estimated invited guests estimated travel time,
	# and the default activity start date (host arrival + wait_time_before_start).
	# This is added during planning of the activity.
	# (Does not apply to required special guests, we delay as much as needed for them)
	#
	# Defaults to 0 days, so either define this and/or `wait_time_before_start` to give
	# people time to arrive to your party.
	#
	# root = character trying to host this activity
	max_guest_arrival_delay_time = {
		years/months/days etc.
	}

	# How much can a player (not AI) deviate from the default path via extra waypoints.
	# Expressed as multiplier of the total time duration of the default path. (path without waypoints)
	# eg: 2.0 = you can add waypoints resulting in a path with a duration up to twice as long as the default path.
	#
	# Default is defined in MAX_ROUTE_DEVIATION_MULTIPLIER_DEFAULT
	max_route_deviation_mult = 2.0

	# Cooldown between this activity being hosted again
	# root = character trying to host this activity
	cooldown = {
		days/weeks/months/years = X
	}

	# Is this activity a grand activity or not, defaults to no
	is_grand_activity = bool

	# Do all phases in this activity take place in the same province, defaults to yes
	is_single_location = bool

	# The planner type - how the activity planner shows things.
	# Available types:
	#  province - (Default) show the province name (province name)
	#  holder - show holder information (opinion, character pin)
	planner_type = province

	### Brief: ai_will_do (scripted value int32)
	# How likely is the AI to elect to host this activity if valid? This value 
	# must also exceed define ACTIVITY_SCORE_THRESHOLD to be eligible. Once all
	# activity types has been evaluated for hosting, the highest scoring
	# activity will be selected as the hosting candidate. This value will then
	# be used as a percent chance to be hosted, such that 0 will never be 
	# hosted and 100 will always be hosted. 
	#
	# Root = character evaluating the activity
	ai_will_do = {
		value = 10
	}

	### Brief: ai_check_interval ( int32)
	# How often will the AI check if it can host this particular activity in 
	# months? 
	ai_check_interval = 1
	
	### Brief: ai_will_select_province (scripted value int32)
	# How does the AI rate this province for the activity? All candidates are 
	# selected using weighted random based on these values.
	#
	# Root = province being evaluated
	# scope:host = host of the activity
	# scope:special_option = flag of the selected special option, not set if activity has no special option category
	# scope:score = the province_score calculated for this province
	ai_will_select_province = {

	}

	### Brief: ai_select_num_provinces (scripted value int32)
	# How many provinces does the AI attempt to select? This is only used for multi-location activities.
	#
	# Root = host of the activity
	ai_select_num_provinces = {

	}

	# Cost for this activity being planned at all
	# root = character trying to host this activity
	#
	# The following scopes are only passed in when available (not when calculating min-cost for example)
	# scope:special_option = flag of the selected special option, not set if activity has no special option category
	# scope:province = in a single location activity the selected location
	# list provinces = in a multi location activity list of all selected locations
	cost = {
		gold = {}
		piety = {}
		prestige = {}
		renown = {}
	}

	# Predicted average cost for this activity if you plan one
	# Used to show a rough minimum or expected cost at all to plan this
	# 
	# root = character trying to host this activity
	ui_predicted_cost = {
		gold = {}
		piety = {}
		prestige = {}
		renown = {}
	}

	# How many guests can attend this activity, be very careful if you raise this value too high it will cause performance impacts
	# due to too many people travelling to activities and too many possible intent targets
	max_guests = integer

	# Is it allowed to start the activity with no guest invitations? This also implies
	# whether or not an activity will allow having zero attending guests. 
	# Default is no
	allow_zero_guest_invites = yes/no

	# What guest invite rules this activity shows
	guest_invite_rules = {
		# All rules to pick from
		# Left value is priority with which to invite them, lower his higher prio, priority must be >= 1
		rules = { 
			1 = friends
			2 = rivals
			1 = lovers
			3 = witches
			4 = vassals 
		}

		# Same as above but these rules are enabled by default for the player
		# They will be appended to the main rules and insert their priority, so they should not be in the above list
		defaults = { 
			1 = best_friends
			4 = fellow_vassals
		}
	}

	# Can this character be a guest at this specific activity type, checked in addition to the base
	# can_be_activity_guest scripted rule, so don't need to check what that also checks for basic requirements
	# root = character
	# scope:host = the activity host
	# scope:special_option = flag of the selected special option, not set if activity has no special option category
	can_be_activity_guest = {
		<triggers>
	}

	### Brief: guest_subsets ( integer flag list )
	# List of subsets to define for the guests attending the activity. These 
	# will create subsets of guests that can be referenced per activity phase
	# on the defined key. 
	guest_subsets = {
		guest_subset_1 guest_subset_two
	}

	# Special guests that can be appointed from the invite list and then specifically referenced in script
	# An activity will wait for them to arrive before it begins, if a required guest declines or dies then the activity
	# invalidates, if they are not required then it just continues without them
	special_guests = {
		# Special guest names are localized via their <key>. The localization key for the name shown to the host is "<key>_for_host".
		<key> = {
			# Is this special guest slot shown / available
			# root = host
			# scope:special_option = flag of the selected special option, not set if activity has no special option category
			is_shown = {
				<triggers>
			}

			# Is this guest required to be set at the start of the activity? Defaults to no. (example of required guest: bride in a wedding)
			# If they decline, the activity invalidates automatically. (death does not invalidate, handle that in Activity `is_valid`)
			is_required = yes/no

			# Select a specific character to be filled as the special guest, if not set then they can be manually selected from any guest
			# Pick them by doing save_scope_as = character
			# root = host
			# scope:special_option = flag of the selected special option, not set if activity has no special option category
			# scope:<special_guest_key> = for every special guest type defined, will be the picked character if set or not be provided
			# scope:special_guests = list of special guest characters
			# if there is no selected guest. Allows you to check triggers based on another special guest, eg: can two people
			# get married in a wedding
			select_character = {
				<interface effects>
			}

			# Is a character valid as this special guest role, if you have already filtered them out in the build_characters you don't need
			# to double up checks here as well for example.
			# root = character
			# scope:host = the activity host
			# scope:special_option = flag of the selected special option, not set if activity has no special option category
			# scope:<special_guest_key> = for every special guest type defined, will be the picked character if set or not be provided
			# scope:special_guests = list of special guest characters
			# if there is no selected guest. Allows you to check triggers based on another special guest, eg: can two people
			# get married in a wedding
			can_pick = {
				<triggers>
			}

			### Brief: ai_will_do (scripted value int32)
			# How likely is the AI to pick a character for this special guest slot if they are valid?
			# Characters will be selected using weighted random.
			#
			# Root = character picking the option
			ai_will_do = {
				value = 10
			}

			# Effect run when the special guest gets sent the invitation (before accepting the invitation)
			# This effect is also shown in the interface.
			# root = character
			# scope:host = the activity host
			# scope:special_option = flag of the selected special option, not set if activity has no special option category
			# scope:<special_guest_key> = for every special guest type defined, will be the picked character if set or not be provided
			# scope:special_guests = list of special guest characters
			on_invite = {
			}
		}
	}

	### Brief: locales ( optional array )
	# List of locale slots that can be found for the activity. 
	locales = {

		### Brief: <key> ( database key )
		# Single slot with locales
		<key> = {

			### Brief: is_available ( trigger )
			# Is this slot available? If not defined it will default to true.
			# Use to add optional locale slots. 
			#
			# Supported scopes:
			#		root ( Activity )
			#			The activity being hosted
			#		scope:host  ( Character )
			#			Character hosting the activity
			#		scope:activity ( Activity ) 
			#			The activity being hosted
			is_available = {

			}
		
			### Brief: locales ( database key array )
			# What locales shall be available in this activity type between 
			# active phases?
			locales = {
				tavern church blacksmith
			}
		}
	}
	### Brief: locale_cooldown - duration
	# How many days are all locales invalid to enter, after entering one
	#
	# Supported scopes:
	#		root ( Character )
	#			Character that visited the locale
	#		scope:host  ( Character )
	#			Character hosting the activity
	#		scope:activity ( Activity )
	#			The activity itself
	locale_cooldown = { days = 7 }

	### Brief auto_select_locale_cooldown - duration
	# When should a player auto-visit a locale?
	# Set whenever a locale is visited, or when a player arrives at the activity location.
	# If not defined, a player does not auto-visit locales.
	#
	# Supported scopes:
	#		root ( Character )
	#			Character in the activity
	#		scope:host  ( Character )
	#			Character hosting the activity
	#		scope:activity ( Activity )
	#			The activity itself
	auto_select_locale_cooldown = { days = 14 }

	### Brief early_locale_opening_duration - duration
	# From what time are locales visitable before the start of the activity phases.
	# (setting it to 14 days will open the locales 14 days before the first phase' active state starts)
	# Not defining it will open the locales from the creation of the activity.
	#
	# Supported scopes:
	#		host  ( Character )
	#			Character hosting the activity
	#		scope:activity ( Activity )
	#			The activity itself
	early_locale_opening_duration = { days = 14 }

	# Anyone can choose to attend this activity if they meet its requirements
	# When planning an open invite activity only your court will specifically be invited
	open_invite = yes

	# List of valid intents for the host (default should be in the `intents` list too)
	host_intents = {
		intents = { befriend murder kidnap steal_gold }
		# Default intent needs to be always valid
		default = befriend
		# Optional list of intents to try to default to for the player
		player_defaults = { murder befriend }
	}

	# List of valid intents for the guests (default should be in the `intents` list too)
	guest_intents = {
		intents = { befriend murder kidnap steal_gold }
		# Default intent needs to be always valid
		default = befriend
		# Optional list of intents to try to default to for the player
		player_defaults = { steal_gold befriend }
	}

	# Chance for a guest to accept an invitation to join this activity
	# root = character being invited
	# scope:host = host of the activity
	# scope:minimal_travel_time = the estimated "direct line" travel time for the guest to arrive in days
	# scope:activity_start_diff_days = how many days from the activity start date the guest is estimated to arrive (negative = late)
	# scope:<special_guest_key> = for every special guest type defined, will be the picked character if set or not be provided
	# scope:<option_category_key> = for every option category defined, will have a the flag of the selected option
	# scope:special_guests = list of special guest characters
	guest_join_chance = {
		base = 10

		modifier = {
			add = 10
		}
	}

	# Effects run when a character enters a travel state
	# root = character in this phase
	# scope:activity = the activity
	# scope:host = host of the activity
	on_enter_travel_state = {
		<effects>
	}

	# Effects run when a character enters a passive state after travel
	# root = character in this phase
	# scope:activity = the activity
	# scope:host = host of the activity
	on_enter_passive_state = {
		<effects>
	}

	# Effects run when entering an active phase of the activity
	# root = character in this phase
	# scope:activity = the activity
	# scope:host = host of the activity
	on_enter_active_state = {
		<effects>
	}

	# Effects run when a character leaves the travel state
	# root = character in this phase
	# scope:activity = the activity
	# scope:host = host of the activity
	on_leave_travel_state = {
		<effects>
	}

	# Effects run when a character leaves the passive state
	# root = character in this phase
	# scope:activity = the activity
	# scope:host = host of the activity
	on_leave_passive_state = {
		<effects>
	}

	# Effects run when a character leaves the active state
	# root = character in this phase
	# scope:activity = the activity
	# scope:host = host of the activity
	on_leave_active_state = {
		<effects>
	}

	# Effects run during the activity event pulse for characters in the travel state
	# root = character in this phase
	# scope:activity = the activity
	# scope:host = host of the activity
	on_travel_state_pulse = {
		<effects>
	}

	# Effects run during the activity event pulse for characters in the passive state
	# root = character in this phase
	# scope:activity = the activity
	# scope:host = host of the activity
	on_passive_state_pulse = {
		<effects>
	}

	# Effects run during the activity event pulse for characters in the active state
	# root = character in this phase
	# scope:activity = the activity
	# scope:host = host of the activity
	on_active_state_pulse = {
		<effects>
	}

	# Effects run when the activity is created
	# root = the activity
	# scope:activity = the activity
	# scope:host = host of the activity
	on_start = {
		<effects>
	}

	# Effects run when the activity completes after its last phase
	# Note: AI-only activities will not persist more than 1 day after this.
	# root = character in this phase
	# scope:activity = the activity
	# scope:host = host of the activity
	on_complete = {
		<effects>
	}

	# Plugin widgets to be added to the activity window if this type is viewed
	activity_window_widgets = {
		# Name = name of the plug in and its file path in gui/activity_window_widgets
		# Container = the widget in the main activity window to position this under
		name = "parent_container"
	}

	# Plugin widgets to be added to the activity planner window if this type is viewed
	activity_planner_widgets = {
		# Name = name of the plug in widget and its file path in gui/activity_window_widgets/name.txt
		# Container = the widget in the main activity window to position this under
		name = "parent_container"
	}

	## The background for the activity is defined in event_backgrounds and looks up an entry with the same key as the activity

	# Map entity for the activity, multiple can be read in, first one is picked from order they are read in
	map_entity = {
		# root = the activity
		# scope:activity = the activity
		# scope:host = host of the activity
		trigger = {
			<triggers>
		}
		reference = "name" # Entity name
	}

	map_entity = "name" # Short hand for a single constant entity name

	# Background for the activity, multiple can be read in, first one is picked from order they are read in
	background = {
		# root = the activity
		# scope:activity = the activity
		# scope:host = host of the activity
		trigger = {
			<triggers>
		}
		texture = "texture_path"
		environment = "environment name"
		ambience = "ambience_event_path"
		music = "music_cue_track_name"
	}

	# Locale Background for the activity. Used exclusively by activities that 
	# use the locale window. Multiple can be read in, first one is picked from
	# order they are read in.
	locale_background = {
		# root = the activity
		# scope:activity = the activity
		# scope:host = host of the activity
		trigger = {
			<triggers>
		}
		texture = "texture_path"
		environment = "environment name"
		ambience = "ambience_event_path"
		music = "music_cue_track_name"
	}

	# Can read in multiple, they will be displayed left to right based on this order
	window_characters = {
		key = { # Will be localized as activity_window_character_key

			# Name of the camera to use for this portrait
			camera = camera_name
			
			# root = the activity
			# scope:activity = the activity
			# scope:host = host of the activity
			# scope:player = the player character viewing the window
			# Pick the desired character by scoping to them and doing add_to_list = characters
			# A random valid character will be picked to display, if the character is already displayed they will be skipped
			effect = {
				add_to_list = characters
			}

			# scripted animation block for animation selection based on triggers
			# root = the activity
			# scope:activity = the activity
			# scope:host = host of the activity
			# scope:player = the player character viewing the window
			# scope:character = the character who is going to receive triggered animation
			scripted_animation = {
				triggered_animation = {
					trigger = {
						scope:ruler = {
							is_female = no
						}
					}

					# both syntaxes are supported
					animation = { one_handed_1_aggressive one_handed_2_aggressive }
					animation = one_handed_1_aggressive
				}
				triggered_animation = {
					trigger = {
						scope:character = {
							is_female = yes
						}
					}

					animation = throne_room_conversation_1
					# Instead of 'animation' you can also define a 'scripted_animation'
					scripted_animation = key_of_scripted_animation
				}

				# 1 default animation if all triggers fail. Convention is to always have some always-valid trigger and not use this field
				animation = throne_room_conversation_3
				# Instead of 'animation' you can also define a 'scripted_animation'
				scripted_animation = key_of_scripted_animation
			}
			animation = whatever
		}
	}

	# Select which court characters are added to the travel entourage of an invited / hosting character,
	# if that character would travel.
	# Weighted list is evaluated until all values are negative, or `max` is reached.
	travel_entourage_selection = {
		# List is all court characters.
		# root = character in the travel plan owners' court
		# scope:host = character hosting the activity
		# scope:owner = character owning the travel plan (host or guest)
		# scope:special_option = flag of the selected special option, not set if activity has no special option category
		weight = {
			value = 10
		}

		# Up to how many characters to select for a player
		max = 2
		
		# Up to how many characters to select for an AI
		ai_max = 2

		# What order, relative to the invite rule orders, should entourage members be invited in
		invite_rule_order = 3
	}
	
	# Description for hosting the activity, defaults to "<key>_province_desc"
	# root = the province
	# scope:host = character trying to host this activity
	# scope:special_option = flag of the selected special option, not set if activity has no special option category
	province_description = {
		first_valid = {
			desc = xxx
		}
	}

	# Description for hosting the activity, defaults to "<key>_host_desc"
	# root = character trying to host this activity
	host_description = {
		first_valid = {
			desc = xxx
		}
	}

	# Description for concluding the activity, defaults to "<key>_conclusion_desc"
	# root = character in the conclusion screen
	# scope:activity = the activity
	# scope:host = host of the activity
	conclusion_description = {
		first_valid = {
			desc = xxx
		}
	}
}
