#####################################################################
# EFFECT LIST
#####################################################################
# !!! Remember to add all new effects with a short description here !!!

### Reward effects

# pilgrimage_additional_reward_effect -- Gives additional rewards for going on Pilgrimage with certain tenets
# short_pilgrimage_reward_effect -- Short Pilgrimage reward
# medium_pilgrimage_reward_effect -- Medium Pilgrimage reward
# long_pilgrimage_reward_effect -- Long Pilgrimage reward
# very_long_pilgrimage_reward_effect -- Very Long Pilgrimage reward
# give_pilgrimage_reward_effect -- Picks the correct Pilgrimage reward effect to grant


### Setup effects

# select_pilgrimage_effect -- Run when choosing Holy Site destination
# calculate_pilgrimage_distance_effect -- Categorise the distance to a given Holy Site as short, medium, long or very long (See pilgrimage_values.txt)
# set_pilgrimage_distance_variable_effect -- Set variables tracking the length of the Pilgrimage
# set_up_holy_sites_for_selection_effect -- Save every potential Holy Site as a saved scope for use in selection events
# holy_site_selection_event_option_effect -- Run when actually selecting a Holy Site


### Event effects

# set_up_next_pilgrimage_event_effect -- Makes sure the next Pilgrimage event fires correctly. Use in the `after` of all Journey events (unless making a custom chain, in which case only the last event must have it)
# save_holy_site_for_loc_effect -- Used in immediate blocks to get the destination holy site saved as loc
# abandon_pilgrimage_early_effect -- Effect used to end a Pilgrimage before arriving at the destination

#####################################################################
# EFFECTS
#####################################################################

# Extra reward effects for specific tenets
pilgrimage_additional_reward_effect = {
	# Armed Pilgrimages
	if = {
		limit = { faith = { has_doctrine = tenet_armed_pilgrimages } }
		custom_description_no_bullet = {
			text = pilgrimage_because_i_have_armed_pilgrimages
		}
		add_character_modifier = {
			modifier = pilgrimage_armed_pilgrimages_modifier
			years = 10
		}
	}
	# Mendicant Preachers
	if = {
		limit = { faith = { has_doctrine = tenet_mendicant_preachers } }
		custom_description_no_bullet = {
			text = pilgrimage_because_i_have_tenet_mendicant_preachers
		}
		add_character_modifier = {
			modifier = pilgrimage_mendicant_preachers_modifier
			years = 10
		}
	}
	# Pentarchy
	if = {
		limit = { faith = { has_doctrine = tenet_pentarchy } }
		custom_description_no_bullet = {
			text = pilgrimage_because_i_have_tenet_pentarchy
		}
		add_character_modifier = {
			modifier = pilgrimage_pentarchy_modifier
			years = 10
		}
	}
	# Struggle and Submission
	if = {
		limit = { faith = { has_doctrine = tenet_struggle_submission } }
		custom_description_no_bullet = {
			text = pilgrimage_because_i_have_tenet_struggle_submission
		}
		add_character_modifier = {
			modifier = pilgrimage_struggle_submission_modifier
			years = 10
		}
	}
	# Ancestor Worship
	if = {
		limit = { faith = { has_doctrine = tenet_ancestor_worship } }
		custom_description_no_bullet = {
			text = pilgrimage_because_i_have_tenet_ancestor_worship
		}
		add_character_modifier = {
			modifier = pilgrimage_ancestor_worship_modifier
			years = 10
		}
	}
	# Esotericism
	if = {
		limit = {
			faith = { has_doctrine = tenet_esotericism }
			NOT = { has_trait = mystic_3 }
		}
		custom_description_no_bullet = {
			text = pilgrimage_because_i_have_tenet_esotericism
			subject = root
		}
		random_list = {
			desc = pilgrimage_learn_from_the_bishops
			50 = {
				desc = pilgrimage_learn_from_the_bishops_success
				compare_modifier = {
					value = learning
					multiplier = 5
				}
				change_trait_rank = {
					trait = lifestyle_mystic
					rank = 1
					max = 3
				}
			}
			50 = {
				desc = pilgrimage_learn_from_the_bishops_failure
				send_interface_toast = {
					title = pilgrimage_learn_from_the_bishops_failure
					left_icon = root
				}
			}
		}
	}
}

short_pilgrimage_reward_effect = {
	add_piety = short_pilgrimage_piety_gain
	#if = {
	#	limit = {
	#		can_perform_the_hajj_trigger = yes
	#		exists = scope:activity.var:is_hajj
	#	}
	#	add_trait = pilgrim
	#}
	# Warcraft
	christian_saint_bone_tooltip_effect = yes
	pilgrimage_additional_reward_effect = yes
}

medium_pilgrimage_reward_effect = {
	add_piety = long_pilgrimage_piety_gain
	#if = {
	#	limit = {
	#		trigger_if = {
	#			limit = { can_perform_the_hajj_trigger = yes }
	#			exists = scope:activity.var:is_hajj
	#		}
	#		trigger_else = { always = yes }
	#	}
	#	add_trait = pilgrim
	#}
	# Warcraft
	add_trait = pilgrim
	christian_saint_bone_tooltip_effect = yes
	pilgrimage_additional_reward_effect = yes
}

long_pilgrimage_reward_effect = {
	add_piety = very_long_pilgrimage_piety_gain
	#if = {
	#	limit = {
	#		trigger_if = {
	#			limit = { can_perform_the_hajj_trigger = yes }
	#			exists = scope:activity.var:is_hajj
	#		}
	#		trigger_else = { always = yes }
	#	}
	#	add_trait = pilgrim
	#}
	# Warcraft
	add_trait = pilgrim
	christian_saint_bone_tooltip_effect = yes
	pilgrimage_additional_reward_effect = yes
}

very_long_pilgrimage_reward_effect = {
	add_piety = exceptionally_long_pilgrimage_piety_gain
	#if = {
	#	limit = {
	#		trigger_if = {
	#			limit = { can_perform_the_hajj_trigger = yes }
	#			exists = scope:activity.var:is_hajj
	#		}
	#		trigger_else = { always = yes }
	#	}
	#	add_trait = pilgrim
	#}
	# Warcraft
	add_trait = pilgrim
	christian_saint_bone_tooltip_effect = yes
	pilgrimage_additional_reward_effect = yes
}

give_pilgrimage_reward_effect = {
	if = {
		limit = { scope:activity.var:pilgrimage_distance = short_pilgrimage_var }
		short_pilgrimage_reward_effect = yes	
	}
	else_if = {
		limit = { scope:activity.var:pilgrimage_distance = medium_pilgrimage_var }
		medium_pilgrimage_reward_effect = yes	
	}
	else_if = {
		limit = { scope:activity.var:pilgrimage_distance = long_pilgrimage_var }
		long_pilgrimage_reward_effect = yes	
	}
	else_if = {
		limit = { scope:activity.var:pilgrimage_distance = very_long_pilgrimage_var }
		very_long_pilgrimage_reward_effect = yes	
	}
}

select_pilgrimage_effect = {
	# PILGRIMAGE_DISTANCE
	save_temporary_scope_value_as = {
		name = distance
		value = flag:$PILGRIMAGE_DISTANCE$
	}
	#if = {
	#	limit = {
	#		NOT = { has_character_flag = is_on_hajj }
	#	}
		switch = {
			trigger = scope:distance
			flag:short = {
				remove_short_term_gold = pilgrimage_minimum_cost
			}
			flag:medium = {
				remove_short_term_gold = pilgrimage_medium_extra_cost
			}
			flag:long = {
				remove_short_term_gold = pilgrimage_long_extra_cost
			}
			flag:very_long = {
				remove_short_term_gold = pilgrimage_very_long_extra_cost
			}
		}
	#}
}

calculate_pilgrimage_distance_effect = {
	# Requires PILGRIM = character
	# Requires HOLY_SITE = barony_title
	$PILGRIM$.capital_barony = { # Only landed characters can go on regular pilgrimages
		save_temporary_scope_as = start_barony
	}
	# Calculate distance to the target holy site
	# The value set indicates how many Journey Events a character will get
	if = {
		limit = {
			scope:start_barony = {
				squared_distance = {
					target = $HOLY_SITE$
					value > long_pilgrimage_max_length
				}
			}
		}
		custom_tooltip = very_long_pilgrimage_tt
		select_pilgrimage_effect = {
			PILGRIMAGE_DISTANCE = very_long
		}
	}
	else_if = {
		limit = {
			scope:start_barony = {
				squared_distance = {
					target = $HOLY_SITE$
					value > medium_pilgrimage_max_length
				}
			}
		}
		custom_tooltip = long_pilgrimage_tt
		select_pilgrimage_effect = {
			PILGRIMAGE_DISTANCE = long
		}
	}
	else_if = {
		limit = {
			scope:start_barony = {
				squared_distance = {
					target = $HOLY_SITE$
					value > short_pilgrimage_max_length
				}
			}
		}
		custom_tooltip = medium_pilgrimage_tt
		select_pilgrimage_effect = {
			PILGRIMAGE_DISTANCE = medium
		}
	}
	else = {
		custom_tooltip = short_pilgrimage_tt
		select_pilgrimage_effect = {
			PILGRIMAGE_DISTANCE = short
		}
	}
}

set_pilgrimage_distance_variable_effect = {
	# Requires PILGRIM = character
	# Requires HOLY_SITE = barony_title
	$PILGRIM$.capital_barony = { # Only landed characters can go on regular pilgrimages
		save_temporary_scope_as = start_barony
	}
	# Calculate distance to the target holy site
	# The value set indicates how many Journey Events a character will get
	if = {
		limit = {
			scope:start_barony = {
				squared_distance = {
					target = $HOLY_SITE$
					value > long_pilgrimage_max_length
				}
			}
		}
		set_variable = {
			name = pilgrimage_distance
			value = very_long_pilgrimage_var
		}
	}
	else_if = {
		limit = {
			scope:start_barony = {
				squared_distance = {
					target = $HOLY_SITE$
					value > medium_pilgrimage_max_length
				}
			}
		}
		set_variable = {
			name = pilgrimage_distance
			value = long_pilgrimage_var
		}
	}
	else_if = {
		limit = {
			scope:start_barony = {
				squared_distance = {
					target = $HOLY_SITE$
					value > short_pilgrimage_max_length
				}
			}
		}
		set_variable = {
			name = pilgrimage_distance
			value = medium_pilgrimage_var
		}
	}
	else = {
		set_variable = {
			name = pilgrimage_distance
			value = short_pilgrimage_var
		}
	}
}


set_up_next_pilgrimage_event_effect = {
	scope:activity = {
		change_variable = {
			name = journey_event_counter
			add = 1
		}
	}

	save_scope_value_as = {
		name = event_counter
		value = scope:activity.var:journey_event_counter
	}
	save_scope_value_as = {
		name = halfway_distance
		value = scope:activity.pilgrimage_halfway_distance
	}

	if = {
		limit = { # TODO: Is any fallback handling needed in an else here?
			exists = scope:activity
		}
		if = {
			limit = {
				scope:activity.var:journey_event_counter < scope:activity.var:pilgrimage_distance
			}
			# Warcraft
			#if = {
			#	limit = { exists = scope:activity.var:is_hajj }
			#	trigger_event = {
			#		on_action = hajj_journey_events
			#		days = $DAYS$
			#	}
			#}
			#else = {
				trigger_event = {
					on_action = pilgrimage_journey_events
					days = $DAYS$
				}
			#}
		}
		else = {
			if = { #For event background
				limit = { scope:activity.var:pilgrimage_arrived = no }
				scope:activity = {
					set_variable = {
						name = pilgrimage_arrived
						value = yes
					}
				}
			}
			# Warcraft
			#if = {
			#	limit = { exists = scope:activity.var:is_hajj }
			#	Warcraft
			#	trigger_event = {
			#		on_action = hajj_destination_events
			#		days = $DAYS$
			#	}
			#}
			#else = {
				trigger_event = {
					on_action = pilgrimage_destination_events
					days = $DAYS$
				}
			#}
		}
		scope:activity = {
			change_variable = {
				name = journey_event_counter
				add = 1
			}
		}
	}
}


set_up_holy_sites_for_selection_effect = {
	if = {
		limit = { NOT = { exists = scope:has_set_up_pilgrimage_sites } }
		save_temporary_scope_as = pilgrim
		faith = {
			every_holy_site = {
				# Warcraft
				# Exclude Mecca for Muslims
				# limit = {
					# trigger_if = {
						# limit = {
							# scope:pilgrim = { like_islam_religion_trigger = yes }
						# }
						# NOT = { county = title:c_mecca }
					# }
				# }

				# Assign the Holy Site to the correct "scope slot"
				if = {
					limit = {
						NOT = { exists = scope:holy_site_1 }
					}
					save_scope_as = holy_site_1
				}

				else_if = {
					limit = {
						NOT = { exists = scope:holy_site_2 }
					}
					save_scope_as = holy_site_2
				}

				else_if = {
					limit = {
						NOT = { exists = scope:holy_site_3 }
					}
					save_scope_as = holy_site_3
				}

				else_if = {
					limit = {
						NOT = { exists = scope:holy_site_4 }
					}
					save_scope_as = holy_site_4
				}

				else_if = {
					limit = {
						NOT = { exists = scope:holy_site_5 }
					}
					save_scope_as = holy_site_5
				}

				else_if = {
					limit = {
						NOT = { exists = scope:holy_site_6 }
					}
					save_scope_as = holy_site_6
				}

				else_if = {
					limit = {
						NOT = { exists = scope:holy_site_7 }
					}
					save_scope_as = holy_site_7
				}

				else_if = {
					limit = {
						NOT = { exists = scope:holy_site_8 }
					}
					save_scope_as = holy_site_8
				}

				else_if = {
					limit = {
						NOT = { exists = scope:holy_site_9 }
					}
					save_scope_as = holy_site_9
				} # Stopping here, on the assumption that no Faith can ever get more than 9 Holy Sites
				else = {
					debug_log = "Holy Site failed to get an assigned scope slot!"
					debug_log_scopes = yes
				}
			}
		}
		save_scope_value_as = {
			name = has_set_up_pilgrimage_sites
			value = yes
		}
	}
	# Debug checks:
	if = {
		limit = { NOT = { exists = scope:holy_site_1 } }
		debug_log = "No holy sites found in faith! (Except possibly mecca)"
		root.faith = {
			save_scope_as = current_faith
		}
		debug_log_scopes = yes
	}
}



# Used in the option to pick a specific Holy Site
holy_site_selection_event_option_effect = {
	# HOLY_SITE = holy_site
	hidden_effect = {
		set_variable = {
			name = pilgrimage_cooldown_timer
			years = pilgrimage_cooldown_year_amount
		}
	}
	$HOLY_SITE$.title_province = {
		spawn_activity = {
			owner = root
			type = activity_pilgrimage
		}
	}
	if = {
		limit = { is_ai = no }
		calculate_pilgrimage_distance_effect = {
			PILGRIM = root
			HOLY_SITE = $HOLY_SITE$
		}
	}
}


save_holy_site_for_loc_effect = {
	scope:activity.activity_province.barony = {
		save_scope_as = destination_title
	}
}

abandon_pilgrimage_early_effect = {
	custom_tooltip = pilgrimage_return_home
	hidden_effect = {
		remove_variable = pilgrimage_cooldown_timer
		scope:activity = {
			complete_activity = no
		}
		#if = {
		#	limit = {
		#		has_character_flag = is_on_hajj
		#	}
		#	remove_character_flag = is_on_hajj
		#}
	}
} 

christian_saint_bone_creation_effect = { # Create a bone of a random saint in a box
	if = {
		limit = {
			has_royal_court = yes
			
			# Warcraft
			has_saint_relics_trigger = yes
		}
		hidden_effect = {
			random = {
				chance = 10 # 10% base chance
				modifier = {
					add = 10 # 20% chance for medium
					scope:activity.var:pilgrimage_distance = medium_pilgrimage_var
				}
				modifier = {
					add = 20 # 30% chance for long
					scope:activity.var:pilgrimage_distance = long_pilgrimage_var
				}
				modifier = {
					add = 30 # 40% chance for very long
					scope:activity.var:pilgrimage_distance = very_long_pilgrimage_var
				}
				modifier = { # half as likely for AI
					factor = 0.5
					is_ai = yes
				}
				save_scope_as = saint_bone_owner
				
				create_artifact = {
					name = christian_saint_bone_name
					description = christian_saint_bone_description
					type = pedestal
					visuals = bone
					template = saintly_bones_template
					modifier = artifact_monthly_piety_1_modifier
					save_scope_as = christian_saint_bone_scope
				}
				scope:christian_saint_bone_scope = {
					set_variable = { # required to track usability for template
						name = saint_bone_faith
						value = root.faith
					}
				}
			}
		}
	}
}

christian_saint_bone_tooltip_effect = { # Needed to ensure tooltip matches artifact name
	if = {
		limit = { exists = scope:christian_saint_bone_scope }
		show_as_tooltip = {
			scope:christian_saint_bone_scope = { set_owner = ROOT }
		}
	}
}
