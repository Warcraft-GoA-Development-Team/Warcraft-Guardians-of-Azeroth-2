types Notifications {

    ######################################################
    ###################### ALERTS ########################
    ######################################################
    type notifications_alerts = flowcontainer {
        visible = "[Not(SinglePlayerShowingPausedSuccession)]"
        direction = horizontal
        spacing = 10

        state = {
            name = _show
            using = Animation_FadeIn_Quick
        }

        state = {
            name = _hide
            using = Animation_FadeOut_Quick
        }

        dynamicgridbox = {
            name = "alert_items"
            datamodel = "[InGameTopbar.GetAlertItems]"

            flipdirection = yes
            ignoreinvisible = yes
            maxverticalslots = 3

            item = {
                container = {
                    button = {
                        name = "action_icon"
                        parentanchor = center
                        framesize = { 144 144 }
                        size = { 0 0 }

                        gfxtype = buttongfx
                        effectname = "NoHighlight"
                        shaderfile = "gfx/FX/pdxgui_pushbutton.shader"
                        texture = "[GUIAlertItem.GetImportantActionType.GetIcon]"

                        onclick = "[GUIAlertItem.OnClick]"
                        onrightclick = "[GUIAlertItem.OnRightClick]"
                        button_ignore = none

                        tooltip = "[GUIAlertItem.GetTooltip]"
                        using = tooltip_below

                        modify_texture = {
                            name = "mask"
                            texture = "gfx/interface/component_masks/mask_alert_solid.dds"
                            blend_mode = mask
                        }

                        modify_texture = {
                            name = "glow"
                            texture = "gfx/interface/component_effects/effect_shimmer.dds"
                            blend_mode = colordodge
                            translate_uv = { 0.2 0.2 }
                        }

                        ### Adding animation ###
                        state = {
                            name = "when_added"
                            next = e
                            position_y = 0
                            duration = 0.45
                            size = { 72 72 }
                            using = Animation_Curve_Default
                            trigger_when = "[GUIAlertItem.IsAdding]"
                            on_start = "[GUIAlertItem.StartAnimation]"
                            on_start = "[GUIAlertItem.PlayShowSound]"
                        }

                        state = {
                            name = e
                            next = f
                            position_y = 60
                            duration = 0.45
                            size = { 88 88 }
                            using = Animation_Curve_Default
                        }

                        state = {
                            name = f
                            next = a
                            position_y = 0
                            duration = 0.45
                            size = { 72 72 }
                            bezier = { 0.43 0 0.2 2.2 }
                            on_finish = "[GUIAlertItem.AddingFinished]"
                            on_finish = "[GUIAlertItem.EndAnimation]"
                        }

                        ### idle animation ###
                        state = {
                            name = a
                            next = b
                            duration = 0
                            delay = 10
                            size = { 72 72 }
                            position_y = 0
                            on_start = "[GUIAlertItem.StartAnimation]"
                            on_finish = "[GUIAlertItem.AddingFinished]"
                            on_finish = "[GUIAlertItem.EndAnimation]"
                            using = Animation_Curve_Default
                        }

                        state = {
                            name = b
                            next = c
                            duration = 0.3
                            size = { 78 78 }
                            scale = 1.6
                            bezier = { 0 1.6 0.7 1.8 }
                            position_y = 50
                            on_start = "[GUIAlertItem.StartAnimation]"
                            on_finish = "[GUIAlertItem.AddingFinished]"
                            on_finish = "[GUIAlertItem.EndAnimation]"
                            using = Animation_Curve_Default
                        }

                        state = {
                            name = c
                            next = d
                            duration = 0.2
                            size = { 72 72 }
                            scale = 0.8
                            position_y = 0
                            on_start = "[GUIAlertItem.StartAnimation]"
                            on_finish = "[GUIAlertItem.AddingFinished]"
                            on_finish = "[GUIAlertItem.EndAnimation]"
                            using = Animation_Curve_Default
                        }

                        state = {
                            name = d
                            duration = 0.2
                            scale = 0.9
                            size = { 72 72 }
                            position_y = 0
                            on_start = "[GUIAlertItem.StartAnimation]"
                            on_finish = "[GUIAlertItem.AddingFinished]"
                            on_finish = "[GUIAlertItem.EndAnimation]"
                            using = Animation_Curve_Default
                        }

                        state = {
                            name = "already_added"
                            duration = 0
                            size = { 72 72 }
                            scale = 0.9
                            trigger_when = "[GUIAlertItem.IsAdded]"
                        }

                        state = {
                            name = "when_removed"
                            duration = 0.3
                            size = { 0 0 }
                            trigger_when = "[GUIAlertItem.IsRemoving]"
                            on_start = "[GUIAlertItem.StartAnimation]"
                            on_finish = "[GUIAlertItem.RemovingFinished]"
                            on_finish = "[GUIAlertItem.EndAnimation]"
                        }

                        #### Shimmer ####
                        state = {
                            trigger_on_create = yes
                            name = _show
                            next = shimmer
                            duration = 0.2
                            scale = 0.9

                            modify_texture = {
                                name = "glow"
                                translate_uv = { 1 -1 }
                            }
                        }

                        state = {
                            name = shimmer
                            next = pause
                            duration = 1.2
                            scale = 0.9
                            position = { 0 0 }

                            bezier = { 0 0.9 1 0.4 }

                            modify_texture = {
                                name = "glow"
                                translate_uv = { -1 1 }
                            }
                        }

                        state = {
                            name = pause
                            next = shimmer
                            duration = 0
                            delay = 5

                            modify_texture = {
                                name = "glow"
                                translate_uv = { 1 -1 }
                            }
                        }

                        state = {
                            name = _mouse_enter
                            duration = 0.05
                            frame = 2
                            position = { 0 10 }
                            scale = 1
                            start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_oversound"}
                        }

                        state = {
                            name = _mouse_leave
                            duration = 0.1
                            frame = 1
                            position = { 0 0 }
                            scale = 0.9
                        }

                        state = {
                            name = _mouse_press
                            duration = 0.25
                            frame = 3
                            position = { 0 10 }
                            scale = 1
                            start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_mouse_press"}
                        }

                        state = {
                            name = _mouse_release
                            duration = 0.25
                            frame = 2
                            position = { 0 10 }
                            scale = 1
                            start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_mouse_release"}
                        }
                    }
                }
            }
        }

        ### Diplomatic offers
        dynamicgridbox = {
            name = "diplomatic_items"
            datamodel = "[InGameTopbar.GetDiplomaticItems]"

            flipdirection = yes
            ignoreinvisible = yes
            maxhorizontalslots = 10
            maxverticalslots = 3

            item = {
                container = {
                    visible = "[DiplomaticItem.IsVisible]"

                    icon = {
                        name = "notification_glow"
                        size = { 150% 150% }
                        parentanchor = center
                        texture = "gfx/interface/component_masks/mask_rays.dds"
                        color = { 0.7 0.66 0.61 1 }

                        modify_texture = {
                            rotate_uv = 0
                            name = rotation
                            texture = "gfx/interface/component_masks/mask_rays.dds"
                            blend_mode = colordodge
                        }

                        ### idle animation ###
                        state = {
                            trigger_on_create = yes
                            name = preshow
                            next = show

                            alpha = 0
                            scale = 1
                        }

                        state = {
                            name = show
                            next = a
                            delay = 1.4  ##### delay in order to start animation after icon has appeared

                            using = Animation_Curve_Default
                            duration = 0.7
                            alpha = 0
                            scale = 1

                            modify_texture = {
                                name = rotation
                                rotate_uv = 90
                            }
                        }

                        state = {
                            name = a
                            next = b

                            using = Animation_Curve_Default
                            duration = 0.5
                            alpha = 1
                            scale = 1

                            modify_texture = {
                                name = rotation
                                rotate_uv = 0
                            }
                        }

                        state = {
                            name = b
                            next = a

                            using = Animation_Curve_Default
                            delay = 1.4
                            duration = 0.7
                            alpha = 0
                            scale = 0.8

                            modify_texture = {
                                name = rotation
                                rotate_uv = -90
                            }
                        }
                    }

                    button = {
                        name = "action_icon"
                        parentanchor = center

                        size = { 0 0 }
                        framesize = { 144 144 }
                        filter_mouse = right

                        texture = "[DiplomaticItem.GetIcon]"
                        onclick = "[DiplomaticItem.OnClick]"
                        onrightclick = "[DiplomaticItem.OnRightClick]"
                        button_ignore = none

                        tooltip = "DIPLOMATIC_ITEM_TOOLTIP"

                        icon = {
                            texture = "gfx/interface/component_effects/alert_diplomacy_timer_base.dds"
                            visible = "[LessThan_int32( DiplomaticItem.GetDaysUntilTimeout, '(int32)30')]"
                            size = { 70 70 }
                            parentanchor = center

                            text_single = {
                                text = "[Max_int32( '(int32)0', DiplomaticItem.GetDaysUntilTimeout )]"
                                parentanchor = bottom|hcenter
                                position = { -2 -9 }
                                using = Font_Size_Medium
                                default_format = "#high"
                            }
                        }

                        state = {
                            trigger_when = "[LessThan_int32( DiplomaticItem.GetDaysUntilTimeout, '(int32)30')]"
                            name = "timeout"
                            next = b

                            using = Animation_Curve_Default
                            duration = 0.5
                            delay = 0.2
                            alpha = 1
                        }

                        state = {
                            name = b
                            next = "timeout"

                            using = Animation_Curve_Default
                            delay = 1.5
                            duration = 0.4
                            alpha = 0.5
                        }

                        ### Adding animation ###
                        state = {
                            name = "when_added"
                            next = e
                            position_y = 0
                            duration = 0.2
                            size = { 72 72 }
                            using = Animation_Curve_Default
                            trigger_when = "[DiplomaticItem.IsAdding]"
                            on_start = "[DiplomaticItem.StartAnimation]"

                            start_sound = {
                                soundeffect = "event:/SFX/UI/Notifications/TopBar/sfx_ui_notifications_topbar_diplomacy"
                            }
                        }

                        state = {
                            name = e
                            next = f
                            position_y = 60
                            duration = 0.45
                            size = { 88 88 }
                            using = Animation_Curve_Default
                        }

                        state = {
                            name = f
                            next = a
                            position_y = 0
                            duration = 0.25

                            size = { 72 72 }
                            bezier = { 0.43 0 0.2 2.2 }
                            on_finish = "[DiplomaticItem.AddingFinished]"
                            on_finish = "[DiplomaticItem.EndAnimation]"
                        }

                        ### idle animation ###
                        state = {
                            name = "already_added"
                            duration = 0
                            size = { 72 72 }
                            trigger_when = "[DiplomaticItem.IsAdded]"
                        }

                        state = {
                            name = "when_removed"
                            duration = 0.3
                            size = { 0 0 }
                            trigger_when = "[DiplomaticItem.IsRemoving]"
                            on_start = "[DiplomaticItem.StartAnimation]"
                            on_finish = "[DiplomaticItem.RemovingFinished]"
                            on_finish = "[DiplomaticItem.EndAnimation]"
                            start_sound = {
                                soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_show"
                            }
                        }

                        modify_texture = {
                            name = "glow"
                            texture = "gfx/interface/component_effects/effect_shimmer_blue.dds"
                            blend_mode = colordodge
                            translate_uv = { 0.2 0.2 }
                        }

                        #### Shimmer ####
                        state = {
                            trigger_when = "[DiplomaticItem.IsAdding]"
                            name = _show
                            next = shimmer
                            duration = 0.2
                            scale = 0.9

                            modify_texture = {
                                name = "glow"
                                translate_uv = { 1 -2 }
                            }
                        }

                        state = {
                            name = shimmer
                            next = pause
                            duration = 1.2
                            scale = 0.9
                            position = { 0 0 }

                            bezier = { 0 0.9 1 0.4 }

                            modify_texture = {
                                name = "glow"
                                translate_uv = { -1 1 }
                            }
                        }

                        state = {
                            name = pause
                            next = shimmer
                            duration = 0
                            delay = 5

                            modify_texture = {
                                name = "glow"
                                translate_uv = { 1 -1 }
                            }
                        }

                        state = {
                            name = _show
                            duration = 1
                            frame = 1
                            scale = 0.9
                            position = { 0 0 }
                            start_sound = {
                                soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_show"
                            }
                        }

                        state = {
                            name = _mouse_enter
                            duration = 0.05
                            frame = 2
                            position = { 0 10 }
                            scale = 1
                            start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_oversound"}
                        }

                        state = {
                            name = _mouse_leave
                            duration = 0.1
                            frame = 1
                            position = { 0 0 }
                            scale = 0.9
                            start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_oversound"}
                        }

                        state = {
                            name = _mouse_press
                            duration = 0.25
                            frame = 3
                            position = { 0 10 }
                            scale = 1
                            start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_mouse_press"}
                        }

                        state = {
                            name = _mouse_release
                            duration = 0.25
                            frame = 2
                            position = { 0 10 }
                            scale = 1
                            start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_mouse_release"}
                        }
                    }
                }
            }
        }

        widget = {
            widget = {
                position = { 40 0 }
                widgetid = "suggestions_placer"
            }
        }
    }

    ######################################################
    ###################### TOASTS ########################
    ######################################################
    type notifications_toasts = widget {
        name = "toast_container_widget"
        visible = "[And( Not(IsGameViewOpen('barbershop')), And( ToastMessageHandler.HasMessage, Not(SinglePlayerShowingPausedSuccession) ) )]"
        visible_at_creation = no
        allow_outside = yes
        datacontext = "[GetPlayer]"
		widgetanchor = center

        notifications_toasts_default = {
			position = "[Select_CVector2f( IsGameViewOpen('activity_locale'), '(CVector2f)-650,185', '(CVector2f)0,165' )]"
            datacontext = "[ToastMessageHandler.GetMessage]"
            visible = "[Not( PlayerMessageItem.GetType.HasFlags )]"
        }

        notifications_toasts_contests = {
			position = { 0 165 }
            datacontext = "[ToastMessageHandler.GetMessage]"
            visible = "[PlayerMessageItem.GetType.HasFlag( 'tournament_reward' )]"
        }
    }

    type notifications_toasts_default = widget {
        # name = "toast_container_widget"
        # visible = "[And( Not(IsGameViewOpen('barbershop')), And( ToastMessageHandler.HasMessage, Not(SinglePlayerShowingPausedSuccession) ) )]"
        visible_at_creation = no
        allow_outside = yes
		
        state = {
            name = _show
            on_start = "[PdxGuiWidget.AccessChild('toast_icon').TriggerAnimation('show')]"
            on_start = "[PdxGuiWidget.AccessChild('toast_paper').TriggerAnimation('show')]"
            on_start = "[PdxGuiWidget.AccessChild('toast_content').TriggerAnimation('show')]"
        }

        state = {
            name = _hide
            duration = 1
            on_start = "[PdxGuiWidget.AccessChild('toast_icon').TriggerAnimation('hide')]"
            on_start = "[PdxGuiWidget.AccessChild('toast_paper').TriggerAnimation('hide')]"
            on_start = "[PdxGuiWidget.AccessChild('toast_content').TriggerAnimation('hide')]"
        }

        ### SHIELD ###
        widget = {
            name = "toast_icon"
            visible = "[Not(SinglePlayerShowingPausedSuccession)]"
            datacontext = "[ToastMessageHandler.GetMessage]"

            size = { 160 160 }
            parentanchor = center

            state = {
                name = show
                next = a
                duration = 0.15

                animation = {
                    scale = 1.6
                    bezier = { 0.7 0 0.7 1 }
                }

                animation = {
                    alpha = 1
                    bezier = { 0 0 0.4 1 }
                }
            }

            state = {
                name = a
                next = b

                duration = 0.15
                scale = 0.95
                bezier = { 0.3 0 0.7 1 }
            }

            state = {
                name = b

                duration = 0.075
                scale = 1
                bezier = { 0.6 0 0.7 1 }
            }

            state = {
                name = hide
                using = Animation_FadeOut_Quick
                scale = 0.5
            }

            state = {
                name = _hide
                using = Animation_FadeOut_Quick
            }

            icon = {
                visible = "[PlayerMessageItem.GetType.IsGood]"
                texture = "gfx/interface/hud/toast_bg_good.dds"
                parentanchor = center
                size = { 160 160 }
            }

            icon = {
                visible = "[PlayerMessageItem.GetType.IsNeutral]"
                texture = "gfx/interface/hud/toast_bg_neutral.dds"
                parentanchor = center
                size = { 160 160 }
            }

            icon = {
                visible = "[PlayerMessageItem.GetType.IsBad]"
                texture = "gfx/interface/hud/toast_bg_bad.dds"
                parentanchor = center
                size = { 160 160 }
            }
        }

        ### PAPER ###
        widget = {
            name = "toast_paper"
            visible = "[Not(SinglePlayerShowingPausedSuccession)]"
            size = { 100% 100% }

            widgetanchor = center
            parentanchor = center
            alwaystransparent = yes

            button = {
                size = { 100% 100% }
                onmousehierarchyenter = "[ToastMessageHandler.StartDelayingMessage]"
                onmousehierarchyleave = "[ToastMessageHandler.StopDelayingMessage]"
                onrightclick = "[ToastMessageHandler.DismissMessage]"
                button_ignore = none
            }

            background = {
                texture = "gfx/interface/hud/toast_title_bg.dds"
                spriteType = Corneredstretched
                spriteborder = { 0 10 }
                margin = { 12 0 }
            }

            widget = {
                size = { 24 120 }
                widgetanchor = right|vcenter
                parentanchor = left|vcenter

                background = {
                    layoutpolicy_vertical = expanding
                    texture = "gfx/interface/hud/toast_title_bg_edge.dds"
                    spriteType = Corneredstretched
                    spriteborder = { 5 20 }
                }
            }

            widget = {
                size = { 24 120 }
                widgetanchor = left|vcenter
                parentanchor = right|vcenter

                background = {
                    layoutpolicy_vertical = expanding
                    texture = "gfx/interface/hud/toast_title_bg_edge.dds"
                    spriteType = Corneredstretched
                    spriteborder = { 0 20 }
                    mirror = horizontal
                }
            }

            state = {
                name = show
                next = a
                duration = 0.15

                animation = {
                    alpha = 1
                    bezier = { 0.7 0 0.7 1 }
                }
            }

            state = {
                name = a

                duration = 0.25
                bezier = { 0.3 0 0.7 1 }

                animation = {
                    size = { 585 100 }
                    bezier = { 0.8 0.3 0 1 }
                }

                animation = {
                    alpha = 1
                    bezier = { 0.7 0 0.7 1 }
                }
            }

            state = {
                name = hide
                using = Animation_FadeOut_Quick
                size = { -1 80 }
            }

            state = {
                name = _hide
                using = Animation_FadeOut_Quick
            }
        }

        ### CONTENT ###
        widget = {
            name = "toast_content"
            datacontext = "[ToastMessageHandler.GetMessage]"
            visible = "[Not(SinglePlayerShowingPausedSuccession)]"
            widgetanchor = center
            parentanchor = center
            size = { 560 100 }

            state = {
                name = show
                delay = 0.28
                using = Animation_FadeIn_Standard

                animation = {
                    size = { 560 100 }

                    bezier = { 0.8 0.3 0 1 }
                }

                animation = {
                    alpha = 1
                    bezier = { 0.7 0 0.7 1 }
                }
            }

            state = {
                name = hide
                using = Animation_FadeOut_Quick
                duration = 0.08
            }

            hbox = {
                ignoreinvisible = yes

                spacer = {
                    size = { 120 90 }
                    visible = "[Not( PlayerMessageItem.HasLeftIcon )]"
                }

                widget_left_toast_icon_contents = {
                    size = { 120 90 }
                }

                vbox = {
                    name = "message"
                    layoutpolicy_horizontal = expanding
                    layoutpolicy_vertical = expanding
                    spacing = 2
                    margin_bottom = 5

                    text_single = {
                        name = "title"
                        layoutpolicy_horizontal = expanding
                        margin = { 5 5 }
                        autoresize = no
                        fontsize_min = 10
                        align = center|nobaseline

                        text = "[PlayerMessageItem.GetTitle]"
                        using = Font_Type_Flavor
                        using = Font_Size_Big

                        default_format = "#light_background"
                        using = Text_Light_Background_Overrides

                        background = {
                            name = "neutral"
                            visible = "[PlayerMessageItem.GetType.IsNeutral]"
                            using = Toast_Header
                            using = Color_Blue
                        }

                        background = {
                            name = "good"
                            visible = "[PlayerMessageItem.GetType.IsGood]"
                            using = Color_Green
                            using = Toast_Header
                        }

                        background = {
                            name = "bad"
                            visible = "[PlayerMessageItem.GetType.IsBad]"
                            using = Color_Red
                            using = Toast_Header
                        }
                    }

                    text_multi = {
                        name = "desc"
                        layoutpolicy_horizontal = expanding
                        layoutpolicy_vertical = expanding
                        margin = { 5 5 }
                        using = Text_Light_Background_Overrides

                        align = top|hcenter

                        text = "[PlayerMessageItem.GetDescription]"
                        tooltip = "[PlayerMessageItem.GetDescription]"

                        default_format = "#light_background"
                        format_override = { E light_background }
                        fontsize_min = 10
                        alwaystransparent = yes
                    }
                }

                widget_right_toast_icon_contents = {
                    size = { 120 90 }
                }

                spacer = {
                    size = { 120 90 }
                    visible = "[Not( PlayerMessageItem.HasRightIcon )]"
                }
            }

            button_cancel = {
                parentanchor = top|right
                position = { 10 3 }
                onclick = "[ToastMessageHandler.DismissMessage]"
                tooltip = "DISMISS"
                alpha = 0

                blockoverride "master_color_frame" {
                    frame = 3
                }

                blockoverride "button_frames"
                {
                    gfxtype = togglepushbuttongfx

                    upframe = 3
                    uphoverframe = 2
                    uppressedframe = 3
                }

                state = {
                    name = a
                    next = b
                    trigger_on_create = yes
                    alpha = 0
                }

                state = {
                    name = b
                    alpha = 1
                    delay = 3
                    duration = 0.5
                    using = Animation_Curve_Default
                }
            }
        }
    }

    type notifications_toasts_contests = widget {
        name = "toast_background_contest"
        visible = "[Not(SinglePlayerShowingPausedSuccession)]"
        size = { 670 330 }

        widgetanchor = center
        parentanchor = center
        alwaystransparent = yes

        background = {
            texture = "gfx/interface/hud/toast_contest_bg.dds"

            modify_texture = {
                name = "contest_toast_ink_animation"
                visible = yes
                gfxtype = videogfx
                shaderfile = ""
                video = "gfx/interface/video/ink_animation_toasts.bk2"
                loop = no
                blend_mode = alphamultiply
            }
        }

        ### HEADER
        text_single = {
            parentanchor = hcenter|top
            position = { 0 24 }

            text = tournament_contest_reward_toast_title
            using = Font_Type_Flavor
            fontsize = 36

            state = {
                name = a
                next = b
                trigger_on_create = yes
                alpha = 0
                using = Animation_Curve_Default
            }

            state = {
                name = b
                alpha = 1
                delay = 0.7
                duration = 1
                using = Animation_Curve_Default
            }
        }

        ### ARTIFACT REWARD GOES HERE
        icon_artifact = {
            name = "artifact_left"
            datacontext = "[PlayerMessageItem.GetLeftArtifact]"
            visible = "[Artifact.IsValid]"
            parentanchor = center
            position = { 1 -4}
            size = { 70 70 }

            state = {
                name = a
                next = b
                trigger_on_create = yes
                alpha = 0
                using = Animation_Curve_Default             
            }

            state = {
                name = b
                alpha = 1
                delay = 1
                duration = 1
                using = Animation_Curve_Default
            }
        }

        icon_artifact = {
            name = "artifact_right"
            datacontext = "[PlayerMessageItem.GetRightArtifact]"
            visible = "[Artifact.IsValid]"
            parentanchor = center
            position = { 1 -4}
            size = { 70 70 }

            state = {
                name = a
                next = b
                trigger_on_create = yes
                alpha = 0
                using = Animation_Curve_Default             
            }

            state = {
                name = b
                alpha = 1
                delay = 1
                duration = 1
                using = Animation_Curve_Default
            }
        }

        ### FLAVOR TEXT ON WHAT YOU WON
        text_single = {
            parentanchor = hcenter|bottom
            position = { 0 -77 }
            datacontext = "[PlayerMessageItem.GetLeftArtifact]"
            visible = "[Artifact.IsValid]"

            text = tournament_contest_reward_toast_desc

            state = {
                name = a
                next = b
                trigger_on_create = yes
                alpha = 0
                using = Animation_Curve_Default
            }

            state = {
                name = b
                alpha = 1
                delay = 1.2
                duration = 1
                using = Animation_Curve_Default
            }
        }

        text_single = {
            parentanchor = hcenter|bottom
            position = { 0 -77 }
            datacontext = "[PlayerMessageItem.GetRightArtifact]"
            visible = "[Artifact.IsValid]"

            text = tournament_contest_reward_toast_desc

            state = {
                name = a
                next = b
                trigger_on_create = yes
                alpha = 0
                using = Animation_Curve_Default
            }

            state = {
                name = b
                alpha = 1
                delay = 1.2
                duration = 1
                using = Animation_Curve_Default
            }
        }
    }

    type widget_left_toast_icon_contents = widget {
        visible = "[PlayerMessageItem.HasLeftIcon]"

        portrait_shoulders = {
            name = "portrait_left"
            datacontext = "[PlayerMessageItem.GetLeftCharacter]"
            visible = "[Character.IsValid]"
            parentanchor = center
            position = { 0 -25 }

            blockoverride "opinon_box" {}
            blockoverride "status_icons" {}
        }

        coa_title_medium = {
            name = "title_left"
            datacontext = "[PlayerMessageItem.GetLeftTitle]"
            visible = "[Title.IsValid]"
            parentanchor = center
        }

        icon_artifact = {
            name = "artifact_left"
            datacontext = "[PlayerMessageItem.GetLeftArtifact]"
            visible = "[Artifact.IsValid]"
            parentanchor = center
        }
    }

    type widget_right_toast_icon_contents = widget {
        visible = "[PlayerMessageItem.HasRightIcon]"

        portrait_shoulders = {
            name = "portrait_right"
            datacontext = "[PlayerMessageItem.GetRightCharacter]"
            visible = "[Character.IsValid]"
            parentanchor = center
            position = { 0 -25 }

            blockoverride "opinon_box" {}
            blockoverride "status_icons" {}
        }

        coa_title_medium = {
            name = "title_left"
            datacontext = "[PlayerMessageItem.GetRightTitle]"
            visible = "[Title.IsValid]"
            parentanchor = center
        }

        icon_artifact = {
            name = "artifact_right"
            datacontext = "[PlayerMessageItem.GetRightArtifact]"
            visible = "[Artifact.IsValid]"
            parentanchor = center
        }
    }

    ######################################################
    ################### SUGGESTIONS ######################
    ######################################################
    type notifications_suggestions = widget {
        name = "action_items"
        visible = "[And( And( ActionItemHandler.ShouldBeVisible, Not( IsGameViewOpen( 'barbershop' ) ) ), Not( IsPauseMenuShown ) )]"
        visible_at_creation = no
        alwaystransparent = no
        allow_outside = yes

        using = Animation_ShowHide_Quick

        ## Suggestions / Current Situation toggle button
        button = {
            name = "suggestions_button"
            parentanchor = top|hcenter
            size = { 79 69 }
            position = { 0 -10 }
            gfxtype = togglepushbuttongfx
            effectname = "NoHighlight"
            shaderfile = "gfx/FX/pdxgui_pushbutton.shader"

            onclick = "[ActionItemHandler.ToggleList]"
            shortcut = "action_list"

            texture = "gfx/interface/hud/button_hud_suggestions.dds"

            tooltip = "ACTIONS_TT"
            using = tooltip_se

            modify_texture = {
                name = "mouseover"
                visible = "[GreaterThan_int32(ActionItemHandler.GetNumberOfUnreadActions, '(int32)0')]"
                texture = "gfx/interface/component_effects/effect_shimmer.dds"
                blend_mode = colordodge
                alpha = 0
            }

            state = {
                name = _mouse_enter
                duration = 0.05
                frame = 2
                position = { 0 0 }

                modify_texture = {
                    name = "mouseover"
                    alpha = 1
                }
            }

            state = {
                name = _mouse_leave
                duration = 0.1
                position = { 0 -10 }

                modify_texture = {
                    name = "mouseover"
                    alpha = 0
                }
            }

            state = {
                name = _mouse_press
                scale = 1
                position = { 0 -5 }
            }

            state = {
                name = _mouse_release
                scale = 1
            }

            glow = {
                using = Color_Bright_Yellow
                glow_radius = 5
                using = Glow_Standard
                alpha = 0
            }

            state = {
                name = "up_start"
                next = "up_end"
                position = { 0 0 }
                duration = 0.5
                trigger_when = "[ActionItemHandler.ActionsWentUp]"

                using = Animation_Curve_Default
                glow_alpha = 1
            }

            state = {
                name = "up_end"
                duration = 0.3
                position = { 0 -15 }

                using = Animation_Curve_Default
                glow_alpha = 0
            }

            modify_texture = {
                name = "shimmer"
                visible = "[And(GreaterThan_int32(ActionItemHandler.GetNumberOfUnreadActions, '(int32)0'), Not(ActionItemHandler.HasVisibleDangerousAction))]"
                texture = "gfx/interface/component_effects/effect_shimmer.dds"
                blend_mode = colordodge
                translate_uv = { 0.2 0.2 }
            }

            state = {
                name = shimmer
                next = pause
                delay = 0.5

                trigger_when = "[ActionItemHandler.ActionsWentUp]"

                bezier = { 0 0.9 1 0.4 }

                modify_texture = {
                    name = "shimmer"
                    translate_uv = { 1 -1 }
                }
            }

            state = {
                name = pause
                next = inbetween
                duration = 1.5

                modify_texture = {
                    name = "shimmer"
                    translate_uv = { -1 1 }
                }
            }

            state = {
                name = inbetween
                next = shimmer
                duration = 3

                modify_texture = {
                    name = "shimmer"
                    translate_uv = { -1 -1 }
                }
            }

            modify_texture = {
                name = "shimmer_dangerous"
                visible = "[And(GreaterThan_int32(ActionItemHandler.GetNumberOfUnreadActions, '(int32)0'), ActionItemHandler.HasVisibleDangerousAction)]"
                texture = "gfx/interface/component_effects/effect_shimmer_dangerous.dds"
                blend_mode = colordodge
                translate_uv = { 1 1 }
            }

            state = {
                name = shimmer_2
                next = pause_2
                trigger_on_create = yes
                delay = 0.5

                trigger_when = "[ActionItemHandler.ActionsWentUp]"

                bezier = { 0 0.9 1 0.4 }

                modify_texture = {
                    name = "shimmer_dangerous"
                    translate_uv = { 1 -1 }
                }
            }

            state = {
                name = pause_2
                next = inbetween_2
                duration = 1.5

                modify_texture = {
                    name = "shimmer_dangerous"
                    translate_uv = { -1 1 }
                }
            }

            state = {
                name = inbetween_2
                next = shimmer_2
                duration = 2

                modify_texture = {
                    name = "shimmer_dangerous"
                    translate_uv = { -1 -1 }
                }
            }

            ## dangerous action
            text_single = {
                name = "actions_number_dangerous"
                visible = "[ActionItemHandler.HasVisibleDangerousAction]"
                parentanchor = center

                text = "[ActionItemHandler.GetNumberOfUnreadActions]"
                align = nobaseline
                using = Font_Size_Big
                default_format = "#high;glow_color:{0.9,0.1,0.1,1.0}"
                snap_to_pixels = no
                alpha = "[Select_float(GreaterThan_int32(ActionItemHandler.GetNumberOfUnreadActions, '(int32)0'),'(float)1.0','(float)0.5')]"

                state = {
                    name = "up_start"
                    next = "up_end"
                    scale = 1.5
                    duration = 0.25
                    trigger_when = "[ActionItemHandler.ActionsWentUp]"
                }

                state = {
                    name = "up_end"
                    scale = 1
                    duration = 0.25
                }
            }

            text_single = {
                name = "actions_number"
                visible = "[Not(ActionItemHandler.HasVisibleDangerousAction)]"
                parentanchor = center

                text = "[ActionItemHandler.GetNumberOfUnreadActions]"
                align = nobaseline
                using = Font_Size_Big
                default_format = "#high;glow_color:{0.1,0.1,0.1,1.0}"
                snap_to_pixels = no

                state = {
                    name = "up_start"
                    next = "up_end"
                    scale = 1.5
                    duration = 0.25
                    trigger_when = "[ActionItemHandler.ActionsWentUp]"
                }

                state = {
                    name = "up_end"
                    scale = 1
                    duration = 0.25
                }
            }
        }

        widget = {
            visible = "[ActionItemHandler.IsListVisible]"
            visible_at_creation = no
            parentanchor = top|right
            position = { 30 80 }
            alwaystransparent = no
            filter_mouse = all

            state = {
                name = _show
                using = Animation_FadeIn_Quick
                using = Sound_WindowShow_Suggestion
                position_y = 80
            }

            state = {
                name = _hide
                using = Animation_FadeOut_Quick
                using = Sound_WindowHide_Suggestion
                position_y = 40
            }

            background = {
                name = "paper_texture_shadow"
                texture = "gfx/interface/window_event/tile_letter_shadow.dds"
                spriteType = Corneredtiled
                spriteborder = { 200 200 }
            }

            background = {
                name = "paper_texture_flat"
                texture = "gfx/interface/window_event/tile_letter_flat.dds"
                spriteType = Corneredtiled
                spriteborder = { 200 200 }
                alpha = 0.9
                color = { 0.51 0.53 0.58 1 }

                modify_texture = {
                    name = "paper_texture_overlay"
                    texture = "gfx/interface/window_event/overlay_letter_texture.dds"
                    spriteType = Corneredstretched
                    blend_mode = overlay
                }
            }

            #### DECOR
            widget = {
                size = { 100%% 97% }
                scissor = yes

                widget = {
                    size = { 322 544 }
                    position = { 6 6 }
                    scale = 0.5
                    alpha = 0.6

                    background = {
                        texture = "gfx/interface/window_event/letter_event_pattern_big.dds"
                        tintcolor = { 0.75 0.9 0.9 1 }

                        modify_texture = {
                            name = "paper_texture_overlay"
                            texture = "gfx/interface/window_event/overlay_letter_texture.dds"
                            spriteType = Corneredstretched
                            blend_mode = overlay
                        }
                    }
                }

                widget = {
                    size = { 322 544 }
                    parentanchor = top|right
                    position = { -6 6 }
                    scale = 0.5
                    alpha = 0.6

                    background = {
                        texture = "gfx/interface/window_event/letter_event_pattern_big.dds"
                        mirror = horizontal
                        tintcolor = { 0.75 0.9 0.9 1 }

                        modify_texture = {
                            name = "paper_texture_overlay"
                            texture = "gfx/interface/window_event/overlay_letter_texture.dds"
                            blend_mode = overlay
                        }
                    }
                }
            }

            widget = {
                name = "button"
                parentanchor = top|right
                position = { -5 5 }

                background = {
                    using = Background_Area
                    mirror = vertical
                    margin_left = 55
                    margin_bottom = 55
                    modify_texture = {
                        texture = "gfx/interface/component_masks/mask_fade_corner.dds"
                        blend_mode = alphamultiply
                    }
                }

                buttons_window_control = {
                    name = "close_suggestions_button"
                    resizeparent = yes

                    blockoverride "button_close" {
                        onclick = "[ActionItemHandler.ToggleList]"
                        shortcut = "close_window"
                        tooltip = "CLOSE_TOOLTIP"
                    }
                }
            }

            vbox = {
                name = "action_items_container"
                set_parent_size_to_minimum = yes
                minimumsize = { 384 50 }
                margin_top = 14
                spacing = 15
                ignoreinvisible = yes

                vbox = {
                    name = "suggestions"
                    visible = "[Or( Not(IsDataModelEmpty(AccessSuggestionItems) ), IsDataModelEmpty(ActionItemHandler.GetGuiActionItems ) )]"
                    layoutpolicy_horizontal = expanding
                    spacing = 10
                    ignoreinvisible = yes

                    text_single = {
                        text = "CURRENT_SITUATION_SUGGESTIONS"
                        using = Font_Size_Medium
                        using = Font_Type_Flavor
                        default_format = "#light_background"
                    }

                    text_single = {
                        visible = "[IsDataModelEmpty(AccessSuggestionItems)]"
                        text = "CURRENT_SITUATION_SUGGESTIONS_EMPTY"
                        default_format = "#light_background;italic"
                    }

                    flowcontainer = {
                        name = "suggestion_items"
                        datamodel = "[AccessSuggestionItems]"
                        layoutpolicy_horizontal = expanding
                        direction = vertical
                        margin_left = 22
                        ignoreinvisible = yes
                        spacing = 5

                        item = {
                            button_suggestion_item = {
                                minimumsize = { 360 0 }
                            }
                        }
                    }
                }

                vbox = {
                    name = "actions"
                    layoutpolicy_horizontal = expanding
                    spacing = 5
                    margin = { 8 0 }
                    margin_bottom = 8

                    vbox = {
                        layoutpolicy_horizontal = expanding

                        text_single = {
                            layoutpolicy_horizontal = expanding
                            text = "CURRENT_SITUATION_HEADER"
                            max_width = 220
                            using = Font_Size_Medium
                            allow_outside = yes
                            align = center
                            using = Font_Type_Flavor
                            default_format = "#light_background"

                            widget = {
                                allow_outside = yes
                                parentanchor = right

                                button_change = {
                                    name = "reset_dismissed"
                                    position = { 2 -2 }
                                    onclick = "[ActionItemHandler.ResetAllDismissed]"
                                    tooltip = "RESET_DISMISSED_TOOLTIP"

                                    background = {
                                        using = Background_Area
                                        mirror = horizontal
                                        margin = { 8 3 }

                                        tintcolor = { 0.22 0.16 0.04 0.5 }

                                        modify_texture = {
                                            texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
                                            blend_mode = alphamultiply
                                        }
                                    }
                                }
                            }
                        }
                    }

                    text_single = {
                        visible = "[Not( ActionItemHandler.HasAvailableCurrentSituationItems )]"
                        text = "CURRENT_SITUATION_SUGGESTIONS_EMPTY"
                        default_format = "#light_background;italic"
                    }

                    container = {
                        scrollbox = {
                            visible = "[ActionItemHandler.HasAvailableCurrentSituationItems]"
                            maximumsize = { -1 600 }

                            blockoverride "scrollbox_background_fade" {}
                            blockoverride "scrollbox_background" {}

                            blockoverride "scrollbox_margins"
                            {
                                margin_bottom = 15
                                margin_left = 14
                                margin_right = 14
                            }

                            blockoverride "scrollbox_content" {
                                name = "current_situation"
                                datamodel = "[ActionItemHandler.GetGuiActionItems]"
                                set_parent_size_to_minimum = yes
                                spacing = 5

                                item = {
                                    flowcontainer = {
                                        ignoreinvisible = yes
                                        minimumsize = { 368 0 }
                                        direction = vertical

                                        button_current_situation_item = {
                                            visible = "[And(GuiActionItem.IsVisible, Not(GuiActionItem.HasMultipleActions))]"
                                            datacontext = "[GuiActionItem.GetFirstVisibleActionItem]"
                                            minimumsize = { 360 0 }
                                        }

                                        button_current_situation_item_multiple = {
                                            visible = "[And(GuiActionItem.IsVisible, GuiActionItem.HasMultipleActions)]"
                                            minimumsize = { 360 0 }
                                        }

                                        flowcontainer = {
                                            name = "expanded_action_items"
                                            datamodel = "[GuiActionItem.GetImportantActionItems]"
                                            visible = "[GuiActionItem.IsExpanded]"
                                            direction = vertical
                                            spacing = 3

                                            margin_left = 10
                                            margin_top = 3
                                            margin_bottom = 5

                                            ignoreinvisible = yes

                                            item = {
                                                button_current_situation_item_combined = {
                                                    datacontext = "[GuiActionImportantActionItem.GetImportantAction]"
                                                    minimumsize = { 350 0 }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    ######################################################
    ################### MESSAGE FEED #####################
    ######################################################
    type notifications_message_feed = flowcontainer {
        name = "message_feed_widget"
        visible = "[And( Not(IsGameViewOpen('barbershop')), And( Not(IsPauseMenuShown), And( Not(SinglePlayerShowingPausedSuccession), IsDefaultGUIMode ) ) )]"
        visible_at_creation = no
        parentanchor = bottom|right
        alwaystransparent = yes
        ignoreinvisible = yes

        using = Animation_ShowHide_Quick

        flowcontainer = {
            direction = vertical
            ignoreinvisible = yes

            widget = {
                size = { 450 0 }

                state = {
                    name = _show
                    using = Animation_FadeIn_Standard
                }

                state = {
                    name = _hide
                    using = Animation_FadeOut_Quick
                }

                vbox = {
                    name = "message_feed"
                    datamodel = "[MessageFeedHandler.GetItems]"
                    set_parent_size_to_minimum = yes

                    expand = {}

                    item = {
                        vbox = {
                            layoutpolicy_vertical = growing
                            layoutpolicy_horizontal = expanding
                            datacontext = "[FeedMessageItem.GetPlayerMessageItem]"
                            spacing = 2
                            alwaystransparent = no
                            filter_mouse = all

                            state = {
                                name = "mark_to_delete"
                                trigger_when = "[FeedMessageItem.IsSetToDelete]"
                                on_start = "[FeedMessageItem.StartAnimation]"
                                on_finish = "[FeedMessageItem.EndAnimation]"
                                on_finish = "[FeedMessageItem.Delete]"
                                duration = 0.3
                                alpha = 0
                                using = Animation_Curve_Default
                            }

                            background = {
                                using = Background_Area_Dark
                            }

                            button = {
                                name = "header"
                                layoutpolicy_horizontal = expanding
                                size = { 0 32 }
                                onclick = "[FeedMessageItem.Expand]"
                                onrightclick = "[FeedMessageItem.MarkToDelete]"
                                button_ignore = none
                                tooltip = "MESSAGE_CLICK_TOOLTIP"

                                using = situation_entry_parent_hover_states

                                state = {
                                    name = _mouse_hierarchy_enter
                                    on_start = "[PdxGuiWidget.FindChild('button_dismiss_all').TriggerAnimation('hover_enter')]"
                                }

                                state = {
                                    name = _mouse_hierarchy_leave
                                    on_start = "[PdxGuiWidget.FindChild('button_dismiss_all').TriggerAnimation('hover_leave')]"
                                }

                                background = {
                                    name = "neutral"
                                    visible = "[PlayerMessageItem.GetType.IsNeutral]"
                                    using = Feed_Message_Header
                                }

                                background = {
                                    name = "good"
                                    visible = "[PlayerMessageItem.GetType.IsGood]"
                                    using = Feed_Message_Header
                                    tintcolor = { 0.767708 0.78125 0.3479 0.847656 }
                                }

                                background = {
                                    name = "bad"
                                    visible = "[PlayerMessageItem.GetType.IsBad]"
                                    using = Feed_Message_Header
                                    tintcolor = { 0.949219 0.446105 0.330002 0.847656 }
                                }

                                hbox = {
                                    margin_right = 10
                                    margin_left = 5
                                    spacing = 5

                                    icon = {
                                        name = "message_type"
                                        size = { 28 28 }
                                        texture = "[PlayerMessageItem.GetType.GetIcon]"
                                        tooltip = "[PlayerMessageItem.GetTooltip]"
                                        using = tooltip_ws
                                    }

                                    text_single = {
                                        name = "title"
                                        text = "[PlayerMessageItem.GetTitle]"
                                        using = Font_Size_Medium
                                        align = nobaseline
                                        max_width = 355
                                        fontsize_min = 14
                                    }

                                    expand = {}

                                    hbox = {
                                        vbox = {
                                            name = "button_dismiss"
                                            alpha = 1

                                            state = {
                                                name = hover_enter
                                                alpha = 0
                                                duration = 0.05
                                                using = Animation_Curve_Default
                                            }

                                            state = {
                                                name = hover_leave
                                                alpha = 1
                                                duration = 0.2
                                                using = Animation_Curve_Default
                                            }

                                            text_single = {
                                                name = "date"
                                                text = "[PlayerMessageItem.GetDate.GetStringShortNoYear]"
                                                align = nobaseline
                                            }
                                        }

                                        widget = {
                                            allow_outside = yes

                                            button_clear = {
                                                name = "button_dismiss_all"
                                                widgetanchor = right
                                                position = { 0 -3 }
                                                alpha = 0

                                                state = {
                                                    name = hover_enter
                                                    alpha = 1
                                                    duration = 0.05
                                                    using = Animation_Curve_Default
                                                }

                                                state = {
                                                    name = hover_leave
                                                    alpha = 0
                                                    duration = 0.2
                                                    using = Animation_Curve_Default
                                                }


                                                button_ignore = none
                                                size = { 26 26 }
                                                onrightclick = "[MessageFeedHandler.MarkAllForDelete]"
                                                onclick = "[FeedMessageItem.MarkToDelete]"
                                                using = tooltip_se
                                                tooltip = "MESSAGE_CLEAR_ALL_TOOLTIP"
                                            }
                                        }

                                    }
                                }
                            }

                            widget = {
                                name = "message_feed_text_area"
                                layoutpolicy_horizontal = expanding
                                size = { 450 0 }
                                scissor = yes

                                state = {
                                    name = "hide_text_1"
                                    next = "hide_text_2"
                                    trigger_when = "[FeedMessageItem.ShouldHide]"
                                    duration = 0
                                    size = { 450 180 }
                                }

                                state = {
                                    name = "hide_text_2"
                                    on_start = "[FeedMessageItem.StartAnimation]"
                                    on_finish = "[FeedMessageItem.EndAnimation]"
                                    on_finish = "[FeedMessageItem.ClickedHideFinished]"
                                    size = { 450 0 }
                                    using = Animation_FadeOut_Quick
                                    duration = 0
                                }

                                state = {
                                    name = "hide_text_clicked"
                                    trigger_when = "[FeedMessageItem.ClickedHide]"
                                    on_start = "[FeedMessageItem.StartAnimation]"
                                    on_finish = "[FeedMessageItem.EndAnimation]"
                                    on_finish = "[FeedMessageItem.ClickedHideFinished]"
                                    size = { 450 0 }
                                    using = Animation_FadeOut_Quick
                                    duration = 0.15
                                }

                                state = {
                                    name = "show_text_hidden"
                                    trigger_when = "[Not(FeedMessageItem.IsExpanded)]"
                                    duration = 0.15
                                    size = { 450 0 }
                                }

                                state = {
                                    name = "show_text_clicked"
                                    trigger_when = "[FeedMessageItem.ClickedExpand]"
                                    on_start = "[FeedMessageItem.StartAnimation]"
                                    on_finish = "[FeedMessageItem.EndAnimation]"
                                    on_finish = "[FeedMessageItem.ClickedExpandFinished]"
                                    size = { 450 180 }
                                    using = Animation_FadeIn_Standard
                                    duration = 0.15
                                }

                                state = {
                                    name = "show_text"
                                    trigger_when = "[FeedMessageItem.ShouldShow]"
                                    on_start = "[FeedMessageItem.StartAnimation]"
                                    on_finish = "[FeedMessageItem.EndAnimation]"
                                    on_finish = "[FeedMessageItem.ClickedExpandFinished]"
                                    size = { 450 180 }
                                    using = Animation_FadeIn_Standard
                                    duration = 0.2
                                }

                                state = {
                                    name = "show_text_expanded"
                                    trigger_when = "[FeedMessageItem.IsExpanded]"
                                    duration = 0
                                    size = { 450 180 }
                                }

                                hbox = {
                                    name = "text_and_icons"
                                    margin_right = 10

                                    state = {
                                        name = appear
                                        using = Animation_FadeIn_Quick
                                        trigger_when = "[Or(FeedMessageItem.ClickedExpand, FeedMessageItem.ShouldShow)]"
                                    }

                                    state = {
                                        name = disappear
                                        using = Animation_FadeOut_Quick
                                        trigger_when = "[FeedMessageItem.ShouldHide]"
                                    }

                                    text_multi = {
                                        name = "text"
                                        layoutpolicy_vertical = expanding
                                        layoutpolicy_horizontal = expanding

                                        margin = { 20 10 }
                                        text = "[PlayerMessageItem.GetDescription]"
                                        elide = right
                                    }

                                    vbox = {
                                        layoutpolicy_vertical = expanding
                                        margin_top = 5
                                        margin_bottom = 15

                                        hbox = {
                                            portrait_head_small = {
                                                name = "portrait_left"
                                                datacontext = "[PlayerMessageItem.GetLeftCharacter]"
                                                visible = "[Character.IsValid]"
                                            }

                                            coa_title_medium = {
                                                name = "title_left"
                                                datacontext = "[PlayerMessageItem.GetLeftTitle]"
                                                visible = "[Title.IsValid]"
                                            }

                                            icon_artifact = {
                                                name = "artifact_left"
                                                datacontext = "[PlayerMessageItem.GetLeftArtifact]"
                                                visible = "[Artifact.IsValid]"
                                            }

                                            portrait_head_small = {
                                                name = "portrait_right"
                                                datacontext = "[PlayerMessageItem.GetRightCharacter]"
                                                visible = "[Character.IsValid]"
                                            }

                                            coa_title_medium = {
                                                name = "title_right"
                                                datacontext = "[PlayerMessageItem.GetRightTitle]"
                                                visible = "[Title.IsValid]"
                                            }

                                            icon_artifact = {
                                                name = "artifact_right"
                                                datacontext = "[PlayerMessageItem.GetRightArtifact]"
                                                visible = "[Artifact.IsValid]"
                                            }
                                        }

                                        expand = {}
                                    }
                                }
                            }
                        }
                    }
                }
            }

            widget = {
                name = "push_up"
                size = { 0 80 }

				visible = "[Not(IsRightWindowOpen)]"
            }
        }

        widget = {
            name = "push_left"
            size = { 630 0 }
	        visible = "[IsRightWindowOpen]"
        }
    }
}

template message_feed_text
{
    direction = vertical

    container = {

        widget = {
            block "WidgetSize"
            {
                size = { 200 22 }
            }
            name = "header"
        }
    }

    container = {
        text_multi = {
            position = { 12 4 }
            name = "effect"
            autoresize = yes
            block "MaxEffectSize"
            {
                maximumsize = { 200 -1 }
            }
            minimumsize = { -1 -1 }
            align = left|nobaseline
            parentanchor = left
            text = "[PlayerMessageItem.GetTooltip]"
        }
    }
}

template situation_entry_parent_hover_states
{
    state = {
        name = _mouse_hierarchy_enter
        on_start = "[PdxGuiWidget.FindChild('button_dismiss').TriggerAnimation('hover_enter')]"
    }

    state = {
        name = _mouse_hierarchy_leave
        on_start = "[PdxGuiWidget.FindChild('button_dismiss').TriggerAnimation('hover_leave')]"
    }
}

template situation_entry_child_hover_states
{
    name = "button_dismiss"
    alpha = 0

    state = {
        name = hover_enter
        alpha = 1
        duration = 0.05
        using = Animation_Curve_Default
    }

    state = {
        name = hover_leave
        alpha = 0
        duration = 0.2
        using = Animation_Curve_Default
    }
}

types Suggestions
{
    type button_suggestion_item = button_standard {
        onclick = "[SuggestionItem.OnClick]"
        onrightclick = "[SuggestionItem.Dismiss]"
        button_ignore = none
        tooltip = "[SuggestionItem.GetTooltip]"

        background = {
            using = Status_Suggestion
        }

        background = {
            texture = "gfx/interface/component_tiles/tile_vignette_3px.dds"
            spriteType = Corneredtiled
            spriteborder = { 5 5 }
            margin = { -2 -2 }
            alpha = 0.3
        }

        using = situation_entry_parent_hover_states

        hbox = {
            margin = { 10 5 }
            margin_right = 5
            restrictparent_min = yes

            text_single = {
                layoutpolicy_horizontal = expanding
                align = nobaseline
                text = "[SuggestionItem.GetLabel]"
            }

            button_cancel_small = {
                tooltip = "DISMISS_SUGGESTION_TT"
                onclick = "[SuggestionItem.Dismiss]"
                inherit_visual_state = no

                using = situation_entry_child_hover_states
            }
        }
    }

    type button_current_situation_item = button_standard {
        visible = "[ImportantActionItem.IsVisible]"
        minimumsize = { 350 0 }

        onclick = "[ImportantActionItem.OnClick]"
        onrightclick = "[ImportantActionItem.Dismiss]"
        button_ignore = none
        onmousehierarchyenter = "[ImportantActionItem.MarkAsRead]"
        tooltip = "[ImportantActionItem.GetTooltip]"

        using = situation_entry_parent_hover_states

        background = {
            visible = "[And(Not(ImportantActionItem.IsUnimportant), ImportantActionItem.GetActionType.IsDangerous)]"
            using = Status_Suggestion_Bad
        }

        background = {
            visible = "[And(Not(ImportantActionItem.IsUnimportant), Not(ImportantActionItem.GetActionType.IsDangerous))]"
            using = Status_Suggestion_Good
        }

        icon = {
            name = "new_action_effect"
            visible = "[Not(ImportantActionItem.IsRead)]"
            size = { 100% 100% }

            spriteType = Corneredtiled
            spriteborder = { 10 10 }

            texture = "gfx/interface/component_effects/attention_text.dds"
            color = { 1 0.8 0.6 0.8 }

            state = {
                trigger_on_create = yes
                name = a
                next = b

                using = Animation_Curve_Default
                duration = 0.8
                alpha = 1
            }

            state = {
                name = b
                next = a

                using = Animation_Curve_Default
                duration = 1.5
                alpha = 0.5
            }
        }

        hbox = {
            margin = { 10 5 }
            margin_right = 5
            restrictparent_min = yes
            ignoreinvisible = yes

            text_multi = {
                autoresize = yes
                max_width = 315
                text = "ACTION_IS_VISIBLE_READ_UNREAD"
                alwaystransparent = yes
            }

            expand = {}

            button_cancel_small = {
                tooltip = "DISMISS_CS_TT"

                onclick = "[ImportantActionItem.Dismiss]"
                inherit_visual_state = no

                using = situation_entry_child_hover_states
            }
        }
    }

    type button_current_situation_item_multiple = button_standard {
        onclick = "[GuiActionItem.OnClick]"
        onrightclick = "[GuiActionItem.Dismiss]"
        button_ignore = none
        onmousehierarchyenter = "[GuiActionItem.MarkAsRead]"
        tooltip = "[GuiActionItem.GetCombinedTooltip]"

        background = {
            visible = "[And(Not(GuiActionItem.IsUnimportant), GuiActionItem.HasAnyActionIsDangerous)]"
            using = Status_Suggestion_Bad
        }

        background = {
            visible = "[And(Not(GuiActionItem.IsUnimportant), Not(GuiActionItem.HasAnyActionIsDangerous))]"
            using = Status_Suggestion_Good
        }

        icon = {
            name = "new_action_effect"
            visible = "[Not(GuiActionItem.IsRead)]"
            size = { 100% 100% }

            spriteType = Corneredtiled
            spriteborder = { 10 10 }

            texture = "gfx/interface/component_effects/attention_text.dds"
            color = { 1 0.8 0.6 0.8 }

            state = {
                trigger_on_create = yes
                name = a
                next = b

                using = Animation_Curve_Default
                duration = 0.8
                alpha = 1
            }

            state = {
                name = b
                next = a

                using = Animation_Curve_Default
                duration = 1.5
                alpha = 0.5
            }
        }

        hbox = {
            restrictparent_min = yes
            margin = { 10 5 }
            spacing = 5
            minimumsize = { 0 40 }

            button_expand = {
                size = { 22 22 }
                frame = "[BoolTo1And2(GuiActionItem.IsExpanded)]"
                scissor = yes
                alwaystransparent = yes
            }

            text_multi = {
                layoutpolicy_horizontal = expanding
                autoresize = yes
                max_width = 300
                text = "IMPORTANT_ACTION_COMBINED_LABEL"
                alwaystransparent = yes
            }

            text_single = {
                text = "[GuiActionItem.GetNumberOfVisibleItems]"
                default_format = "#high"
                align = nobaseline
                alwaystransparent = yes
            }
        }
    }

    type button_current_situation_item_combined = button_standard {
        visible = "[ImportantActionItem.IsVisible]"
        onclick = "[ImportantActionItem.OnClick]"
        onrightclick = "[ImportantActionItem.Dismiss]"
        button_ignore = none

        onmousehierarchyenter = "[ImportantActionItem.MarkAsRead]"

        tooltip = "[ImportantActionItem.GetTooltip]"

        background = {
            visible = "[And(Not(ImportantActionItem.IsUnimportant), ImportantActionItem.GetActionType.IsDangerous)]"
            using = Status_Suggestion_Bad
        }

        background = {
            visible = "[And(Not(ImportantActionItem.IsUnimportant), Not(ImportantActionItem.GetActionType.IsDangerous))]"
            using = Status_Suggestion_Good
        }

        using = situation_entry_parent_hover_states

        hbox = {
            margin = { 10 5 }
            margin_right = 5
            restrictparent_min = yes

            text_multi = {
                layoutpolicy_horizontal = expanding
                autoresize = yes
                max_width = 300

                align = nobaseline
                text = "ACTION_IS_VISIBLE_READ_UNREAD_COMBINED"
                alwaystransparent = yes
            }

            expand = {}

            button_cancel_small = {
                tooltip = "DISMISS_CS_TT"
                onclick = "[ImportantActionItem.Dismiss]"
                inherit_visual_state = no

                using = situation_entry_child_hover_states
            }
        }
    }
}
