#Events handling Fabricate Hook outcomes

namespace = fabricate_hook_outcome


################################
# A Secret might be found
# by Petter Vilberg
################################
fabricate_hook_outcome.0001 = {
	type = character_event
	title = fabricate_hook_outcome.0001.t
	desc = fabricate_hook_outcome.0001.desc
	theme = fabricate_hook_scheme
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		exists = scope:secret_to_reveal
		NOT = { has_hook = scope:target }
		scope:secret_to_reveal = {
			is_blackmailable_secret_trigger = {
				BLACKMAILER = root PARTICIPANT = scope:target
			}
		}
	}

	on_trigger_fail = { # Fallback in case something happens to the Secret before getting here
		trigger_event = {
			on_action = fabricate_hook_method_success_outcome
		}
	}

	option = { # Blackmail outright
		name = fabricate_hook_outcome.0001.a
		hidden_effect = {
			scope:secret_to_reveal = {
				reveal_to_without_events_effect = {
					CHARACTER = root
				}
			}
		}
		blackmail_target_with_secret_effect = {
			SECRET = scope:secret_to_reveal
			TARGET = scope:target
		}
		ai_chance = {
			base = 100
		}
	}

	option = { # Learnt a secret
		name = fabricate_hook_outcome.0001.b
		scope:secret_to_reveal = {
			reveal_to_without_events_effect = {
				CHARACTER = root
			}
		}
		# Discovery effect if relevant
		if = {
			limit = { exists = scope:scheme_discovered }
			fabricate_hook_discovery_effect = yes
		}
		ai_chance = {
			base = 10
		}
	}

	option = { # Expose outright
		name = fabricate_hook_outcome.0001.c
		scope:secret_to_reveal = {
			hidden_effect = {
				reveal_to_without_events_effect = {
						CHARACTER = root
				}
			}
			expose_secret = root
		}
		ai_chance = {
			base = 10
		}
	}

	after = {
		if = {
			limit = { exists = scope:scheme }
			scope:scheme = {
				end_scheme = yes
			}
		}
	}
}


################################
# Method Selection
# 1000-1999
################################

##########
# Catch them in a compromised situation - that you set up
# by Petter Vilberg
##########
fabricate_hook_outcome.1001 = {
	type = character_event
	title = fabricate_hook_outcome.1001.t
	desc = fabricate_hook_outcome.1001.desc
	theme = fabricate_hook_scheme
	left_portrait = {
		character = scope:target
		animation = shame
	}
	right_portrait = {
		trigger = {
			NOT = { scope:target = scope:target.court_owner }
		}
		character = scope:target.court_owner
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		NOT = { has_hook = scope:target }
		is_travelling = no
	}

	immediate = {
		scope:target.court_owner = { # For use in loc
			save_scope_as = court_owner
		}
		if = {
			limit = { is_ai = no }
			scope:target = {
				add_character_flag = {
					flag = is_naked
					days = 180
				}
			}
		}
	}

	option = {
		name = fabricate_hook_outcome.1001.a
		flavor = fabricate_hook_outcome.1001.a.flavor
		add_prestige = medium_prestige_loss
		fabricate_hook_success_effect = {
			TYPE = fabrication_hook
		}
	}

	option = {
		name = fabricate_hook_outcome.1001.b
		trigger = { NOT = { exists = scope:scheme_discovered } }
		fabricate_hook_decline_execution_effect = yes
	}
	
	option = {
		name = fabricate_hook_outcome.1001.c
		trigger = { exists = scope:scheme_discovered }
		fabricate_hook_discovery_effect = yes
	}

	after = {
		scope:target = {
			remove_character_flag = is_naked
		}
	}
}

##########
# Fabricate Letter
# by Petter Vilberg
##########
fabricate_hook_outcome.1002 = {
	type = character_event
	title = fabricate_hook_outcome.1002.t
	desc = {
		desc = fabricate_hook_outcome.1002.desc
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:target = {
						vassal_count >= 1
					}
				}
				desc = fabricate_hook_outcome.1002.desc.vassals
			}
			desc = fabricate_hook_outcome.1002.desc.no_vassals
		}
	}
	theme = fabricate_hook_scheme
	left_portrait = {
		character = root
		animation = personality_honorable
	}
	right_portrait = {
		character = scope:messenger
		animation = worry
	}
	lower_center_portrait = { character = scope:target }
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	override_background = { reference = terrain_travel }

	trigger = {
		NOT = { has_hook = scope:target }
		is_travelling = yes
	}

	immediate = {
		scope:target.court_owner = { # For use in loc
			save_scope_as = court_owner
		}

		create_character = {
			template = travel_messenger
			faith = scope:target.faith
			culture = scope:target.culture
			location = root.location
			save_scope_as = messenger
		}
	}

	option = {
		name = fabricate_hook_outcome.1002.a
		add_character_modifier = {
			modifier = fabricate_hook_interfering_with_servants_modifier
			years = 5
		}
		fabricate_hook_success_effect = {
			TYPE = fabrication_hook
		}
	}

	option = {
		name = fabricate_hook_outcome.1001.b
		trigger = { NOT = { exists = scope:scheme_discovered } }
		fabricate_hook_decline_execution_effect = yes
	}
	
	option = {
		name = fabricate_hook_outcome.1001.c
		trigger = { exists = scope:scheme_discovered }
		fabricate_hook_discovery_effect = yes
	}

	after = {
		scope:messenger = { silent_disappearance_effect = yes }
	}
}

# Rescue them from Thugs you hired
fabricate_hook_outcome.1003 = {
	type = character_event
	title = fabricate_hook_outcome.1003.t
	desc = fabricate_hook_outcome.1003.desc
	theme = fabricate_hook_scheme
	left_portrait = {
		character = scope:target
		animation = fear
	}
	right_portrait = {
		trigger = {
			NOT = { scope:target = scope:target.court_owner }
		}
		character = scope:target.court_owner
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = {
		NOT = { has_hook = scope:target }
		is_travelling = no
	}

	immediate = {
		scope:target.court_owner = { # For use in loc
			save_scope_as = court_owner
		}
	}

	option = {
		name = fabricate_hook_outcome.1003.a
		remove_short_term_gold = medium_gold_value
		fabricate_hook_success_effect = {
			TYPE = loyalty_hook
		}
	}

	option = {
		name = fabricate_hook_outcome.1001.b
		trigger = { NOT = { exists = scope:scheme_discovered } }
		fabricate_hook_decline_execution_effect = yes
	}
	
	option = {
		name = fabricate_hook_outcome.1001.c
		trigger = { exists = scope:scheme_discovered }
		fabricate_hook_discovery_effect = yes
	}
}

# Publicly counter a rumor that you started
fabricate_hook_outcome.1004 = {
	type = character_event
	title = fabricate_hook_outcome.1004.t
	desc = fabricate_hook_outcome.1004.desc
	theme = fabricate_hook_scheme
	left_portrait = {
		character = scope:target
		animation = admiration
	}
	right_portrait = {
		trigger = {
			NOT = { scope:target = scope:target.court_owner }
		}
		character = scope:target.court_owner
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = {
		NOT = { has_hook = scope:target }
		exists = scope:target.court_owner
		is_travelling = no
	}

	immediate = {
		scope:target.court_owner = { # For use in loc
			save_scope_as = court_owner
		}
	}

	option = {
		name = fabricate_hook_outcome.1004.a
		trigger = {
			faith = { NOT = { has_doctrine_parameter = piety_gain_from_successful_intrigue_schemes } }
		}
		flavor = fabricate_hook_outcome.1004.a.flavor
		add_piety = medium_piety_loss
		fabricate_hook_success_effect = {
			TYPE = loyalty_hook
		}
	}

	option = {
		name = fabricate_hook_outcome.1004.a
		trigger = {
			faith = { has_doctrine_parameter = piety_gain_from_successful_intrigue_schemes }
		}
		flavor = fabricate_hook_outcome.1004.a.flavor_sacred_shadows
		add_piety = medium_piety_gain
		fabricate_hook_success_effect = {
			TYPE = loyalty_hook
		}
	}

	option = {
		name = fabricate_hook_outcome.1001.b
		trigger = { NOT = { exists = scope:scheme_discovered } }
		fabricate_hook_decline_execution_effect = yes
	}
	
	option = {
		name = fabricate_hook_outcome.1001.c
		trigger = { exists = scope:scheme_discovered }
		fabricate_hook_discovery_effect = yes
	}
}


# Threaten the target - More likely against Craven
fabricate_hook_outcome.1005 = {
	type = character_event
	title = fabricate_hook_outcome.1005.t
	desc = fabricate_hook_outcome.1005.desc
	theme = fabricate_hook_scheme
	left_portrait = {
		character = scope:target
		animation = fear
	}
	right_portrait = {
		trigger = {
			NOT = { scope:target = scope:target.court_owner }
		}
		character = scope:target.court_owner
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		NOT = { target_is_liege_or_above = scope:target }
		NOT = { has_hook = scope:target }
	}
	
	weight_multiplier = {
		base = 1
		modifier = {
			add = 1
			scope:target = { has_trait = craven }
		}
		compare_modifier = { # 3 at 100 Dread
			value = dread
			multiplier = 0.03
		}
		compare_modifier = { # -3 - 3 for target's boldness
			value = scope:target.ai_boldness
			multiplier = -0.03
		}
	}

	immediate = {
		scope:target.court_owner = { # For use in loc
			save_scope_as = court_owner
		}
	}

	option = {
		name = fabricate_hook_outcome.1005.a
		flavor = fabricate_hook_outcome.1005.a.flavor
		add_tyranny = minor_tyranny_gain
		add_dread = medium_dread_gain
		fabricate_hook_success_effect = {
			TYPE = life_threat_hook
		}
	}

	option = {
		name = fabricate_hook_outcome.1001.b
		trigger = { NOT = { exists = scope:scheme_discovered } }
		fabricate_hook_decline_execution_effect = yes
	}
	
	option = {
		name = fabricate_hook_outcome.1001.c
		trigger = { exists = scope:scheme_discovered }
		fabricate_hook_discovery_effect = yes
	}
}

#####################
# Target Success Notification
# by Petter Vilberg
#####################
# Generic notification
fabricate_hook_outcome.2001 = {
	type = character_event
	title = fabricate_hook_outcome.2001.t
	desc = fabricate_hook_outcome.2001.desc
	theme = fabricate_hook_scheme
	orphan = yes # TODO [CD] - Figure out why
	left_portrait = {
		character = scope:owner
		animation = schadenfreude
	}

	option = {
		name = fabricate_hook_outcome.2001.a
		fabricate_hook_success_notification_event_effect = yes
	}
}


######################
# Failure events
# by Petter Vilberg
######################
fabricate_hook_outcome.3001 = {
	type = character_event
	title = fabricate_hook_outcome.3001.t
	desc = fabricate_hook_outcome.3001.desc
	theme = fabricate_hook_scheme
	left_portrait = {
		character = scope:target
		animation = anger
	}
	right_portrait = {
		trigger = {
			NOT = { scope:target = scope:target.court_owner }
		}
		character = scope:target.court_owner
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	immediate = {
		if = {
			limit = {
				exists = scope:target.court_owner
			}
			scope:target.court_owner = { save_scope_as = court_owner }
		}
	}

	option = {
		name = fabricate_hook_outcome.3001.a
		fabricate_hook_discovery_effect = yes
	}
}
