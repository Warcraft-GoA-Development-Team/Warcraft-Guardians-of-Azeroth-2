#Scripted effects relating to Schemes

#####################################################################
# EFFECT LIST
#####################################################################
# !!! Remember to add all new effects with a short description here !!!

#

######################################################################
# EFFECTS
######################################################################



find_agent_in_question_effect = {
# Finds an agent in a scheme, and saves them as the event target agent_in_question
	scope:scheme = {
		if = {
			limit = {
				scheme_number_of_agents > 0
			}
			random_scheme_agent = {
				save_scope_as = agent_in_question
			}
		}
	}
}

hostile_scheme_discovery_chance_effect = {
	if = {
		limit = {
			scope:target.host = scope:owner
			NOT = {
				exists = scope:scheme.var:had_self_court_discovery
			}
		}
		#Check if the scheme is happening against someone at owner's court
		#If owner's own court, check for discovery
		random = {
			chance = scope:owner.hostile_scheme_own_court_discovery_chance

			scope:scheme = {
				set_variable = {
					name = had_self_court_discovery
					value = yes
					years = 3
				}
			}
			scope:owner = { #Note that this fires for owner, not target
				if = {
					limit = {
						scope:scheme = {
							scheme_type = murder
						}
					}
					trigger_event = hostile_scheme_discovery.4002
				}
				else = {
					trigger_event = hostile_scheme_discovery.4001
				}
			}
			save_temporary_scope_value_as = {
				name = discovery_event_happening
				value = yes
			}
		}
	}

	#Check for targets that have different courts than the scheme owner
	else_if = {
		limit = {
			#Does the target have a Spymaster?
			exists = scope:target.host.cp:councillor_spymaster
		}
		#Save spymaster scope for later reference
		scope:target.host.cp:councillor_spymaster = {
			save_scope_as = spymaster
		}

		if = {
			limit = {
				is_scheme_exposed = no
				#Spymaster won't expose their own Scheme
				NOT = { scope:owner = scope:spymaster }
				#Spymaster won't expose *your* (liege's) Scheme
				NOT = { scope:owner = scope:spymaster.liege }
				#Spymaster won't expose a scheme if they are an agent of it
				NOT = { scheme_is_character_agent = scope:spymaster }
			}
			random = {
				chance = scope:spymaster.spymaster_scheme_discovery_chance

				save_temporary_scope_value_as = {
					name = discover_scheme
					value = yes
				}
			}
		}

		#Discover agent or owner? We don't want both to happen at once
		random_list = {
			50 = { #AGENT
				trigger = {
					is_scheme_exposed = yes #Agents should only be exposed if the scheme already is exposed
					any_scheme_agent = {
						agent_valid_to_be_discovered_by_spymaster = yes
					}
				}
				random = {
					chance = scope:spymaster.spymaster_agent_discovery_chance

					save_temporary_scope_value_as = {
						name = discover_agent
						value = yes
					}
				}
			}

			50 = { #OWNER
				trigger = {
					is_scheme_exposed = yes #Owner should only be exposed if the scheme already is exposed
				}
				random = {
					chance = scope:spymaster.spymaster_owner_discovery_chance

					save_temporary_scope_value_as = {
						name = discover_owner
						value = yes
					}
				}
			}
		}

		if = {
			#Execution of scheme discovery
			limit = {
				exists = scope:discover_scheme
			}
			scope:target.host = {
				trigger_event = hostile_scheme_discovery.2001
			}
			save_temporary_scope_value_as = {
				name = discovery_event_happening
				value = yes
			}
		}
		else_if = {
			#Execution of agent discovery
			limit = {
				exists = scope:discover_agent
			}
			random_scheme_agent = {
				limit = {
					is_alive = yes
					agent_valid_to_be_discovered_by_spymaster = yes
				}
				weight = {
					base = 1
					modifier = {
						add = -0.5
						is_consort_of = scope:target
					}
				}
				save_scope_as = agent
			}
			scope:target.host = {
				trigger_event = hostile_scheme_discovery.1001
			}
			save_temporary_scope_value_as = {
				name = discovery_event_happening
				value = yes
			}
		}
		else_if = {
			#Execution of owner discovery
			limit = {
				exists = scope:discover_owner
				trigger_if = {
					limit = {
						exists = scope:spymaster
					}
					NOT = {
						scope:spymaster = scope:owner
					}
				}
			}
			scope:target.host = {
				trigger_event = hostile_scheme_discovery.1002
			}
			save_temporary_scope_value_as = {
				name = discovery_event_happening
				value = yes
			}
		}
	}
}

