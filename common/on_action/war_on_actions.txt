# On actions for war events, triggered automatically by the game

# called for wars after being transferred to a new defender
# root is the primary attacker
# scope:war is the war
# scope:defender is the new defender

on_war_transferred = {
	events = {
		war_event.2001 # allows attacker to back out of the war
	}
}

# called for people joining as a secondary attacker or defender
# root is the joiner
# scope:war is the war

on_join_war_as_secondary = {
	effect = {
		save_scope_as = war_joiner
		scope:war = {
			if = {
				limit = {
					is_attacker = root
				}
				primary_attacker = { save_scope_as = war_joiner_ally }
				primary_defender = { save_scope_as = war_joiner_enemy }
				root = {
					create_character_memory = {
						type = joined_allys_war
						
						participants = {
							ally = scope:war.primary_attacker
							enemy = scope:war.primary_defender
						}
					}
					scope:war.primary_attacker = {
						ordered_memory = {
							limit = {
								has_memory_type = offensive_war
								any_memory_participant = { this = scope:war.primary_defender }
							}
							order_by = memory_creation_date
							save_scope_as = war_memory
						}
					}
				}
			}
			else = {
				primary_defender = { save_scope_as = war_joiner_ally }
				primary_attacker = { save_scope_as = war_joiner_enemy }
				root = {
					create_character_memory = {
						type = joined_allys_war
						
						participants = {
							ally = scope:war.primary_defender
							enemy = scope:war.primary_attacker
						}
					}
					scope:war.primary_defender = {
						ordered_memory = {
							limit = {
								has_memory_type = defensive_war
								any_memory_participant = { this = scope:war.primary_attacker }
							}
							order_by = memory_creation_date
							save_scope_as = war_memory
						}
					}
				}
			}
			root = {
				ordered_memory = {
					limit = {
						has_memory_type = joined_allys_war
						any_memory_participant = { this = scope:war.primary_attacker }
						any_memory_participant = { this = scope:war.primary_defender }
					}
					order_by = memory_creation_date
					if = {
						limit = { exists = scope:war_memory.var:war_cb }
						copy_war_memory_casus_belli_effect = { MEMORY = scope:war_memory }
					}
					else = { set_war_memory_casus_belli_effect = yes }
					if = {
						limit = {
							root = { is_at_war_with = scope:war.primary_attacker }
						}
						set_variable = {
							name = war_ally
							value = scope:war.primary_defender
						}
					}
					else = {
						set_variable = {
							name = war_ally
							value = scope:war.primary_attacker
						}
					}
				}
				# If they're in an activity, let them decide whether or not to cancel 
				activity_on_war_declared_events_effect  = yes
				# BP2: Joining war and have an enemy's hostage
				if = {
					limit = { # Let attacker's go first
						NOT = {
							any_warden_hostage = { home_court ?= scope:war_joiner }
						}
					}
					trigger_event = { id = bp2_hostage_system.0120 days = 6 }
				}
			}
			# BP2: Have a hostage of a newly joined enemy
			every_war_participant = {
				limit = { is_at_war_with = scope:war_joiner }
				# Have a hostage of a newly joined enemy
				trigger_event = { id = bp2_hostage_system.0130 days = 6 }
			}
			# Enroute hostage invalidation
			scope:war_joiner = {
				if = {
					limit = {
						any_close_family_member = {
							is_travelling = yes
							var:hostage_travelling_to_warden ?= { is_at_war_with = scope:war_joiner }
						}
					}
					every_close_family_member = {
						limit = {
							is_travelling = yes
							var:hostage_travelling_to_warden ?= { is_at_war_with = scope:war_joiner }
						}
						save_scope_as = invalidated_hostage
						scope:war_joiner = {
							send_interface_toast = {
								title = hostage_invalidated_during_travel_title
								left_icon = scope:invalidated_hostage
								right_icon = scope:invalidated_hostage.var:hostage_travelling_to_warden
								show_as_tooltip = {
									scope:invalidated_hostage.current_travel_plan = { cancel_travel_plan = yes }
								}
							}
						}
						scope:invalidated_hostage.var:hostage_travelling_to_warden = {
							send_interface_toast = {
								title = hostage_invalidated_during_travel_title
								left_icon = scope:invalidated_hostage
								right_icon = scope:war_joiner
								scope:invalidated_hostage = {
									current_travel_plan = { cancel_travel_plan = yes }
									remove_variable = hostage_travelling_to_warden
								}
							}
						}
					}
				}
			}
			every_war_participant = {
				save_scope_as = participant
				if = {
					limit = {
						any_close_family_member = {
							is_travelling = yes
							var:hostage_travelling_to_warden ?= { is_at_war_with = scope:participant }
						}
					}
					every_close_family_member = {
						limit = {
							is_travelling = yes
							var:hostage_travelling_to_warden ?= { is_at_war_with = scope:participant }
						}
						save_scope_as = invalidated_hostage
						scope:participant = {
							send_interface_toast = {
								title = hostage_invalidated_during_travel_title
								left_icon = scope:invalidated_hostage
								right_icon = scope:invalidated_hostage.var:hostage_travelling_to_warden
								show_as_tooltip = {
									scope:invalidated_hostage.current_travel_plan = { cancel_travel_plan = yes }
								}
							}
						}
						scope:invalidated_hostage.var:hostage_travelling_to_warden = {
							send_interface_toast = {
								title = hostage_invalidated_during_travel_title
								left_icon = scope:invalidated_hostage
								right_icon = scope:participant
								scope:invalidated_hostage = {
									current_travel_plan = { cancel_travel_plan = yes }
									remove_variable = hostage_travelling_to_warden
								}
							}
						}
					}
				}
			}
		}
	}
	events = {
		war_event.3000 # Ally gets mad if you do not participate in their wars.
		religious_decision.0200 # Stop mediation
	}
}

# called when a war is started.
# same scopes are available in these events as in the CBs' on_declaration, this just fires for all CBs instead of a specific CB.

on_war_started = {
	effect = {
		scope:attacker = {
			if = {
				limit = {
					any_vassal_or_below = { is_ai = no }
				}
				every_vassal_or_below = {
					limit = { is_ai = no }
					send_interface_toast = {
						type = msg_war_declared_by_liege
						title = msg_war_declared_by_liege
						desc = msg_war_declared_by_liege_desc
						left_icon = scope:attacker
						right_icon = scope:defender
					}
				}
			}
			create_character_memory = {
				type = offensive_war
				
				participants = {
					other_party = scope:defender
				}
			}
			ordered_memory = {
				limit = {
					has_memory_type = offensive_war
					any_memory_participant = { this = scope:defender }
				}
				order_by = memory_creation_date
				save_scope_as = offensive_memory
				set_war_memory_casus_belli_effect = yes
			}
			# If they're in an activity, let them decide whether or not to cancel 
			activity_on_war_declared_events_effect  = yes
			# Achievements.
			# Warcraft
			# BP2 Attacker has defender's hostage
			if = {	
				limit = {
					any_warden_hostage = { home_court ?= scope:defender }
					# Let defenders go first
					NOT = {
						scope:defender = {
							any_warden_hostage = { home_court ?= scope:attacker }
						}
					}
				}
				trigger_event = { id = bp2_hostage_system.0100 days = 3 }
			}
			# Enroute hostage invalidation
			if = {
				limit = {
					any_close_family_member = {
						is_travelling = yes
						var:hostage_travelling_to_warden ?= { is_at_war_with = scope:attacker }
					}
				}
				every_close_family_member = {
					limit = {
						is_travelling = yes
						var:hostage_travelling_to_warden ?= { is_at_war_with = scope:attacker }
					}
					save_scope_as = invalidated_hostage
					scope:attacker = {
						send_interface_toast = {
							title = hostage_invalidated_during_travel_title
							left_icon = scope:invalidated_hostage
							right_icon = scope:invalidated_hostage.var:hostage_travelling_to_warden
							show_as_tooltip = {
								scope:invalidated_hostage.current_travel_plan = { cancel_travel_plan = yes }
							}
						}
					}
					scope:invalidated_hostage.var:hostage_travelling_to_warden = {
						send_interface_toast = {
							title = hostage_invalidated_during_travel_title
							left_icon = scope:invalidated_hostage
							right_icon = scope:attacker
							scope:invalidated_hostage = {
								current_travel_plan = { cancel_travel_plan = yes }
								remove_variable = hostage_travelling_to_warden
							}
						}
					}
				}
			}
		}
		scope:defender = {
			if = {
				limit = {
					any_vassal_or_below = { is_ai = no }
				}
				every_vassal_or_below = {
					limit = { is_ai = no }
					send_interface_toast = {
						type = msg_war_declared_on_liege
						title = msg_war_declared_on_liege
						desc = msg_war_declared_on_liege_desc
						left_icon = scope:defender
						right_icon = scope:attacker
					}
				}
			}
			#life is just a joke tradition stress loss
			if = {
				limit = {
					scope:defender.culture = { has_cultural_parameter = war_stress_loss }
				}
				stress_impact = {
					base = medium_stress_loss
				}
			}
			create_character_memory = {
				type = defensive_war
				
				participants = {
					other_party = scope:attacker
				}
			}
			ordered_memory = {
				limit = {
					has_memory_type = defensive_war
					any_memory_participant = { this = scope:attacker }
				}
				order_by = memory_creation_date
				copy_war_memory_casus_belli_effect = { MEMORY = scope:offensive_memory }
			}
			# If they're in an activity, let them decide whether or not to cancel 
			activity_on_war_declared_events_effect = yes
			# BP2 Defender has attacker's hostage
			if = {
				limit = {
					any_warden_hostage = { home_court ?= scope:attacker }
				}
				trigger_event = { id = bp2_hostage_system.0110 days = 3 }
			}
			# Enroute hostage invalidation
			if = {
				limit = {
					any_close_family_member = {
						is_travelling = yes
						var:hostage_travelling_to_warden ?= { is_at_war_with = scope:defender }
					}
				}
				every_close_family_member = {
					limit = {
						is_travelling = yes
						var:hostage_travelling_to_warden ?= { is_at_war_with = scope:defender }
					}
					save_scope_as = invalidated_hostage
					scope:defender = {
						send_interface_toast = {
							title = hostage_invalidated_during_travel_title
							left_icon = scope:invalidated_hostage
							right_icon = scope:invalidated_hostage.var:hostage_travelling_to_warden
							show_as_tooltip = {
								scope:invalidated_hostage.current_travel_plan = { cancel_travel_plan = yes }
							}
						}
					}
					scope:invalidated_hostage.var:hostage_travelling_to_warden = {
						send_interface_toast = {
							title = hostage_invalidated_during_travel_title
							left_icon = scope:invalidated_hostage
							right_icon = scope:defender
							scope:invalidated_hostage = {
								current_travel_plan = { cancel_travel_plan = yes }
								remove_variable = hostage_travelling_to_warden
							}
						}
					}
				}
			}
			# BP2 Hostage War Aid request event
			if = { # Exclude the following CBs
				limit = {
					scope:war = {
						NOR = {
							using_cb = peasant_war
							using_cb = populist_war
							using_cb = undirected_great_holy_war
							using_cb = directed_great_holy_war
						}
					}
					scope:attacker = {
						is_ai = yes
					}
					scope:defender = {
						has_bp2_dlc_trigger = yes
					}
				}
				if = {
					limit = {
						is_hostage_warden = yes
						# Check if the defender has any hostages whose home court is not the attacker and is not allied to the attacker
						any_warden_hostage = {
							opinion = {
								target = scope:defender
								value > 0
							}
							age > 9
							is_imprisoned = no
							is_incapable = no
							exists = home_court
							home_court = {
								age > 4
								is_ai = yes
								is_imprisoned = no
							}
							NOR = {
								home_court = scope:attacker
								home_court = {
									is_allied_to = scope:attacker
									is_allied_to = scope:defender
									is_at_war_with = scope:defender
								}
							}
						}
					}
					random_warden_hostage = {
						limit = {
							opinion = {
								target = scope:defender
								value > 0
							}
							age > 9
							is_imprisoned = no
							is_incapable = no
							exists = home_court
							home_court = {
								age > 4
								is_ai = yes
								is_imprisoned = no
							}
							NOR = {
								home_court ?= scope:attacker
								home_court ?= {
									is_allied_to = scope:attacker
									is_allied_to = scope:defender
									is_at_war_with = scope:defender
								}
							}
						}
						save_scope_as = hostage
						scope:hostage.home_court = {
							save_scope_as = home_court
						}
					}
					trigger_event = { id = bp2_yearly.6200 days = { 5 10 } }
				}
			}
		}
	}
}

# called for when a casus belli resolves in one of the following ways.
# same scopes are available in these events as in the CBs themselves, this just fires for all CBs instead of a specific CB.
# note that any events/effects fired here WILL NOT show up in the war summary tooltip; they fire at the same time as the war resolution, but are not actually part of the war resolution itself.

on_war_won_attacker = {
	# The war notifications are handled in `effect` instead of `events` due to order of operations.
	# `effect` fires on THIS tick, `events` fires on the NEXT tick, and the war gets destroyed between this tick and the next.
	effect = {
		# Save scopes for localization.
		scope:attacker = { save_scope_as = winner }
		scope:defender = { save_scope_as = loser }

		# Run scripted effect that iterates through all players and notifies them if necessary.
		notify_players_about_neighboring_war_resolution_effect = yes
		
		scope:war = {
			every_war_participant = {
				if = {
					limit = {
						is_ai = yes
						has_character_flag = delayed_cleanse
					}
					trigger_event = { id = game_rule.3 days = 1 }
				}
			}
			fp2_contract_assistance_war_pay_effect = yes # Pay out Contract Assistance money
		}

		# Add a variable to count recent losses
		if = {
			limit = { scope:defender = { has_variable = recently_lost_wars } }
			scope:defender = {
				save_temporary_scope_value_as = {
					name = prev_lost_wars
					value = var:recently_lost_wars
				}

				remove_variable = recently_lost_wars
				set_variable = {
					name = recently_lost_wars
					value =  {
						add = scope:prev_lost_wars
						add = 1
					}
					years = 10
				}
			}
		}
		else = {
			scope:defender = {
				set_variable = {
					name = recently_lost_wars
					value =  1
					years = 10
				}
			}
		}

		# Warcraft
		# Struggle Catalysts
		#scope:attacker = {
		#	if = {
		#		limit = {
		#			any_character_struggle = {
		#				involvement = involved
		#				activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
		#					CATALYST = catalyst_win_any_war_within_the_region
		#					CHAR = scope:defender
		#				}
		#			}
		#		}
		#		every_character_struggle = {
		#			limit = {
		#				activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
		#					CATALYST = catalyst_win_any_war_within_the_region
		#					CHAR = scope:defender
		#				}
		#			}
		#			activate_struggle_catalyst = {
		#				catalyst = catalyst_win_any_war_within_the_region
		#				character = scope:attacker
		#			}
		#		}
		#	}
		#}
		# End of Warcraft
		
		scope:attacker = {
			create_character_memory = {
				type = war_won
				participants = {
					loser = scope:defender
					winner = scope:attacker
				}
			}
			set_war_over_memory_casus_belli_effect = {
				STANCE = offensive
				OUTCOME = won
				SELF = attacker
				OTHER = defender
			}
		}
		
		scope:defender = {
			create_character_memory = {
				type = war_lost
				participants = {
					winner = scope:attacker
					loser = scope:defender
				}
			}
			set_war_over_memory_casus_belli_effect = {
				STANCE = defensive
				OUTCOME = lost
				SELF = defender
				OTHER = attacker
			}
		}
	}
}

on_war_won_defender = {
	effect = {
		# Save scopes for localization.
		scope:attacker = { save_scope_as = loser }
		scope:defender = { save_scope_as = winner }

		# Run scripted effect that iterates through all players and notifies them if necessary.
		notify_players_about_neighboring_war_resolution_effect = yes
		
		scope:war = {
			every_war_participant = {
				if = {
					limit = {
						is_ai = yes
						has_character_flag = delayed_cleanse
					}
					trigger_event = { id = game_rule.3 days = 1 }
				}
			}
			fp2_contract_assistance_war_pay_effect = yes
		}

		# Add a variable to count recent losses
		if = {
			limit = { scope:attacker = {  has_variable = recently_lost_wars } }
			scope:attacker = {
				save_temporary_scope_value_as = {
					name = prev_lost_wars
					value = var:recently_lost_wars
				}

				remove_variable = recently_lost_wars
				set_variable = {
					name = recently_lost_wars
					value =  {
						add = scope:prev_lost_wars
						add = 1
					}
					years = 10
				}
			}
		}
		else = {
			scope:attacker = {
				set_variable = {
					name = recently_lost_wars
					value =  1
					years = 10
				}
			}
		}
		
		scope:attacker = {
			create_character_memory = {
				type = war_lost
				participants = {
					winner = scope:defender
					loser = scope:attacker
				}
			}
			set_war_over_memory_casus_belli_effect = {
				STANCE = offensive
				OUTCOME = lost
				SELF = attacker
				OTHER = defender
			}
		}
		
		scope:defender = {
			create_character_memory = {
				type = war_won
				participants = {
					loser = scope:attacker
					winner = scope:defender
				}
			}
			set_war_over_memory_casus_belli_effect = {
				STANCE = defensive
				OUTCOME = won
				SELF = defender
				OTHER = attacker
			}
		}
	}
}

on_war_white_peace = {
	effect = {
		scope:war = {
			every_war_participant = {
				if = {
					limit = {
						is_ai = yes
						has_character_flag = delayed_cleanse
					}
					trigger_event = { id = game_rule.3 days = 1 }
				}
			}
			fp2_contract_assistance_war_pay_effect = yes # Pay out Contract Assistance money
		}
		scope:attacker = {
			create_character_memory = {
				type = war_white_peace_attacker
				participants = {
					attacker = scope:attacker
					defender = scope:defender
				}
			}
			set_war_over_memory_casus_belli_effect = {
				STANCE = offensive
				OUTCOME = white_peace_attacker
				SELF = attacker
				OTHER = defender
			}
		}
		
		scope:defender = {
			create_character_memory = {
				type = war_white_peace_defender
				participants = {
					attacker = scope:attacker
					defender = scope:defender
				}
			}
			set_war_over_memory_casus_belli_effect = {
				STANCE = defensive
				OUTCOME = white_peace_defender
				SELF = defender
				OTHER = attacker
			}
		}
	}
}

on_war_invalidated = {
	effect = {
		scope:attacker = {
			send_interface_message = {
				type = event_war_invalidated
				title = END_WAR_INVALIDATED_MESSAGE_TITLE
				desc = END_WAR_INVALIDATED_MESSAGE_DESC
				left_icon = scope:attacker
				right_icon = scope:defender
			}
		}
		
		scope:war = {
			every_war_participant = {
				if = {
					limit = {
						is_ai = yes
						has_character_flag = delayed_cleanse
					}
					trigger_event = { id = game_rule.3 days = 1 }
				}
			}
			fp2_contract_assistance_invalidated_effect = yes
		}

		#EP2 Accolade glory gain from ????
		if = {
			limit = {
				scope:attacker = {
					any_knight = {
						OR = {
							is_healthy = no
							is_imprisoned = yes
						}
					}
				}
				scope:defender = {
					any_knight = {
						OR = {
							is_healthy = no
							is_imprisoned = yes
						}
					}
				}
			}
			scope:attacker = { accolade_attacker_war_end_glory_gain_low_effect }
			scope:defender = { accolade_defender_war_end_glory_gain_low_effect }
		}
	}
}
