##################################################
#
#	Royal Court Court Grandeur Level & Amenity Decisions List
#
#	COURT GRANDEUR LEVELS
#
#	AMENITIES
#	Order Mass Eviction			-	Pay a little prestige to boot out all the guests from your palace.
#	Exoticise a Grand Hall		-	Arrange for a fancy new room with decor inspired by a culture you adore.
#
##################################################



#############################################
# Order Mass Eviction						#
# by Ewan Cowhig Croft						#
#############################################

# Pay a little prestige to boot out all the guests from your palace.
order_mass_eviction_decision = {
	picture = "gfx/interface/illustrations/decisions/decision_realm.dds"
	ai_check_interval = 0
	
	sort_order = 79

	desc = order_mass_eviction_decision_desc
	selection_tooltip = order_mass_eviction_decision_tooltip

	is_shown = {
		# Standard filter checks.
		is_landed = yes
		has_royal_court = yes
		# Has a suitable lack of rooms.
		amenity_level = {
			type = court_lodging_standards
			value <= medium_amenity_level
		}
	}

	is_valid = {
		# Restate the amenity level requirement so it's visible.
		amenity_level = {
			type = court_lodging_standards
			value <= medium_amenity_level
		}
		# At least one guest if you have more than the minimum amenities.
		trigger_if = {
			limit = {
				amenity_level = {
					type = court_lodging_standards
					value > low_amenity_level
				}
			}
			custom_description = {
				text = AT_LEAST_ONE_GUEST_TRIGGER
				any_pool_guest = { count >= 1 }
			}
		}
		# At least one guest or evictable  courtier if you have low amenities.
		trigger_else = {
			OR = {
				custom_description = {
					text = AT_LEAST_ONE_GUEST_TRIGGER
					any_pool_guest = { count >= 1 }
				}
				custom_description = {
					text = AT_LEAST_ONE_UNIMPORTANT_COURTIER_TRIGGER
					any_courtier = {
						order_mass_eviction_decision_evictable_courtier_trigger = yes
						count >= 1
					}
				}
			}
		}
	}

	is_valid_showing_failures_only = {
		is_alive = yes
		not = { exists = involved_activity }
		is_imprisoned = no
		has_contagious_deadly_disease_trigger = no
	}

	effect = {
		show_as_tooltip = { order_mass_eviction_decision_guests_only_effect = yes }
		if = {
			limit = {
				amenity_level = {
					type = court_lodging_standards
					value > low_amenity_level
				}
			}
			custom_tooltip = order_mass_eviction_decision.tt.courtier_option
		}
		trigger_event = ep1_decision.0101
	}

	cost = { prestige = order_mass_eviction_decision_cost_value }

	cooldown = { years = 20 }

	ai_potential = {
		# The AI can use the regular system; this decision is just for players.
		always = no
	}

	ai_will_do = {
		base = 0
	}
}

#############################################
# Invite a Court Linguist					#
# by James Beaumont							#
#############################################

#Invite a character to court who knows your court language
invite_a_linguist_self = {
	picture = "gfx/interface/illustrations/decisions/decision_recruitment.dds"
	ai_check_interval = 120
	sort_order = 98

	desc = invite_a_linguist_desc
	selection_tooltip = invite_a_linguist_self_tooltip

	is_shown = {
		# Standard filter checks.
		is_landed = yes
		has_royal_court = yes
		# Language checks.
		NOT = { has_court_language_of_culture = root.culture } # No need for linguist
		any_culture_global = { # Need somewhere to recruit linguist from
			exists = culture_head
			# Warcraft (tyrande doesnt have etc)
			root.liege = { has_royal_court = yes }
			root.liege = { has_court_language_of_culture = prev }
		}
	}

	is_valid_showing_failures_only = {
		age >= 6
		is_alive = yes
		not = { exists = involved_activity }
		is_imprisoned = no
		custom_tooltip = {
			text = scheming_already
			NOT = { # Is not currently learning a language and doesn't know court language
				any_scheme = { scheme_type = learn_language }	
			}
		}
		custom_tooltip = {
			text = linguist_already_present
			NOT = {
				any_courtier = { # You don't already have a linguist at court
					has_character_flag = court_linguist_flag
					knows_court_language_of = root
				}
			}
		}
	}

	effect = {
		save_scope_as = target_court_language
		custom_tooltip = {
			text = invite_a_linguist_tt_self
			trigger_event = ep1_decision.0201
		}
		if = {
			limit = {
				NOT = { knows_court_language_of = root.liege }
				any_scheme = { is_hostile = no }
			}
			custom_description_no_bullet = { text = learn_language_will_cancel_ongoing_schemes_tt }
		}
	}

	# No cost, cost is determined in the event

	cooldown = { years = 2 } # Shouldn't have much cooldown, courtiers can die unexpectedly and the player shouldn't have to wait long to get a new one

	ai_potential = {
		is_at_war = no
		# The AI should largely try to learn its own language
		has_royal_court = yes
		# Don't do it if you already speak your court language
		NOT = { knows_court_language_of = root }
	}

	ai_will_do = {
		base = 0
		modifier = {
			NOR = { # Is not currently learning a language
				knows_court_language_of = root
				any_scheme = { scheme_type = learn_language }
			}
			add = 100
		}
	}
}

#Invite a character to court who knows your liege's court language
invite_a_linguist_liege = {
	picture = "gfx/interface/illustrations/decisions/decision_recruitment.dds"
	ai_check_interval = 120
	sort_order = 97

	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					NOT = {
						liege = { has_court_language_of_culture = root.culture }
					}
					knows_language_of_culture = root.liege.culture 
				}
				desc = invite_a_linguist_for_children_desc
			}
			desc = invite_a_linguist_desc
		}
		
	}
	selection_tooltip = invite_a_linguist_liege_tooltip

	is_shown = {
		# Standard filter checks.
		is_landed = yes
		# Liege checks.
		is_independent_ruler = no
		liege = { has_royal_court = yes }
		# Language checks.
		trigger_if = {
			limit = { has_royal_court = yes }
			NOT = { has_same_court_language = liege } # Can use other decision in this case
		}
		NOR = {
			AND = { liege = { has_royal_court = yes has_court_language_of_culture = root.culture } } # No need to learn your own culture's language
			AND = {
				knows_language_of_culture = root.liege.culture 
				any_child = {
					count > 0
					knows_language_of_culture = root.liege.culture 
				}
			}
		}
		any_culture_global = { # Need somewhere to recruit linguist from
			exists = culture_head
			# Warcraft
			root.liege = { has_royal_court = yes }
			root.liege = { has_court_language_of_culture = prev }
		}
	}

	is_valid_showing_failures_only = {
		age >= 6
		is_alive = yes
		not = { exists = involved_activity }
		is_imprisoned = no
		custom_tooltip = {
			text = scheming_already
			NOT = { # Is not currently learning a language and doesn't know court language
				any_scheme = { scheme_type = learn_language }
			}
		}
		custom_tooltip = {
			text = linguist_already_present
			NOT = {
				any_courtier = { # You don't already have a linguist at court
					has_character_flag = court_linguist_flag
					knows_court_language_of = root.liege
				}
			}
		}
	}

	effect = {
		liege = { save_scope_as = target_court_language }
		save_scope_value_as = { name = language_scheme_type value = flag:liege }
		custom_tooltip = {
			text = invite_a_linguist_tt_liege
			trigger_event = ep1_decision.0201
		}
		if = {
			limit = {
				NOT = { knows_court_language_of = root.liege }
				any_scheme = { is_hostile = no }
			}
			custom_description_no_bullet = { text = learn_language_will_cancel_ongoing_schemes_tt }
		}
	}

	# No cost, cost is determined in the event

	cooldown = { years = 2 } # Shouldn't have much cooldown, courtiers can die unexpectedly and the player shouldn't have to wait long to get a new one

	ai_potential = {
		is_at_war = no
		exists = root.liege
		root.liege = {
			has_royal_court = yes
		}
		# Don't do it if you already speak your liege's court language
		NOT = { knows_court_language_of = root.liege }
	}

	ai_will_do = {
		base = 0
		modifier = {
			# Is not currently learning a language
			exists = root.liege
			NOR = { 
				any_scheme = { scheme_type = learn_language }
				knows_court_language_of = root.liege
			}
			add = 100
		}
	}
}

#############################################
# Exoticise a Grand Hall					#
# by Ewan Cowhig Croft						#
#############################################

# Arrange for a major room to be remodelled with decor inspired by a more grandiose culture.
exoticise_a_grand_hall_decision = {
	picture = "gfx/interface/illustrations/decisions/decision_knight_kneeling.dds"
	ai_check_interval = 120
	
	sort_order = 80

	desc = exoticise_a_grand_hall_decision_desc
	selection_tooltip = exoticise_a_grand_hall_decision_tooltip

	is_shown = {
		# Standard filter checks.
		is_landed = yes
		has_royal_court = yes
		# Has suitably amazing rooms.
		amenity_level = {
			type = court_lodging_standards
			value >= very_high_amenity_level
		}
		# Grandeur requirements.
		OR = {
			# AI need to border a player or an empire.
			AND = {
				is_ai = yes
				OR = {
					any_player = {
						has_royal_court = yes
						any_neighboring_and_across_water_realm_same_rank_owner = { this = root }
						any_neighboring_and_across_water_top_liege_realm_owner = { this = root }
					}
					any_neighboring_and_across_water_top_liege_realm_owner = { this.primary_title.tier = tier_empire }
				}
			}
			# Players handle this in the is_valid block.
			is_ai = no
		}
	}

	is_valid = {
		# Players just have to have royal courts nicer than theirs.
		trigger_if = {
			limit = { is_ai = no }
			OR = {
				custom_description = {
					text = exoticise_a_grand_hall_decision.tt.any_valid_empire
					any_empire = { exoticise_a_grand_hall_decision_list_builder_guts_trigger = yes }
				}
				custom_description = {
					text = exoticise_a_grand_hall_decision.tt.any_valid_kingdom
					any_kingdom = { exoticise_a_grand_hall_decision_list_builder_guts_trigger = yes }
				}
			}
		}
	}

	is_valid_showing_failures_only = {
		is_alive = yes
		not = { exists = involved_activity }
		is_imprisoned = no
	}

	effect = {
		# Save the current gold count for refund purposes.
		## Since this is a large & variable gold cost, we use a firmer refund system to prevent player market manipulation.
		set_variable = {
			name = exoticise_a_grand_hall_decision_refund_value
			value = exoticise_a_grand_hall_decision_cost_value
		}
		# Trigger the decision.
		trigger_event = ep1_decision.0111
		# And some flavour.
		custom_tooltip = exoticise_a_grand_hall_decision.tt.you_ponder
	}

	cost = { gold = exoticise_a_grand_hall_decision_cost_value }

	cooldown = { years = 10 }

	ai_potential = {
		# Keep this restricted to a few likely types
		OR = {
			has_trait = humble
			has_trait = gregarious
			has_trait = profligate
			has_trait = adventurer
		}
		# And they need the gold to make the purchase at all.
		short_term_gold >= exoticise_a_grand_hall_decision_cost_value
	}

	ai_will_do = {
		base = 0
		# We add 25% per each of the qualifying traits they have.
		modifier = {
			add = 25
			has_trait = humble
		}
		modifier = {
			add = 25
			has_trait = gregarious
		}
		modifier = {
			add = 25
			has_trait = profligate
		}
		modifier = {
			add = 25
			has_trait = adventurer
		}
	}
}
