# Called from code after history generation
# Empty scope
on_game_start = {
	events = {
		fp1_scandinavian_adventurers.0004	# FP1 - Organise Norse adventurers.
		fp1_scandinavian_adventurers.0011	# FP1 - Corral famous Norse adventurers that haven't done much yet.
		fp1_scandinavian_adventurers.0021	# FP1 - Mark game-start prioritised adventurers.
		#Guaranteed historical artifacts fixed spawning
		debug_portraits.1 					# Debug portraits for animation testing
		# Warcraft
		# easteregg_event.0001				# Charna and Jakub duel.
		WCHEA.2000							# Sets up ancient characters' ages (So the arent 1 year old)
		# End of Warcraft
	}

	effect = {
		# Warcraft
		check_available_government_game_start_effect = yes
		# End of Warcraft
		
		#Epidemics 3 months grace
		set_global_variable = {
			name = start_epidemic_grace
			value = yes
			months = 3
		}

		### 867 - RADHANITES IN KHAZARIA ###
		# Warcraft
		# End of Warcraft
		### 867 - WRATH OF THE NORTHMEN ###
		#Æthelred dying (probably)
		# Warcraft
		# End of Warcraft

		#Alfred the Great becoming the Great
		# Warcraft
		# End of Warcraft

		### 867 - THE GREAT ADVENTURERS ###
		# Warcraft
		# End of Warcraft

		### HRE SETUP ###
		# Warcraft
		# End of Warcraft

		### RELIGIOUS THINGS ###
		# Warcraft
		every_religion_global = {
			limit = { like_islam_religion_trigger = yes }
			every_faith = {
				every_holy_site = {
					limit = {
						title_province = {
							has_special_building_slot = no
						}
					}
					title_province = {
						add_special_building_slot = holy_site_mosque_01
					}
				}
			}
		}
		# End of Warcraft
		# Warcraft
		every_religion_global = {
			limit = { like_christianity_religion_trigger = yes }
			every_faith = {
				every_holy_site = {
					limit = {
						title_province = {
							has_special_building_slot = no
						}
					}
					title_province = {
						add_special_building_slot = holy_site_cathedral_01
					}
				}
			}
		}
		# End of Warcraft
		every_religion_global = {
			limit = {
				OR = {
					like_hinduism_religion_trigger = yes
					like_buddhism_religion_trigger = yes
					like_jainism_religion_trigger = yes
					like_tani_religion_trigger = yes
					like_bon_religion_trigger = yes
				}
			}
			every_faith = {
				every_holy_site = {
					limit = {
						title_province = {
							has_special_building_slot = no
						}
					}
					title_province = {
						add_special_building_slot = holy_site_indian_grand_temple_01
					}
				}
			}
		}
		every_religion_global = {
			limit = {
				like_pagan_religion_trigger = yes
			}
			every_faith = {
				every_holy_site = {
					limit = {
						title_province = {
							has_special_building_slot = no
						}
					}
					title_province = {
						add_special_building_slot = holy_site_pagan_grand_temple_01
					}
				}
			}
		}
		every_religion_global = {
			every_faith = {
				every_holy_site = {
					limit = {
						title_province = {
							has_special_building_slot = no
						}
					}
					title_province = {
						add_special_building_slot = holy_site_other_grand_temple_01
					}
				}
			}
		}

		# Warcraft
		if = {
			limit = { game_start_date < 605.5.2 }
			title:d_theramore = { set_title_name = rocky_island_custom_name generate_coa = yes }
			title:c_theramore = { set_title_name = rocky_island_custom_name generate_coa = yes }
			title:b_theramore = { set_title_name = rocky_island_custom_name }
		}
		else = { title:d_theramore = { set_color_from_title = title:b_theramore } }
		
		
		### Thunder King Crisis
		if = { # Make sure Thunder King wont spawn on this gamerule
			limit = {
				has_game_rule = wc_thunder_king_crisis_never
			}
			set_global_variable = {
				name = no_thunder_king
				value = yes
			}
			debug_log = "Thunder King will never spawn this game"
		}
		else_if = { # Roll wether Thunder King will ever spawn at all
			limit = {
				has_game_rule = wc_thunder_king_crisis_default
			}
			random = { # Chance he will never spawn randomly
				chance = 40
				set_global_variable = {
					name = no_thunder_king
					value = yes
				}
				debug_log = "Thunder King will never spawn this game"
			}
		}
		
		### GRANDEUR ###
		#Royal Court: Set starting Grandeur to be the same as Expected
		if = {
			limit = {
				has_dlc_feature = royal_court
			}
			every_character_with_royal_court = {
				set_current_court_grandeur = court_grandeur_minimum_expected
				apply_hold_court_grace_effect = yes
				# Stops Hold Court reminders at game start
				set_variable = {
					name = last_hold_court_date
					value = current_year
				}
			}
		}
		# Warcraft - Removed struggle stuff

		### REGENCIES ###
		# Pre-defined historic regencies setup.
		## NOTE: we do these first to avoid feed messages getting weird due to regents being replaced immediately after getting their position.
		# character:40905 = { designate_diarch = character:40376 }
		# remove_generated_diarch_consequences_effect = {
		# 	NEW_DIARCH = character:40376
		# 	LIEGE = character:40905
		# }
		# HERE WARCRAFT REGENCIES like this
		
		if = {
			limit = { game_start_date = 583.1.1 }
			# Designate some regents.
			## King Llane of Stormwind & Anduin Lothar
			character:2 = { designate_diarch = character:1008 }
			remove_generated_diarch_consequences_effect = {
				NEW_DIARCH = character:1008
				LIEGE = character:2
			}
			character:2 = { set_diarch = character:1008 }
		}
		if = {
			limit = { game_start_date < 610.1.15 game_start_date > 586.1.1 }
			# Designate some regents.
			## King Varian of Stormwind & Bolvar Fordragon
			character:8 = { designate_diarch = character:60686 }
			remove_generated_diarch_consequences_effect = {
				NEW_DIARCH = character:60686
				LIEGE = character:8
			}
			character:8 = { set_diarch = character:60686 }
		}
		if = {
			limit = { game_start_date < 603.7.29 game_start_date > 583.1.1 }
			# Designate some regents.
			## King Anasterian of Quel'thalas & Lor'themar Theron
			character:42002 = { designate_diarch = character:42075 }
			remove_generated_diarch_consequences_effect = {
				NEW_DIARCH = character:42075
				LIEGE = character:42002
			}
			character:42002 = { set_diarch = character:42075 }
		}
		if = {
			limit = { game_start_date > 583.1.1 game_start_date < 603.7.29 }
			# Designate some regents.
			## King Kael'thas of Quel'thalas & Lor'themar Theron
			character:42003 = { designate_diarch = character:42075 }
			remove_generated_diarch_consequences_effect = {
				NEW_DIARCH = character:42075
				LIEGE = character:42003
			}
			character:42003 = { set_diarch = character:42075 }
		}
		if = { #added in on_game_start on action, because it gives error in error.log in 2nd-3d bookmark, idk
			limit = { game_start_date > 591.11.1 }
			character:10014 = {
				add_trait = in_ice_prison
			}
		}
		if = {
			limit = { game_start_date < 604.1.1 game_start_date > 591.11.1 }
			character:10014 = { designate_diarch = character:430000 }
			remove_generated_diarch_consequences_effect = {
				NEW_DIARCH = character:430000
				LIEGE = character:10014
			}
			character:10014 = { set_diarch = character:430000 }
		}
		if = {
			limit = { game_start_date = 605.6.6 }
			character:10014 = { designate_diarch = character:60003 }
			remove_generated_diarch_consequences_effect = {
				NEW_DIARCH = character:60003
				LIEGE = character:10014
			}
			character:10014 = { set_diarch = character:60003 }
		}
		
		# Set up anyone who should be in a regency at start whether we have sources or not.
		## If you start as a child, incapable, or imprisoned, you get a regency.
		every_ruler = {
			limit = {
				OR = {
					is_adult = no
					is_incapable = yes
					is_imprisoned = yes
					government_has_flag = government_is_clan
				}
			}
			# We don't want to check over so many characters *twice*, so we check again inside the block to determine what type of regency to put 'em in.
			## Temporary Regencies.
			if = {
				limit = { is_imprisoned = yes }
				trigger_event = {
					id = diarchy.0001
					delayed = yes
				}
			}
			if = {
				limit = { government_has_flag = government_is_clan }
			}
			## Entrenched Regencies.
			else = {
				trigger_event = {
					id = diarchy.0011
					delayed = yes
				}
			}
		}
		
		every_ruler = {
			limit = { NOT = { has_trait = race } }
			copy_race_effect = { CHARACTER = this }
			trigger_race_giving_no_gene_effect = yes
		}
		
		# Stormwind name game rule
		title:k_stormwind = {
			if = {
				limit = {
					has_game_rule = azeroth_name_of_stormwind
				}
				set_title_name = e_azeroth
			}
			else_if = {
				limit = {
					has_game_rule = azerothien_name_of_stormwind
				}
				set_title_name = k_azerothien
			}
		}
		culture:azerothian = {
			if = {
				limit = {
					has_game_rule = azeroth_name_of_stormwind
				}
				set_culture_name = {
					noun = azerothian_alt
					collective_noun = azerothian_alt_collective_noun
					prefix = azerothian_alt_prefix
				}
			}
			else_if = {
				limit = {
					has_game_rule = azerothien_name_of_stormwind
				}
				set_culture_name = {
					noun = azerothien
					collective_noun = azerothien_collective_noun
					prefix = azerothien_prefix
				}
			}
		}
		
		### GAME RULE: Alternate universe
		if = {
			limit = { has_game_rule = random_ruler_placement_on }
			game_rule_random_ruler_placement_effect = yes
			every_independent_ruler = {
				limit = { highest_held_title_tier = tier_empire is_landed = yes }
				every_vassal = {
					limit = { highest_held_title_tier = tier_kingdom NOT = { faith = prev.faith } vassal_contract_has_modifiable_obligations = yes }
					vassal_contract_set_obligation_level = {
						type = religious_rights
						level = 1
						
					}
				}
			}
		}

		# Warcraft
		every_county = {
			save_scope_as = county
			holder = {
				save_scope_as = councillor_liege
			}

			corrupt_county_effect = { ON_START = yes }
		}
	}
	# Warcraft - FP3 Struggle stuff removed
}

# Like on_game_start, except it is called once the host (or player, in single player) exits the lobby. Good for anything where you need to know who the players are, or what the game rules are
on_game_start_after_lobby = {
	effect = {
		# Unions, we have problems through history because of variables
		if = {
			limit = { has_game_rule = random_ruler_placement_off }
			union_members_on_game_start_effect = yes
		}
		else = {
			union_members_on_game_start_alternate_universe_effect = yes
		}
		# Warcraft
		every_living_character = {
			trigger_on_game_start_effect = yes
		}
		# Make sure that Realm Priests are landed theocrats where it makes sense
		every_ruler = {
			limit = {
				highest_held_title_tier >= tier_duchy
			}
			if = {
				limit = {
					exists = cp:councillor_court_chaplain
					cp:councillor_court_chaplain = {
						is_ruler = no
					}
					faith = { has_doctrine = doctrine_clerical_succession_spiritual_fixed_appointment }
					any_vassal = {
						is_physically_able_adult = yes
						is_councillor = no
						government_has_flag = government_is_theocracy
						can_be_court_chaplain_trigger = { COURT_OWNER = liege }
						faith = liege.faith
					}
				}
				random_vassal = {
					limit = {
						is_physically_able_adult = yes
						is_councillor = no
						government_has_flag = government_is_theocracy
						can_be_court_chaplain_trigger = { COURT_OWNER = liege }
						faith = liege.faith
					}
					weight = {
						base = 1
						modifier = {
							add = 1000
							faith.religious_head ?= this
						}
						modifier = {
							add = learning
						}
						modifier = {
							add = primary_title.tier
						}
					}
					liege = {
						assign_councillor_type = {
							type = councillor_court_chaplain
							remove_existing_councillor = yes
							target = prev
						}
					}
				}
			}
			if = {
				limit = {
					is_landless_adventurer = yes
				}
				if = { limit = { has_realm_law = crown_authority_0 } remove_realm_law = crown_authority_0 }
			}
		}
	
		### GAME RULE: VIEW ON SAME-SEX RELATIONS
		if = {
			limit = { has_game_rule = accepted_same_sex_relations }
			game_rule_accepted_same_sex_relations_effect = yes
		}

		### GAME RULE: RANDOM RULER PLACEMENT
		if = {
			limit = { NOT = { has_game_rule = random_ruler_placement_off } }
			game_rule_random_ruler_placement_effect = yes
		}

		### GAME RULE: RANDOMIZE FAITH
		if = {
			limit = { has_game_rule = randomized_faiths_on }
			game_rule_randomize_faith_effect = yes
		}

		### GAME RULE: FAITH ACCEPTANCE
		if = {
			limit = { has_game_rule = full_faith_acceptance }
			game_rule_faith_acceptance_effect = yes
		}

		### GAME RULE: GENDER EQUALITY ###
		if = {
			limit = { has_game_rule = full_gender_equality }
			game_rule_full_gender_equality_effect = yes
		}
		else_if = {
			limit = { has_game_rule = inversed_gender_equality }
			game_rule_inversed_gender_equality_effect = yes
		}

		### GAME RULE: SEXUALITY DISTRIBUTION ###
		if = {
			limit = { NOT = { has_game_rule = sexuality_distribution_default } }
			game_rule_sexuality_distribution_effect = yes
		}
		else = { # So that children 10+ starts with a sexuality
			child_sexuality_distribution_effect = yes
		}
		### GAME RULE: EXTRA ADMINS
		## We'll be doing some excessive triggers below in a bid to lightly future-proof + error-spam mods less, don't worry about it.
		### We handle players after the lobby.
		# Historic chars.
		apply_historic_administrative_game_rule_effect = yes
		# Players.
		if = {
			limit = { has_dlc_feature = roads_to_power }
			if = {
				limit = {
					NOT = { has_game_rule = historicity_extra_admin_player_wherever_gameplay_not_administrative }
				}
				if = {
					limit = { has_game_rule = historicity_extra_admin_player_wherever_alt_historic_always }
					every_player = {
						limit = {
							highest_held_title_tier >= tier_kingdom
							NOR = {
								government_has_flag = government_is_administrative
								government_has_flag = government_is_landless_adventurer
							}
						}
						convert_to_administrative_from_feudalism_game_start_effect = yes
					}
				}
				else_if = {
					limit = { has_game_rule = historicity_extra_admin_player_wherever_alt_historic_with_august_trait }
					every_player = {
						limit = {
							highest_held_title_tier >= tier_kingdom
							NOR = {
								government_has_flag = government_is_administrative
								government_has_flag = government_is_landless_adventurer
							}
							has_trait = august
						}
						convert_to_administrative_from_feudalism_game_start_effect = yes
					}
				}
			}
		}

		# Give Ruler Designer characters regencies.
		every_in_global_list = {
			variable = rd_chars_needing_regencies
			trigger_event = diarchy.0011
			# Aaaand clean the list.
			save_temporary_scope_as = char_temp
			remove_list_global_variable = {
				name = rd_chars_needing_regencies
				target = scope:char_temp
			}
		}

		### ACHIEVEMENT: FROM RAGS TO RICHES
		# Warcraft - Removing
		# End of Warcraft

		### ACHIEVEMENT (FP2): Holidaying in Iberia
		# Warcraft - Removing
		# End of Warcraft

		### ACHIEVEMENT TRACKING FOR STARTING CHARACTERS
		# Warcraft - Removing
		# End of Warcraft
	
		title:k_goblin_bankers.holder = {
			create_story = {
				type = story_cycle_goblin_loan
			}
		}


		#Set starting cultural acceptance
		# Warcraft

		### CE1 LEGITIMACY SETUP ###
		every_ruler = {
			limit = {
				has_legitimacy = yes
			}
			add_legitimacy = base_legitimacy_value
		}
		### EP3 SETUP ###
		if = {
			limit = { has_ep3_dlc_trigger = yes }
			### EP3 LAAMP SETUP ###
			# Resources.
			every_independent_ruler = {
				limit = { is_landless_adventurer = yes }
				# Cash.
				add_gold = {
					value = {
						value = 0
						add = prestige
						add = piety
						divide = 10
					}
				}
				save_temporary_scope_as = adventurer_scope
				# Set CoA
				primary_title = { set_coa = scope:adventurer_scope.house }
				# Cleanup characters
				every_councillor = {
					if = {
						limit = {
							NOR = {
								has_council_position = councillor_court_chaplain
								has_council_position = councillor_spouse
							}
						}
						scope:adventurer_scope = {
							fire_councillor = prev
						}
						remove_opinion = {
							modifier = fired_from_council_opinion
							target = scope:adventurer_scope
						}
					}
					else_if = {
						limit = {
							NOR = {
								is_close_or_extended_family_of = prev
								has_relation_lover = prev
								has_relation_friend = prev
								is_consort_of = prev
								has_council_position = councillor_spouse
							}
						}
						death = {
							death_reason = death_vanished
						}
					}
				}
				# Evict everyone who isn't your family from your camp.
				every_courtier = {
					limit = {
						prev = { save_temporary_scope_as = char_temp }
						NOR = {
							dynasty ?= scope:char_temp.dynasty
							is_imprisoned_by = scope:char_temp
							# Plus any relations, who are presumably meant to be here.
							has_important_relationship_with_character_trigger = { CHARACTER = scope:char_temp }
							# Catch bastards and such that may be left over.
							is_close_or_extended_family_of = scope:char_temp
						}
					}
					move_to_pool = yes
				}
				# Courtiers.
				trigger_event = ep3_laamps.1001
			}
			# Starting camp purposes.
			# TODO WARCRAFT: Add camp purposes for the various ADVENTURERS
			#Example
			# character:90028 ?= {
			# 	if = {
			# 		limit = { is_alive = yes }
			# 		add_realm_law_skip_effects = camp_purpose_brigands
			# 	}
			# 	# Setup event for his story
			# 	trigger_event = {
			# 		id = ep3_laamps.5999
			# 		days = { 1 2 }
			# 	}
			# }

			every_independent_ruler = {
				limit = { is_landless_adventurer = yes }
				# C... food.
				domicile = { change_provisions = starting_provisions_value }
				# Contracts
				if = {
					limit = { is_ai = no }
					# Set up additional firing contracts.
					player_adventurer_contract_generation_on_wait_in_place_effect = yes
					#generate contracts if you are far away from your previous location
					player_adventurer_contract_generation_on_domicile_moved_effect = yes
				}
				else = {
					create_story = { type = story_adventurer_ai }
					trigger_event = {
						on_action = on_adventurer_ai_new_employer_arrival
						days = { 10 30 }
					}
				}
				# Sort our starting flavourisation.
				if = {
					limit = { has_realm_law = camp_purpose_mercenaries }
					set_variable = flavourise_camp_purpose_mercenaries
				}
				else_if = {
					limit = { has_realm_law = camp_purpose_wanderers }
					set_variable = flavourise_camp_purpose_wanderers
				}
				else_if = {
					limit = { has_realm_law = camp_purpose_scholars }
					set_variable = flavourise_camp_purpose_scholars
				}
				else_if = {
					limit = { has_realm_law = camp_purpose_explorers }
					set_variable = flavourise_camp_purpose_explorers
				}
				else_if = {
					limit = { has_realm_law = camp_purpose_brigands }
					set_variable = flavourise_camp_purpose_brigands
				}
				else_if = {
					limit = { has_realm_law = camp_purpose_legitimists }
					set_variable = flavourise_camp_purpose_legitimists
				}
				# And tally our numbers for performance purposes.
				add_to_global_variable_list = {
					name = laamps_tally
					target = this.primary_title
				}
			}
			### EP3 ADMIN SETUP ###
			every_independent_ruler = {
				limit = { government_allows = administrative }
				save_scope_as = top_liege
				### EP3 NOBLE FAMILIES & DOMICILE SETUP ###
				random_held_title = { # May be removed once every_noble_family includes liege (TIT-51212)
					limit = { is_noble_family_title = yes }
					set_coa = scope:top_liege.house
				}
				every_noble_family = {
					# Ensure Noble Family CoA match House
					set_coa = holder.house
					# Ensure holders of historical noble family titles are the default house heads
					holder ?= {
						save_scope_as = nf_holder
						if = {
							limit = { is_landed = yes }
							capital_province = { save_scope_as = domicile_location }
						}
						# TODO_CD_EP3: remove once TIT-51212 is resolved and confirmed
						house ?= {
							if = {
								limit = { house_head != scope:nf_holder }
								set_house_head = scope:nf_holder
							}
						}
					}
					set_color_from_title = scope:nf_holder.capital_county
				}
			}
			# Byzantium naming [Warcraft - removed]
			# Saharan stuff. [Warcraft - removed]
			# 1066 Buildings [Warcraft - removed]
			# 1178 Buildings [Warcraft - removed]
			every_domicile = {
				# if = { # Left in if we want adventurers to spawn with stuff
				# 	limit = {
				# 		is_domicile_type = camp
				# 	}
				# 	add_domicile_building = camp_main_02
				# 	add_domicile_building = camp_main_03
				# 	random_list = {
				# 		10 = {
				# 			add_domicile_building = supply_tent_01
				# 			add_domicile_building = supply_tent_02
				# 			random_list = {
				# 				10 = {
				# 					add_domicile_building = supply_tent_sutler
				# 				}
				# 				10 = {
				# 					add_domicile_building = supply_tent_mender
				# 				}
				# 				10 = {
				# 					add_domicile_building = supply_tent_smithy
				# 				}
				# 				10 = {
				# 					add_domicile_building = supply_tent_arsenal
				# 				}
				# 			}
				# 		}
				# 		10 = {
				# 			add_domicile_building = barber_tent_01
				# 			add_domicile_building = barber_tent_02
				# 			random_list = {
				# 				10 = {
				# 					add_domicile_building = barber_tent_surgeons_tools
				# 				}
				# 				10 = {
				# 					add_domicile_building = barber_tent_dentists_tools
				# 				}
				# 				10 = {
				# 					add_domicile_building = barber_tent_torturers_tools
				# 				}
				# 			}
				# 		}
				# 		10 = {
				# 			add_domicile_building = baggage_train_01
				# 			add_domicile_building = baggage_train_02
				# 			random_list = {
				# 				10 = {
				# 					add_domicile_building = baggage_train_ample_steeds
				# 				}
				# 				10 = {
				# 					add_domicile_building = baggage_train_porters
				# 				}
				# 				10 = {
				# 					add_domicile_building = baggage_train_trackers
				# 				}
				# 				10 = {
				# 					add_domicile_building = baggage_train_kennel
				# 				}
				# 			}
				# 		}
				# 	}
				# 	random_list = {
				# 		10 = {
				# 			add_domicile_building = mess_tent_01
				# 			add_domicile_building = mess_tent_02
				# 			random_list = {
				# 				10 = {
				# 					add_domicile_building = mess_tent_herbalists
				# 				}
				# 				10 = {
				# 					add_domicile_building = mess_tent_brewers
				# 				}
				# 				10 = {
				# 					add_domicile_building = mess_tent_curers
				# 				}
				# 				10 = {
				# 					add_domicile_building = mess_tent_bakers
				# 				}
				# 				10 = {
				# 					add_domicile_building = mess_tent_cooks
				# 				}
				# 			}
				# 		}
				# 		10 = {
				# 			add_domicile_building = camp_fire_01
				# 			add_domicile_building = camp_fire_02
				# 			random_list = {
				# 				10 = {
				# 					add_domicile_building = camp_fire_trailing_musicians
				# 				}
				# 				10 = {
				# 					add_domicile_building = camp_fire_wandering_poets
				# 				}
				# 				10 = {
				# 					add_domicile_building = camp_fire_capering_fools
				# 				}
				# 				10 = {
				# 					add_domicile_building = camp_fire_libations_for_the_lost
				# 				}
				# 			}
				# 		}
				# 	}
				# 	random_list = {
				# 		10 = {
				# 			add_domicile_building = camp_perimeter_01
				# 			add_domicile_building = camp_perimeter_02
				# 			random_list = {
				# 				10 = {
				# 					add_domicile_building = camp_perimeter_good_siting
				# 				}
				# 				10 = {
				# 					add_domicile_building = camp_perimeter_fixed_layout
				# 				}
				# 			}
				# 		}
				# 		10 = {
				# 			add_domicile_building = proving_grounds_01
				# 			add_domicile_building = proving_grounds_02
				# 		}
				# 	}
				# }
				if = {
					limit = {
						is_domicile_type = estate
					}
					if = {
						limit = {
							NOT = { has_domicile_building_or_higher = estate_main_02 }
							owner.culture ?= { has_innovation = innovation_city_planning }
						}
						add_domicile_building = estate_main_02
						add_random_internal_estate_building = yes
					}
					if = {
						limit = {
							has_domicile_building = estate_main_02
							NOT = { has_domicile_building_or_higher = estate_main_03 }
							owner.culture ?= { has_innovation = innovation_manorialism }
						}
						add_domicile_building = estate_main_03
						while = {
							count = 2
							add_random_internal_estate_building = yes
						}
					}
					
					fill_external_estate_building_effect = yes
					# Warcraft - Todo: make an effect to add estate buildings here if needed
				}
			}
		}
		# Purge family titles if Admin isn't enabled
		if = {
			limit = {
				NOT = { has_dlc_feature = roads_to_power }
			}
			every_ruler = {
				save_temporary_scope_as = this_ruler
				every_held_title = {
					limit = {
						has_title_law = noble_family_succession_law
					}
					scope:this_ruler = {
						destroy_title = prev
					}
				}
			}
		}
		# Conquerors
		#todo warcraft adapt
		#example
		# character:144133 ?= {
		# 	if = {
		# 		limit = {
		# 			is_alive = yes
		# 			NOT = { has_game_rule = no_conquerors_frequency }
		# 		}
		# 		create_story = story_conqueror
		# 	}
		# }
		
	}

	events = {
		game_rule.1000	#Autopopulate families.
		# Warcraft
		# game_rule.1011	#Hungarian Migration management.
		# End of Warcraft
		historical_artifacts.0023			# Historical Artifacts Generator
		# Warcraft
		WCHOI.1		#Starts the Horde Invasion
		# End of Warcraft
	}
}