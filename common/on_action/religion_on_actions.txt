#On actions related to religion

# Code on-action: character creates a faith
# Root is the creator
# scope:old_faith is the faith they used to have
on_faith_created = {
	effect = {
		# If you have a legend maybe we change it?
		if = {
			limit = {
				has_legend_chapter_trigger = { CHAPTER = opening }
				promoted_legend ?= {
					exists = legend_property:faith
					exists = legend_property:religion
				}
				NOT = {
					promoted_legend ?= {
						has_legend_chapter = {
							name = opening
							localization_key = legend_chapter_opening_new_faith
						}
					}
				}
			}
			send_interface_toast = {
				title = legend_chapter_change_toast
				left_icon = root
				promoted_legend = {
					set_legend_chapter = {
						name = opening
						localization_key = legend_chapter_opening_new_faith
					}
				}
			}
		}
		else_if = {
			limit = {
				has_legend_chapter_trigger = { CHAPTER = opening }
			}
			random = {
				chance = 75
				send_interface_toast = {
					title = legend_chapter_change_toast
					left_icon = root
					promoted_legend = {
						set_legend_chapter = {
							name = opening
							localization_key = legend_chapter_opening_new_faith_generic
						}
					}
				}
			}
		}
		scope:old_faith = {
			if = {
				limit = { has_doctrine_parameter = unreformed }
				set_variable = { name = has_been_reformed }
				root = {
					if = {
						limit = {
							NOT = { has_character_flag = reformer_legend }
							has_dlc_feature = legends
						}
						add_character_flag = reformer_legend
						create_legend_seed = {
							type = holy
							quality = famed
							chronicle = new_faith_legend
							properties = {
								reformer = root
								faith = root.faith
								religion = root.religion
								reason = flag:pagan_reformation
							}
						}
					}
				}
			}
			else = {
				root = {
					if = {
						limit = {
							NOT = { has_character_flag = reformer_legend }
							has_dlc_feature = legends
						}
						add_character_flag = reformer_legend
						create_legend_seed = {
							type = holy
							quality = famed
							chronicle = new_faith_legend
							properties = {
								reformer = root
								faith = root.faith
								religion = root.religion
								reason = flag:new_faith
							}
						}
					}
				}
			}
		
			root = { play_music_cue = "mx_cue_faith_conversion" }
		}
		set_variable = {
			name = has_created_a_faith
		}
		# Set original faith this one was based on
		if = {
			limit = {
				exists = scope:old_faith.founder
				scope:old_faith.founder = { has_variable = foundational_faith }
			}
			set_variable = {
				name = foundational_faith
				value = scope:old_faith.founder.var:foundational_faith
			}
		}
		else = {
			set_variable = {
				name = foundational_faith
				value = scope:old_faith
			}
		}
		check_for_equal_doctrine_effect = yes
		
		# Warcraft
		# Set original faith this one was based on inside of the faith itself
		if = {
			limit = {
				scope:old_faith = { has_variable = parent_faith }
			}
			faith = {
				set_variable = {
					name = parent_faith
					value = scope:old_faith.var:parent_faith
				}
			}
		}
		else = {
			faith = {
				set_variable = {
					name = parent_faith
					value = scope:old_faith
				}
			}
		}
	}

	events = {
		faith_conversion.0001 # Convert capital county
		faith_conversion.0003 # Convert close family
		faith_creation.0001 # Temporal rel head setup
		faith_creation.0002 # Spiritual rel head setup
		faith_creation.0003 # Faith flags
		faith_creation.1000 # Notification event
	}
}

# Code on-action: character converts faith. Only fired when using the convert window, or the script effect that uses the same logic
# Root is the converter
# scope:old_faith is the faith they used to have
on_faith_conversion = {
	events = {
		faith_conversion.0001	# Convert capital county
		faith_conversion.0003	# Convert close family
		faith_conversion.1002	# Player-only narrative-notification event
		faith_conversion.1101   # Notify vassals of conversion
	}
}

# Code on-action: character changes faith. Not called when a character gets a faith on birth, creation, and similar
# Root is the character
# scope:old_faith is the faith they used to have
on_character_faith_change = {
	effect = {
		check_for_equal_doctrine_effect = yes
		every_held_title = {
			update_dynamic_coa = yes
		}

		# Warcraft
		# Struggle Catalyst: heir changes culture while under age
		# Local conversion
		# End of Warcraft

		# Hostage story cycle
		if = {
			limit = {
				is_hostage = yes
				is_adult = no
				# Did they just change to their captor's culture
				faith = warden.faith
			}
			save_scope_as = hostage
			warden = {
				trigger_event = bp2_yearly.8050
			}
		}

		# Warcraft
		refresh_corruption_modifiers_all_counties = yes
	}
	events = {
		# Warcraft
		WCGOV.10 # Check if you can change governments
		# End of Warcraft
		
		faith_conversion.0002 # Remove obsolete modifiers
		faith_conversion.0004 # Convert Theocracies
		faith_conversion.0005 # Update marriage opinions
		great_holy_war.0025 # Replace Recipient for ongoing GHW
		great_holy_war.0029 # Beneficiary converted, remove and replace.
		great_holy_war.0059 # Clear Crusader traits on conversion.
		great_holy_war.0084 # Replace fallback ghw recipient
		great_holy_war.0085 # Remove pledged vassals upon conversion of their liege.
		war_event.3100		# Handles invalidation of religious wars
	}
}

# Code on-action: once a month for each faith
# Root is the faith
on_faith_monthly = {
	on_actions = {
		faith_holy_order_land_acquisition_pulse
		delay = { days = { 5 10 }}
		faith_heresy_events_pulse
		delay = { days = { 15 20 }}
		faith_fervor_events_pulse
	}
	events = {
		#hajj.0010 #Someone changed their capital to Mecca without having the Hajjaj trait
		great_holy_war.0010 #Great Holy Wars are unlocked for a Faith.
		great_holy_war.0001
		great_holy_war.0022 #Pope harasses players for not pledging support to Crusade yet.
		great_holy_war.0030 #Monthly cleanup for Beneficiaries becoming unfit for various reasons.
	}
}

faith_holy_order_land_acquisition_pulse = {
	trigger = {
		any_faith_holy_order = {
			always = yes
		}
	}

	random_events = {
		chance_to_happen = 17 # ~1 every six months
		chance_of_no_event = {
			value = 100
			every_faith_holy_order = {
				subtract = 5
			}
			every_ruler = {
				limit = {
					holy_order_1000_request_target_trigger = yes
				}
				subtract = 5
			}
			if = {
				limit = {
					NOT = {
						any_faith_holy_order = {
							num_leased_titles < holy_order_barony_number_soft_threshold
						}
					}
				}
				add = 80
			}
			min = 30
		}
		100 = 0
		500 = holy_order.1000
	}
}

faith_heresy_events_pulse = {
	trigger = {
		fervor <= 40
		NOR = {
			has_doctrine_parameter = unreformed
			has_variable = current_heresy
		}
	}

	random_events = {
		chance_to_happen = 25
		chance_of_no_event = {
			if = {
				limit = { fervor > 30 }
				value = 90
			}
			else_if = {
				limit = { fervor > 20 }
				value = 70
			}
			else_if = {
				limit = { fervor > 10 }
				value = 40
			}
		}
		100 = heresy.0001
		
		# Warcraft
		# 100 = heresy.0005
	}
}

faith_fervor_events_pulse = {
	trigger = {
		NOR = {
			has_doctrine_parameter = unreformed
			has_variable = recent_fervor_event
		}
	}

	random_events = {
		chance_to_happen = 6 # ~53% chance of occuring within a given year. 90% chance within 3 years, 99.8% chance within 5.
		100 = fervor.1001
		100 = fervor.2001
	}
}

pagan_conversion_pulse = {
	trigger = { #Is the character ready to convert?
		is_ai = yes
		is_independent_ruler = yes
		
		# Warcraft
		#OR = {
		#	is_independent_ruler = yes
		#	AND = { # Steppe people convert a bit more often & freely
		#		exists = capital_province
		#		# capital_province = { geographical_region = world_steppe }
		#		primary_title.tier >= tier_duchy
		#	}
		#}
		# End of Warcraft
		
		government_has_flag = government_is_tribal
		OR = {
			has_realm_law = tribal_authority_2
			has_realm_law = tribal_authority_3
		}
		faith = { has_doctrine_parameter = unreformed }
		prestige_level >= 1 #lower than the regular requirement to make sure some rulers can convert
		
		# Warcraft - Removing
		# End of Warcraft

		trigger_if = {
			capital_province.county = {
				development_level >= 5 #lower than the regular requirement to make sure some rulers can convert
			}
		}

		culture = {
			calc_true_if = {
				amount >= 7
				has_innovation = innovation_motte
				has_innovation = innovation_catapult
				has_innovation = innovation_barracks
				has_innovation = innovation_mustering_grounds
				has_innovation = innovation_bannus
				has_innovation = innovation_quilted_armor
				has_innovation = innovation_gavelkind
				has_innovation = innovation_crop_rotation
				has_innovation = innovation_city_planning
				has_innovation = innovation_casus_belli
				has_innovation = innovation_plenary_assemblies
				has_innovation = innovation_ledger
				has_innovation = innovation_development_01
				has_innovation = innovation_currency_01
			}
		}
	}

	events = {
		global_religion.0001 #Pagan reformed by neighbor, spouse, soulmate, friend, or geographic location
	}
}

# Code on-action: when a great holy war no longer has a valid target, and there was no one left in the target kingdom to replace them. The target scopes will still point to the last target at this point
# If a new target is not picked in script, the GHW will be invalidated
# Root is the great holy war
on_potential_great_holy_war_invalidation = {
	events = {
		great_holy_war.0004
	}
}

# Code on-action: when on_potential_great_holy_war_invalidation did not find a new target, and the GHW is about to be destroyed. no way out at this point
# Root is the great holy war
on_great_holy_war_invalidation = {
	events = {
		great_holy_war.0055 #Send notifications to players.
	}
}

# Code on-action: when the GHW's war launch countdown hits zero. If a war is not started at this point, the GHW will invalidate, bypassing on_potential_great_holy_war_invalidation but not on_great_holy_war_invalidation
# Root is the great holy war
on_great_holy_war_countdown_end = {
	trigger = { #Only launch the holy war if attacker strength is above one third of defender. 
		ghw_attackers_strength >= third_of_defenders_strength
	}
	events = {
		great_holy_war.0005
	}
}

# Code on-action: when a character in a GHW is replaced. This can only happen when the war has begun, and a participant dies; if they get replaced in the war by someone of the right faith, then this will get called. Can be used to validate their benficiary, for instance
# Root is character being replaced
# scope:great_holy_war is the GHW
# scope:replacement is the replacement character
on_great_holy_war_participant_replaced = {
	events = {
		great_holy_war.0027 #Refresh Beneficiary for AI.
	}
}
