scourge_start_pack_effect = {
	add_gold = monumental_gold_max_value
	add_prestige = monumental_prestige_gain
	add_piety = massive_piety_gain
	
	add_dread = 100
	
	spawn_scourge_troops_effect = yes
	spawn_scourge_troops_effect = yes
	spawn_scourge_troops_effect = yes
	spawn_scourge_troops_effect = yes
}
scourge_603_pack_effect = {
	add_gold = monumental_gold_max_value
	add_prestige = monumental_prestige_gain
	add_piety = massive_piety_gain
	
	add_dread = 100
	
	spawn_scourge_troops_effect = yes
	spawn_scourge_troops_effect = yes
	
	create_story = story_scourge_invasion
}
spawn_scourge_troops_effect = {
	if = {
		limit = { exists = capital_province }
		spawn_army = {
			uses_supply = no
			inheritable = yes
			name = scourge_event_troops
			men_at_arms = {
				type = ghoul
				stacks = 7
			}
			men_at_arms = {
				type = frost_wyrm
				stacks = 1
			}
			men_at_arms = {
				type = abomination_maa
				stacks = 1
			}
			men_at_arms = {
				type = trebuchet
				stacks = 10
			}
			location = capital_province
		}
	}
}
try_to_set_scourge_story_owner = {
	if = {
		limit = {
			exists = title:e_scourge.holder
			OR = {
				story_owner = title:e_scourge.holder
				$OWNER$ = title:e_scourge.holder
			}
		}
		make_story_owner = $OWNER$
		set_scourge_jailor_relations_effect = yes
	}
	else = {
		end_scourge_effect = yes
	}
}
scourge_offer_vassalization_effect = {
	save_scope_as = actor
	save_scope_value_as = {
		name = turns_undead
		value = yes
	}
	
	$TITLE$ = {
		every_de_jure_top_liege = {
			limit = {
				highest_held_title_tier < tier_kingdom
				faith = faith:odyn
				is_ai = yes
			}
			save_scope_as = recipient
			
			offer_vassalization_interaction_effect = yes
		}
	}
}

find_scourge_jailor_and_save_to_scope_effect = {
	find_scourge_story_effect = yes
	
	scope:story = {
		random_in_list = {
			variable = nerzhul_jailors
			
			limit = { is_avaliable_scourge_jailor_trigger = yes }
			
			save_scope_as = scourge_jailor
		}
	}
}

hurt_scourge_jailor_consequences_effect = {
	$HURT_JAILOR$ = { save_scope_as = hurt_jailor }
	$SCOURGE$ = {
		if = {
			limit = {
				any_scourge_jailor_is_avaliable_trigger = yes
				has_relation_scourge_jailor = scope:hurt_jailor
				NOT = {
					scope:killer = {
						any_secret = {
							secret_target = scope:hurt_jailor
							secret_type = secret_murder
						}
					}
				}
			}
			custom_description = {
				text = imprison_scourge_jailor_consequences_tooltip
				
				trigger_event = { id = WCCSC.15 days = 3 }
			}
		}
	}
}

end_scourge_effect = {
	custom_description = {
		text = end_scourge_tooltip
		
		find_scourge_story_effect = yes
		
		on_end_scourge_effect = yes
		if = {
			limit = { exists = scope:story }
			scope:story = { end_story = yes }
		}
	}
}
on_end_scourge_effect = {
	if = {
		limit = { exists = title:e_scourge.holder }
		shatter_realm_effect = { WINNER = title:e_scourge.holder LOSER = title:e_scourge.holder }
	}
}

set_scourge_jailor_relations_effect = {
	if = {
		limit = { exists = var:legions_puppet }
		every_in_list = {
			variable = nerzhul_jailors
			limit = {
				is_alive = yes
				NOT = { has_relation_scourge_damned = prev.story_owner }
			}
			set_relation_scourge_damned = prev.story_owner
		}
	}
}

fire_jailors_unavailable_event_effect = {
	trigger_event = WCCSC.30
}
stops_being_legions_puppet_effect = {
	custom_description = {
		text = stops_being_legions_puppet_tooltip
		
		find_scourge_story_effect = yes
		
		scope:story = {
			if = {
				limit = { exists = var:legions_puppet }
				remove_variable = legions_puppet
			}
		}
		religion:deathbringer = {
			every_faith = {
				if = {
					limit = { has_doctrine = special_doctrine_legions_puppet }
					remove_doctrine = special_doctrine_legions_puppet
				}
			}
		}
		every_relation = {
			type = scourge_jailor
			
			prev = { remove_relation_scourge_jailor = prev }
			set_relation_rival = {
				target = prev
				reason = rival_heresy #you can change it, this is temp
			}
		}
	}
}

find_scourge_story_effect = {
	if = {
		limit = {
			exists = scope:story
			scope:story = { story_type = story_scourge_invasion }
		}
	}
	else = {
		random_owned_story = {
			limit = { story_type = story_scourge_invasion }
			save_scope_as = story
		}
	}
}