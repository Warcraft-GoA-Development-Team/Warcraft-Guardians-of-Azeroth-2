murder_ongoing = {
	# Events that can happen while planning to murder someone.
	trigger = {
		exists = scope:scheme
	}
	effect = {
		trigger_event = murder_ongoing.3302
	}
	
	random_events = {
		chance_to_happen = 10
		200 = 0
		################
		## Generic Intrigue Scheme events#
		################
		##Agents:
		200 = intrigue_scheme_ongoing.1001 	# Pay gold for Scheme Progress
		100 = intrigue_scheme_ongoing.1002 	# Zealous agent promotes your agenda
		100 = intrigue_scheme_ongoing.1004 	# A Gregarious agent is a little too loose-lipped
		100 = intrigue_scheme_ongoing.1006 	# A Lazy agent is a little careless
		30 = intrigue_scheme_ongoing.1007 	# Caring agent wants you to stop
		50 = intrigue_scheme_ongoing.1008 	# Agent close to being discovered
		50 = intrigue_scheme_ongoing.1009 	# Close relation is willing to join your scheme after all
		50 = intrigue_scheme_ongoing.2003 	# Discover a secret about someone else than your target
		50 = murder_ongoing.3010			# Drunkard Agent
		100 = intrigue_scheme_ongoing.5019 	# Find old architectural papers
		100 = intrigue_scheme_ongoing.5026 	# Court chaplain is in on it
		
		##Target:
		100 = intrigue_scheme_ongoing.2001 	# Trusting target
		100 = intrigue_scheme_ongoing.2002 	# Drunkard target
		##Owner:
		50 = intrigue_scheme_ongoing.3001 	# Being Just Causes Stress
		50 = intrigue_scheme_ongoing.3002 	# Being Compassionate Causes Pain
		##Child target:
		200 = intrigue_scheme_ongoing.4001 	# Agent is put in charge of a group of children
		200 = intrigue_scheme_ongoing.4002 	# Child is gullible
		150 = intrigue_scheme_ongoing.4003 	# Agent has second thoughts
		##Other
		100 = intrigue_scheme_ongoing.5001 	# Distract guards with itching powder
		100 = intrigue_scheme_ongoing.5002 	# Convince mystic to give target omen
		100 = intrigue_scheme_ongoing.5005 	# Gift them poisonous gold
		100 = intrigue_scheme_ongoing.5009 	# "Friend of Animals" gets some help
		10 = intrigue_scheme_ongoing.5011 	# You mess up with venomous animals
		50 = intrigue_scheme_ongoing.5014 	# You buy them a plush and exotic carpet
		100 = intrigue_scheme_ongoing.5016 	# Lower their courtiers opinion of them
		50 = intrigue_scheme_ongoing.5017 	# Lower their spouse's opinion of them
		100 = intrigue_scheme_ongoing.5018 	# Target at war - send camp followers to them
		100 = intrigue_scheme_ongoing.5024 	# Encourage local celebration
		50 = murder_ongoing.3301 			# Lose your knife
		100 = intrigue_scheme_ongoing.3005 	# Messenger pigeon
		100 = intrigue_scheme_ongoing.3003 	# Mapping the local surroundings

		100 = intrigue_scheme_ongoing.3010  # Translate letters yourself
		100 = intrigue_scheme_ongoing.3011  # Complex language code
		
		#############
		# Generic Agent events
		#############

		2000 = agent_events.9801				# Wrapper event for general agent events on_action.

		#############
		# Lifestyle events
		#############
		100 = intrigue_scheme_lifestyle.1001 	# Opportunity for a general to set up a soldier spy ring
		50 = intrigue_scheme_lifestyle.1002 	# Your soldier spy ring has been compromised!
		100 = intrigue_scheme_lifestyle.3001 	# Study the targets habits
		100 = intrigue_scheme_lifestyle.3101 	# Convert informants in target´s court
		50 = intrigue_scheme_lifestyle.3102 	# Informants are revealed!
		100 = intrigue_scheme_lifestyle.3201 	# Intercept communication
		100 = intrigue_scheme_lifestyle.3301 	# Possible to gain hook - ends the scheme
		100 = intrigue_scheme_lifestyle.3401 	# Convince courtier at target's court to inform on them

		####Unique Assassination Ongoing Events#####
		100 = assassination_ongoing.0001 #Secret symphatizer! 
		100 = assassination_ongoing.0002 #Recruiting fanatics 
		100 = assassination_ongoing.0003 #Bribing courtiers
		100 = assassination_ongoing.0004 #Your master assassin fears death 
		100 = assassination_ongoing.0005 #Making a poisoned blade
		100 = assassination_ongoing.0006 #A junior assassin faltered
		250 = assassination_ongoing.0007 #target is a paragon, assassin has doubts - least likely to trigger, so likelihood set to high
	}
}

##################################################
# Schemes 2.5 Reworked Murder On_Actions

# This determines which type of murder we want to go with, as well as sorts general murder effects.
murder_success_pre_filter_on_action = {
	effect = {
		scope:owner = {
			# Right, which murder list do we want?
			## Incapable murders: for hitting bedridden characters.
			if = {
				limit = {
					scope:target = { is_incapable = yes }
				}
				trigger_event = { on_action = murder_success_incapable_event_list_on_action }
			}
			## Imprisoned murders: for anyone who is in house arrest or the dungeons.
			else_if = {
				limit = {
					scope:target = { is_imprisoned = yes }
				}
				trigger_event = { on_action = murder_success_imprisoned_event_list_on_action }
			}
			## Child murders: for free, child characters capable of independent movement.
			else_if = {
				limit = {
					scope:target = { is_adult = no }
				}
				trigger_event = { on_action = murder_success_child_event_list_on_action }
			}
			## Standard murders: for free, adult characters capable of independent movement.
			else = {
				trigger_event = { on_action = murder_success_standard_event_list_on_action }
			}
			# Plus we always want music.
			play_music_cue = "mx_cue_murder"
			# Achievements.
			# every_scheme = {
			# 	limit = { scheme_type = murder }
			# 	# The Things We Do For Love.
			# 	if = {
			# 		limit = {
			# 			scheme_target_character ?= {
			# 				any_spouse = {
			# 					any_relation = {
			# 						type = lover
			# 						this = scope:owner
			# 					}
			# 				}
			# 			}
			# 		}
			# 		scope:owner = {
			# 			add_achievement_flag_effect = { FLAG = achievement_the_things_we_do_for_love_flag }
			# 		}
			# 	}
				# An Unfortunate Accident.
				# if = {
				# 	limit = {
				# 		scheme_target_character = {
				# 			save_temporary_scope_as = murder_target
				# 			scope:owner = { is_heir_of = scope:murder_target }
				# 		}
				# 	}
				# 	scope:owner = {
				# 		add_achievement_flag_effect = { FLAG = achievement_an_unfortunate_accident_flag }
				# 	}
				# }
				# # Death Did Us Part.
				# if = {
				# 	limit = {
				# 		scheme_target_character = {
				# 			any_spouse = { this = scope:owner }
				# 		}
				# 	}
				# 	scope:owner = {
				# 		add_achievement_flag_effect = { FLAG = achievement_death_did_us_part_flag }
				# 	}
				# }
				# Royal Flush.
				# if = {
				# 	limit = {
				# 		exists = scheme_target_character
				# 		scope:owner = { 
				# 			is_ai = no 
				# 			faith = { has_doctrine = tenet_fp3_fedayeen }
				# 		}
				# 	}
				# 	if = {
				# 		limit = {
				# 			scope:target = { highest_held_title_tier = tier_empire }
				# 		}
				# 		scope:owner = { add_character_flag = fp3_assassinated_tier3 }
				# 	}
				# 	else_if = {
				# 		limit = {
				# 			scope:target = { highest_held_title_tier = tier_kingdom }
				# 		}
				# 		scope:owner = { add_character_flag = fp3_assassinated_tier2 }
				# 	}
				# 	else_if = {
				# 		limit = {
				# 			scope:target = { is_lowborn  = yes }
				# 		}
				# 		scope:owner = { add_character_flag = fp3_assassinated_tier1 }
				# 	}
				# }
			#}
			# BP2: If you did a murder based on your imaginary friend, fire the follow-up event
			if = {
				limit = { var:imaginary_friend_murder_target ?= scope:scheme.scheme_target_character }
				# if you have murdered a sufficient amount, we fire a special ending 
				if = {
					limit = {
						has_variable = imaginary_friend_murder_count
						var:imaginary_friend_murder_count >= 4
					}
					trigger_event = {
						id = bp2_yearly.2025
						days = 1
					}
				}
				else = {
					trigger_event = {
						id = bp2_yearly.2022
						days = 1
					}
				}
			}
			# Aaaaand this is quite memorable.
			create_character_memory = {
				type = successful_murder
				participants = {
					victim = scope:scheme.scheme_target_character
				}
			}
		}
	}
}

# Incapable murders: for hitting bedridden characters.
murder_success_incapable_event_list_on_action = {
	random_events = {
		# Old events.
		100 = murder_outcome_reworked.8001 #Strangling incapable
	}
}
# Imprisoned murders: for anyone who is in house arrest or the dungeons.
murder_success_imprisoned_event_list_on_action = {
	random_events = {
		# Old events.
		100 = murder_outcome_reworked.7001 #Beat to death in prison
		100 = murder_outcome_reworked.7011 #Unwelcome guest during House Arrest
	}
}
# Child murders: for free, child characters capable of independent movement.
murder_success_child_event_list_on_action = {
	random_events = {
		# Old events.
		100 = murder_outcome_reworked.4001 #Leave a child in the forest
		100 = murder_outcome_reworked.4011 #Stab infant
		100 = murder_outcome_reworked.4021 #Creepy crawly bites infant
		100 = murder_outcome_reworked.4031 #Poisoned candy
		100 = murder_outcome_reworked.4041 #Child pushed to death
	}
}
# Standard murders: for free, adult characters capable of independent movement.
murder_success_standard_event_list_on_action = {
	random_events = {
		# Old events.
		300 = murder_outcome_reworked.0001 #Assassin
		100 = murder_outcome_reworked.0011 #Hired thugs
		100 = murder_outcome_reworked.0021 #Poison food
		100 = murder_outcome_reworked.0031 #Creepy-crawlies
		100 = murder_outcome_reworked.0041 #A riled-up mob
		100 = murder_outcome_reworked.0051 #Immurement
		100 = murder_outcome_reworked.0061 #Sink a boat they're on
		100 = murder_outcome_reworked.0071 #Poison drink
	}
}

# This determines which type of murder we want to go with.
murder_failure_pre_filter_on_action = {
	effect = {
		scope:owner = {
			# Right, which murder list do we want?
			## Incapable murders: for hitting bedridden characters.
			if = {
				limit = {
					scope:target = { is_incapable = yes }
				}
				trigger_event = { on_action = murder_failure_incapable_event_list_on_action }
			}
			## Imprisoned murders: for anyone who is in house arrest or the dungeons.
			else_if = {
				limit = {
					scope:target = { is_imprisoned = yes }
				}
				trigger_event = { on_action = murder_failure_imprisoned_event_list_on_action }
			}
			## Child murders: for free, child characters capable of independent movement.
			else_if = {
				limit = {
					scope:target = { is_adult = no }
				}
				trigger_event = { on_action = murder_failure_child_event_list_on_action }
			}
			## Standard murders: for free, adult characters capable of independent movement.
			else = {
				trigger_event = { on_action = murder_failure_standard_event_list_on_action }
			}
		}
	}
}

# Incapable murders: for hitting bedridden characters.
murder_failure_incapable_event_list_on_action = {
	random_events = {
		# Old events.
		100 = murder_outcome_reworked.8003	# Strangling incapable
	}
}
# Imprisoned murders: for anyone who is in house arrest or the dungeons.
murder_failure_imprisoned_event_list_on_action = {
	random_events = {
		# Old events.
		100 = murder_outcome_reworked.7003	# Beat to death in prison
		100 = murder_outcome_reworked.7013	# Unwelcome guest during House Arrest
	}
}
# Child murders: for free, child characters capable of independent movement.
murder_failure_child_event_list_on_action = {
	random_events = {
		# Old events.
		100 = murder_outcome_reworked.4003	# Lured child into forest
		100 = murder_outcome_reworked.4013	# Stab infant
		100 = murder_outcome_reworked.4023	# Creepy crawly bites infant
		100 = murder_outcome_reworked.4033	# Poisoned candy
		100 = murder_outcome_reworked.4043	# Child pushed to death
	}
}
# Standard murders: for free, adult characters capable of independent movement.
murder_failure_standard_event_list_on_action = {
	random_events = {
		# Old events.
		300 = murder_outcome_reworked.0003	# Hired assassin
		100 = murder_outcome_reworked.0013	# Hired thugs
		100 = murder_outcome_reworked.0023	# Used poison
		100 = murder_outcome_reworked.0033	# Creepy-crawlies
		100 = murder_outcome_reworked.0043	# A riled-up mob
		100 = murder_outcome_reworked.0053	# Immurement
		100 = murder_outcome_reworked.0063	# Sink a boat they're on
		100 = murder_outcome_reworked.0073	# Poison drink
	}
}

# Intercept methods that are generally used up during the event and cannot be immediately replaced.
pick_unique_murder_intercept_on_action = {
	# Old events.
	## We roll these elsewhere, so the order doesn't matter.
	first_valid = {
		murder_save.0001 	# Lover saves you from an assassin
		murder_save.0002	# Lover saves you from a creepy crawly
		murder_save.0003	# Mindbreak character saves you from an assassin
		murder_save.0004	# Warhorse saves you from a band of thugs
		murder_save.0005	# Your Prison Pet saves you in prison
		murder_save.0007	# Your cat saves you!
		murder_save.0008	# Your dog saves you!
		murder_save.0009	# Dynasty Perk: Family Connections
		murder_save.0011	# Saved from poisoned food by cat
		murder_save.0012	# Saved from poisoned food by dog
		murder_save.0014	# Saved from assassin by language skills
		murder_save.0015	# Saved by timely artifact
	}
}

# Intercept methods that are either not used up during their event or can be easily replaced (like bodyguards).
pick_repeatable_murder_intercept_on_action = {
	random_events = {
		# Old events.
		300 = murder_save.0010		# A Varangian saves them
		100 = murder_save.0006		# Their personal guard protects them from a band of thugs
		100 = court_position.9001	# Saved from poisoned food by food taster
		50 = court_position.9011	# Saved from poison by cup-bearer
		5 = murder_save.0013		# Saved from poisoned food by gluttonous trait
		100 = court_position.9021	# A Bodyguard saves you from an assassin
		600 = fp1_shieldmaiden.0021	# A Shieldmaiden saves them
	}
}
