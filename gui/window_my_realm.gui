######################################################
##################### MY REALM #######################
######################################################

window = {
	name = "my_realm_window"
	widgetid = "my_realm_window"
	datacontext = "[GetVariableSystem]"
	datacontext = "[GetPlayer]"
	parentanchor = top|right
	allow_outside = yes
	movable = no
	layer = windows_layer	
	# Warcraft
	visible = "[And(IsGameViewOpen('my_realm'), Not(GetVariableSystem.HasValue( 'right_window_open', 'pol_factions' )))]"

	using = Window_Size_MainTab

	# Tabs setup
	oncreate = "[BindTabsContext]"
	oncreate = "[PdxGuiTabs.SetResetOnShown( '(bool)no')]"
	oncreate = "[PdxGuiTabs.AddTab( 'domain' )]"

	# Code can send an event which we can listen for to switch tabs
	oncreate = "[PdxGuiTabs.ListenFor( 'focused_changed' )]"

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
		using = Window_Position_MainTab
		
		# Reset to the domain tab if you have the admin tab open but no longer have access to it
		on_start = "[PdxGuiTabs.SetResetOnShown( And( PdxGuiTabs.IsTabSet( 'admin_laws' ), Not( IsAdministrativeRuler( GetPlayer ) ) ) )]"

		on_start = "[PdxGuiTabs.RemoveTab( 'succession' )]"
		on_start = "[PdxGuiTabs.AddTabIf( 'vassals', Not( IsLandlessAdventurer( GetPlayer ) ) )]"
		on_start = "[PdxGuiTabs.RemoveTabIf( 'vassals', IsLandlessAdventurer( GetPlayer ) )]"
		on_start = "[PdxGuiTabs.AddTab( 'succession' )]"
				on_start = "[PdxGuiTabs.RemoveTabIf( 'admin_laws', Not( IsAdministrativeRuler( GetPlayer ) ) )]"
		on_start = "[PdxGuiTabs.AddTabIf( 'admin_laws', IsAdministrativeRuler( GetPlayer ) )]"

		# Warcraft
		on_start = "[GetVariableSystem.Set( 'right_window_open', 'my_realm' )]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
		using = Window_Position_MainTab_Hide

		# Warcraft
		on_start = "[GetVariableSystem.ClearIf( 'right_window_open', GetVariableSystem.HasValue( 'right_window_open', 'my_realm' ) )]"
	}

	state = {
		name = dismiss
		next = _hide

		trigger_when = "[GetVariableSystem.Exists( 'hide_right_windows' )]"
	}

	margin_widget = {
		size = { 100% 100% }
		margin = { 0 26 }
		margin_right = 13

		widget = {
			size = { 100% 100% }

			### WINDOW CONTENT
			vbox = {
				using = Window_Margins

				##### HEADER NO LIEGE TEXT #####
				widget_header_with_picture = {
					layoutpolicy_horizontal = expanding
					minimumsize = { 0 180 }

					blockoverride "header_text" {
						text = "[GetPlayer.GetPrimaryTitle.GetNameNoTooltip|U]"
					}

					blockoverride "size" {
						size = { 100% 198 }
					}

					blockoverride "illustration_texture" {
						texture = "gfx/interface/illustrations/window_headers/header_my_realm.dds"
					}

					blockoverride "button_close"
					{
						onclick = "[MyRealmWindow.Close]"
					}

					vbox = {
						margin_top = 42

						hbox = {
							spacing = 20

							text_single = {
								visible = "[IsLandlessAdventurer( GetPlayer )]"
								name = "realm_type_adv"
								text = "you_are_an_adventurer_tt"
							}

							text_single = {
								visible = "[Not( IsLandlessAdventurer( GetPlayer ) )]"
								name = "realm_type"
								text = "MY_REALM_WINDOW_TYPE"
							}

							text_single = {
								visible = "[Not( IsLandlessAdventurer( GetPlayer ) )]"
								text = "REALM_WINDOW_SIZE"
								tooltip = "REALM_WINDOW_SIZE_TT"
							}
						}

						spacer = {
							visible = "[GetPlayer.HasLiege]"
							layoutpolicy_vertical = expanding
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							margin_top = 12
							margin_left = 10
							margin_right = 10
							spacing = 15


							hbox = {
								name = "crown_authority"
								datamodel = "[MyRealmWindow.GetRealmLaws]"
								ignoreinvisible = yes
								margin_left = 10

								item = {
									vbox = {
										layoutpolicy_vertical = expanding
										datacontext = "[GuiLawGroup.GetLawGroup]"
										visible = "[And(And( GuiLawGroup.GetLawGroup.HasFlag( 'realm_law' ), GuiLawGroup.IsAvailable ), Not(GetPlayer.GetGovernment.IsType('landless_adventurer_government')))]"
										ignoreinvisible = yes
										spacing = 3

										text_label_center = {
											visible = "[Not(GetPlayer.HasLiege)]"
											text = "[LawGroup.GetName]"
										}

										hbox = {
											margin_left = 5
											layoutpolicy_horizontal = expanding

											text_label_left = {
												visible = "[GetPlayer.HasLiege]"
												layoutpolicy_horizontal = expanding
												text = "[LawGroup.GetName]"
												margin_left = 10
											}
										}
										
										# Warcraft
										progressbar_standard = {
											name = "dark_frenzy"
											visible = "[GuiLawGroup.GetLawGroup.HasFlag( 'dark_frenzy' )]"
											datacontext = "[MyRealmWindow.GetCharacter.MakeScope]"

											value = "[FixedPointToProgressbarValue(Scope.ScriptValue('dark_frenzy_percent_value'))]"
											tooltipwidget = {
												complex_tooltip = {
													blockoverride "content" {
														spacing = 5
														text_single = {
															layoutpolicy_horizontal = expanding
															using = Background_Area
															default_format = "#T"

															text = "DARK_FRENZY_TOOLTIP"
														}
														text_single = {
															visible = "[LessThan_CFixedPoint( Scope.Var( 'dark_frenzy' ).GetValue, Scope.ScriptValue( 'dark_frenzy_next_level_value' ) )]"
															layoutpolicy_horizontal = expanding
															text = "DARK_FRENZY_NEXT_LEVEL_TOOLTIP"
														}

														text_single = {
															layoutpolicy_horizontal = expanding
															using = Background_Area
															default_format = "#T"

															text = "MONTHLY_DARK_FRENZY_TOOLTIP"
														}
														text_single = {
															layoutpolicy_horizontal = expanding

															text = "MONTHLY_DARK_FRENZY_LIST"
														}
														
														divider_light = {
															layoutpolicy_horizontal = expanding
														}
														
														text_single = {
															layoutpolicy_horizontal = expanding

															text = "MONTHLY_DARK_FRENZY_TOTAL"
														}
													}
												}
											}
											
											layoutpolicy_horizontal = expanding
										}

										hbox = {
											datamodel = "[GuiLawGroup.GetLaws]"
											visible = "[Not(GetPlayer.HasLiege)]"

											background = {
												texture = "gfx/lines/line_lifestyles_unavailable.dds"
												margin = { -8 -12 }
												tintcolor = { 0.7 0.5 0.25 1 }
											}

											item = {
												icon_button_decorative = {
													datacontext = "[GuiLaw.GetLaw]"
													size = { 60 60 }
													enabled = "[Or(GuiLaw.CanEnact, GuiLaw.IsEnacted)]"
													down = "[GuiLaw.IsEnacted]"
													alwaystransparent = "[GuiLaw.IsEnacted]"
													onclick = "[GuiLaw.Enact]"
													tooltipwidget = { pass_law_tooltip = {} }
													using = tooltip_below

													icon_button_decorative = {
														size = { 54 54 }
														parentanchor = center
														alwaystransparent = yes
													}

													button_icon = {
														visible = "[Not(GuiLaw.IsEnacted)]"
														texture = "[Law.GetIcon]"
														parentanchor = center
														size = { 42 42 }
														alwaystransparent = yes
													}

													icon = {
														visible = "[And( GuiLaw.IsEnacted , Not( GuiLaw.CanEnact ) )]"
														texture = "[Law.GetIcon]"
														parentanchor = center
														size = { 42 42 }
														alwaystransparent = yes

														using = Master_Button_Modify_Texture

														blockoverride "master_color_frame" {
															frame = 2
														}
													}
												}
											}
										}

										hbox = {
											datamodel = "[GuiLawGroup.GetLaws]"
											visible = "[GetPlayer.HasLiege]"
											margin_left = 8

											background = {
												texture = "gfx/lines/line_lifestyles_unavailable.dds"
												margin = { -16 -12 }
												tintcolor = { 0.7 0.5 0.25 1 }
											}

											item = {
												icon_button_decorative = {
													datacontext = "[GuiLaw.GetLaw]"
													size = { 50 50 }
													enabled = "[Or(GuiLaw.CanEnact, GuiLaw.IsEnacted)]"
													down = "[GuiLaw.IsEnacted]"
													alwaystransparent = "[GuiLaw.IsEnacted]"
													onclick = "[GuiLaw.Enact]"
													tooltipwidget = { pass_law_tooltip = {} }
													using = tooltip_below

													icon_button_decorative = {
														size = { 44 44 }
														parentanchor = center
														alwaystransparent = yes
													}

													button_icon = {
														visible = "[Not(GuiLaw.IsEnacted)]"
														texture = "[Law.GetIcon]"
														parentanchor = center
														size = { 32 32 }
														alwaystransparent = yes
													}

													icon = {
														visible = "[And( GuiLaw.IsEnacted , Not( GuiLaw.CanEnact ) )]"
														texture = "[Law.GetIcon]"
														parentanchor = center
														size = { 42 42 }
														alwaystransparent = yes

														using = Master_Button_Modify_Texture

														blockoverride "master_color_frame" {
															frame = 2
														}
													}
												}
											}
										}

										expand = {
											visible = "[GetPlayer.HasLiege]"
											layoutpolicy_horizontal = expanding
										}
									}
								}
							}

							spacer = {
								visible = "[GetPlayer.HasLiege]"
								size = { 15 5 }
							}

							## LIEGE INFO
							vbox = {
								name = "liege"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								margin_right = 10
								datacontext = "[MyRealmWindow.GetCharacter.GetLiege]"
								visible = "[GetPlayer.HasLiege]"

								text_label_left = {
									text = "MY_REALM_WINDOW_MY_LIEGE"
									layoutpolicy_horizontal = expanding
									margin_left = 2
								}

								expand = {}

								vbox = {
									layoutpolicy_horizontal = expanding

									text_single = {
										layoutpolicy_horizontal = expanding
										text = "[Character.GetUIName]"
										autoresize = no
										align = left
										max_width = 330
									}

									hbox = {
										layoutpolicy_horizontal = expanding

										widget = {
											size = { 30 25 }

											button_icon_highlight = {
												datacontext = "[Character.GetActiveLawInGroupWithFlag( 'realm_law' )]"
												size = { 35 35 }
												parentanchor = center
												texture = "[Law.GetIcon]"
												tooltipwidget = { general_law_tooltip = {} }
												using = tooltip_ws
											}
										}

										text_single = {
											text = "[Character.GetGovernment.GetName]"
										}

										expand = {}
									}
								}

								expand = {}
							}
						}

						expand = {}
					}

					widget = {
						visible = "[GetPlayer.HasLiege]"
						allow_outside = yes
						size = { 55 80	}

						coa_realm_small_crown = {
							parentanchor = top|hcenter
							position = { 10 5 }
						}
					}

					widget = {
						visible = "[Not(GetPlayer.HasLiege)]"
						allow_outside = yes
						size = { 89 98 }

						coa_realm_big_crown = {
							parentanchor = top|hcenter
							position = { 5 5 }
						}
					}
				}

				### Diarchy view button
				button_standard = {
					name = "open_future_diarchy_tutorial_uses_this"
					widgetid = "open_future_diarchy_tutorial_uses_this"
					layoutpolicy_horizontal = expanding
					size = { 0 60 }

					visible = "[Not( IsLandlessAdventurer( GetPlayer ) )]"
					onclick = "[ToggleGameViewData( 'diarchy', Character.GetID )]"
					onclick = "[MyRealmWindow.SendButtonClickedTelemetry( PdxGuiTabs.GetActiveTab.GetKey, 'diarchy' )]"

					tooltip = "DIARCHY_WINDOW_OPEN_TOOLTIP"

					hbox = {
						datacontext = "[Character.GetDiarchy]"
						layoutpolicy_horizontal = expanding

						margin = { 15 0 }

						icon_flat_standard = {
							size = { 40 40 }
							texture = "gfx/interface/window_regency/scale_of_power.dds"

							blockoverride "master_color_frame" {
								frame = 1
							}
						}

						vbox = {
							margin_left = 15

							text_single = {
								layoutpolicy_horizontal = expanding
								alwaystransparent = yes
								text = "[MyRealmWindow.GetDiarchLabel]"
								align = left|nobaseline
								max_width = 480
							}

							text_single = {
								visible = "[Diarchy.IsValid]"
								layoutpolicy_horizontal = expanding
								alwaystransparent = yes

								text = "MY_REALM_WINDOW_ACTIVE_DIARCHY"
								align = left|nobaseline
								max_width = 480
							}

							text_single = {
								visible = "[Not( Diarchy.IsValid )]"
								layoutpolicy_horizontal = expanding
								alwaystransparent = yes

								text = "MY_REALM_WINDOW_STATUS_INACTIVE_DIARCHY"
								align = left|nobaseline
								max_width = 480
							}
						}

						expand = {}

					}
				}

				### Tabs header
				hbox_tab_buttons = {
					name = "tab_buttons"

					blockoverride "tab_name"
					{
						text = "[PdxGuiTabItem.LocalizeTab( 'realm_tab' )]"
					}
					blockoverride "on_click"
					{
						onclick = "[MyRealmWindow.SendTabClickedTelemetry( PdxGuiTabs.GetActiveTab.GetKey )]"

						widget = {
							name = "tutorial_highlight_vassals_tab"
							position = { 187 0 }
							size = { 187 38 }
						}
					}
				}

				### DOMAIN TAB
				scrollbox = {
					name = "tab_domain"
					datacontext = "[MyRealmWindow.GetCharacter]"
					visible = "[PdxGuiTabs.IsTabSet( 'domain' )]"

					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					background = {
						visible = "[IsLandlessAdventurer( GetPlayer )]"
						texture = "gfx/interface/skinned/illustrations/camp_bg.dds"
						fittype = end
						alpha = 0.5
						framesize = { 1500 848 }

						using = Mask_Rough_Edges

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_corner.dds"
							blend_mode = alphamultiply
						}
					}

					using = Animation_Tab_Switch

					blockoverride "scrollbox_margins" {
						margin = { 15 4 }
					}

					blockoverride "scrollbox_content"
					{
						vbox = {
							visible = "[Character.HasDomicile]"
							margin_top = 10
							spacing = 10

							layoutpolicy_horizontal = expanding

							text_label_center = {
								text = "[Character.GetDomicile.GetYourDomicileText]"
								using = Font_Size_Medium
								default_format = "#low"
							}

							vbox_domicile_button = {
								visible = "[Character.HasDomicile]"
							}

							spacer = {
								size = { 0 10 }
							}

							hbox = {
								name = "adventurer_purposes"
								datamodel = "[MyRealmWindow.GetRealmLaws]"
								ignoreinvisible = yes

								item = {
									vbox = {
										layoutpolicy_vertical = expanding
										datacontext = "[GuiLawGroup.GetLawGroup]"
										visible = "[And(And( GuiLawGroup.GetLawGroup.HasFlag( 'realm_law' ), GuiLawGroup.IsAvailable ), GetPlayer.GetGovernment.IsType('landless_adventurer_government'))]"
										ignoreinvisible = yes
										margin_right = -10

										text_label_center = {
											text = "[LawGroup.GetName]"
											using = Font_Size_Medium
											default_format = "#low"
										}

										vbox = {
											layoutpolicy_vertical = expanding

											margin_top = 10
											margin_left = 15
											margin_right = 5

											fixedgridbox = {
												name = "camp_purposes"
												layoutpolicy_horizontal = expanding

												flipdirection = yes
												datamodel_wrap = 3

												addcolumn = 170
												addrow = 180

												datamodel = "[GuiLawGroup.GetLaws]"

												item = {
													widget = {
														size = { 160 160 }
														datacontext = "[GuiLaw.GetLaw]"
														tooltipwidget = {
															pass_law_tooltip = {
																blockoverride "concept_link" {
																	text = "[camp_purpose|E]"
																}
															}
														}
														using = tooltip_ws

														button_standard_clean = {
															name = "camp_purpose_button"
															size = { 160 160 }
															enabled = "[Or(GuiLaw.CanEnact, GuiLaw.IsEnacted)]"
															alwaystransparent = "[GuiLaw.IsEnacted]"
															down = "[GuiLaw.IsEnacted]"
															onclick = "[GuiLaw.Enact]"

															background = {
																texture = "gfx/interface/component_tiles/tile_vignette_3px.dds"
																spriteType = Corneredtiled
																spriteborder = { 5 5 }
																margin = { -2 -2 }
															}

															icon = {
																size = { 160 160 }
																texture = "[Law.GetIcon]"
															}

															widget = {
																size = { 100% 30 }
																parentanchor = bottom

																background = {
																	using = Background_Area_Dark
																}

																text_single = {
																	margin = { 5 0 }
																	max_width = 150
																	visible = "[Not(GuiLaw.IsEnacted)]"
																	parentanchor = center
																	position = { 3 -2 }
																	text = "PASS_LAW_TOOLTIP_TITLE"
																	default_format = "#weak"
																}

																text_single = {
																	margin = { 5 0 }
																	max_width = 150
																	visible = "[GuiLaw.IsEnacted]"
																	parentanchor = center
																	position = { 3 -2 }
																	text = "ADVENTURER_LAW_SELECTED"
																	default_format = "#high;EMP"
																}
															}

															icon = {
																name = "selection_glow"
																visible = "[GuiLaw.IsEnacted]"
																parentanchor = center
																size = { 100% 100% }

																state = {
																	trigger_on_create = yes

																	name = max_glow
																	next = min_glow
																	duration = 1
																	using = Animation_Curve_Default
																	alpha = 0.5
																}

																state = {
																	name = min_glow
																	next = max_glow
																	duration = 1.6
																	using = Animation_Curve_Default
																	alpha = 0.3
																}

																background = {
																	texture = "gfx/interface/component_effects/innovation_glow.dds"
																	margin = { 15 12 }
																	spriteType = Corneredstretched
																	spriteborder = { 30 30 }
																	tintcolor = { 1 0.8 0.6 1 }
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}

							expand = {}
						}

						vbox = {
							datamodel = "[MyRealmWindow.GetDomainItems]"
							layoutpolicy_horizontal = expanding
							spacing = 20

							item = {

								vbox = {
									name = "duchy_group"

									layoutpolicy_horizontal = expanding

									hbox = {
										layoutpolicy_horizontal = expanding

										hbox = {
											spacing = 5

											coa_title_tiny_crown = {
												datacontext = "[DuchyGroup.GetDuchy]"
												using = tooltip_ws
											}

											text_label_center = {
												text = "[DuchyGroup.GetDuchy.GetNameNoTooltip|U]"
												using = Font_Size_Medium
												default_format = "#low"
											}
										}
									}

									hbox = {
										layoutpolicy_horizontal = expanding
										margin = { 10 0 }

										divider_light = {
											layoutpolicy_horizontal = expanding
											alpha = 0.6
										}
									}

									vbox = {
										name = "county_group"
										spacing = 20
										layoutpolicy_horizontal = expanding

										datamodel = "[DuchyGroup.GetCounties]"

										item = {

											vbox = {
												datacontext = "[CountyGroup.GetCounty]"
												datacontext = "[CountyGroup.GetCapitalProvince.GetCounty]"

												layoutpolicy_horizontal = expanding

												background = {
													using = Background_Area
												}

												hbox = {
													layoutpolicy_horizontal = expanding
													margin_left = 5
													margin_right = 10
													spacing = 7

													datacontext = "[CountyGroup.AccessBreakdowns]"

													coa_title_tiny = {}

													text_single = {
														layoutpolicy_horizontal = expanding
														text = "[Title.GetNameNoTooltip]"
														max_width = 180
													}

													expand = {}

													text_single = {
														text = "[development|E]: [County.GetDevelopmentLevel]"
														max_width = 140

														tooltipwidget = {
															county_development_tooltip_container = {}
														}
													}

													text_single = {
														name = "tutorial_highlight_control"
														text = "[CountyGroup.GetCountyControlColored]"
														max_width = 130

														tooltipwidget = {
															county_control_tooltip_container = {}
														}
													}
												}

												vbox = {
													datamodel = "[CountyGroup.GetHoldings]"
													layoutpolicy_horizontal = expanding
													margin_left = 10
													margin_right = 10
													margin_bottom = 5
													spacing = 3

													item = {

														vbox = {
															layoutpolicy_horizontal = expanding
															datacontext = "[HoldingItem.GetHolding]"

															background = {
																fittype = centercrop
																alpha = 0.7
																texture = "[HoldingItem.GetHolding.GetIllustration]"

																modify_texture = {
																	texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
																	blend_mode = alphamultiply
																}

																modify_texture = {
																	texture = "gfx/interface/component_overlay/overlay_effect.dds"
																	blend_mode = overlay
																}
															}

															button_standard_clean = {
																layoutpolicy_horizontal = expanding
																size = { 0 80 }

																onclick = "[HoldingItem.OnClick]"
																onclick = "[MyRealmWindow.SendButtonClickedTelemetry( PdxGuiTabs.GetActiveTab.GetKey, 'holding' )]"

																tooltipwidget = { holding_tooltip_click = {} }

																background = {
																	using = Background_Button_Illustration
																	visible = "[Holding.IsSelected]"
																}

																using = Background_Vignette_Button
																using = Holding_Mouse_Entry

																vbox = {
																	margin = { 10 2 }

																	hbox = {
																		name = "holding_header"
																		layoutpolicy_horizontal = expanding
																		spacing = 6

																		hbox = {
																			spacing = 6

																			background = {
																				margin_left = 15
																				margin_right = 25
																				margin_top = 0
																				margin_bottom = 5

																				texture = "gfx/interface/component_tiles/tile_title_bg_01.dds"
																				spriteType = Corneredtiled
																				spriteborder = { 40 8 }
																				texture_density = 2

																				modify_texture = {
																					name = "mask"
																					texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
																					blend_mode = alphamultiply
																					mirror = horizontal
																				}
																			}

																			icon = {
																				name = "realm_capital_icon"
																				size = { 25 25 }
																				framesize = { 63 63 }
																				texture = "gfx/interface/icons/icon_capital.dds"
																				visible = "[HoldingItem.IsRealmCapital]"
																				frame = 2
																				tooltip = "REALM_CAPITAL_TOOLTIP"
																			}

																			text_single = {
																				text = "MY_REALM_WINDOW_HOLDING_NAME"
																			}
																		}

																		expand = {}

																		text_single = {
																			alwaystransparent = yes
																			default_format = "#high"
																			minimumsize = { 60 0}

																			text = "MY_REALM_WINDOW_HOLDING_TAX"
																			tooltip = "[Holding.GetTaxTooltip]"
																		}

																		text_single = {
																			alwaystransparent = yes
																			margin_left = 4
																			minimumsize = { 70 0}
																			text = "MY_REALM_WINDOW_HOLDING_LEVY"
																			default_format = "#high"
																			tooltip = "[Holding.GetLeviesTooltip]"
																		}
																	}

																	hbox = {
																		layoutpolicy_horizontal = expanding
																		name = "holding_buildings"

																		minimumsize = { 0 40 }

																		vbox = {
																			tooltip = "MY_REALM_WINDOW_BUILDING_CONSTRUCTION_TT"
																			using = tooltip_ne


																			text_single = {
																				text = "[HoldingItem.GetStatusText]"
																				align = nobaseline
																			}

																			hbox = {
																				layoutpolicy_horizontal = expanding

																				progressbar_standard = {
																					name = "building_progressbar"
																					visible = "[HoldingItem.GetHolding.IsConstructionInProgress]"
																					alwaystransparent = yes

																					layoutpolicy_horizontal = expanding
																					maximumsize = { -1 15 }
																					value = "[HoldingItem.GetHolding.GetConstructionProgress]"
																					direction = horizontal
																				}

																				expand = {}
																			}
																		}

																		text_single = {
																			layoutpolicy_horizontal = expanding
																			visible = "[HoldingItem.GetHolding.CanConstructAnyBuilding(GetPlayer)]"
																			text = "MY_REALM_WINDOW_CONSTRUCT_BUILDING"
																			default_format = "#P"
																		}

																		expand = {}
																	}
																}
															}
														}
													}
												}

												vbox = {
													layoutpolicy_horizontal = expanding
													visible = "[DataModelHasItems(CountyGroup.GetEmptyHoldings)]"
													spacing = 5
													margin_left = 10
													margin_right = 10

													button_group = {
														layoutpolicy_horizontal = expanding

														onclick = "[CountyGroup.ToggleExpanded]"
														onclick = "[MyRealmWindow.SendButtonClickedTelemetry( PdxGuiTabs.GetActiveTab.GetKey, 'empty_holdings' )]"

														flowcontainer = {
															spacing = 5

															widget = {
																size = { 18 22 }

																button_expand = {
																	frame = "[Select_int32( CountyGroup.IsExpanded, '(int32)2', '(int32)1' )]"
																	parentanchor = center
																}
															}

															text_single = {
																text = "ME_REALM_WINDOW_EMPTY_HOLDINGS"
																default_format = "#low"
																align = nobaseline
															}
														}
													}

													expand = {}

													vbox = {
														datamodel = "[CountyGroup.GetEmptyHoldings]"
														visible = "[CountyGroup.IsExpanded]"
														layoutpolicy_horizontal = expanding
														margin_left = 23
														margin_bottom = 5
														spacing = 4

														item = {

															vbox = {
																layoutpolicy_horizontal = expanding
																datacontext = "[HoldingItem.GetHolding]"

																button_standard = {
																	layoutpolicy_horizontal = expanding
																	layoutpolicy_vertical = expanding
																	minimumsize = { 0 45 }

																	datacontext = "[HoldingItem.GetHolding]"
																	onclick = "[HoldingItem.OnClick]"
																	down = "[Holding.IsSelected]"

																	using = Holding_Mouse_Entry
																	using = Background_Vignette_Button

																	tooltipwidget = {
																		holding_tooltip_click = {}
																	}
																	using = tooltip_ne

																	widget = {
																		scissor = yes
																		size = { 350 43 }
																		parentanchor = right|top

																		icon = {
																			name = "illustration"
																			parentanchor = right|top
																			size = { 180 90 }
																			texture = "[HoldingItem.GetHolding.GetProvince.GetTerrain.GetIllustration]"
																			alpha = 0.4
																			mirror = horizontal
																			using = Mask_Rough_Edges

																			modify_texture = {
																				texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
																				blend_mode = alphamultiply
																			}
																		}
																	}

																	hbox = {
																		margin = { 10 0 }

																		vbox = {
																			layoutpolicy_vertical = expanding
																			margin_top = 2

																			text_single = {
																				text = "[HoldingItem.GetBarony.GetNameNoTierNoTooltip]"
																			}

																			expand = {}
																		}

																		expand = {}

																		vbox = {
																			layoutpolicy_vertical = expanding
																			visible = "[HoldingItem.GetHolding.IsConstructionInProgress]"
																			margin = { 0 4 }

																			text_single = {
																				layoutpolicy_horizontal = expanding
																				text = "[HoldingItem.GetStatusText]"

																				align = nobaseline
																			}

																			expand = {}

																			hbox = {
																				layoutpolicy_horizontal = expanding
																				margin_bottom = 3

																				progressbar_standard = {
																					name = "building_progressbar"
																					alwaystransparent = yes
																					size = { 180 12 }
																					value = "[HoldingItem.GetHolding.GetConstructionProgress]"
																					direction = horizontal
																				}
																			}
																		}

																		vbox = {
																			layoutpolicy_vertical = expanding
																			margin_top = 2

																			text_label_right = {
																				visible = "[HoldingItem.GetHolding.CanConstructAnyBuilding(GetPlayer)]"
																				layoutpolicy_vertical = fixed
																				text = "MY_REALM_WINDOW_CONSTRUCT_HOLDING"
																				default_format = "#P"
																			}

																			expand = {}
																		}
																	}
																}
															}
														}
													}
												}

												expand = {}
											}
										}
									}
								}
							}
						}
					}
				}

				### VASSALS TAB
				scrollbox = {
					name = "tab_vassals"
					widgetid = "tab_vassals"
					visible = "[PdxGuiTabs.IsTabSet( 'vassals' )]"

					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					using = Animation_Tab_Switch

					blockoverride "scrollbox_margins" {
						margin = { 0 4 }
					}

					blockoverride "scrollbox_content"
					{
						hbox = {
							name = "vassal_filters_container"

							layoutpolicy_horizontal = expanding

							dropdown_menu_standard = {
								name = "government_filters_dropdown"

								blockoverride "dropdown_properties"
								{
									datamodel = "[MyRealmWindow.GetGovernmentTypeFilters]"

									onselectionchanged = "[MyRealmWindow.SelectActiveGovernmentTypeFilter]"
									selectedindex = "[MyRealmWindow.GetActiveGovernmentTypeFilterIndex]"
								}

								blockoverride "dropdown_active_item_properties"
								{
									text = "MRW_GOVERNMENT_FILTER"
									tooltip = "MRW_GOVERNMENT_FILTER_DROPDOWN_TT"
								}

								blockoverride "dropdown_item_properties"
								{
									text = "MRW_GOVERNMENT_FILTER"
									tooltip = "MRW_GOVERNMENT_FILTER_TT"
								}
							}

							dropdown_menu_standard = {
								name = "vassal_stance_filters_dropdown"

								blockoverride "dropdown_properties"
								{
									datamodel = "[MyRealmWindow.GetVassalStanceFilters]"

									onselectionchanged = "[MyRealmWindow.SelectActiveVassalStanceFilter]"
									selectedindex = "[MyRealmWindow.GetActiveVassalStanceFilterIndex]"
								}

								blockoverride "dropdown_active_item_properties"
								{
									text = "MRW_VASSAL_STANCE_FILTER"
									tooltip = "MRW_VASSAL_STANCE_FILTER_DROPDOWN_TT"
								}

								blockoverride "dropdown_item_properties"
								{
									text = "MRW_VASSAL_STANCE_FILTER"
									tooltip = "MRW_VASSAL_STANCE_FILTER_TT"
								}
							}
						}

						text_single = {
							name = "government_filter_label"
							margin_bottom = 10

							visible = "[MyRealmWindow.HasActiveGovernmentTypeFilter]"
							text = "[MyRealmWindow.GetActiveGovernmentTypeFilter.GetVassalsLabel]"
						}

						scrollbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							blockoverride "scrollbox_margins" {
								margin = { 4 0 }
							}

							blockoverride "scrollbox_content"
							{
								visible = "[GreaterThan_int32( MyRealmWindow.GetVassalCount, '(int32)0' )]"

								fixedgridbox = {
									datacontext = "[MyRealmWindow.GetPowerfulVassals]"
									visible = "[Not( CharacterSelectionList.IsBuildingList )]"

									addcolumn = 545
									addrow = 180
									setitemsizefromcell = yes

									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding

									datamodel = "[CharacterSelectionList.GetList]"
									item = {
										widget_vassal_list_item = {
											datacontext = "[CharacterListItem.GetCharacter]"
											datacontext = "[MyRealmWindow.GetVassalInfo( Character.Self )]"
											datacontext = "[MyRealmWindowVassalItem.GetContract]"

											blockoverride "feudal_contract_button_round"
											{
												onclick = "[MyRealmWindow.SendButtonClickedTelemetry( PdxGuiTabs.GetActiveTab.GetKey, 'vassal_contract' )]"
											}

											blockoverride "vassal_portrait"
											{
												portrait_shoulders = {}
											}
										}
									}
								}

								fixedgridbox = {
									datacontext = "[MyRealmWindow.GetRegularVassals]"
									visible = "[Not( CharacterSelectionList.IsBuildingList )]"

									addcolumn = 545
									addrow = 180
									setitemsizefromcell = yes

									layoutpolicy_horizontal = expanding

									datamodel = "[CharacterSelectionList.GetList]"
									item = {
										widget_vassal_list_item = {
											name = tutorial_highlight_vassal
											datacontext = "[CharacterListItem.GetCharacter]"
											datacontext = "[MyRealmWindow.GetVassalInfo( Character.Self )]"
											datacontext = "[MyRealmWindowVassalItem.GetContract]"
										}
									}
								}
								expand = {}
							}

							vbox = {
								visible = "[EqualTo_int32( MyRealmWindow.GetVassalCount, '(int32)0' )]"
								text_single = {
									text = "NO_VASSALS_TO_DISPLAY"
									default_format = "#weak"
								}
							}
						}

						vbox = {
							margin = { 16 16 }

							layoutpolicy_horizontal = expanding

							vbox = {
								margin = { 8 4 }
								spacing = 4

								layoutpolicy_horizontal = expanding

								background = {
									using = Background_Area
									margin_bottom = 8
									margin_top = 4
								}

								hbox = {
									margin = { 8 0 }

									layoutpolicy_horizontal = expanding

									text_single = {
										default_format = "#high"
										text = "MY_REALM_WINDOW_VASSAL_OPINION"
										max_width = 170
										tooltip = "MY_REALM_WINDOW_VASSAL_OPINION_TT"
									}

									hbox = {
										tooltip = "[GetPlayer.GetDreadBreakdown]"

										icon = {
											name = "dread_icon"
											size = { 30 30 }
											texture = "gfx/interface/icons/icon_dread.dds"
										}

										text_single = {
											name = "dread_name"
											text = "[dread|E]: [GetPlayer.GetDread|0]"
											default_format = "#high"
											max_width = 90
										}
									}

									hbox = {
										name = "tutorial_highlight_vassal_limit"
										spacing = 4

										tooltip = "[Character.GetVassalLimitTooltip]"

										background = {
											visible = "[GreaterThan_int32( Character.GetNumVassalsTowardsLimit, Character.GetVassalLimit )]"
											using = Status_Bad
										}

										icon = {
											size = { 30 30 }
											texture = "gfx/interface/icons/icon_vassal.dds"
										}

										text_single = {
											text = "MY_REALM_WINDOW_VASSAL_LIMIT"
											max_width = 130
										}

										text_single = {
											text = "MY_REALM_WINDOW_VASSAL_LIMIT_VALUE"
											max_width = 50
										}
									}
								}

								hbox = {
									layoutpolicy_horizontal = expanding
									margin = { 8 0 }

									text_single = {
										margin_bottom = 4
										text = MY_REALM_WINDOW_VASSAL_STANCES
									}

									spacing = 8

									hbox = {
										datamodel = "[GetAllVassalStances]"
										spacing = 8

										item = {
											hbox = {
												visible = "[NotEqualTo_int32( MyRealmWindow.GetNumVassalsWithStance( VassalStance.Self ), '(int32)0' )]"

												text_single = {
													margin_bottom = 4
													margin_right = 4
													margin_left = 4
													using = Background_Area_Border
													text = "MY_REALM_WINDOW_VASSAL_STANCE_COUNT"
													tooltip = "MY_REALM_WINDOW_VASSAL_STANCE_COUNT_TT"
												}
											}
										}
									}

									expand = {}
								}
							}
						}
					}
				}

				### SUCCESSION TAB
				scrollbox = {
					name = "tab_succession"
					widgetid = "tab_succession"
					visible = "[PdxGuiTabs.IsTabSet( 'succession' )]"

					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					using = Animation_Tab_Switch

					blockoverride "scrollbox_margins" {
						margin = { 0 4 }
					}

					blockoverride "scrollbox_content"
					{
						vbox = {
							margin = { 20 15 }
							margin_bottom = 10
							spacing = 4
							layoutpolicy_horizontal = expanding

							text_label_center = {
								text = "MY_REALM_WINDOW_CURRENT_SUCCESSION"
							}

							vbox = {
								margin_bottom = 5
								spacing = 10
								ignoreinvisible = yes

								layoutpolicy_horizontal = expanding

								datamodel = "[MyRealmWindow.GetRealmLaws]"
								item = {
									hbox = {
										visible = "[And( And( Not( GuiLawGroup.GetLawGroup.HasFlag( 'realm_law' ) ), Not( GuiLawGroup.GetLawGroup.HasFlag( 'admin_law' ) ) ), GuiLawGroup.IsAvailable )]"

										layoutpolicy_horizontal = growing

										vbox = {
											layoutpolicy_horizontal = growing

											text_single = {
												layoutpolicy_horizontal = growing
												max_width = 350
												raw_text = "[GuiLawGroup.GetLawGroup.GetNameSingular]:"
											}

											text_single = {
												layoutpolicy_horizontal = growing
												max_width = 350
												text = "[GuiLawGroup.GetCurrentLevel.GetLaw.GetName]"
												default_format = "#high"
											}

											text_single = {
												layoutpolicy_horizontal = growing
												max_width = 350
												visible = "[GuiLawGroup.GetCurrentLevel.GetLaw.HasSubName]"
												text = "[GuiLawGroup.GetCurrentLevel.GetLaw.GetSubName]"
												default_format = "#F"
											}
										}
										expand = {
											layoutpolicy_horizontal = growing
										}

										button_standard = {
											datacontext = "[GuiLawGroup]"
											size = { 150 32 }

											onclick = "[OpenSuccessionLawChangeWindow(GuiLawGroup.Self)]"
											onclick = "[MyRealmWindow.SendButtonClickedTelemetry( PdxGuiTabs.GetActiveTab.GetKey, GuiLawGroup.GetLawGroup.GetKey )]"

											text = "MRW_CHANGE_LAW"
											tooltip = "MRW_CHANGE_LAW_TT"
										}
									}
								}
							}

							divider_light = {
								layoutpolicy_horizontal = growing
							}

							hbox = {
								layoutpolicy_horizontal = growing

								vbox = {
									layoutpolicy_horizontal = growing


									text_single = {
										layoutpolicy_horizontal = growing
										max_width = 350
										text = "MRW_DESIGNATED_HEIR_LABEL"
									}

									text_single = {
										visible = "[MyRealmWindow.GetCharacter.GetDesignatedHeir.IsValid]"
										layoutpolicy_horizontal = growing
										text = "MRW_DESIGNATED_HEIR"
										max_width = 350
									}

									text_single = {
										visible = "[Not(MyRealmWindow.GetCharacter.GetDesignatedHeir.IsValid)]"
										layoutpolicy_horizontal = growing
										text = "MRW_NO_DESIGNATED_HEIR"
										max_width = 350
									}
								}

								button_standard = {
									text = "MY_REALM_WINDOW_DESIGNATE_HEIR"
									size = { 150 32 }
									tooltip = "MRW_DESIGNATE_HEIR_TT"
									enabled = "[MyRealmWindow.CanDesignateHeir]"
									onclick = "[OpenDesignateHeirWindow]"
								}
							}
						}

						scrollbox = {
							name = "succession_scrollbox"
							minimumsize = { 0 350 }

							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							blockoverride "scrollbox_content"
							{
								margin = { 20 10 }
								spacing = 10

								hbox = {
									name = "current_heir"

									layoutpolicy_horizontal = expanding

									background = {
										using =  Background_Area_Dark
										alpha = 0.8

										modify_texture = {
											texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
											blend_mode = alphamultiply
											mirror = horizontal
										}
									}

									portrait_head = {
										datacontext = "[MyRealmWindow.GetCharacter.GetPlayerHeir]"
										blockoverride "glow_visible"
										{
											visible = no
										}
									}

									vbox = {
										margin = { 5 0 }
										margin_top = 5

										layoutpolicy_vertical = expanding
										layoutpolicy_horizontal = expanding

										vbox = {
											layoutpolicy_horizontal = expanding

											text_single = {
												visible = "[MyRealmWindow.HasHeir]"
												layoutpolicy_horizontal = expanding
												autoresize = no
												using = Font_Size_Medium
												fontsize_min = 14

												text = "[MyRealmWindow.GetCharacter.GetPlayerHeir.GetUINameNoTooltip]"
												default_format = "#low"
											}

											text_single = {
												name = "vassal_stances_that_prefer"
												datacontext = "[MyRealmWindow.GetCharacter.GetPlayerHeir]"

												visible = "[And( Not( IsLandlessAdventurer( GetPlayer ) ), And( MyRealmWindow.HasHeir, Not( StringIsEmpty( MyRealmWindow.GetCharacter.GetVassalStancesThatPrefer( Character.Self ) ) ) ) )]"

												layoutpolicy_horizontal = expanding
												layoutpolicy_vertical = expanding
												autoresize = no

												text = "MRW_HEIR_PREFERRED"
												using = Font_Size_Medium
											}

											text_single = {
												visible = "[MyRealmWindow.HasHeir]"
												layoutpolicy_horizontal = expanding
												layoutpolicy_vertical = expanding
												autoresize = no

												text = "MRW_YOUR_PLAYER_HEIR"
												default_format = "#weak"
											}
										}

										vbox = {
											layoutpolicy_horizontal = expanding

											text_single = {
												name = "no_heir_warning"
												visible = "[Not( MyRealmWindow.HasHeir )]"
												layoutpolicy_horizontal = expanding
												text = "MY_REALM_WINDOW_NO_HEIR_FLAVOR"
											}

											text_single = {
												name = "not_primary_heir"
												visible = "[And( MyRealmWindow.HasHeir, Not( ObjectsEqual( MyRealmWindow.GetCharacter.GetPlayerHeir, MyRealmWindow.GetCharacter.GetPrimaryTitle.GetHeir.Self ) ) )]"
												layoutpolicy_horizontal = expanding
												text = "MY_REALM_WINDOW_NOT_PRIMARY_HEIR"
											}
										}

										expand = {}
									}
								}

								##### FROM REALM'S PARTITION #####
								vbox = {
									layoutpolicy_horizontal = expanding

									vbox = {
										name = "their_partition_share"
										visible = "[And( MyRealmWindow.HasPartition, DataModelHasItems( MyRealmWindow.GetMyPartitionShare ) )]"
										margin_left = 5

										layoutpolicy_horizontal = expanding

										hbox = {
											layoutpolicy_horizontal = expanding

											text_label_left = {
												layoutpolicy_horizontal = expanding
												text = "MY_REALM_WINDOW_PARTITION_SHARE"
											}

											expand = {}
										}

										overlappingitembox = {
											name = "partition_share_box"
											size = { 460 55 }
											spacing = 10

											layoutpolicy_horizontal = expanding

											datamodel = "[MyRealmWindow.GetMyPartitionShare]"
											item = {
												coa_title_tiny_crown = {
													datacontext = "[TitleItem.GetTitle]"
													using = tooltip_ne
												}
											}
										}
									}

									spacer = {
										size = { 5 5 }
									}

									hbox = {
										visible = "[DataModelHasItems(MyRealmWindow.GetTitleSuccession)]"
										margin = { 5 0 }

										layoutpolicy_horizontal = expanding

										button_group = {
											onclick = "[GetVariableSystem.Toggle( 'expand_partition' )]"

											button_standard = {
												size = { 510 28 }

												modify_texture = {
													texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
													blend_mode = alphamultiply
													mirror = horizontal
												}
											}

											flowcontainer = {
												margin_top = 2.5
												margin_left = 5
												spacing = 5
												ignoreinvisible = yes

												widget = {
													size = { 18 22 }

													button_expand = {
														visible = "[Not(GetVariableSystem.Exists( 'expand_partition' ))]"
														parentanchor = center
														frame = 1
													}

													button_expand = {
														visible = "[GetVariableSystem.Exists( 'expand_partition' )]"
														parentanchor = center
														frame = 2
													}
												}

												text_single = {
													text = "MY_REALM_WINDOW_TITLES_LOST_ON_SUCCESSION"
													align = nobaseline
												}

											}
										}

										expand = {}
									}

									spacer = {
										visible = "[GetVariableSystem.Exists( 'expand_partition' )]"
										size = { 5 5 }
									}

									dynamicgridbox = {
										name = "title_succession"
										visible = "[GetVariableSystem.Exists( 'expand_partition' )]"

										layoutpolicy_horizontal = expanding

										datamodel = "[MyRealmWindow.GetTitleSuccession]"
										item = {
											hbox = {
												datacontext = "[TitleSuccessionItem.GetHeir]"
												margin_left = 10
												margin_bottom = 5
												maximumsize = { -1 100 }

												background = {
													using = Background_Area_With_Header
												}

												vbox = {
													margin_bottom = 5

													layoutpolicy_horizontal = expanding
													layoutpolicy_vertical = growing

													text_single = {
														name = "heir_name"
														text = "[Character.GetUINameNoTooltip]"
														layoutpolicy_horizontal = expanding
														using = Font_Size_Medium
														max_width = 400
														fontsize_min = 14
													}

													spacer = {
														size = { 10 5 }
													}

													text_single = {
														name = "heir_not_your_dynasty"
														layoutpolicy_horizontal = expanding

														text = "MY_REALM_WINDOW_HEIR_NOT_MY_DYNASTY"
														visible = "[Not(ObjectsEqual(Character.GetHouse.GetDynasty.Self, GetPlayer.GetHouse.GetDynasty.Self))]"
														using = Font_Size_Small
													}

													text_single = {
														name = "vassal_stances_that_prefer"
														visible = "[Not( StringIsEmpty( MyRealmWindow.GetCharacter.GetVassalStancesThatPrefer( Character.Self ) ) )]"

														layoutpolicy_horizontal = expanding
														layoutpolicy_vertical = expanding
														autoresize = no

														text = "MRW_HEIR_PREFERRED"
														using = Font_Size_Medium
													}

													text_single = {
														name = "heir_share"
														datacontext = "[GetPlayer]"
														visible = "[DataModelHasItems( TitleSuccessionItem.GetPartitionTitles )]"
														layoutpolicy_horizontal = expanding

														text = "MY_REALM_WINDOW_PARTITION_SHARE"
													}

													overlappingitembox = {
														name = "titles_box"
														datamodel = "[TitleSuccessionItem.GetPartitionTitles]"
														visible = "[DataModelHasItems( TitleSuccessionItem.GetPartitionTitles )]"
														minimumsize = { 350 50 }
														spacing = 10

														item = {
															container = {

																coa_title_tiny_crown = {
																	datacontext = "[TitleItem.GetTitle]"
																	using = tooltip_ne
																}

																icon = {
																	name = "has_laws"
																	visible = "[TitleItem.GetTitle.HasLaws]"
																	parentanchor = bottom|right
																	size = { 25 25 }
																	position = { 5 0 }
																	texture = "gfx/interface/icons/title_status/icon_title_law.dds"
																}
															}
														}
													}

													text_single = {
														name = "exception_label"
														visible = "[DataModelHasItems( TitleSuccessionItem.GetExceptionTitles )]"
														layoutpolicy_horizontal = expanding

														text = "MY_REALM_WINDOW_EXCEPTIONS"
													}

													overlappingitembox = {
														name = "exception_box"
														datamodel = "[TitleSuccessionItem.GetExceptionTitles]"
														visible = "[DataModelHasItems( TitleSuccessionItem.GetExceptionTitles )]"
														minimumsize = { 350 50 }
														spacing = 10

														item = {
															container = {

																coa_title_tiny_crown = {
																	datacontext = "[TitleItem.GetTitle]"
																	using = tooltip_ne

																	icon = {
																		name = "has_laws"
																		visible = "[TitleItem.GetTitle.HasLaws]"
																		parentanchor = bottom|right
																		size = { 25 25 }
																		position = { 5 0 }
																		texture = "gfx/interface/icons/title_status/icon_title_law.dds"
																	}
																}
															}
														}
													}
												}

												vbox = {
													layoutpolicy_vertical = expanding

													portrait_head = {
														name = "heir_portrait"
														blockoverride "portrait_button" {
															using = tooltip_ws
														}
													}

													expand = {}
												}
											}
										}
									}
								}

								vbox = {
									name = "exceptions"
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = growing
									margin_left = 5

									visible = "[DataModelHasItems( MyRealmWindow.GetSuccessionExceptions )]"

									hbox = {
										layoutpolicy_horizontal = expanding

										text_label_left = {
											layoutpolicy_horizontal = expanding
											text = "MY_REALM_WINDOW_EXCEPTIONS"
										}

										expand = {}
									}

									overlappingitembox = {
										name = "exceptions_box"
										layoutpolicy_horizontal = expanding
										size = { 460 55 }
										spacing = 10

										datamodel = "[MyRealmWindow.GetSuccessionExceptions]"

										item = {
											container = {
												coa_title_tiny_crown = {
													datacontext = "[TitleItem.GetTitle]"
													using = tooltip_ne
												}
											}
										}
									}
								}

								vbox = {
									name = "line_of_succession"
									visible = "[MyRealmWindow.HasSingleHeir]"
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = growing
									spacing = 10
									margin = { 5 0 }

									hbox = {
										layoutpolicy_horizontal = expanding

										text_label_left = {
											name = "line_of_succession_label"
											layoutpolicy_horizontal = expanding
											text = "MY_REALM_WINDOW_LINE_OF_SUCCESSION"
										}

										expand = {}
									}

									dynamicgridbox = {
										name = "line_of_succession_box"
										datamodel = "[MyRealmWindow.GetLineOfSuccession]"
										layoutpolicy_horizontal = expanding

										item = {
											hbox = {
												maximumsize = { -1 100 }
												margin_left = 10
												margin_bottom = 5
												datacontext = "[LineOfSuccessionItem.GetCharacter]"

												background = {
													using = Background_Area_With_Header
												}

												vbox = {
													layoutpolicy_vertical = growing
													margin_bottom = 5
													spacing = 2

													hbox = {
														layoutpolicy_horizontal = expanding

														text_single = {
															name = "heir_name"
															raw_text = "#bold [LineOfSuccessionItem.GetOrder|V]#!  [Character.GetShortUINameNoTooltip], "
															margin_left = 2
															max_width = 300
															fontsize = 20
															fontsize_min = 14
															using = Font_Size_Medium
														}

														text_single = {
															name = "character_age"
															raw_text = " [Character.GetAge]"
															default_format = "#low"
															tooltip = "[Character.GetDeathOrBirthDateInfo]"
															fontsize = 20
														}

														vbox = {
															layoutpolicy_vertical = expanding

															expand = {}

															icon = {
																visible = "[Not(Character.IsDeadAndValid)]"
																size = { 23 23 }
																framesize = { 60 60 }
																frame = "[Character.GetHealthIconFrame]"
																texture = "gfx/interface/icons/character_status/icon_health.dds"
																tooltip = "[Character.GetHealthInfo]"
															}
														}

														expand = {}
													}

													spacer = {
														size = { 10 3 }
													}

													hbox = {
														layoutpolicy_horizontal = expanding

														text_single = {
															name = "character_relation_to_you"
															text = "[Character.GetRelationToString( GetPlayer )]"
															tooltip = "EXTENDED_RELATIONS_TOOLTIP"

															fontsize_min = 13
															align = nobaseline
															max_width = 300
														}

														expand = {}
													}

													hbox_traits_list_small = {
														name = "traits_list"
														datacontext = "[LineOfSuccessionItem.GetTraitArrays]"
													}

													text_single = {
														name = "vassal_stances_that_prefer"
														visible = "[And( Not( IsLandlessAdventurer( GetPlayer ) ), Not( StringIsEmpty( MyRealmWindow.GetCharacter.GetVassalStancesThatPrefer( Character.Self ) ) ) )]"

														layoutpolicy_horizontal = expanding
														autoresize = no

														text = "MRW_HEIR_PREFERRED"
														using = Font_Size_Medium
													}

													expand = {}
												}

												expand = {}

												vbox = {
													layoutpolicy_vertical = expanding

													portrait_shoulders = {
														name = "heir_portrait"
														blockoverride "portrait_button" {
															using = tooltip_ws
														}
													}

													expand = {}
												}
											}
										}
									}
								}

								#### ELECTIONS ####
								vbox = {
									layoutpolicy_horizontal = expanding
									visible = "[MyRealmWindow.CanVote]"
									margin_left = 5

									hbox = {
										layoutpolicy_horizontal = expanding

										text_label_left = {
											layoutpolicy_horizontal = expanding
											text = "MY_REALM_WINDOW_ELECTIONS"
										}

										expand = {}
									}

									flowcontainer = {
										name = "elections"
										direction = vertical

										fixedgridbox = {
											name = "exceptions_box"
											addcolumn = 510
											addrow = 90
											datamodel = "[MyRealmWindow.GetTitlesCanVote]"

											item = {
												widget = {
													name = "election_title"
													size = { 510 90 }
													datacontext = "[TitleItem.GetTitle]"

													hbox = {
														spacing = 10

														coa_title_small_crown = {
															datacontext = "[Title]"
															using = tooltip_ne
														}

														vbox = {
															spacing = 7

															text_single = {
																layoutpolicy_horizontal = expanding
																text = "[Title.GetNameNoTooltip|U]"
															}

															hbox = {
																layoutpolicy_horizontal = expanding

																button_standard_select_arrow = {
																	name = "go_to_vote"

																	onclick = "[OpenSuccessionElectionWindowForTitle(Title.Self)]"
																	onclick = "[MyRealmWindow.SendButtonClickedTelemetry( PdxGuiTabs.GetActiveTab.GetKey, 'election' )]"

																	blockoverride "button_text"{
																		text = "MY_REALM_WINDOW_VOTE"
																	}

																	tooltip = "MY_REALM_WINDOW_VOTE_TOOLTIP"
																}

																expand = {}
															}
														}

														expand = {}
													}
												}
											}
										}
									}
								}

								expand = {
									layoutpolicy_vertical = expanding
								}
							}
						}
					}
				}
				
				### ADMIN LAW TAB
				scrollbox = {
					name = "tab_admin_laws"
					widgetid = "tab_admin_laws"
					visible = "[PdxGuiTabs.IsTabSet( 'admin_laws' )]"

					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					using = Animation_Tab_Switch

					blockoverride "scrollbox_margins" {
						margin = { 0 4 }
					}
					
					background = {
						texture = "gfx/interface/illustrations/council/fp2_bg_council_steward.dds"
						margin = { -5 0 }
						fittype = end
						alpha = 0.3

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
							blend_mode = alphamultiply
							mirror = vertical
						}
					}

					blockoverride "scrollbox_content"
					{
						vbox = {
							margin = { 20 10 }
							margin_bottom = 10
							
							vbox = {
								name = "administrative_laws"
								datamodel = "[MyRealmWindow.GetRealmLaws]"
								ignoreinvisible = yes
								margin_left = 10
								
								text_label_center = {
									text = "MY_REALM_ADMIN_LAWS_HEADER"
									using = Font_Size_Medium
									default_format = "#low"
								}
								spacer = {
									size = { 5 5 }
								}
								divider_light = {
									layoutpolicy_horizontal = growing
								}
								spacer = {
									size = { 5 15 }
								}

								item = {
									vbox = {
										layoutpolicy_vertical = expanding
										datacontext = "[GuiLawGroup.GetLawGroup]"
										visible = "[And(And( GuiLawGroup.GetLawGroup.HasFlag( 'admin_law' ), GuiLawGroup.IsAvailable ), Not(GetPlayer.GetGovernment.IsType('landless_adventurer_government')))]"
										ignoreinvisible = yes
										spacing = 3
										margin_bottom = 10

										text_label_center = {
											text = "[LawGroup.GetName]"
										}

										hbox = {
											datamodel = "[GuiLawGroup.GetLaws]"

											background = {
												texture = "gfx/lines/line_lifestyles_unavailable.dds"
												margin = { -8 -12 }
												tintcolor = { 0.7 0.5 0.25 1 }
											}

											item = {
												icon_button_decorative = {
													datacontext = "[GuiLaw.GetLaw]"
													size = { 60 60 }
													enabled = "[Or(GuiLaw.CanEnact, GuiLaw.IsEnacted)]"
													down = "[GuiLaw.IsEnacted]"
													alwaystransparent = "[GuiLaw.IsEnacted]"
													onclick = "[GuiLaw.Enact]"
													tooltipwidget = { pass_law_tooltip = {} }
													using = tooltip_below

													icon_button_decorative = {
														size = { 54 54 }
														parentanchor = center
														alwaystransparent = yes
													}

													button_icon = {
														visible = "[Not(GuiLaw.IsEnacted)]"
														texture = "[Law.GetIcon]"
														parentanchor = center
														size = { 42 42 }
														alwaystransparent = yes
													}

													icon = {
														visible = "[And( GuiLaw.IsEnacted , Not( GuiLaw.CanEnact ) )]"
														texture = "[Law.GetIcon]"
														parentanchor = center
														size = { 42 42 }
														alwaystransparent = yes

														using = Master_Button_Modify_Texture

														blockoverride "master_color_frame" {
															frame = 2
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}

				#####################################################################################

				vbox = {
					visible = "[And( Or( PdxGuiTabs.IsTabSet( 'domain' ), PdxGuiTabs.IsTabSet( 'vassals' ) ), Not( IsLandlessAdventurer( GetPlayer ) ) )]"
					layoutpolicy_horizontal = expanding
					margin = { 15 5 }
					margin_bottom = 15
					spacing = 8

					hbox = {
						margin_top = 4
						vbox = {
							visible = "[And(PdxGuiTabs.IsTabSet( 'domain' ), Not(GreaterThan_int32( Character.GetMaxTaxSlotsCount, '(int32)0')))]"
							tooltip = "[GetPlayer.GetDomainLimitTooltip]"
							spacing = 2
							layoutpolicy_vertical = expanding


							expand = {}

							text_single = {
								text = "[SelectLocalization(MyRealmWindow.IsOverDomainLimit, 'MY_REALM_WINDOW_DOMAIN_LIMIT_WARNING', 'MY_REALM_WINDOW_DOMAIN_LIMIT')]"
							}

							hbox = {

								icon = {
									size = { 35 35 }
									texture = "gfx/interface/icons/icon_domain.dds"
								}

								text_single = {
									text = "[SelectLocalization(MyRealmWindow.IsOverDomainLimit, 'MY_REALM_WINDOW_DOMAIN_LIMIT_VALUE_WARNING', 'MY_REALM_WINDOW_DOMAIN_LIMIT_VALUE')]"
								}
							}
							expand = {}
						}

						vbox = {
							spacing = 5
							hbox = {
								###BUTTON FOR MANAGING TAX COLLECTORS
								hbox = {
									margin_left = -5
									visible = "[And( Or( PdxGuiTabs.IsTabSet( 'vassals' ), PdxGuiTabs.IsTabSet( 'domain' )), Character.HasTaxSlots)]"

									button_standard_clean = {
										name = "manage_tax_slots"
										size = { 120 100 }

										onclick = "[ToggleGameViewData('manage_tax_slots', Character.GetID)]"

										background = {
											texture = "gfx/interface/buttons/illustrated_buttons/tax_collectors_illustrated_button.dds"
											fittype = centercrop
											scissor = yes
											alpha = 0.7
										}

										background = {
											texture = "gfx/interface/colors/black.dds"
											alpha = 0.4
										}

										background = {
											texture = "gfx/interface/component_tiles/tile_vignette_3px.dds"
											spriteType = Corneredtiled
											spriteborder = { 5 5 }
											margin = { -2 -2 }
											texture_density = 2
										}

										text_multi = {
											name = "info_text"
											parentanchor = top|hcenter
											position = { 0 2}
											alwaystransparent = yes
											max_width = 100

											multiline = yes
											autoresize = yes
											align = center
											text = "GO_TO_TAX_SLOTS_BUTTON_HEADER"
											default_format = "#clickable"
										}

										text_single = {
											parentanchor = hcenter|bottom
											widgetanchor = hcenter|bottom
											position = { 0 -8 }
											alwaystransparent = yes
											text = "GO_TO_TAX_SLOTS_BUTTON_VALUE"
										}
									}
								}

								vbox = {
									layoutpolicy_horizontal = expanding
									margin = { 12 0 }
									margin_bottom = 20

									background = {
										using = Background_Area
										margin_bottom = 0
										margin_top = 3
									}

									hbox = {
										margin_bottom = 5
										layoutpolicy_horizontal = expanding

										expand = {
											minimumsize = { 150 0 }
										}

										text_single = {
											text = "MY_REALM_WINDOW_TAXES"
											min_width = 100
											max_width = 100
											align = right
										}

										text_single = {
											text = "MY_REALM_WINDOW_LEVIES"
											minimumsize = { 100 0 }
											maximumsize = { 100 40 }
											align = right
										}
									}

									divider_light = {
										layoutpolicy_horizontal = expanding
									}

									hbox = {
										name = "domain_income_row"
										layoutpolicy_horizontal = expanding

										background = {
											visible = "[PdxGuiTabs.IsTabSet( 'domain' )]"
											using = Status_Highlight
										}

										flowcontainer = {
											spacing = 5

											text_single = {
												layoutpolicy_horizontal = expanding
												text = "MY_REALM_WINDOW_FROM_HOLDINGS"
												align = bottom
											}

											warning_icon = {
												visible = "[MyRealmWindow.IsOverDomainLimit]"
												size = { 25 25 }
												tooltip = "[Character.GetDomainLimitTooltip]"
											}
										}

										expand = {}

										text_single = {
											datacontext = "[MyRealmWindow.GetDomainIncome]"
											text = "[ValueBreakdown.GetValue]"
											min_width = 100
											max_width = 100
											align = right

											tooltipwidget = {
												widget_gold_breakdown_tooltip = {
													blockoverride "income"
													{
														visible = no
													}
												}
											}
										}

										text_single = {
											datacontext = "[MyRealmWindow.GetDomainLevy]"
											text = "[ValueBreakdown.GetValue]"
											minimumsize = { 100 0 }
											align = right
											tooltipwidget = {
												widget_gold_breakdown_tooltip = {
													blockoverride "income"
													{
														visible = no
													}
												}
											}
										}
									}

									hbox = {
										name = "vassals_income_row"
										layoutpolicy_horizontal = expanding

										background = {
											visible = "[PdxGuiTabs.IsTabSet( 'vassals' )]"
											using = Status_Highlight
										}

										flowcontainer = {
											spacing = 5

											text_single = {
												layoutpolicy_horizontal = expanding
												text = "MY_REALM_WINDOW_FROM_VASSALS"
												align = bottom
											}

											warning_icon = {
												visible = "[GreaterThan_int32( Character.GetNumVassalsTowardsLimit, Character.GetVassalLimit )]"
												size = { 25 25 }
												tooltip = "[Character.GetVassalLimitTooltip]"
											}
										}

										expand = {}

										text_single = {
											datacontext = "[MyRealmWindow.GetVassalsIncome]"
											text = "[ValueBreakdown.GetValue]"
											min_width = 100
											max_width = 100
											align = right

											tooltipwidget = {
												widget_gold_breakdown_tooltip = {
													blockoverride "income"
													{
														visible = no
													}
												}
											}
										}

										text_single = {
											datacontext = "[MyRealmWindow.GetVassalsLevy]"
											text = "[ValueBreakdown.GetValue]"
											min_width = 100
											max_width = 100
											align = right

											tooltipwidget = {
												widget_gold_breakdown_tooltip = {
													blockoverride "income"
													{
														visible = no
													}
												}
											}
										}
									}

									#IF CHARACTER HAS LIEGE
									hbox = {
										layoutpolicy_horizontal = expanding

										visible = "[GetPlayer.HasLiege]"

										#IF CHARACTER HAS LIEGE AND IS CLAN
										text_single = {
											datacontext = "[Character.GetAssignedTaxSlot]"
											visible = "[Character.IsAssignedAsTaxpayer]"
											layoutpolicy_horizontal = expanding
											text = "MY_REALM_WINDOW_FROM_TO_LIEGE_CLAN"
											max_width = 180
										}

										text_single = {
											visible = "[Not(Character.IsAssignedAsTaxpayer)]"
											layoutpolicy_horizontal = expanding
											text = "MY_REALM_WINDOW_FROM_TO_LIEGE"
											max_width = 180
										}

										text_single = {
											datacontext = "[MyRealmWindow.GetIncomeTax]"
											text = "[ValueBreakdown.GetValue]"
											min_width = 100
											max_width = 100
											align = right

											tooltipwidget = {
												my_realm_window_contribution_tooltip = {
													datacontext = "[MyRealmWindow.GetCharacter]"
													blockoverride "contribution_tooltip_header"
													{
														text = "MRW_TT_TAXES_TO_MY_LIEGE"
													}
													blockoverride "contribution_tooltip_content_suffix" {}
												}
											}
										}

										text_single = {
											datacontext = "[MyRealmWindow.GetLevyTax]"
											text = "[ValueBreakdown.GetValue]"
											min_width = 100
											max_width = 100
											align = right

											tooltipwidget = {
												my_realm_window_contribution_tooltip = {
													datacontext = "[MyRealmWindow.GetCharacter]"
													blockoverride "contribution_tooltip_header"
													{
														text = "MRW_TT_LEVIES_TO_MY_LIEGE"
													}
													blockoverride "contribution_tooltip_content_suffix" {}
												}
											}
										}
									}
								}
							}

							#IF CHARACTER HAS LIEGE AND IS CLAN
							hbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical  =expanding
								margin = { 15 10 }
								spacing = 10

								visible = "[And( Or( PdxGuiTabs.IsTabSet( 'vassals' ), PdxGuiTabs.IsTabSet( 'domain' ) ), And( GetPlayer.HasLiege, GetPlayer.GetGovernment.IsType( 'clan_government' ) ) )]"

								expand = {}

								background = {
									using = Background_Area_Dark
									alpha = 0.7
								}

								text_single = {
									visible = "[Character.IsAssignedAsTaxpayer]"
									datacontext = "[Character.GetAssignedTaxSlot]"

									text = "TAX_SLOT_REALM_VIEW_LIEGES_TAX_COLLECTOR"
									default_format = "#high"
									align = nobaseline
								}

								text_single = {
									visible = "[Not( Character.IsAssignedAsTaxpayer )]"

									text = "TAX_SLOT_REALM_VIEW_LIEGES_TAX_COLLECTOR_UNASSIGNED"
									default_format = "#high"
									align = nobaseline
								}

								expand = {}
							}

							hbox = {
								name = "vassal_contract"
								datacontext = "[MyRealmWindow.GetCharacter.GetLiege]"
								datacontext = "[MyRealmWindow.GetCharacter.GetVassalContract]"
								visible = "[And(Character.IsPlayerInteractionShown('vassal_modify_vassal_contract_interaction'), And( GetPlayer.HasLiege, GetPlayer.GetGovernment.IsType( 'feudal_government' ) ))]"
								spacing = 20

								button_replace = {
									#enabled = "[Character.IsPlayerInteractionValid('vassal_modify_vassal_contract_interaction')]" TODO CODE: This trigger doesn't seem to be working
									onclick = "[Character.OpenPlayerInteraction('vassal_modify_vassal_contract_interaction')]"
									tooltip = "[Character.GetPlayerInteractionTooltip('vassal_modify_vassal_contract_interaction')]"

									background = {
										using = Background_Area
										margin = { 5 5 }
									}
								}

								text_single = {
									max_width = 150
									visible = "[VassalContract.UsesObligationLevels]"
									layoutpolicy_horizontal = expanding
									align = nobaseline
									text = "MY_REALM_WINDOW_MY_TAX_LEVEL"

									background = {
										using = Background_Area
										margin = { 10 10 }
									}
								}

								text_single = {
									visible = "[VassalContract.UsesObligationLevels]"
									layoutpolicy_horizontal = expanding
									max_width = 150
									align = nobaseline
									text = "MY_REALM_WINDOW_MY_LEVIES_LEVEL"

									background = {
										using = Background_Area
										margin = { 10 10 }
									}
								}

								vassal_contract_not_default_icon = {}
							}
						}
					}
				}
			}
		}
	}
}

######################################################
################ TYPES AND TEMPLATES #################
######################################################

types MyRealmWindow
{
	type my_realm_window_contribution_tooltip = container {
		alwaystransparent = no
		using = GeneralTooltipSetup

		widget = {
			name = "background"
			using = DefaultTooltipBackground
			size = { 100% 100% }
			alwaystransparent = no
		}

		flowcontainer = {
			margin = { 10 0 }
			margin_top = 10
			direction = vertical
			ignoreinvisible = yes

			text_single = {
				margin = { 5 0 }
				block "contribution_tooltip_header" {}
			}

			widget_gold_breakdown_tooltip = {
				layoutpolicy_horizontal = expanding
				blockoverride "income"
				{
					visible = no
				}

				blockoverride "background" {}
			}

			block "contribution_tooltip_content_suffix" {
				text_single = {
					multiline = yes
					maximumsize = { 250 -1 }
					text = "MY_REALM_WINDOW_CONTRIBUTION_TO_THEOCRATIC_LIEGE"
					visible = "[Character.IsTheocraticLessee]"
				}
			}

			flowcontainer = {
				spacing = 15
				direction = vertical
				ignoreinvisible = yes
				block "tax_info_visible" {}
				block "tax_info" {}
			}

			flowcontainer = {
				spacing = 15
				direction = vertical
				ignoreinvisible = yes
				block "levy_info_visible" {}
				block "levy_info" {}
			}
		}
	}

	type vassal_contract_not_default_icon = icon
	{
		texture = "gfx/interface/icons/icon_contract_modification.dds"
		framesize = { 60 60 }
		frame = 1
		name = "vassal_contract_not_default"
		size = { 25 25 }
		visible = "[Not( VassalContract.IsContractDefault )]"
		tooltip = "VASSAL_CONTRACT_NOT_DEFAULT"
		using = tooltip_sw
	}

	type vassal_stance_icon = icon
	{
		datacontext = "[Character.GetVassalStance]"
		visible = "[And( Character.IsVassalOf( GetPlayer ), Not( Character.IsPlayer ) )]"

		texture = "[VassalStance.GetIcon]"
		tooltipwidget = {
			using = vassal_stance_tooltip
		}
	}

	type vassal_expected_legitimacy_icon = icon
	{
		visible = "[And( Character.IsVassalOf( GetPlayer ), Not( Character.IsPlayer ) )]"

		texture = "gfx/interface/icons/legitimacy_level_icon.dds"
		framesize = { 70 70 }
		frame = "[IntToFrameIndex( Character.GetLegitimacyExpectationsOfLiege )]"

		tooltip = "VASSAL_EXPECTED_LEGITIMACY_TT"
	}

	type vbox_domicile_button = vbox
	{
		datacontext = "[Character.GetDomicile]"

		margin = { 10 0 }

		layoutpolicy_horizontal = expanding

		background = {
			fittype = centercrop
			alpha = 0.7
			texture = "[Domicile.GetType.GetIllustration]"
			margin = { -10 0 }

			modify_texture = {
				texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
				blend_mode = alphamultiply
			}

			modify_texture = {
				texture = "gfx/interface/component_overlay/overlay_effect.dds"
				blend_mode = overlay
			}
		}

		button_standard_clean = {
			layoutpolicy_horizontal = expanding
			size = { 0 80 }

			onclick = "[ToggleGameViewData( 'domicile', Domicile.Self )]"

			background = {
				using = Background_Button_Illustration
				visible = "[IsGameViewOpen( 'domicile' )]"
			}

			using = Background_Vignette_Button

			hbox = {
				layoutpolicy_horizontal = expanding

				vbox = {
					spacing = 0
					margin = { 10 0 }

					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					hbox = {
						name = "domicile_header"
						layoutpolicy_horizontal = expanding

						hbox = {
							layoutpolicy_horizontal = expanding
							visible = "[Domicile.GetType.IsDomicileType( 'estate' )]"

							background = {
								margin_left = 15
								margin_right = 25
								margin_top = 0
								margin_bottom = 5

								texture = "gfx/interface/component_tiles/tile_title_bg_01.dds"
								spriteType = Corneredtiled
								spriteborder = { 40 8 }
								texture_density = 2

								modify_texture = {
									name = "mask"
									texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
									blend_mode = alphamultiply
									mirror = horizontal
								}
							}

							text_single = {
								text = "[Domicile.GetMainLevelText]"
							}

							expand = {}
						}

						hbox = {
							visible = "[Domicile.GetType.IsDomicileType( 'camp' )]"
							margin_left = 52

							background = {
								margin_left = -37
								margin_right = 25
								margin_top = 0
								margin_bottom = 5

								texture = "gfx/interface/component_tiles/tile_title_bg_01.dds"
								spriteType = Corneredtiled
								spriteborder = { 40 8 }
								texture_density = 2

								modify_texture = {
									name = "mask"
									texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
									blend_mode = alphamultiply
									mirror = horizontal
								}
							}

							text_single = {
								datacontext = "[Character.GetDomicile]"
								text = "[Domicile.GetMainLevelText]"
							}
						}
					}

					hbox = {
						name = "domicile_construction_info"

						layoutpolicy_horizontal = expanding

						minimumsize = { 0 40 }

						vbox = {
							tooltip = "[Domicile.GetBuildingUnderConstruction.GetConstructionTooltip( Character.Self )]"
							using = tooltip_ne

							hbox = {

								background = {
									visible = "[Domicile.GetType.IsDomicileType( 'camp' )]"
									margin_left = 15
									margin_right = 25
									margin_top = 0
									margin_bottom = 3

									texture = "gfx/interface/component_tiles/tile_title_bg_01.dds"
									spriteType = Corneredtiled
									spriteborder = { 40 8 }
									texture_density = 2
									alpha = 0.7

									modify_texture = {
										name = "mask"
										texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
										blend_mode = alphamultiply
										mirror = horizontal
										alpha = 0.1
									}
								}

								text_single = {
									text = "[Domicile.GetConstructionStatusText]"
									align = nobaseline
								}
							}

							hbox = {
								layoutpolicy_horizontal = expanding

								progressbar_standard = {
									name = "building_progressbar"
									visible = "[Domicile.IsConstructing]"
									alwaystransparent = yes

									layoutpolicy_horizontal = expanding
									maximumsize = { -1 15 }
									value = "[Multiply_float( FixedPointToFloat( Domicile.GetConstructionProgress ), '(float)100' )]"
									direction = horizontal
								}

								expand = {}
							}
						}

						text_single = {
							margin_right = 52
							visible = "[Domicile.CanUpgradeMain]"
							text = "[Domicile.GetUpgradeMainText]"
							default_format = "#P"
						}

						expand = {
							visible = "[Domicile.GetType.IsDomicileType( 'estate' )]"
						}
					}
				}

				hbox_access_domicile_button = {
					visible = "[And( Character.HasDomicile, ObjectsEqual( Character.Self, GetPlayer ) )]"
					margin_right = 10
				}

				expand = {}
			}
		}
	}
}
