namespace = fp3_yearly

# Warcraft - removed event and effects

scripted_effect fp3_yearly_2010_create_baker_effect = {
	create_character = {
		age = { 35 50 }
		location = root.capital_province
		gender_female_chance = root_faith_dominant_gender_female_chance
		faith = root.capital_province.faith
		culture = scope:bakers_county.culture 
		# Personality Traits
		trait = greedy
		random_traits_list = {
			count = 2
			brave = {}
			craven = {}
			wrathful = {}
			lustful = {}
			ambitious = {}
			diligent = {}
			stubborn = {}
			vengeful = {}
			deceitful = {}
			arrogant = {}
			arbitrary = {}
			impatient = {}
			gluttonous = {}
		}
		random_traits_list = {
			count = 1
			education_diplomacy_2 = {}
			education_stewardship_2 = {}
			education_stewardship_3 = {}
			education_stewardship_4 = {}
			education_learning_1 = {}
			education_learning_2 = {}
		}
		# Flavor Traits
		trait = administrator
		random_traits_list = {
			count = { 0 2 }
			gout_ridden = {}
			leper = {}
			lovers_pox = {}
			pneumonic = {}
			dwarf = {}
			giant = {}
			hunchbacked = {}
			weak = {}
			clubfooted = {}
			lisping = {}
			stuttering = {}
			wheezing = {}
			albino = {}
			scaly = {}
			spindly = {}
			maimed = {}
			one_eyed = {}
			one_legged = {}
			disfigured = {}
			blind = {}
		}
		random_traits = yes
		diplomacy = { 8 13 }
		martial = { 6 10 }
		stewardship = { 8 13 }
		intrigue = { 8 13 }
		learning = { 13 18 }
		prowess = { 3 8 }
		after_creation = {
			trigger_race_giving_no_gene_effect = yes # Warcraft
			random_list = {
				50 = {
					# Character is of average weight, nothing happens
				}
				25 = {
					change_current_weight = 25
				}
				25 = {
					change_current_weight = 75
				}
			}
			add_character_flag = peasant_outfit
		}
		save_scope_as = greedy_baker
	}
	
}

# Maunds of Wheat (The Bakers of Ghaznain)
# Your royal baker is hoarding bread, how shall you deal with them?
fp3_yearly.2010 = {
	type = court_event
	title = fp3_yearly.2010.t
	desc = fp3_yearly.2010.desc
	theme = court
	cooldown = { years = 5 }
	court_scene = {
		button_position_character = root
		roles = {
			scope:greedy_baker = {
				group = event_group
			}
			root = {
				group = event_group
				animation = personality_rational
			}
			scope:random_courtier = {
				group = event_group
				animation = beg
			}
		}
	}

	trigger = {
		has_fp3_dlc_trigger = yes
		has_royal_court = yes
		has_court_event_flag = no
		is_available = yes
		government_has_flag = government_is_clan
		any_sub_realm_county = {
			NOR = {
				has_county_modifier = fp3_generous_bakers_modifier
				has_county_modifier = fp3_wheat_shortage_modifier
			}
		}
		any_courtier = {
			is_available_ai_adult = yes
			has_court_event_flag = no
		}
	}

	immediate = {
		court_event_character_flag_effect = yes
		random_courtier = {
			limit = {
				is_available_ai_adult = yes
				has_court_event_flag = no
			}
			save_scope_as = random_courtier
			court_event_character_flag_effect = yes
		}
		random_sub_realm_county = {
			save_scope_as = bakers_county
		}
		fp3_yearly_2010_create_baker_effect = yes
		scope:greedy_baker = { court_event_character_flag_effect = yes }
	}

	option = { # Trample to death
		name = {
			text = {
				desc = fp3_yearly.2010.a
				first_valid = {
					triggered_desc = {
						trigger = { culture = { has_innovation = innovation_elephantry } }
						desc = fp3_yearly.2010.a_elephants
					}
					triggered_desc = {
						trigger = { culture = { has_innovation = innovation_elephantry } }
						desc = fp3_yearly.2010.a_camels
					}
					desc = fp3_yearly.2010.a_horses
				}
			}
		}
		flavor = fp3_yearly.2010.a.tt
		stress_impact = {
			greedy = minor_stress_impact_gain
			just = minor_stress_impact_loss
			sadistic = minor_stress_impact_loss
		}
		scope:greedy_baker = {
			override_death_effect = { death_reason = death_trampled } # Warcraft
		}
		add_prestige = minor_prestige_loss
		remove_short_term_gold = minor_gold_value
		scope:bakers_county = {
			add_county_modifier = {
				modifier = fp3_generous_bakers_modifier
				years = 15
			}
		}
		ai_chance = {
			base = 100
			modifier = {
				has_trait = greedy
				factor = 0
			}
		}
	}

	option = { # Recruit
		name = fp3_yearly.2010.b
		stress_impact = {
			just = minor_stress_impact_gain
			zealous = minor_stress_impact_gain
			arbitrary = minor_stress_impact_loss
		}
		add_courtier = scope:greedy_baker
		scope:bakers_county = {
			add_county_modifier = {
				modifier = fp3_wheat_shortage_modifier
				years = 10
			}
		}
		ai_chance = {
			base = 10
			modifier = {
				has_trait = just
				factor = 0
			}
			modifier = {
				has_trait = zealous
				factor = 0
			}
		}
	}

	option = { # Take the extra money
		name = fp3_yearly.2010.c
		add_gold = medium_gold_value
		stress_impact = {
			just = medium_stress_impact_gain
			generous = medium_stress_impact_gain
			zealous = minor_stress_impact_gain
			greedy = minor_stress_impact_loss
		}
		scope:bakers_county = {
			add_county_modifier = {
				modifier = fp3_wheat_shortage_modifier
				years = 10
			}
		}
		ai_chance = {
			base = 10
			modifier = {
				has_trait = just
				factor = 0
			}
			modifier = {
				has_trait = generous
				factor = 0
			}
		}
	}

	after = {
		clear_court_event_participation = yes
		scope:greedy_baker = { clear_court_event_participation = yes }
		scope:random_courtier = { clear_court_event_participation = yes }
	}
}

# Maunds of Wheat (Non-Royal Court Version)
fp3_yearly.2011 = {
	type = character_event
	title = fp3_yearly.2010.t
	desc = fp3_yearly.2010.desc
	theme = crown
	left_portrait = {
		character = root
		animation = thinking
	}
	right_portrait = {
		character = scope:random_courtier
		animation = beg
	}
	lower_left_portrait = scope:greedy_baker
	cooldown = { years = 10 }

	trigger = {
		has_fp3_dlc_trigger = yes
		government_has_flag = government_is_clan
		highest_held_title_tier >= tier_kingdom
		any_courtier = {
			is_available_ai_adult = yes
		}
		any_sub_realm_county = {
			NOR = {
				has_county_modifier = fp3_generous_bakers_modifier
				has_county_modifier = fp3_wheat_shortage_modifier
			}
		}
	}

	immediate = {
		random_courtier = {
			limit = {
				is_available_ai_adult = yes
			}
			save_scope_as = random_courtier
		}
		random_sub_realm_county = {
			save_scope_as = bakers_county
		}
		fp3_yearly_2010_create_baker_effect = yes
	}

	option = { # Trample to death
		name = {
			text = {
				desc = fp3_yearly.2010.a
				first_valid = {
					triggered_desc = {
						trigger = { culture = { has_innovation = innovation_elephantry } }
						desc = fp3_yearly.2010.a_elephants
					}
					triggered_desc = {
						trigger = { culture = { has_innovation = innovation_elephantry } }
						desc = fp3_yearly.2010.a_camels
					}
					desc = fp3_yearly.2010.a_horses
				}
			}
		}
		flavor = fp3_yearly.2010.a.tt
		stress_impact = {
			greedy = minor_stress_impact_gain
			just = minor_stress_impact_loss
			sadistic = minor_stress_impact_loss
		}
		scope:greedy_baker = {
			override_death_effect = { death_reason = death_trampled } # Warcraft
		}
		add_prestige = minor_prestige_loss
		remove_short_term_gold = minor_gold_value
		scope:bakers_county = {
			add_county_modifier = {
				modifier = fp3_generous_bakers_modifier
				years = 15
			}
		}
		ai_chance = {
			base = 100
			modifier = {
				has_trait = greedy
				factor = 0
			}
		}
	}

	option = { # Recruit
		name = fp3_yearly.2010.b
		add_courtier = scope:greedy_baker
		scope:bakers_county = {
			add_county_modifier = {
				modifier = fp3_wheat_shortage_modifier
				years = 10
			}
		}
		stress_impact = {
			just = minor_stress_impact_gain
			zealous = minor_stress_impact_gain
			arbitrary = minor_stress_impact_loss
		}
		ai_chance = {
			base = 10
			modifier = {
				has_trait = just
				factor = 0
			}
			modifier = {
				has_trait = zealous
				factor = 0
			}
		}
	}

	option = { # Take the extra money
		name = fp3_yearly.2010.c
		add_gold = major_gold_value
		stress_impact = {
			just = medium_stress_impact_gain
			generous = medium_stress_impact_gain
			zealous = minor_stress_impact_gain
			greedy = minor_stress_impact_loss
		}
		scope:bakers_county = {
			add_county_modifier = {
				modifier = fp3_wheat_shortage_modifier
				years = 10
			}
		}
		ai_chance = {
			base = 10
			modifier = {
				has_trait = just
				factor = 0
			}
			modifier = {
				has_trait = generous
				factor = 0
			}
		}
	}
}

# Warcraft - removed event

# A Beautiful Rule (The Ugliness of Sultan Mahmud)
# You are ugly, but your courtier suggests your beautiful actions are more important to your rule
#Triggers shortly after succession
fp3_yearly.2030 = {
	type = character_event
	title = fp3_yearly.2030.t
	desc = {
		desc = fp3_yearly.2030.desc_intro
		# Look in the mirror at your "ugly" feature
		first_valid = {
			triggered_desc = {
				trigger = { has_character_flag = fp3_yearly_2030_beauty_bad }
				desc = fp3_yearly.2030.desc_beauty_bad
			}
			triggered_desc = {
				trigger = { has_character_flag = fp3_yearly_2030_spindly }
				desc = fp3_yearly.2030.desc_spindly
			}
			triggered_desc = {
				trigger = { has_character_flag = fp3_yearly_2030_disfigured }
				desc = fp3_yearly.2030.desc_disfigured
			}
			triggered_desc = {
				trigger = { has_character_flag = fp3_yearly_2030_scaly }
				desc = fp3_yearly.2030.desc_scaly
			}
			triggered_desc = {
				trigger = { has_character_flag = fp3_yearly_2030_albino }
				desc = fp3_yearly.2030.desc_albino
			}
			triggered_desc = {
				trigger = { has_character_flag = fp3_yearly_2030_hunchbacked }
				desc = fp3_yearly.2030.desc_hunchbacked
			}
			triggered_desc = {
				trigger = { has_character_flag = fp3_yearly_2030_inbred }
				desc = fp3_yearly.2030.desc_inbred
			}
		}
		desc = fp3_yearly.2030.desc_outro
	}
	theme = crown
	override_background = {
		reference = sitting_room
	}
	left_portrait = {
		character = root
		animation = worry
	}
	right_portrait = {
		character = scope:reassuring_courtier
		animation = personality_compassionate
	}

	cooldown = { years = 100 }

	trigger = {
		has_fp3_dlc_trigger = yes
		is_available_adult = yes
		is_landed = yes
		OR = {
			has_trait = beauty_bad
			has_trait = spindly
			has_trait = disfigured
			has_trait = scaly
			has_trait = albino
			has_trait = hunchbacked
			has_trait = inbred
		}
		NOR = {
			has_trait = callous
			has_trait = sadistic
			has_trait = beauty_good
		}
		faith = {
			trait_is_virtue = generous
		}
	}

	immediate = {
		# Figure out which ugliness we will pick at
		random_list = {
			1 = {
				trigger = { has_trait = beauty_bad }
				add_character_flag = {
					flag = fp3_yearly_2030_beauty_bad
					days = 1
				}
			}
			1 = {
				trigger = { has_trait = spindly }
				add_character_flag = {
					flag = fp3_yearly_2030_spindly
					days = 1
				}
			}
			1 = {
				trigger = { has_trait = disfigured }
				add_character_flag = {
					flag = fp3_yearly_2030_disfigured
					days = 1
				}
			}
			1 = {
				trigger = { has_trait = scaly }
				add_character_flag = {
					flag = fp3_yearly_2030_scaly
					days = 1
				}
			}
			1 = {
				trigger = { has_trait = albino }
				add_character_flag = {
					flag = fp3_yearly_2030_albino
					days = 1
				}
			}
			1 = {
				trigger = { has_trait = hunchbacked }
				add_character_flag = {
					flag = fp3_yearly_2030_hunchbacked
					days = 1
				}
			}
			1 = {
				trigger = { has_trait = inbred }
				add_character_flag = {
					flag = fp3_yearly_2030_inbred
					days = 1
				}
			}
		}
		# Figure out which courtier should reassure us
		# If we have a lady in waiting, then use her
		if = {
			limit = {
				employs_court_position = lady_in_waiting_court_position
				is_available_ai_adult = yes
				has_contagious_deadly_disease_trigger = no
			}
			random_court_position_holder = {
				type = lady_in_waiting_court_position
				save_scope_as = reassuring_courtier
			}
		}
		# Otherwise, pick court jester
		else_if = {
			limit = {
				employs_court_position = court_jester_court_position
				is_available_ai_adult = yes
				has_contagious_deadly_disease_trigger = no
			}
			random_court_position_holder = {
				type = court_jester_court_position
				save_scope_as = reassuring_courtier
			}
		}
		# Otherwise, pick some (weighted) rando
		else = {
			random_courtier = {
				limit = {
					is_available_ai_adult = yes
					has_contagious_deadly_disease_trigger = no
				}
				weight = {
					base = 100
					opinion_modifier = {
						opinion_target = root
					}
					modifier = {
						has_trait = zealous
						add = 50
					}
					modifier = {
						has_trait = cynical
						add = -50
					}
					modifier = {
						has_trait = generous
						add = 50
					}
					modifier = {
						has_trait = greedy
						add = -50
					}
				}
				save_scope_as = reassuring_courtier
			}
		}
	}

	
	option = { # Act generously (even if it is instrumental and not in your nature)
		name = fp3_yearly.2030.a
		trigger = {
			NOT = { has_trait = generous }
		}
		remove_short_term_gold = medium_gold_value
		add_character_modifier = {
			modifier = generous_beauty
			years = 10
		}
		stress_impact = {
			greedy = major_stress_impact_gain
			arrogant = minor_stress_impact_gain
			deceitful = minor_stress_impact_gain
			callous = minor_stress_impact_gain
			temperate = minor_stress_impact_loss
		}
		ai_chance = {
			base = 100
		}
	}

	option = { # Actions will speak louder than words
		name = fp3_yearly.2030.d
		add_prestige = minor_prestige_value
		stress_impact = {
			base = medium_stress_impact_gain
			wrathful = medium_stress_impact_gain
			impatient = minor_stress_impact_gain
			temperate = minor_stress_impact_loss
			trusting = minor_stress_impact_loss
			humble = minor_stress_impact_loss
		}
		ai_chance = {
			base = 100
		}
	}

	option = { # Bask in your generosity
		name = fp3_yearly.2030.b
		trigger = {
			has_trait = generous
		}
		trait = generous
		add_prestige = medium_prestige_gain
		give_nickname = nick_the_beautiful_generous
		remove_short_term_gold = medium_gold_value
		add_character_modifier = {
			modifier = generous_beauty
			years = 10
		}
		stress_impact = {
			generous = major_stress_impact_loss
			arrogant = minor_stress_impact_loss
			temperate = minor_stress_impact_loss
			deceitful = minor_stress_impact_gain
			callous = minor_stress_impact_gain
		}
		ai_chance = {
			base = 100
		}
	}
	
	option = { # Gain dread
		name = fp3_yearly.2030.c
		add_dread = medium_dread_gain
		scope:reassuring_courtier = {
			add_opinion = {
				target = root
				modifier = disappointed_opinion
				opinion = -15
			}
		}
		imprison_character_effect = { #We kill the messenger, so to speak
			TARGET = scope:reassuring_courtier
			IMPRISONER = root
		}
		add_character_modifier = {
			modifier = dreaded_beauty
		}
		stress_impact = {
			compassionate = medium_stress_impact_gain
			just = minor_stress_impact_gain
			content = minor_stress_impact_gain
			craven = minor_stress_impact_gain
			humble = minor_stress_impact_gain
			generous = minor_stress_impact_gain
			deceitful = minor_stress_impact_loss
			callous = minor_stress_impact_loss
			wrathful = minor_stress_impact_loss
			vengeful = minor_stress_impact_loss
		}
		ai_chance = {
			base = 50
			modifier = {
				has_trait = compassionate
				factor = 0
			}
			modifier = {
				has_trait = content
				factor = 0
			}
			modifier = {
				has_trait = just
				factor = 0
			}
			modifier = {
				has_trait = humble
				factor = 0
			}
		}
	}
}

# Warcaft - Removed event, effect, and trigger
# Madrasas: Check if root has any valid members of madrasas. If so, trigger ongoing_madrasas_events
fp3_yearly.2060 = {
	hidden = yes

	immediate = {
		every_courtier = {
			limit = { fp3_is_valid_madrasa_pupil = { SPONSOR = root } }
			add_to_list = madrasa_pupils
		}
		house ?= {
			every_house_member = {
				limit = {
					fp3_is_valid_madrasa_pupil = { SPONSOR = root }
					NOT = { is_courtier_of = root }
				}
			}
			add_to_list = madrasa_pupils
		}

		if = {
			limit = { any_in_list = { list = madrasa_pupils } }
			trigger_event = { on_action = ongoing_madrasas_events }
		}
		else = {
			add_trait = giant
		}
	}
}

# Madrasas: Learning skill increased
fp3_yearly.2061 = {
	hidden = yes

	# This event is more likely to trigger if you have more madrasa pupils
	weight_multiplier = {
		base = 1
		modifier = {
			add = {
				value = list_size:madrasa_pupils
				subtract = 1
			}
		}
	}

	immediate = {
		random_in_list = {
			list = madrasa_pupils
			weight = {
				base = 1
				# Skilled members are more likely to have their stats improved
				modifier = {
					add = {
						value = learning
						multiply = 0.1
					}
				}
				# Learning education members are more likely to gain more learning
				modifier = {
					has_focus = education_learning
					add = 2
				}
				# AI energy (Diligent, lazy, etc.)
				modifier = {
					ai_energy <= high_negative_ai_value
					add = -2
				}
				modifier = {
					ai_energy >= high_positive_ai_value
					add = 2
				}
			}
			save_scope_as = improved_youth
		}
		send_interface_message = {
			type = event_learning_good
			title = {
				first_valid = {
					# Call them madrasas if our capital is advanced enough
					triggered_desc = {
						trigger = {
							capital_county ?= {
								development_level >= bad_development_level
							}
						}
						desc = fp3_yearly.2060.t_madrasas
					}
					# Otherwise just say that the youth are being educated in houses of worship
					desc = fp3_yearly.2060.t_houses_of_worship
				}
			}
			left_icon = scope:improved_youth
			scope:improved_youth = { add_learning_skill = 2 }
		}
	}
}

# Madrasas: Physician experience gain
fp3_yearly.2062 = {
	hidden = yes

	# This event is more likely to trigger if you have more futuwaa members
	weight_multiplier = {
		base = 1
		modifier = {
			add = {
				value = list_size:madrasa_pupils
				subtract = 1
			}
		}
	}

	immediate = {
		random_in_list = {
			list = madrasa_pupils
			weight = {
				base = 1
				# Members w/high learning are more likely to gain physician experience
				modifier = {
					add = {
						value = learning
						multiply = 0.1
					}
				}
				# AI energy (Diligent, lazy, etc.)
				modifier = {
					ai_energy <= high_negative_ai_value
					add = -2
				}
				modifier = {
					ai_energy >= high_positive_ai_value
					add = 2
				}
			}
			save_scope_as = improved_youth
		}
		send_interface_message = {
			type = event_learning_good
			# "Madrasas" vs "Schooling in Mosques"
			title = {
				first_valid = {
					# Call them madrasas if our capital is advanced enough
					triggered_desc = {
						trigger = {
							capital_county ?= {
								development_level >= bad_development_level
							}
						}
						desc = fp3_yearly.2060.t_madrasas
					}
					# Otherwise just say that the youth are being educated in houses of worship
					desc = fp3_yearly.2060.t_houses_of_worship
				}
			}
			left_icon = scope:improved_youth
			scope:improved_youth = {
				if = {
					limit = { has_trait = lifestyle_physician }
					add_trait_xp = {
						trait = lifestyle_physician
						value = {
							integer_range = {
								min = 5
								max = 10
							}
						}
					}
				}
				else = { add_trait = lifestyle_physician }
			}
		}
	}
}
