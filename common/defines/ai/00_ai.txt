NAI = {
	SHORT_TASK_TICK = {									# Number of days between recalculating short  tasks (per tier)
		7
		30
		14
		7
		7
		7
	}
	
	MEDIUM_TASK_TICK = {								# Number of days between recalculating medium tasks (per tier)
		30
		180
		60
		30
		30
		30
	}
	
	LONG_TASK_TICK = {									# Number of days between recalculating long tasks (per tier)
		60
		360
		180
		60
		60
		60
	}
	
	RARE_TASK_TICK = {									# Number of days between recalculating rare tasks (per tier)
		180
		720
		360
		180
		180
		180
	}

	STRATEGY_TASK_TICK = {									# Number of days between recalculating strategy tasks (per tier)
		180
		720
		360
		180
		180
		180
	}

	TITLE_AND_VASSAL_GRANT_TICK = {						# Number of days between checking title and vassal grants (per tier). If a grant happens, it'll always get rechecked on the next day
		720
		720
		720
		90
		90
		90
	}

	REVOKE_TITLE_TICK = {						# Number of days between checking title revocations (per tier). If a revocation happens, it'll always get rechecked on the next day. Imprisoning a vassal will also cause a check on the next day
		720
		720
		720
		360
		360
		360
	}

	MINIMUM_TASKS_IN_TICK = 128							# How many tasks do we need in each tick?
	MAX_TASKS_IN_TICK = 192								# How high do we cap out? (If the frequency of a tick means we should do even more than this, we ignore this)
	MAX_TICK_STALENESS = 8								# How long can we delay a tick for better load-balancing?

	BUDGET_CATEGORY = {									# The last category is the main category
		0.0												# Reserved (only used for certain types of characters, like the Pope)
		0.0												# War chest; has its own logic
		0.20											# LongTerm
		0.80											# ShortTerm
	}
	
	BUDGET_CATEGORY_MAX = {								# Over max it will try to redistribute overflow to other category
		-1
		-1
		5000
		5000
	}
	
	BUDGET_CATEGORY_SHORT_TERM_MIN = {					# Under this amount of short term gold the AI will be hesitant to spend/save on other categories (per tier)
		25
		25
		200
		200
		400
		400
	}
	
	MIN_RESERVED_GOLD_SPIRITUAL_HEAD_OF_FAITH = 750		# Character will avoid actively using gold if under this value
	MIN_RESERVED_GOLD_HOLY_ORDER = 500					# Character will avoid actively using gold if under this value
	MIN_WAR_CHEST = {									# The desired war chest will always be at least this much money, by tier
		25
		25
		50
		100
		200
		300
	}
	MONTHS_OF_MAINTENANCE_IN_WAR_CHEST = 18				# The AI will want this many months of max maintenance in their war chest, if that's more than what MIN_WAR_CHEST says
	PERCENTAGE_INTO_WAR_CHEST = 0.6						# When the war chest hasn't been filled, the AI will put this much of the money it earns into the war chest (reserved gold still gets filled first)
	BUILDING_MIN_SCORE_COMPARED_TO_BEST = 0.8			# Any potential building with a score lower than this ratio of the best available building (even if the AI can't afford it right now) will be discarded
	
	GOALS_PER_TYPE = {									# Number goals per type (per tier)
		0
		0
		1
		2
		3
		3
	}

	MEN_AT_ARMS_EXPENSE_MIN = 0.15						# The AI will quickly try to spend this much of its income on MAA maintenance
	MEN_AT_ARMS_EXPENSE_IDEAL = 0.4						# The AI will try to spend this much of its income on MAA maintenance. It won't buy beyond this, but might end up higher due to reduced income
	MEN_AT_ARMS_EXPENSE_MAX = 0.6						# The AI will disband MAA if it ends up spending more than this amount of its income on maintenance

	MEN_AT_ARMS_PRESTIGE_EXPENSE_MIN = 0.25				# The AI will quickly try to spend this much of its prestige income on MAA maintenance
	MEN_AT_ARMS_PRESTIGE_EXPENSE_IDEAL = 0.4			# The AI will try to spend this much of its prestige income on MAA maintenance. It won't buy beyond this, but might end up higher due to reduced income
	MEN_AT_ARMS_PRESTIGE_EXPENSE_MAX = 0.6				# The AI will disband MAA if it ends up spending more than this amount of its prestige income on maintenance
	MEN_AT_ARMS_CHANCE_EXPENSE_BELOW_MIN = 0.4			# Chance the AI will prefer MaA to buildings when spending less than the min on MaA
	MEN_AT_ARMS_CHANCE_EXPENSE_BELOW_IDEAL = 0.1		# Chance the AI will prefer MaA to buildings when spending less than the ideal on MaA
	MEN_AT_ARMS_REALM_SIZE_FOR_COST_EFFECTIVENESS_START = 5	# At realm sizes of this and below, men at arms quality is based on stat points compared to cost
	MEN_AT_ARMS_REALM_SIZE_FOR_COST_EFFECTIVENESS_END = 50	# At realm sizes after this, men at arms quality is completely unaffected by cost. Between the two values, we interpolate between the unmodified and modified quality

	GOAL_MIN_PROGRESS_TO_START = 0.2					# Resources needed to be able to add a goal
	
	# Balancing: 100 is a "normal" score. This puts a dejure duchy at 135
	GOAL_CREATE_TITLE_TIER_SCORE = 10					# Multiplied by tier * tier
	GOAL_CREATE_TITLE_DE_JURE_MULTIPLIER = 2			# If de jure under the character
	GOAL_CREATE_TITLE_COUNT_OVER_DOMAIN_LIMIT_MULTIPLIER = 10			# If count and over domain limit
	
	CHARACTER_INTERACTION_DEFAULT_MIN_REPLY_DAYS = 3	# the AI will wait at least this many days before replying to a character interaction the interaction can override this value
	CHARACTER_INTERACTION_DEFAULT_MAX_REPLY_DAYS = 10	# the AI will wait at most this many days before replying to a character interaction the interaction can override this value
	
	BETROTHAL_MIN_AGE = 12								# The AI will not betrothe, nor seek betrothals with characters under this age.
	MARRIAGE_FOCUS_MIN_AGE = 20							# Under this age the AI will less often check for betrothals/mariiages
	
	# Warcraft, needs workaround
	MARRIAGE_MALE_DESPERATION_AGE = 25					# Over this age the AI will consider less enticing marriages
	MARRIAGE_FEMALE_DESPERATION_AGE = 25				# Over this age the AI will consider less enticing marriages
	MARRIAGE_DESPERATION_AGE_MULTIPLIER = 50			# Multiplied with age minus desperation age
	MARRIAGE_NO_PRESTIGE_LOSS_BONUS = 50				# If a marriage causes no prestige loss, a bit of score is added
	MARRIAGE_OWNER_IS_MATCHMAKER = yes 					# Can we simply check the "matchmaker" link rather than having to use the interaction's redirect effect? Allows for better AI performance
	
	MAX_NUMBER_OF_COURTS_TO_SEARCH_FOR_SPOUSES = {		# Number of courts that are searched for spouse candidates, per tier.
		0
		0
		8
		16
		32
		32
	}
	
	MAX_NUMBER_OF_SPOUSE_CANDIDATES = {					# Number of spouse candidates before the search is aborted, per tier.
		0
		0
		4
		8
		16
		32
	}
	
	SPOUSE_SCORE_ALLIANCES_WANTED = 2					# Over this number, new alliances through marriage will not impact spouse score unless they are of a higher tier than the current highest tier alliance
	SPOUSE_SCORE_EXISTING_ALLIANCE_DIVIDER = 1.5			# If already allied, divide the alliance score with this
	
	SPOUSE_SCORE_HIGHER_TIER_ALLIANCE = 700			# Score if the marriage yields an alliance with a higher-tier character
	SPOUSE_SCORE_SAME_TIER_ALLIANCE = 250				# Score if the marriage yields an alliance with a same-tier character
	SPOUSE_SCORE_LOWER_TIER_ALLIANCE = 100				# Score if the marriage yields an alliance with a lower-tier character
	
	# Warcraft, needs workaround
	SPOUSE_SCORE_MALE_AGE_PENALTY_AGE = 30000			# Over this age a male spouse score penalty is applied
	SPOUSE_SCORE_FEMALE_AGE_PENALTY_AGE = 30000			# Over this age a female spouse score penalty is applied
	SPOUSE_SCORE_MALE_AGE_PENALTY_MULTIPLIER = 10		# Multiplied with male spouse's age above SPOUSE_SCORE_MALE_AGE_PENALTY_AGE
	SPOUSE_SCORE_FEMALE_AGE_PENALTY_MULTIPLIER = 10		# Multiplied with female spouse's age above SPOUSE_SCORE_FEMALE_AGE_PENALTY_AGE
	
	SPOUSE_SCORE_LINEALITY_MISMATCH_SCORE = -700		# This value is added to the spouse score if the marriage is not of the desired lineality (matrilineal vs. patrilineal)
	
	THREAT_MIN_STRENGTH_RATIO = 0.5						# Only consider threats above this ratio
	THREAT_CLAIM_TIER_MULTIPLIER = 10					# Multiplied with each claim's tier squared
	THREAT_DE_JURE_CLAIM_MULTIPLIER = 50				# Multiplied de jure claim
	THREAT_MAX_DIPLO_DISTANCE = 1000					# Max distance to be considered a threat
	THREAT_STRENGTH_NEIGHBOUR_RATIO_MULTIPLIER = 100	# Multiplied with the strengt ratio
	THREAT_STRENGTH_RATIO_MULTIPLIER = 50				# Multiplied with the strengt ratio

	ENEMY_MAX_STRENGTH_MULTIPLIER = 1.5					# Only consider enemies equal or below this ratio
	ENEMY_CLAIM_TIER_MULTIPLIER = 10					# Multiplied with each claim's tier squared
	ENEMY_DE_JURE_CLAIM_MULTIPLIER = 50					# Multiplied de jure claim
	
	FRIEND_ALLY_MAX_DIPLO_DISTANCE = 1000				# Max distance to be considered for a strength ratio bonus
	FRIEND_ALLY_MIN_STRENGTH_RATIO = 0.25				# Only add strength ratio bonus for equal or above this ratio
	FRIEND_ALLY_STRENGTH_RATIO_MULTIPLIER = 100			# Multiplied with the strengt ratio
	
	MAX_NUMBER_OF_DIPLO_VALUES = {						# Number of allowed entries in each category (per tier)
		0
		2
		4
		6
		8
		10
	}
	
	MURDER_BASE_CHANCE = 10								# Chance of the AI starting a murder scheme against a valid target
	PLAYER_INTERACTION_REJECTION_DELAY_MONTHS = 12		# The AI isn't allowed to resend a rejected interaction until this many months have passed
	
	MIN_PATH_COST_TO_CONSIDER_WATER_PATH = 120			# Number of travel days before AI considers searching for a path across water instead
	MIN_PATH_COST_SAVINGS_TO_CONSIDER_WATER_PATH = 65	# Number of travel days saved before AI considers going through water instead
	
	MAX_PATH_COST_FACTOR = 5							# The maximum cost for a path is this factor times the straight path cost
	
	MAX_PATH_COST_FACTOR_TO_CONSIDER_WATER_PATH = 2.0	# The maximum cost for a water path is this factor times the cost of the fastest land path (ignoring enemies, attrition, etc.), used when AI in on same land body as target
	
	RAISE_LEVIES_COOLDOWN = 180							# Number of days before the AI tries to raise levies if it already has an army
	RAISE_TROOPS_MIN_RATIO_OF_SELF = 0.3				# If the AI doesn't have troops raised, it won't raise them unless the troops amount to at least this much compared to its max troops
	RAISE_TROOPS_MIN_RATIO_OF_ENEMY = 0.5				# Or this much compared to its enemy
	RAISE_ADDITIONAL_TROOPS_RATIO = 0.2					# If AI has already rasied some troops and decided they need more then let AI accumulate this much compare to its possible troops before doing that. It helps to avoid spamming a lot of armies with very little amount of troops
	REDUCED_EFFECTIVE_WEALTH_PER_HIRED_MERC = 100		# For each hired merc, the AI pretends to have less money so that it ends up keeping some reserves
	MAX_WEALTH_EXPENDITURE_MERCS = 0.8					# The AI will never spend more than this fraction of its current wealth on buying mercs
	MERC_OVERMATCHING_TARGET = 1.25						# The AI will try to outnumber the enemy by this ratio if it can afford it based on its warchest
	MAX_WAR_CHEST_EXPENDITURE_MERC_OVERMATCHING = 0.7	# The AI will use up to this much of its warchest when trying to outnumber the enemy
	MIN_HIRING_GOAL = 500								# If missing less than this amount to outnumber its enemies, the AI will hire as if were actually missing this amount
	MAX_HIRING_GOAL_OVERFLOW_RATIO = 1.5				# The AI won't hire more than this times as many men as it is missing (using MERC_OVERMATCHING_TARGET). It'll hire the most expensive merc that fits within this. E.G., this means that if the AI is missing 1000 men, it'll hire the most expensive merc with less than 2000 men
	MONTHS_BEFORE_CONTRACT_END_TO_REHIRE = 3			# This many months before a merc contract ends, the AI will rehire mercs if it can afford it and thinks it still needs them

	TITLE_GRANT_HATE_THRESHOLD = -25					# The AI will mostly avoid giving titles to people whose opinion of them is below this
	TITLE_GRANT_VASSAL_CHILD_SUCCESSION_DISTANCE = 3	# The AI will give titles to the children of vassal sometimes if they're the xth child (ignoring those of a non-preferred gender), and not in line to inherit anything
	COUNCIL_TASK_SWITCH_SCORE = 1.25					# In order for the AI to switch to a different task type, the task needs to have a score that's at least the score of the current task multiplied with this. 1.25 means it needs to be 25% higher

	# When buying/disbanding MaA, these mults are used to figure out the score. Note that the score is divided by cost, and multiplied by stack size (except for siege value, which is only divided by cost)
	TOUGHNESS_SCORE_MULT = 10
	ATTACK_SCORE_MULT = 10
	PURSUIT_SCORE_MULT = 3
	SCREEN_SCORE_MULT = 1
	SIEGE_VALUE_SCORE_MULT = 1000
	NEGATIVE_SCORE_PER_EXISTING_REGIMENT = 20			# How much is the score of the regiment type reduced per existing subregiment of that type?
	RANDOM_REGIMENT_SCORE_MAX = 0.2						# How much extra score can the AI randomly give to this regiment? Will always be the same for the same character + regiment. 0.2 means 0-20% extra
	NORMAL_SUB_REGIMENTS_PER_SIEGE_SUB_REGIMENT = 5		# How many non-siege regiments should there be for each siege regiment? Siege will always be the first sub-regiment purchased, and the AI will maintain this ratio
	SUBTRACT_NORMAL_SUB_REGIMENTS_FOR_SIEGE_PURPOSES = 3# Ignore this many normal regiments when buying siege sub-regiments. This effectively means the AI will buy their first siege weapon after this many normal ones, and then one more for every NORMAL_SUB_REGIMENTS_PER_SIEGE_SUB_REGIMENT additional normal sub-regiments
	REGIMENT_OBSOLETION_SCORE_DIFFERENCE = 20			# The AI will disband a regiment if it is this much worse than the best available regiment, and it is unable to hire more regiments (due to cost or being at cap). Quick math: 10 damage * 100 men / 200 cost = 5 score difference


	AI_BASE_WAR_CHANCE = 0.1							# Basic chance of declaring war. Further reduced by energy; x0 at -100, x1 at 100, x0.5 at 0 energy
	AI_WAR_BASE_COOLDOWN = 365							# How long, in days, does the AI have to wait between wars?
	AI_WAR_COOLDOWN_RATIO_FOR_FULL_CHANCE = 5			# How far beyond the cooldown do you have to go before the time since the last war stops reducing the chance? With these numbers, chance at day 3650 would be 0x, 1x at 3650*2, and 0.5x at 3650*1.5
	AI_WAR_MAX_OFFENSIVE_WAR_PENALTY = 0.0				# If your offensive war penalty is higher than this, don't declare war unless you're a warmonger (faith doctrine) or irrational
	AI_WAR_MIN_RATIONALITY_FOR_OFFENSIVE_WAR_PENALTY = -30	# At or below this value, the AI will declare war even if their offensive war penalty is high
	MIN_SCORE_RATIO_FOR_CASUS_BELLI = 0.6				# The AI will never declare a war below this ratio of the best war it has available
	
	CB_SCORE_DE_JURE_MULTIPLIER = 20					# If the title is de jure under the AI character
	CB_SCORE_DE_JURE_UNDER_LIEGE_MULTIPLIER = 1.5		# If the title is de jure under the AI character's liege
	CB_SCORE_DE_JURE_UNDER_HIGHER_TITLE_MULTIPLIER = 15	# If the title is de jure under the de jure title directly above an independent AI character
	CB_SCORE_HIGHER_TITLE_MULTIPLIER = 5.0				# If the title is a higher tier than the AI character's current primary title

	EXTRA_CB_SCORE_FOR_HOLY_SITES = 10					# The AI will assign this much extra score to conquering a province that is its holy site
	CB_SCORE_MULT_NEIGHBOR_TITLE = 5					# The AI will multiply the score of neighboring titles taken by a CB by this much
	
	TARGET_MAX_DEFENSIVE_WARS = 3						# AI won't declare war on someone who already has this many or more defensive wars
	DESIRED_WAR_SIDE_STRENGTH = 1.25					# AI won't call in more allies if its side in a war has at least this ratio of troops compared to the enemy. Uses current strength for own side, max strength for enemy side
	
	CB_TARGET_MAX_STRENGTH = 3.0						# AI won't look for CB:s against anyone stronger than this. Used by independent rulers.
	CB_TARGET_MAX_STRENGTH_VASSAL = 2.0					# AI won't look for CB:s against anyone stronger than this. Used by vassal rulers.
	
	CB_TARGET_AT_PEACE_STRENGTH_RATIO_MAX = 1.0			# AI won't declare a war on someone stronger than this if they are at peace
	CB_TARGET_AT_WAR_STRENGTH_RATIO_MAX = 1.5			# AI won't declare a war on someone stronger than this if they are already at war

	CB_TARGET_AT_WAR_STRENGTH_RATIO_PER_WAR = 0.25		# Added per war the target character is in above the first one, but only counts wars where the target is the primary attacker or defender
	CB_TARGET_STRENGTH_RATIO_BOLDNESS = 0.25			# Multiplied by positive boldness, so 0.0 at zero and 0.25 at 100
	
	CB_OPINION_OF_TARGET_MULTIPLIER = 0.1				# Multiplier for opinion of target 
	CB_OPINION_OF_CLAIMANT_MULTIPLIER = 0.1				# Multiplier for opinion of claimant (if claimant is the AI, we use MAX_OPINION)
	
	CB_CLAIMANT_BECOMES_INDEPENDENT_MULTIPLIER = 0.25	# Multiplier if the claimant becomes indepent dut to this CB
	CB_CLAIMANT_IS_CLOSE_RELATIVE_MULTIPLIER = 2		# Multiplier if the claimant is a close relative
	CB_CLAIMANT_IS_NOT_CLOSE_RELATIVE_MULTIPLIER = 0.75	# Multiplier if the claimant is not a close relative
	CB_CLAIMANT_GREED_MULTIPLIER = -0.5					# Multiplier of the AI's greed when scoring a CB for a claimant. Full greed gives this value while full generous gives the positive equivalent

	ENEMY_COMBAT_STRENGTH_MULTIPLIER = 1.1				# The AI will take its estimated enemy strength times this multiplier
	COUNTER_RAID_MIN_DISTANCE = 75						# The AI will try to raise counter-raid troops at least this far awy from the raid
	COUNTER_RAID_MAX_DISTANCE = 200						# The AI will raise counter-raid troops at most this far away from the raid
	OTHER_RAID_ARMY_COMBINED_STRENGTH_MAX_DISTANCE = 200	# Other raid armies no more than this far away will be considered as part of the same raid army for strength purposes
	VASSAL_COUNTER_RAID_MIN_STRENGTH_RATIO = 0.9		# A vassal at least this strong as the raid will be responsible for countering it
	INDEPENDENT_COUNTER_RAID_MIN_STRENGTH_RATIO = 0.75	# An independent ruler at least this strong as the raid will be responsible for countering it if no vassal does
	MAX_RAID_DISTANCE = {								# How far away will the AI raid? Uses naval distance
		0
		0
		1000 # Agder to Britanny/Ireland
		1200 # Agder to Western France
		3000 # Agder to southern Spain
		4000 # Agder to Rome
	}							
	MAX_RAID_DISTANCE_NEXT_COUNTY = 200					# After raiding one county, how far is the AI willing to go to the next?
	MIN_STRENGTH_TO_RAID_VASSAL = 500					# How strong do vassals have to be for the AI to go raiding?
	MIN_STRENGTH_TO_RAID_INDEPENDENT = 300				# How strong do independent rulers have to be for the AI to go raiding?
	MAX_RAID_TARGET_STRENGTH = 1.5						# Don't raid enemies too strong
	MAX_RAID_TARGET_STRENGTH_AT_WAR = 5.0				# But if they're at war, the risk might be worth it
	MIN_STRENGTH_FOR_RAIDER_TO_AVOID = 0.9				# If there's hostile units in this county and neighboring counties that are combined this strong compared to the raid army, flee home
	RAID_SCORE_MIN_STRENGTH_RATIO = 0.2 				# We divide the score by how strong the target is compared to us; if lower than this, we use this number. So 0.2 means that outnumbering them 5:1 and 2:1 are equivalent
	RAID_SCORE_DISTANCE_OFFSET = 200 					# We divide the score by the distance from the realm (or army, if follow-up raid) plus this number
	RAID_SCORE_DISTANCE_OFFSET_NEXT_TARGET = 30 		# We divide the score by the distance from the army plus this number when finding the next county to go to
	RAID_SCORE_FORT_LEVEL_OFFSET = 5 					# We divide the score by the sum of all fort levels in the county, plus this number
	MIN_RAID_SCORE_COMPARED_TO_BEST_SCORE = 0.4			# Scores this much worse than the best score are just discarded
	RAID_CHANCE_AT_MAX_GREED = 0.9						# Chance to go raiding each year if at 100 greed. 0.0 at -100 greed. Must still meet all other conditions
	MAX_RAID_DAYS = 365									# After this long, the AI will go home when a raid action concludes
	RAID_COOLDOWN_DAYS = 1825							# The AI won't start a new day for this long after last having started one
	COUNTER_RAID_COOLDOWN_DAYS = 180					# The AI won't counter-raid for this long after they last counter-raided

	# Hostility levels start at 0 (same faith or equivalent to same faith)
	RAID_SCORE_FAITH_HOSTILITY_MULT = {	# Raid score mult based on hostility
		1
		1.5
		2
		3
	}
	RAID_SCORE_MULT_SAME_CULTURE = 0.5
	RAID_SCORE_MULT_SAME_HERITAGE = 0.75
	
	CHASE_MIN_SIZE = 100								# The AI will not bother trying to chase armies smaller than this
	CHASE_PRIMARY_ENEMY_MIN_SCORE = 0.75				# Score is between 0.0 and 1.0 and represents the percentage of the enemy's total strength the target unit contains. If lead by the primary enemy, the score is capped to this minimum
	CHASE_PRIMARY_ENEMY_SOLDIER_MODIFIER = 2.0			# Modifies the number of target unit soldiers when considering if it's worth taking hostile attrition to attack it. I.e. AI won't attack a unit with 200 if it loses more by moving there
	CHASE_MAX_SPEED_DIFFERENCE = 0.5					# Ignore chasing units that are this much faster unless adjacent
	
	COMBAT_RATIO_THRESHOLD = 0.5						# The AI will consider it valid to enter provinces where the predicted combat ratio compared to nearby enemies is above this value
	COMBAT_RATIO_THRESHOLD_DESPERATE = 0.4				# When in desperate mode, the AI will consider it valid to enter provinces where the predicted combat ratio compared to nearby enemies is above this value

	# The AI will only retreat if the following are true:
	# It predicts it'll lose according to RETREAT_COMBAT_PREDICTION_RATIO
	# AND it either has significant forces elsewhere, or there's a better defensive location nearby as defined by RETREAT_TO_BETTER_TERRAIN_DISTANCE
	ASK_FOR_HELP_COMBAT_PREDICTION_RATIO = 0.66			# Below this combat prediction ratio the AI will try to call in more troops
	ASK_FOR_HELP_OTHER_STACK_TROOPS_RATIO = 1.5			# The incoming enemies
	RETREAT_COMBAT_PREDICTION_RATIO = 0.45				# Below this combat prediction ratio the AI will retreat
	RETREAT_TO_BETTER_TERRAIN_DISTANCE = 2				# The AI will retreat to better terrain this many provinces away (might do another retreat once it gets there)
	RETREAT_IF_MISSING_STRENGTH = 0.25					# The AI will retreat if it has this many troops elsewhere compared to the potentially retreating army. E.G., if 2000 men are considered for retreat, it'll do so if there's at least 0.25 * 2000 = 500 men elsewhere
	STAND_AND_FIGHT_DAYS = 30							# If the AI decides to stand still so the other party can kill it on defensible terrain, it'll start doing regular orders again after this many days if death is not forthcoming
	STAND_AND_FIGHT_COOLDOWN_DAYS = 90					# If the AI abandons "stand and fight" due to the above, it'll avoid "stand and fight" for this many days
	MIN_GOALS_PER_STACK = 10							# Of all potential target goals found, each unit stack will only do a final evaluation, including pathfinding, on the top x ones.
	MIN_SUPPLY_COMPARED_TO_AVERAGE_SUPPLY_FACTOR = 0.7	# For the purpose of army sizes, the AI uses the highest of this factor times the average supply in the war area, and the lowest supply in the war area. E.G., if average supply is 2k, and lowest supply is 1k, the AI will act as if available supply is 0.7 * 2k = 1.4k. But if the lowest supply was 1.5k, it'd be using that instead
	ARMY_SIZE_COMPARED_TO_SUPPLY = 4.0					# How much larger than the supply are we willing to make a stack? "Supply" here refers to the same number as MIN_SUPPLY_COMPARED_TO_AVERAGE_SUPPLY_FACTOR does
	RESUPPLY_MAX_DISTANCE = 3							# How far out can splinters of the army spread when trying to resupply? In # of provinces. AI will try to keep it lower if possible
	RESUPPLY_COOLDOWN_DAYS = 250						# If supplying is interrupted due to insufficient supply, wait for this long before trying to resupply again

	AVOID_BAD_ADJACENCY_COMBAT_PREDICTION_RATIO = 0.625	# Below this combat prediction ratio the AI will try to find a better way
	AVOID_BAD_ADJACENCY_MAX_PATHFIND_EXTRA_COST = 180.0	# Max additional cost for a path that avoids going over a bad adjacency just before the target destination

	POTENTIAL_PROVINCE_TARGET_ADJACENT_TO_FRIENDLY_SCORE = 100 # When deciding where to send its armies, locations that are adjacent to a friendly controlled county are given extra score

	# How much space to reserve for various lookup tables. Only affects performance
	PROVINCE_LOOKUP_SIZE_HINT = 64
	COUNTY_LOOKUP_SIZE_HINT = 128
	UNIT_LOOKUP_SIZE_HINT = 256
	
	GHW_ATTACKER_DESPERATE_THRESHOLD = 0.75				# Below this strength ratio, the attacker enters desperate mode if the normal requirements haven't yet been met
	GHW_DEFENDER_DESPERATE_THRESHOLD = 0.5				# Below this strength ratio, the defender enters desperate mode if the normal requirements haven't yet been met
	
	IS_DESPERATE_REALM_SIZE_THRESHOLDS = {				# Primary defenders realm size
		5
		10
		15
	}

	IS_DESPERATE_WARSCORE_THRESHOLDS = {				# The attacker's war score
		25
		50
		75
	}

	### Brief: DEFENDER_SAFE_RAISE_ARMY_DISTANCE (int32)
	# How many counties away to check for hostile counties and/or hostile 
	# armies when looking for a safe county to raise armies in. If set to 0, it 
	# will check the county itself and its neighbouring provinces. 	
	#
	# Warning: Drastically increases complexity of army raising logic when 
	# 	increased. 
	#
	# Must be greater or equal to 0
	DEFENDER_SAFE_RAISE_ARMY_DISTANCE = 1 		

	### Brief: ATTACKER_SAFE_RAISE_ARMY_DISTANCE (int32)
	# How many counties away to check for hostile counties and/or hostile 
	# armies when looking for a safe county to raise armies in. If set to 0, it
	# will check the county itself and its neighbouring provinces.
	#
	# Warning: Drastically increases complexity of army raising logic when 
	# 	increased. 
	#
	# Must be greater or equal to 0
	ATTACKER_SAFE_RAISE_ARMY_DISTANCE = 1 	

	### Brief: NUM_SAFE_COUNTIES_FOR_IMPROVED_RAISING (int32)
	# Once county distances to war goal counties has been calculated, how many
	# of these will be used to select the actual raise county? Picks the from
	# defined closest counties.
	#
	# Must be greater or equal to 0	
	NUM_SAFE_COUNTIES_FOR_IMPROVED_RAISING = 5
	
	LAST_STAND_CAPITAL_SCORE = 5						# Score added to capital province when picking a final stand province while desperate (Should together with second best terrain advantage be less than best terrain advantage)
	LAST_STAND_OCCUPIED_SCORE = -1000					# Score added for provinces already occupied by the enemy, prefer making a stand in an unoccupied province to force the enemy into combat
	
	DESPERATE_UNIT_MIN_SIZE = 50						# The AI will not make desperate last stands or attacks with units smaller than this
	
	PLAYER_SUPPORT_WANTED_COMBAT_RATIO = 5.0			# Try to call in nearby allied AI units until this strength ratio is met
	PLAYER_SUPPORT_ATTACK_TARGET_MAX_DISTANCE = 200		# If the first enemy unit on the player unit's path is further away than this, the AI units in support will ignore it and instead find better things to do around the player unit
	PLAYER_SUPPORT_ATTACK_MAX_ARRIVAL_DELAY = 30		# Ignore to help out in the attack if estimated arrival is this many days after the combat starts
	PLAYER_SUPPORT_IGNORE_BAD_SUPPLY_WITHIN_STEPS = 3	# Ignore trying to re-route to avoid bad supply situations when within this many steps from the target province
	
	PLAYER_SUPPORT_ENEMY_STRENGTH_MULTIPLIER = 1.25		# The AI will overestimate enemy strength with this multiplier when calculating how many troops should support a player unit	
	PLAYER_SUPPORT_MIN_SIEGE_STRENGTH = 1.25			# The AI will try to add enought troops supporting a player unit to reach a total number that is higher than the largest enemy garrison times this number
	
	TARGET_SCORE_SUPPORT_PLAYER_ONE_STEP = 500			# Added to score when supporting a player unit, and target province is one step away
	TARGET_SCORE_SUPPORT_PLAYER_TWO_STEP = 250			# Added to score when supporting a player unit, and target province is two steps away
	TARGET_SCORE_SUPPORT_PLAYER_THREE_STEP = 50			# Added to score when supporting a player unit, and target province is three steps away
	
	TARGET_SCORE_IS_SIEGING = 100						# Added to score if the specific AI unit evaluating is sieging the province
	TARGET_SCORE_WOULD_LIFT_SIEGE = 90					# Added to score if moving to this province would lift a siege
	TARGET_SCORE_WOULD_START_COMBAT = 80				# Added to score if moving to this province would start a combat
	TARGET_SCORE_WOULD_START_SIEGE = 70					# Added to score if moving to this province would start a siege

	MAX_DISTANCE_SCORE_CLOSE_TO_WAR_GOAL = 75			# At what point do we stop giving extra score to sieging provinces close to the war goal? In pixels added to the war goal radius
	TARGET_SCORE_CLOSE_TO_WAR_GOAL = 350	 			# Added to score if not a war goal province but close enough to the war goal area
	
	TARGET_SCORE_SAME_PROVINCE = 25						# Bonus to targets in same province as unit
	TARGET_SCORE_SAME_COUNTY = 150						# Bonus to targets in same county as unit
	TARGET_SCORE_SAME_COUNTY_AS_ENEMY_CAPITAL = 75		# Bonus to targets in same county as enemy capital if unit is in same or adjacent county
	TARGET_SCORE_NEIGHBOR_COUNTY = 100					# Bonus to targets in neighboring counties as unit
	
	TARGET_SCORE_CURRENT = 100							# Bonus to picking the current target
	TARGET_SCORE_FURTHER_AWAY = -100					# Malus to targets further away from the current target, than the unit are to the current target

	MIN_CULTURE_TRAIT_SCORE_COMPARED_TO_BEST_SCORE = 0.6	# When selecting a tradition or pillar, anything below this compared to the highest score is discarded
	DIVERGENCE_TRADITIONS_TO_REPLACE = 2 				# When diverging, the AI will replace this # of traditions

	CURRENT_COURT_TYPE_SETTING_ADDED_WEIGHT = 50		# Extra value added to the currently active court type setting when calculating weight so we do not flip back and forth between closely weighted settings
	MIN_SCORE_RATIO_FOR_COURT_POSITION_HIRE = 0.6 		# When selecting a court position to hire, anything below this compared to the highest score is discarded

	# When between the min and max, the AI will try to make its baseline equal or greater to its expected court grandeur value
	# ai_amenity_target_baseline can modify this. 0.1 means it'll pretend the expected value is 10% higher
	# ai_amenity_spending modifies the min and max
	COURT_AMENITY_MIN_TARGET_EXPENDITURE_PERCENTAGE_OF_INCOME = 0.05	# Court amenity min target expenditure value in % of income
	COURT_AMENITY_MAX_TARGET_EXPENDITURE_PERCENTAGE_OF_INCOME = 0.30	# Court amenity max target expenditure value in % of income
}

NFaction = {
	CREATE_OPINION_THRESHOLD = 75						# An opinion below this value will give the chance of create a faction
	CREATE_MIN_SCORE = 15								# Minimum score value to try to create a faction
	JOIN_OPINION_THRESHOLD = 75							# An opinion below this value will give the chance of join a faction
	JOIN_MIN_SCORE = 15									# Minimum score value to try to join a faction
	LEAVE_SCORE_THRESHOLD = 5							# If the join score goes below this value the member will leave the faction
	DEMAND_EXTRA_THRESHOLD = 20							# The AI is going to wait ultil have a sum of power and demand greather than the thersholds + this value to press demands

	DREAD_MODIFIED_BOLDNESS_FACTOR = 1.0				# The effect of Boldness (modified by the liege's Dread) on the AI when considering creating or joining a Faction (Boldness can never make a negative evaluation score positive - it's a bad idea.)

	RATIONALITY_FACTOR = 1.0							# The effect of Rationality on the AI when considering creating or joining a Faction (Rationality can push the evaluation score below or above 0.)

	ENERGY_FACTOR = 1.0									# The effect of Energy on the AI when considering creating or joining a Faction (Energy/Lethargy can only increase or reduce an already positive evaluation score.)
}

NCourtPositions = {
	MAX_SCORE_TO_FIRE_COURT_POSITION = -50 				# Threshold for "ai_will_do" in Court Positions for the AI to begin firing Court Position holders
	MIN_SCORE_TO_HIRE_COURT_POSITION = 0 				# Threshold for "ai_will_do" in Court Positions for the AI to hire a Court Position
}

NInventory = {
	ARTIFACT_REPAIR_DURABILITY_PERCENTAGE_THRESHOLD = 0.1	 	# Artifact durability threshold for when ai will repair an artifact, percentage of max durability.
	ARTIFACT_REFORGE_DURABILITY_PERCENTAGE_THRESHOLD = 0.1 		# Artifact durability threshold for when ai will reforge an artifact, percentage of max durability. 
}
