# Called from code after history generation
# Empty scope
on_game_start = {
	events = {
		fp1_scandinavian_adventurers.0004	# FP1 - Organise Norse adventurers.
		fp1_scandinavian_adventurers.0011	# FP1 - Corral famous Norse adventurers that haven't done much yet.
		fp1_scandinavian_adventurers.0021	# FP1 - Mark game-start prioritised adventurers.
		#Guaranteed historical artifacts fixed spawning
		debug_portraits.1 					# Debug portraits for animation testing
		# Warcraft
		# easteregg_event.0001				# Charna and Jakub duel.
		WCHEA.2000							# Sets up ancient characters' ages (So the arent 1 year old)
		# End of Warcraft
	}

	effect = {
		# Warcraft
		check_available_government_game_start_effect = yes
		# End of Warcraft

		### 867 - RADHANITES IN KHAZARIA ###
		# Warcraft
		# End of Warcraft
		### 867 - WRATH OF THE NORTHMEN ###
		#Æthelred dying (probably)
		# Warcraft
		# End of Warcraft

		#Alfred the Great becoming the Great
		# Warcraft
		# End of Warcraft

		### 867 - THE GREAT ADVENTURERS ###
		# Warcraft
		# End of Warcraft

		### HRE SETUP ###
		# Warcraft
		# End of Warcraft

		### RELIGIOUS THINGS ###
		# Warcraft
		every_religion_global = {
			limit = { like_islam_religion_trigger = yes }
			every_faith = {
				every_holy_site = {
					limit = {
						title_province = {
							has_special_building_slot = no
						}
					}
					title_province = {
						add_special_building_slot = holy_site_mosque_01
					}
				}
			}
		}
		# End of Warcraft
		# Warcraft
		every_religion_global = {
			limit = { like_christianity_religion_trigger = yes }
			every_faith = {
				every_holy_site = {
					limit = {
						title_province = {
							has_special_building_slot = no
						}
					}
					title_province = {
						add_special_building_slot = holy_site_cathedral_01
					}
				}
			}
		}
		# End of Warcraft
		every_religion_global = {
			limit = {
				OR = {
					like_hinduism_religion_trigger = yes
					like_buddhism_religion_trigger = yes
					like_jainism_religion_trigger = yes
					like_tani_religion_trigger = yes
					like_bon_religion_trigger = yes
				}
			}
			every_faith = {
				every_holy_site = {
					limit = {
						title_province = {
							has_special_building_slot = no
						}
					}
					title_province = {
						add_special_building_slot = holy_site_indian_grand_temple_01
					}
				}
			}
		}
		every_religion_global = {
			limit = {
				like_pagan_religion_trigger = yes
			}
			every_faith = {
				every_holy_site = {
					limit = {
						title_province = {
							has_special_building_slot = no
						}
					}
					title_province = {
						add_special_building_slot = holy_site_pagan_grand_temple_01
					}
				}
			}
		}
		every_religion_global = {
			every_faith = {
				every_holy_site = {
					limit = {
						title_province = {
							has_special_building_slot = no
						}
					}
					title_province = {
						add_special_building_slot = holy_site_other_grand_temple_01
					}
				}
			}
		}

		# Warcraft
		if = {
			limit = { game_start_date < 605.5.2 }
			title:d_theramore = { set_title_name = rocky_island_custom_name generate_coa = yes }
			title:c_theramore = { set_title_name = rocky_island_custom_name generate_coa = yes }
			title:b_theramore = { set_title_name = rocky_island_custom_name }
		}
		else = { title:d_theramore = { set_color_from_title = title:b_theramore } }
		
		
		### Thunder King Crisis
		if = { # Make sure Thunder King wont spawn on this gamerule
			limit = {
				has_game_rule = wc_thunder_king_crisis_never
			}
			set_global_variable = {
				name = no_thunder_king
				value = yes
			}
			debug_log = "Thunder King will never spawn this game"
		}
		else_if = { # Roll wether Thunder King will ever spawn at all
			limit = {
				has_game_rule = wc_thunder_king_crisis_default
			}
			random = { # Chance he will never spawn randomly
				chance = 60
				set_global_variable = {
					name = no_thunder_king
					value = yes
				}
				debug_log = "Thunder King will never spawn this game"
			}
		}
		
		### GRANDEUR ###
		#Royal Court: Set starting Grandeur to be the same as Expected
		if = {
			limit = {
				has_dlc_feature = royal_court
			}
			every_character_with_royal_court = {
				set_current_court_grandeur = court_grandeur_minimum_expected
				apply_hold_court_grace_effect = yes
				# Stops Hold Court reminders at game start
				set_variable = {
					name = last_hold_court_date
					value = current_year
				}
			}
		}
		### REGENCIES ###
		# Pre-defined historic regencies setup.
		## NOTE: we do these first to avoid feed messages getting weird due to regents being replaced immediately after getting their position.
		# character:40905 = { designate_diarch = character:40376 }
		# remove_generated_diarch_consequences_effect = {
		# 	NEW_DIARCH = character:40376
		# 	LIEGE = character:40905
		# }		
		# HERE WARCRAFT REGENCIES like this
		
		if = { #added in on_game_start on action, because it gives error in error.log in 2nd-3d bookmark, idk
			limit = { game_start_date > 591.11.1 }
			character:10014 = {
				add_trait = in_ice_prison
			}
		}
		if = {
			limit = { game_start_date < 604.1.1 game_start_date > 591.11.1 }
			character:10014 = { designate_diarch = character:430000 }
			remove_generated_diarch_consequences_effect = {
				NEW_DIARCH = character:430000
				LIEGE = character:10014
			}
			character:10014 = { set_diarch = character:430000 }
		}
		if = {
			limit = { game_start_date = 605.6.6 }
			character:10014 = { designate_diarch = character:60003 }
			remove_generated_diarch_consequences_effect = {
				NEW_DIARCH = character:60003
				LIEGE = character:10014
			}
			character:10014 = { set_diarch = character:60003 }
		}
		
		# Set up anyone who should be in a regency at start whether we have sources or not.
		## If you start as a child, incapable, or imprisoned, you get a regency.
		every_ruler = {
			limit = {
				OR = {
					is_adult = no
					is_incapable = yes
					is_imprisoned = yes
					government_has_flag = government_is_clan
				}
			}
			# We don't want to check over so many characters *twice*, so we check again inside the block to determine what type of regency to put 'em in.
			## Temporary Regencies.
			if = {
				limit = { is_imprisoned = yes }
				trigger_event = {
					id = diarchy.0001
					delayed = yes
				}
			}
			if = {
				limit = { government_has_flag = government_is_clan }
			}
			## Entrenched Regencies.
			else = {
				trigger_event = {
					id = diarchy.0011
					delayed = yes
				}
			}
		}
		
		every_ruler = {
			limit = { NOT = { has_trait = race } }
			copy_race_effect = { CHARACTER = this }
			trigger_race_giving_no_gene_effect = yes
		}
		### GAME RULE: Alternate universe
		if = {
			limit = { has_game_rule = random_ruler_placement_on }
			game_rule_random_ruler_placement_effect = yes
			every_independent_ruler = {
				limit = { highest_held_title_tier = tier_empire is_landed = yes }
				every_vassal = {
					limit = { highest_held_title_tier = tier_kingdom NOT = { faith = prev.faith } vassal_contract_has_modifiable_obligations = yes }
					vassal_contract_set_obligation_level = {
						type = religious_rights
						level = 1
					}
				}
			}
		}
	}
}

# Like on_game_start, except it is called once the host (or player, in single player) exits the lobby. Good for anything where you need to know who the players are, or what the game rules are
on_game_start_after_lobby = {
	effect = {
		# Unions, we have problems through history because of variables
		if = {
			limit = { has_game_rule = random_ruler_placement_off }
			union_members_on_game_start_effect = yes
		}
		else = {
			union_members_on_game_start_alternate_universe_effect = yes
		}
		# Warcraft
		every_living_character = {
			trigger_on_game_start_effect = yes
		}
		# Make sure that Realm Priests are landed theocrats where it makes sense
		every_ruler = {
			limit = {
				highest_held_title_tier >= tier_duchy
			}
			if = {
				limit = {
					exists = cp:councillor_court_chaplain
					cp:councillor_court_chaplain = {
						is_ruler = no
					}
					faith = { has_doctrine = doctrine_clerical_succession_spiritual_fixed_appointment }
					any_vassal = {
						is_physically_able_adult = yes
						is_councillor = no
						government_has_flag = government_is_theocracy
						can_be_court_chaplain_trigger = { COURT_OWNER = liege }
						faith = liege.faith
					}
				}
				random_vassal = {
					limit = {
						is_physically_able_adult = yes
						is_councillor = no
						government_has_flag = government_is_theocracy
						can_be_court_chaplain_trigger = { COURT_OWNER = liege }
						faith = liege.faith
					}
					weight = {
						base = 1
						modifier = {
							add = 1000
							faith.religious_head ?= this
						}
						modifier = {
							add = learning
						}
						modifier = {
							add = primary_title.tier
						}
					}
					liege = {
						assign_councillor_type = {
							type = councillor_court_chaplain
							remove_existing_councillor = yes
							target = prev
						}
					}
				}
			}
		}
	
		### GAME RULE: VIEW ON SAME-SEX RELATIONS
		if = {
			limit = { has_game_rule = accepted_same_sex_relations }
			game_rule_accepted_same_sex_relations_effect = yes
		}

		### GAME RULE: RANDOMIZE FAITH
		if = {
			limit = { has_game_rule = randomized_faiths_on }
			game_rule_randomize_faith_effect = yes
		}

		### GAME RULE: FAITH ACCEPTANCE
		if = {
			limit = { has_game_rule = full_faith_acceptance }
			game_rule_faith_acceptance_effect = yes
		}

		### GAME RULE: GENDER EQUALITY ###
		if = {
			limit = { has_game_rule = full_gender_equality }
			game_rule_full_gender_equality_effect = yes
		}
		else_if = {
			limit = { has_game_rule = inversed_gender_equality }
			game_rule_inversed_gender_equality_effect = yes
		}

		### GAME RULE: SEXUALITY DISTRIBUTION ###
		if = {
			limit = { NOT = { has_game_rule = sexuality_distribution_default } }
			game_rule_sexuality_distribution_effect = yes
		}
		else = { # So that children 10+ starts with a sexuality
			child_sexuality_distribution_effect = yes
		}

		# Give Ruler Designer characters regencies.
		every_in_global_list = {
			variable = rd_chars_needing_regencies
			trigger_event = diarchy.0011
			# Aaaand clean the list.
			save_temporary_scope_as = char_temp
			remove_list_global_variable = {
				name = rd_chars_needing_regencies
				target = scope:char_temp
			}
		}

		### ACHIEVEMENT: FROM RAGS TO RICHES
		# Warcraft - Removing
		# End of Warcraft

		### ACHIEVEMENT (FP2): Holidaying in Iberia
		# Warcraft - Removing
		# End of Warcraft

		### ACHIEVEMENT TRACKING FOR STARTING CHARACTERS
		# Warcraft - Removing
		# End of Warcraft

		### HOLD COURT STARTING GRACE
		every_character_with_royal_court = {
			set_variable = {
				name = hold_court_cooldown
	 			days = standard_hold_court_cooldown_time
	 		}
		}
		title:k_goblin_bankers.holder = {
			create_story = {
				type = story_cycle_goblin_loan
			}
		}


		#Set starting cultural acceptance
		# Warcraft
	}

	events = {
		# Warcraft
		wc_holy_order.10	# Order of the Silver Hand history
		# End of Warcraft

		game_rule.1000	#Autopopulate families.
		# Warcraft
		# game_rule.1011	#Hungarian Migration management.
		# End of Warcraft
		historical_artifacts.0023			# Historical Artifacts Generator
		# Warcraft
		WCHOI.1		#Starts the Horde Invasion
		# End of Warcraft
	}
}
