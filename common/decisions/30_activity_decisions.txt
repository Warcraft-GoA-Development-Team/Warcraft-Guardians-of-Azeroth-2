host_feast_decision = {
	picture = "gfx/interface/illustrations/decisions/decision_misc.dds"
	ai_check_interval = 60
	
	sort_order = 69

	title = {
		first_valid = {
			triggered_desc = {
				trigger = {
					has_royal_court = yes
					amenity_level = { type = court_food_quality value >= 5 }
				}
				desc = host_exotic_feast_decision
			}
			triggered_desc = {
				trigger = {
					has_royal_court = yes
					amenity_level = { type = court_food_quality value >= 4 }
				}
				desc = host_lavish_feast_decision
			}
			triggered_desc = {
				trigger = {
					has_royal_court = yes
					amenity_level = { type = court_food_quality value >= 3 }
				}
				desc = host_grand_feast_decision
			}
			triggered_desc = {
				trigger = {
					has_royal_court = yes
					amenity_level = { type = court_food_quality value >= 2 }
				}
				desc = host_modest_feast_decision
			}
			desc = host_feast_decision
		}
	}

	cost = {
		gold = feast_activity_cost
	}


	cooldown = { days = standard_feast_cooldown_time }

	desc = host_feast_decision_opening_desc
	selection_tooltip = host_feast_decision_tooltip

	is_shown = {
		# Warcraft
		feast_possible_trigger = yes
		
		is_landed = yes
		highest_held_title_tier > tier_barony
	}

	is_valid_showing_failures_only = {
		is_available_adult = yes
	}

	effect = {
		capital_province = {
			spawn_activity = {
				type = activity_feast
				owner = root
			}
		}
		custom_tooltip = host_feast_decision_desc_vassals
		if = {
			limit = {
				is_independent_ruler = no
			}
			custom_tooltip = host_feast_decision_desc_liege_opinion
		}
		if = {
			limit = {
				employs_court_position = court_musician_court_position
				any_court_position_holder = {
			        type = court_musician_court_position
			        is_physically_able = yes
			    }
			}
			custom_tooltip = host_feast_decision_desc_court_musician_opinion
		}

		#Piety gain
		if = {
			limit = {
				faith = {
					OR = {
						has_doctrine_parameter = piety_from_feasts_active
						AND = {
							has_doctrine_parameter = summer_festivals_active
							# Only during 'summer' (May 1st through July 31st).
							current_month >= 5
							current_month <= 7
						}
					}
				}
			}
			add_piety = {
				value = 0

				faith = {
					if = {
						limit = {
							has_doctrine_parameter = summer_festivals_active
							# Only during 'summer' (May 1st through July 31st).
							current_month >= 5
							current_month <= 7
						}
						add = major_piety_value
					}
					if = {
						limit = {
							has_doctrine = tenet_ritual_celebrations
						}
						add = medium_piety_value
					}
					if = {
						limit = {
							has_doctrine = tenet_hedonistic
						}
						add = medium_piety_value
					}
				}
				if = {
					limit = {
						has_royal_court = yes
						amenity_level = { type = court_food_quality value >= 5 }
					}
					multiply = 2.5
				}
				else_if = {
					limit = {
						has_royal_court = yes
						amenity_level = { type = court_food_quality value >= 4 }
					}
					multiply = 2
				}
				else_if = {
					limit = {
						has_royal_court = yes
						amenity_level = { type = court_food_quality value >= 3 }
					}
					multiply = 1.5
				}
				else_if = {
					limit = {
						has_royal_court = yes
						amenity_level = { type = court_food_quality value >= 2 }
					}
					multiply = 1
				}
				else_if = {
					limit = {
						has_royal_court = yes
						amenity_level = { type = court_food_quality value <= 1 }
					}
					multiply = 0.5
				}

				min = medium_piety_value # Always give some piety, even if we don't have any of the specified tenets.
			}
		}

		#Prestige gain from Tradition
		if = {
			limit = {
				culture = {
					has_cultural_parameter = refined_feasts
				}
			}
			add_prestige = {
				value = medium_prestige_value
				if = {
					limit = {
						has_royal_court = yes
						amenity_level = { type = court_food_quality value >= 5 }
					}
					multiply = 2.5
				}
				else_if = {
					limit = {
						has_royal_court = yes
						amenity_level = { type = court_food_quality value >= 4 }
					}
					multiply = 2
				}
				else_if = {
					limit = {
						has_royal_court = yes
						amenity_level = { type = court_food_quality value >= 3 }
					}
					multiply = 1.5
				}
				else_if = {
					limit = {
						has_royal_court = yes
						amenity_level = { type = court_food_quality value >= 2 }
					}
					multiply = 1
				}
				else_if = {
					limit = {
						has_royal_court = yes
						amenity_level = { type = court_food_quality value <= 1 }
					}
					multiply = 0.5
				}
			}
		}

		#Stress loss
		if = {
			limit = {
				OR = {
					has_trait = shy
				}
			}
			custom_tooltip = host_feast_decision_desc_shy
		}
		else = {
			if = {
				limit = {
					has_royal_court = yes
					amenity_level = { type = court_food_quality value >= 5 }
				}
				stress_impact = {
					base = exotic_feast_stress_loss_value
					gluttonous = feast_stress_loss_value
					gregarious = feast_stress_loss_value
					reveler_1 = feast_stress_loss_value
					reveler_2 = feast_stress_loss_value
					reveler_3 = feast_stress_loss_value
					drunkard = feast_stress_loss_value
					comfort_eater = feast_stress_loss_value
					generous = feast_stress_loss_value
					greedy = activity_stress_gain_impact
				}
			}
			else_if = {
				limit = {
					has_royal_court = yes
					amenity_level = { type = court_food_quality value >= 4 }
				}
				stress_impact = {
					base = lavish_feast_stress_loss_value
					gluttonous = feast_stress_loss_value
					gregarious = feast_stress_loss_value
					reveler_1 = feast_stress_loss_value
					reveler_2 = feast_stress_loss_value
					reveler_3 = feast_stress_loss_value
					drunkard = feast_stress_loss_value
					comfort_eater = feast_stress_loss_value
					generous = feast_stress_loss_value
					greedy = activity_stress_gain_impact
				}
			}
			else_if = {
				limit = {
					has_royal_court = yes
					amenity_level = { type = court_food_quality value >= 3 }
				}
				stress_impact = {
					base = medium_feast_stress_loss_value
					gluttonous = feast_stress_loss_value
					gregarious = feast_stress_loss_value
					reveler_1 = feast_stress_loss_value
					reveler_2 = feast_stress_loss_value
					reveler_3 = feast_stress_loss_value
					drunkard = feast_stress_loss_value
					comfort_eater = feast_stress_loss_value
					generous = feast_stress_loss_value
					greedy = activity_stress_gain_impact
				}
			}
			else_if = {
				limit = {
					has_royal_court = yes
					amenity_level = { type = court_food_quality value <= 1 }
				}
				stress_impact = {
					base = meager_feast_stress_loss_value
					gluttonous = feast_stress_loss_value
					gregarious = feast_stress_loss_value
					reveler_1 = feast_stress_loss_value
					reveler_2 = feast_stress_loss_value
					reveler_3 = feast_stress_loss_value
					drunkard = feast_stress_loss_value
					comfort_eater = feast_stress_loss_value
					generous = feast_stress_loss_value
					greedy = activity_stress_gain_impact
				}
			}
			else = {
				stress_impact = {
					base = feast_stress_loss_value
					gluttonous = activity_stress_loss_impact
					gregarious = activity_stress_loss_impact
					reveler_1 = activity_stress_loss_impact
					reveler_2 = activity_stress_loss_impact
					reveler_3 = activity_stress_loss_impact
					drunkard = activity_stress_loss_impact
					comfort_eater = activity_stress_loss_impact
					generous = activity_stress_loss_impact
					greedy = activity_stress_gain_impact
				}
			}
		}
		if = {
			limit = { exists = var:protected_alcohol_stores }
			set_variable = {
				name = protected_alcohol_stores
				value = 0
			}
		}
	}

	ai_potential = {
		short_term_gold > standard_activity_cost
		war_chest_gold >= halved_ai_war_chest_gold_maximum
		NOT = {
			has_trait = reclusive
		}
	}

	ai_will_do = {
		base = 35

		ai_value_modifier = {
			ai_sociability = 1
			ai_greed = -0.5
		}

		modifier = {
			add = 30 # Has Greed of 20, so this is only (-10 + 30 = +20)
			has_trait = gluttonous
		}
		modifier = {
			add = 12.5 # Has Greed of 5, so this is only (-2.5 + 12.5 = +10)
			has_trait = comfort_eater
		}
		modifier = {
			add = 47.5 # Has Greed of 75, so this is only (-37.5 + 45 = +10)
			has_trait = ambitious
		}
		
		modifier = { # Too busy booming the economy
			add = -50
			OR = {
				ai_has_economical_boom_personality = yes
				has_character_flag = ai_boom
			}
		}
		
		modifier = { # Work first, play later
			add = -35
			exists = capital_county
			capital_county.title_province = {
				free_building_slots > 0
			}
		}

		modifier = {
			add = 35
			stress > low_stress
		}

		modifier = {
			add = 35
			faith = {
				has_doctrine = tenet_ritual_celebrations
			}
		}

		modifier = {
			add = 35
			faith = {
				has_doctrine = tenet_hedonistic
			}
		}
	}
}

start_hunt_decision = {
	picture = "gfx/interface/illustrations/decisions/decision_activity.dds"
	ai_check_interval = 60
	
	sort_order = 68

	cost = {
		gold = hunt_activity_cost
	}

	cooldown = { days = standard_hunting_cooldown_time }

	is_shown = {
		# Warcraft
		hunt_possible_trigger = yes
		
		is_landed = yes
		highest_held_title_tier > tier_barony
		NOT = {
			culture = { has_cultural_parameter = cannot_hunt }
		}
	}

	is_valid_showing_failures_only = {
		is_available_adult = yes
	}

	effect = {
		custom_tooltip = start_hunt_decision_go_on_hunt
		
		hidden_effect = {
			if = {
				limit = {
					has_character_flag = free_hunt
				}
				remove_character_flag = free_hunt
			}
		}

		#Stress loss
		if = {
			limit = {
				has_trait = lazy
			}
			custom_tooltip = start_hunt_decision_stress_lazy
		}
		else = {
			stress_impact = {
				base = hunt_stress_loss_value
				craven = activity_stress_gain_impact
				diligent = activity_stress_loss_impact
				athletic = activity_stress_loss_impact
				sadistic = activity_stress_loss_impact
				brave = activity_stress_loss_impact
				hunter_1 = activity_stress_loss_impact
				hunter_2 = activity_stress_loss_impact
				hunter_3 = activity_stress_loss_impact
				generous = activity_stress_loss_impact
			}
		}

		# Prestige tooltips
		## Notification of potential bonus prestige via events
		custom_tooltip = start_hunt_decision_prestige
		## Notification of extra/reduced prestige due to servants amenity
		### Low servants: you may get less prestige if your hunt is unsuccessful, and it'll be harder to begin with.
		if = {
			limit = {
				has_royal_court = yes
				NOT = { has_government = tribal_government }
				amenity_level = {
					type = court_servants
					value <= medium_amenity_level
				}
			}
			custom_tooltip = start_hunt_decision.tt.servants_prestige.reduced
		}
		### High servants: you may get extra prestige if your hunt is successful.
		if = {
			limit = {
				has_royal_court = yes
				NOT = { has_government = tribal_government }
				amenity_level = {
					type = court_servants
					value >= very_high_amenity_level
				}
			}
			custom_tooltip = start_hunt_decision.tt.servants_prestige.increased
		}
		### Greater chance of success if you have a Master of the Hunt employed.
		if = {
			limit = {
				employs_court_position = master_of_hunt_court_position
				any_court_position_holder = {
			        type = master_of_hunt_court_position
			        is_physically_able = yes
			    }
			}
			custom_tooltip = start_hunt_decision_master_of_hunt
		}
		
		hidden_effect = {
			random_sub_realm_barony = {
				title_province = {
					spawn_activity = {
						type = activity_hunt
						owner = root
					}
				}
			}
		}
	}
	
	ai_potential = {
		short_term_gold > standard_activity_cost
		war_chest_gold >= halved_ai_war_chest_gold_maximum
	}

	ai_will_do = {
		base = 35

		ai_value_modifier = {
			ai_energy = 1
			ai_greed = -0.5
			ai_compassion = -0.5
		}

		modifier = {
			add = 10
			has_trait_rank = {
				trait = education_martial
				rank > 0
			}
		}
		modifier = {
			add = 10
			has_trait_rank = {
				trait = education_martial
				rank > 2
			}
		}

		modifier = {
			add = 35
			stress > low_stress
		}
		
		modifier = { # Too busy booming the economy
			add = -50
			OR = {
				ai_has_economical_boom_personality = yes
				has_character_flag = ai_boom
			}
		}
		
		modifier = { # Work first, play later
			add = -35
			exists = capital_county
			capital_county.title_province = {
				free_building_slots > 0
			}
		}
	}
}

hold_court_decision = {
	ai_check_interval = 96
	picture = "gfx/interface/illustrations/decisions/decision_knight_kneeling.dds"
	major = yes
	is_invisible = yes

	cost = {
		prestige = {
			value = standard_activity_cost
			multiply = 0.5
		}
	}

	cooldown = {
		days = standard_hold_court_cooldown_time
	}

	is_shown = {
		is_landed = yes
		has_royal_court = yes
	}

	is_valid_showing_failures_only = {
		is_available_adult = yes
		court_grandeur_current_level >= 1
		
		custom_description = {
			text = ENGAGED_IN_SINGLE_COMBAT
			NOT = { exists = var:engaged_in_single_combat } 
		}

		trigger_if = {
			limit = { is_ai = no }
			has_pending_court_events = no # should only be used for human players
			has_spawned_court_events = no # should only be used for human players
		}
	}

	effect = {
		set_variable = {
			name = hold_court_cooldown
			days = standard_hold_court_cooldown_time
		}
		custom_tooltip = hold_court_gain_grandeur_tooltip # Granted in conclusion event - hold_court.0021
		custom_tooltip = hold_court_decision_effects
		hidden_effect = {
			random_sub_realm_barony = {
				title_province = {
					spawn_activity = {
						type = activity_hold_court
						owner = root
					}
				}
			}
		}
	}
	
	ai_potential = {
		is_at_war = no
		gold >= minor_gold_value
	}

	ai_will_do = {
		base = 100
	}
}

petition_liege_decision = {
	ai_check_interval = 0
	picture = "gfx/interface/illustrations/decisions/decision_knight_kneeling.dds"
	major = yes

	cost = {
		prestige = standard_activity_cost
	}

	cooldown = {
		days = standard_petition_liege_cooldown_time
	}

	is_shown = {
		is_landed = yes
		is_independent_ruler = no
		liege = { has_royal_court = yes }
	}

	is_valid_showing_failures_only = {
		is_available_adult = yes
		liege = { is_available_adult = yes }
		is_at_war_with_liege = no
		custom_tooltip = {
			text = petition_liege_council_no_petition_valid_tt
			OR = {
				# Council
				AND = {
					scope:petition_liege_council_seat = yes
					is_councillor = no
				}
				# Pay Debt
				gold <= -100
				# War Aid
				AND = {
					petition_liege_war_aid_trigger = yes
					petition_liege_war_aid_share_trigger = yes
					petition_war_aid_liege_ally_value >= petition_war_aid_rebels_value
					petition_liege_war_liege_involvement_trigger = yes
				}
				# Vassal War
				petition_liege_vassal_war_trigger = yes
				# Faction War
				any_targeting_faction = { target_of_powerful_faction_trigger = yes }
				# Bailiffs
				any_held_title = { petition_liege_county_control_trigger = yes }
				# Convert
				AND = {
					faith = liege.faith
					any_held_title = { petition_liege_county_convert_trigger = yes }
				}
				# Opinions
				any_held_title = { petition_liege_county_opinion_trigger = yes }
				AND = {
					any_held_title = { petition_liege_fortify_border_trigger = yes }
					NOT = { liege.gold < 0 }
				}
				# Liege Title
				any_claim = { petition_liege_title_liege_trigger = yes }
				# Vassal Title
				AND = { #Warcraft
					NOR = { # Only relevant if revocation is possible
						liege = { has_realm_law = crown_authority_0 }
						liege = { has_realm_law = tribal_authority_1 }
						liege = { has_realm_law = necro_authority_0 }
						liege = { has_realm_law = demonic_authority_0 }
						liege = { has_realm_law = eldritch_authority_0 }
					}
					any_claim = { petition_liege_title_vassal_trigger = yes }
				}
				# Construct City
				AND = {
					culture = { has_innovation = innovation_city_planning }
					liege.culture = { has_innovation = innovation_city_planning }
					any_held_title = { petition_liege_construct_city_trigger = yes }
					liege.gold > main_building_tier_1_cost
				}
				# Construct Temple
				AND = {
					culture = { has_innovation = innovation_city_planning }
					liege.culture = { has_innovation = innovation_city_planning }
					any_held_title = { petition_liege_construct_temple_trigger = yes }
					liege.gold > main_building_tier_1_cost
				}
				liege.capital_province.county.development_level >= petitioner_development_difference_decision_value
			}
		}

		trigger_if = {
			limit = {
				is_ai = no
				has_royal_court = yes
			}
			has_spawned_court_events = no # should only be used for human players
		}

		trigger_if = { # Council
			limit = { 
				AND = {
					scope:petition_liege_council_seat = yes 
					is_councillor = no 
				}
			}
			custom_tooltip = {
				text = petition_liege_council_seat_me_tt
				is_councillor = no 
			}
			custom_tooltip = {
				text = petition_liege_council_seat_liege_tt
				petition_liege_council_seat_trigger = yes
			}
		}
		trigger_if = { # Pay Debt
			limit = { scope:petition_liege_pay_debt = yes }
			custom_tooltip = {
				text = petition_liege_pay_debt_me_tt
				gold <= -100
			}
			custom_tooltip = {
				text = petition_liege_pay_debt_liege_tt
				liege.gold >= petitioner_debt_positivization_root_value
			}
		}
		trigger_if = { # War Aid
			limit = { scope:petition_liege_war_aid = yes }
			custom_tooltip = { # Must not be in any war involving liege
				text = petition_liege_war_aid_liege_tt
				petition_liege_war_aid_share_trigger = yes
			}
			custom_tooltip = { # Losing an external war
				text = petition_liege_war_aid_tt
				petition_liege_war_aid_trigger = yes
			}
			custom_tooltip = { # Liege not at war themselves
				text = petition_liege_internal_war_aid_tt
				petition_war_aid_liege_ally_value >= petition_war_aid_rebels_value
			}
			custom_tooltip = { # Liege not at war themselves
				text = petition_liege_external_war_aid_tt
				petition_liege_war_liege_involvement_trigger = yes
			}
		}
		trigger_if = { # Vassal War
			limit = { scope:petition_liege_vassal_war = yes }
			custom_tooltip = {
				text = petition_liege_vassal_war_tt
				petition_liege_vassal_war_trigger = yes
			}
		}
		trigger_if = { # Faction War
			limit = { scope:petition_liege_faction_war = yes }
			custom_tooltip = {
				text = petition_liege_faction_war_tt
				any_targeting_faction = { target_of_powerful_faction_trigger = yes }
			}
		}
		trigger_if = { # Bailiffs
			limit = { scope:petition_liege_county_control = yes }
			custom_tooltip = {
				text = petition_liege_county_control_tt
				any_held_title = { petition_liege_county_control_trigger = yes }
			}
		}
		trigger_if = { # Convert
			limit = { scope:petition_liege_county_convert = yes }
			faith = liege.faith
			custom_tooltip = {
				text = petition_liege_county_convert_tt
				any_held_title = { petition_liege_county_convert_trigger = yes }
			}
		}
		trigger_if = { # Opinion
			limit = { scope:petition_liege_county_opinion = yes }
			custom_tooltip = {
				text = petition_liege_county_opinion_tt
				any_held_title = { petition_liege_county_opinion_trigger = yes }
			}
		}
		trigger_if = { # Fortify
			limit = { scope:petition_liege_fortify_border = yes }
			custom_tooltip = {
				text = petition_liege_fortify_border_tt
				any_held_title = { petition_liege_fortify_border_trigger = yes }
			}
			custom_tooltip = {
				text = petition_liege_debt_tt
				NOT = { liege.gold < 0 }
			}
		}
		trigger_if = { # Liege Title
			limit = { scope:petition_liege_title_liege = yes }
			custom_tooltip = {
				text = petition_liege_title_liege_tt
				any_claim = { petition_liege_title_liege_trigger = yes }
			}
		}
		trigger_if = { # Vassal Title
			limit = { scope:petition_liege_title_vassal = yes }
			custom_tooltip = {
				text = petition_liege_title_vassal_liege_tt
				NOR = { # Only relevant if revocation is possible
					liege = { has_realm_law = crown_authority_0 }
					liege = { has_realm_law = tribal_authority_1 }
					liege = { has_realm_law = tribal_authority_1 }
				}
			}
			custom_tooltip = {
				text = petition_liege_title_vassal_claim_tt
				any_claim = { petition_liege_title_vassal_trigger = yes }
			}
		}
		trigger_if = { # Construct City
			limit = { scope:petition_liege_construct_city = yes }
			custom_tooltip = {
				text = petition_liege_construct_city_tt
				any_held_title = { petition_liege_construct_city_trigger = yes }
			}
			custom_tooltip = {
				text = petition_liege_construct_city_liege_tt
				liege.gold > main_building_tier_1_cost
			}
		}
		trigger_if = { # Construct Temple
			limit = { scope:petition_liege_construct_temple = yes }
			custom_tooltip = {
				text = petition_liege_construct_temple_tt
				any_held_title = { petition_liege_construct_temple_trigger = yes }
			}
			custom_tooltip = {
				text = petition_liege_construct_city_liege_tt
				liege.gold > main_building_tier_1_cost
			}
		}
		trigger_if = { # Development
			limit = { scope:petition_liege_development = yes }
			custom_tooltip = {
				text = petition_liege_development_tt
				liege.capital_province.county.development_level >= petitioner_development_difference_decision_value
			}
		}
	}

	widget = {
		gui = "decision_view_widget_petition_liege"
		controller = decision_option_list_controller
		decision_has_second_step = yes
		decision_custom_widget_container = "custom_widgets_container_step_two"
		decision_to_second_step_button = "CHOOSE_PETITION_DECISION_NEXT_STEP_BUTTON"

		### General
		item = { # Council
			value = petition_liege_council_seat
			is_valid = {
				is_councillor = no 
				custom_tooltip = { # Liege can shuffle council
					text = petition_liege_council_seat_liege_tt
					petition_liege_council_seat_trigger = yes
				}
			}
			current_description = petition_liege_council_seat_desc
			localization = petition_liege_decision_option_council_seat
			icon = "gfx/interface/icons/message_feed/council.dds"
			ai_chance = { value = 0 } # Currently unused
		}
		item = { # Debt
			value = petition_liege_pay_debt
			is_valid = {
				custom_tooltip = { # In debt
					text = petition_liege_pay_debt_me_tt
					debt_level >= 1
				}
				custom_tooltip = { # Liege can afford your debt
					text = petition_liege_pay_debt_liege_tt
					liege.gold >= petitioner_debt_positivization_root_value
				}
			}
			current_description = petition_liege_pay_debt_desc
			localization = petition_liege_decision_option_pay_debt
			icon = "gfx/interface/icons/message_feed/steward_job.dds"
			ai_chance = { value = 0 } # Currently unused
		}
		### Titles
		item = { # Title Liege
			value = petition_liege_title_liege
			is_valid = {
				custom_tooltip = {
					text = petition_liege_title_liege_tt
					any_claim = { petition_liege_title_liege_trigger = yes }
				}
			}
			current_description = petition_liege_title_liege_desc
			localization = petition_liege_decision_option_title_liege
			icon = "gfx/interface/icons/message_feed/titles.dds"
			ai_chance = { value = 0 } # Currently unused
		}
		item = { # Title Vassal
			value = petition_liege_title_vassal
			is_valid = {
				custom_tooltip = {
					text = petition_liege_title_vassal_liege_tt
					NOR = { # Only relevant if revocation is possible
						liege = { has_realm_law = crown_authority_0 }
						liege = { has_realm_law = tribal_authority_1 }
						liege = { has_realm_law = tribal_authority_1 }
					}
				}
				custom_tooltip = {
					text = petition_liege_title_vassal_claim_tt
					any_claim = { petition_liege_title_vassal_trigger = yes }
				}
			}
			current_description = petition_liege_title_vassal_desc
			localization = petition_liege_decision_option_title_vassal
			icon = "gfx/interface/icons/message_feed/generic_neutral_effect.dds"
			ai_chance = { value = 0 } # Currently unused
		}
		### Wars
		item = { # Faction War
			value = petition_liege_faction_war
			is_valid = {
				custom_tooltip = {
					text = petition_liege_faction_war_tt
					any_targeting_faction = { target_of_powerful_faction_trigger = yes }
				}
			}
			current_description = petition_liege_faction_war_desc
			localization = petition_liege_decision_option_faction_war
			icon = "gfx/interface/icons/message_feed/faction.dds"
			ai_chance = { value = 0 } # Currently unused
		}
		item = { # Vassal War
			value = petition_liege_vassal_war
			is_valid = {
				custom_tooltip ={
					text = petition_liege_vassal_war_tt
					petition_liege_vassal_war_trigger = yes
				}
			}
			current_description = petition_liege_vassal_war_desc
			localization = petition_liege_decision_option_vassal_war
			icon = "gfx/interface/icons/message_feed/generic_good_effect.dds"
			ai_chance = { value = 0 } # Currently unused
		}
		item = { # War Aid
			value = petition_liege_war_aid
			is_valid = {
				custom_tooltip = { # Must not be in any war involving liege
					text = petition_liege_war_aid_liege_tt
					petition_liege_war_aid_share_trigger = yes
				}
				custom_tooltip = { # Losing an external war
					text = petition_liege_war_aid_tt
					petition_liege_war_aid_trigger = yes
				}
				custom_tooltip = { # Liege not at war themselves
					text = petition_liege_internal_war_aid_tt
					petition_war_aid_liege_ally_value >= petition_war_aid_rebels_value
				}
				custom_tooltip = { # Liege not at war themselves
					text = petition_liege_external_war_aid_tt
					petition_liege_war_liege_involvement_trigger = yes
				}
			}
			current_description = petition_liege_war_aid_desc
			localization = petition_liege_decision_option_war_aid
			icon = "gfx/interface/icons/message_feed/war.dds"
			ai_chance = { value = 0 } # Currently unused
		}
		### Counties
		item = { # Control
			value = petition_liege_county_control
			is_valid = {
				custom_tooltip = {
					text = petition_liege_county_control_tt
					any_held_title = { petition_liege_county_control_trigger = yes }
				}
			}
			current_description = petition_liege_county_control_desc
			localization = petition_liege_decision_option_county_control
			icon = "gfx/interface/icons/message_feed/control.dds"
			ai_chance = { value = 0 } # Currently unused
		}
		item = { # Convert
			value = petition_liege_county_convert
			is_valid = {
				custom_tooltip = {
					text = petition_liege_faith_tt
					faith = liege.faith
				}
				custom_tooltip = {
					text = petition_liege_county_convert_tt
					any_held_title = { petition_liege_county_convert_trigger = yes }
				}
			}
			current_description = petition_liege_county_convert_desc
			localization = petition_liege_decision_option_county_convert
			icon = "gfx/interface/icons/message_feed/bishop.dds"
			ai_chance = { value = 0 } # Currently unused
		}
		item = { # Opinion
			value = petition_liege_county_opinion
			is_valid = {
				custom_tooltip = {
					text = petition_liege_county_opinion_tt
					any_held_title = { petition_liege_county_opinion_trigger = yes }
				}
			}
			current_description = petition_liege_county_opinion_desc
			localization = petition_liege_decision_option_county_opinion
			icon = "gfx/interface/icons/message_feed/tier_up.dds"
			ai_chance = { value = 0 } # Currently unused
		}
		### Construction/Development
		item = { # Fortify
			value = petition_liege_fortify_border
			is_valid = {
				custom_tooltip = {
					text = petition_liege_fortify_border_tt
					any_held_title = { petition_liege_fortify_border_trigger = yes }
				}
			}
			current_description = petition_liege_fortify_border_desc
			localization = petition_liege_decision_option_fortify_border
			icon = "gfx/interface/icons/message_feed/marshal_job.dds"
			ai_chance = { value = 0 } # Currently unused
		}
		item = { # Construct City
			value = petition_liege_construct_city
			is_valid = {
				custom_tooltip = {
					text = petition_liege_city_planning_innovation_tt
					culture = { has_innovation = innovation_city_planning }
					liege.culture = { has_innovation = innovation_city_planning }
				}
				custom_tooltip = {
					text = petition_liege_construct_city_tt
					any_held_title = { petition_liege_construct_city_trigger = yes }
				}
				custom_tooltip = {
					text = petition_liege_holding_tt
					liege.gold > main_building_tier_1_cost
				}
			}
			current_description = petition_liege_construct_city_desc
			localization = petition_liege_decision_option_construct_city
			icon = "gfx/interface/icons/message_feed/building.dds"
			ai_chance = { value = 0 } # Currently unused
		}
		item = { # Construct Temple
			value = petition_liege_construct_temple
			is_valid = {
				custom_tooltip = {
					text = petition_liege_faith_tt
					faith = liege.faith
				}
				custom_tooltip = {
					text = petition_liege_construct_temple_tt
					any_held_title = { petition_liege_construct_temple_trigger = yes }
				}
				custom_tooltip = {
					text = petition_liege_holding_tt
					liege.gold > main_building_tier_1_cost
				}
			}
			current_description = petition_liege_construct_temple_desc
			localization = petition_liege_decision_option_construct_temple
			icon = "gfx/interface/icons/message_feed/religious.dds"
			ai_chance = { value = 0 } # Currently unused
		}
		item = { # Development
			value = petition_liege_development
			is_valid = {
				custom_tooltip = {
					text = petition_liege_development_tt
					liege.capital_province.county.development_level >= petitioner_development_difference_decision_value
				}
			}
			current_description = petition_liege_development_desc
			localization = petition_liege_decision_option_development
			icon = "gfx/interface/icons/message_feed/guest.dds"
			ai_chance = { value = 0 } # Currently unused
		}
	}

	effect = {
		set_variable = {
			name = petition_liege_scope
			value = liege
			months = 3
		}
		custom_tooltip = petition_liege_decision_effects
		if = {
			limit = {
				liege = { is_ai = yes }
			}
			custom_description_no_bullet = { text = petition_liege_warning_effect }
		}
		if = { # Council
			limit = { scope:petition_liege_council_seat = yes }
			set_variable = {
				name = petition_type
				value = flag:council_seat
			}
		}
		else_if = { # Debt
			limit = { scope:petition_liege_pay_debt = yes }
			set_variable = {
				name = petition_type
				value = flag:pay_debt
			}
		}
		else_if = { # War Aid
			limit = { scope:petition_liege_war_aid = yes }
			set_variable = {
				name = petition_type
				value = flag:war_aid
			}
		}
		else_if = { # Vassal War
			limit = { scope:petition_liege_vassal_war = yes }
			set_variable = {
				name = petition_type
				value = flag:vassal_war
			}
		}
		else_if = { # Faction War
			limit = { scope:petition_liege_faction_war = yes }
			set_variable = {
				name = petition_type
				value = flag:faction_war
			}
		}
		else_if = { # County
			limit = { scope:petition_liege_county_control = yes }
			set_variable = {
				name = petition_type
				value = flag:county_control
			}
		}
		else_if = { # Convert
			limit = { scope:petition_liege_county_convert = yes }
			set_variable = {
				name = petition_type
				value = flag:county_convert
			}
		}
		else_if = { # Opinion
			limit = { scope:petition_liege_county_opinion = yes }
			set_variable = {
				name = petition_type
				value = flag:county_opinion
			}
		}
		else_if = { # Fortify
			limit = { scope:petition_liege_fortify_border = yes }
			set_variable = {
				name = petition_type
				value = flag:fortify_border
			}
		}
		else_if = { # Title Liege
			limit = { scope:petition_liege_title_liege = yes }
			set_variable = {
				name = petition_type
				value = flag:title_liege
			}
		}
		else_if = { # Title Vassal
			limit = { scope:petition_liege_title_vassal = yes }
			set_variable = {
				name = petition_type
				value = flag:title_vassal
			}
		}
		else_if = { # Construct City
			limit = { scope:petition_liege_construct_city = yes }
			set_variable = {
				name = petition_type
				value = flag:construct_city
			}
		}
		else_if = { # Construct Temple
			limit = { scope:petition_liege_construct_temple = yes }
			set_variable = {
				name = petition_type
				value = flag:construct_temple
			}
		}
		else_if = { # Development
			limit = { scope:petition_liege_development = yes }
			set_variable = {
				name = petition_type
				value = flag:development
			}
		}
		stress_impact = {
			shy = medium_stress_impact_gain
			arrogant = medium_stress_impact_gain
		}
		hidden_effect = {
			# Spawn the Petition Liege activity
			liege.capital_province = {
				spawn_activity = {
					type = activity_petition_liege
					owner = root
				}
			}
		}
	}
	
	ai_potential = {
		always = no # Only players can do this. AI vassals go through the normal court events/hold court activity.
	}
}

pay_homage_decision = {
	ai_check_interval = 45
	picture = "gfx/interface/illustrations/decisions/decision_knight_kneeling.dds"
	major = yes

	cost = {
		prestige = standard_activity_cost
		gold = {
			value = 0
			if = {
				limit = {
					exists = scope:pay_homage_gold
					scope:pay_homage_gold = yes
				}
				add = medium_gold_value
			}
		}
	}

	is_shown = {
		is_landed = yes
		is_independent_ruler = no
		
		# Warcraft
		has_monarchy_government_trigger = yes
		
		liege = { has_royal_court = yes }
	}

	is_valid = {
		custom_tooltip = {
			text = pay_homage_grace_valid_tt
			trigger_if = {
				limit = { has_variable = pay_homage_grace }
				NOT = { var:pay_homage_grace = liege }
			}
		}
	}

	is_valid_showing_failures_only = {
		is_available_adult = yes
		liege = { is_available_adult = yes }
		is_at_war_with_liege = no
		trigger_if = {
			limit = {
				is_ai = no
				has_royal_court = yes
			}
			has_spawned_court_events = no # should only be used for human players
		}
		
		trigger_if = {
			limit = { has_variable = pay_homage_grace } # Has not paid homage to this liege before
			custom_tooltip = {
				text = pay_homage_grace_tt
				NOT = { var:pay_homage_grace = liege }
			}
		}
		trigger_if = {
			limit = {
				is_ai = yes
			}
			NOT = {
				liege = { has_variable = pay_homage_cooldown }
			}
		}
	}

	widget = {
		gui = "decision_view_widget_pay_homage"
		controller = decision_option_list_controller
		decision_has_second_step = yes
		decision_custom_widget_container = "custom_widgets_container_step_two"
		decision_to_second_step_button = "PAY_HOMAGE_DECISION_NEXT_STEP_BUTTON"

		item = { # Submission
			value = pay_homage_submission
			is_valid = {}
			current_description = pay_homage_submission_desc
			localization = pay_homage_decision_option_submission
			icon = "gfx/interface/icons/icon_liege.dds"
			ai_chance = { # Always likely
				value = 50
				if = { # Generous vassals want to give gold if they can!
					limit = {
						ai_greed <= -50
						gold >= medium_gold_value
					}
					add = -50
				}
			}
		}

		item = { # Hook
			value = pay_homage_hook
			is_valid = {
				custom_tooltip = { # Liege does not already have a hook
					text = pay_homage_hook_tt
					NOT = {
						liege = { has_hook = prev } 
					}
				}
			}
			current_description = pay_homage_hook_desc
			localization = pay_homage_decision_option_hook
			icon = "gfx/interface/icons/message_feed/hook.dds"
			ai_chance = { # More likely if family
				value = 25
				if = {
					limit = { is_close_or_extended_family_of = liege }
					add = 25
				}
				if = { # Certain AI's really do not want to be indebted
					limit = {
						OR = {
							has_trait = paranoid
							has_trait = arrogant
							ai_greed >= 50
						}
					}
					add = -50
				}
			}
		}

		item = { # Contract
			value = pay_homage_contract
			is_shown = { has_government = feudal_government }
			is_valid = {
				custom_tooltip = { # Contract can be changed
					text = pay_homage_contract_modifiable_tt
					vassal_contract_has_modifiable_obligations = yes
				}
				custom_tooltip = { # Contract not at highest
					text = pay_homage_contract_increasable_tt
					OR = {
						vassal_contract_obligation_level_can_be_increased = feudal_government_taxes
						vassal_contract_obligation_level_can_be_increased = feudal_government_levies
					}
				}
			}
			current_description = pay_homage_contract_desc
			localization = pay_homage_decision_option_contract
			icon = "gfx/interface/icons/message_feed/a_catch_all_councillor_icon.dds"
			ai_chance = { # More likely if contract is already lenient
				value = 10
				if = {
					limit = {
						OR = {
							vassal_contract_obligation_level:feudal_government_levies = feudal_levies_low_level
							vassal_contract_obligation_level:feudal_government_taxes = feudal_tax_low_level
						}
					}
					add = 40
				}
				else_if = {
					limit = {
						OR = {
							vassal_contract_obligation_level:feudal_government_levies = feudal_levies_exempt_level
							vassal_contract_obligation_level:feudal_government_taxes = feudal_tax_exempt_level
						}
					}
					add = 90
				}
				
				if = { # Certain AI's really do not want increased obligations
					limit = {
						OR = {
							has_trait = ambitious
							has_trait = arrogant
							ai_greed >= 50
						}
					}
					add = -50
				}
			}
		}

		item = { # Gold
			value = pay_homage_gold
			is_valid = {
				custom_tooltip = { # Can afford gold homage
					text = pay_homage_gold_tt
					gold >= medium_gold_value # Can afford gold homage
				}
			}
			current_description = pay_homage_gold_desc
			localization = pay_homage_decision_option_gold
			icon = "gfx/interface/icons/message_feed/money.dds"
			ai_chance = { # More likely if rich
				value = 50
				if = {
					limit = { gold > major_gold_value }
					add = 50
				}
				
				if = { # Certain AI's really do not want to part with gold
					limit = {
						ai_greed >= 50
					}
					add = -100
				}
			}
		}
	}

	effect = {
		set_variable = {
			name = homage_liege_scope
			value = liege
			months = 3
		}
		custom_tooltip = pay_homage_decision_effects
		custom_description_no_bullet = { text = pay_homage_gift_warning_effect }
		if = { # Submission
			limit = { scope:pay_homage_submission = yes }
			set_variable = {
				name = homage_type
				value = flag:homage_submission
			}
		}
		else_if = { # Gift
			limit = { scope:pay_homage_gold = yes }
			set_variable = {
				name = homage_type
				value = flag:homage_gold
			}
			custom_tooltip = pay_homage_decision_effects_gold
		}
		else_if = { # Hook
			limit = { scope:pay_homage_hook = yes }
			set_variable = {
				name = homage_type
				value = flag:homage_hook
			}
			custom_tooltip = pay_homage_decision_effects_hook
		}
		else_if = { # Contract
			limit = { scope:pay_homage_contract = yes }
			set_variable = {
				name = homage_type
				value = flag:homage_contract
			}
			if = {
				limit = {
					vassal_contract_obligation_level:feudal_government_levies < vassal_contract_obligation_level:feudal_government_taxes
					vassal_contract_obligation_level_can_be_increased = feudal_government_levies
				}
				custom_tooltip = pay_homage_decision_effects_contract_levies
			}
			else_if = {
				limit = {
					vassal_contract_obligation_level:feudal_government_taxes < vassal_contract_obligation_level:feudal_government_levies
					vassal_contract_obligation_level_can_be_increased = feudal_government_taxes
				}
				custom_tooltip = pay_homage_decision_effects_contract_gold
			}
			else = {
				if = {
					limit = { vassal_contract_obligation_level_can_be_increased = feudal_government_taxes }
					custom_tooltip = pay_homage_decision_effects_contract_gold
				}
				else = { custom_tooltip = pay_homage_decision_effects_contract_gold }
			}
			hidden_effect = { set_vassal_contract_modification_blocked = yes }
		}
		stress_impact = {
			shy = medium_stress_impact_gain
			arrogant = medium_stress_impact_gain
		}
		hidden_effect = {
			# Spawn the Petition Liege activity
			if = {
				limit = { has_variable = pay_homage_grace }
				remove_variable = pay_homage_grace
			}
			set_variable = {
				name = pay_homage_grace
				value = liege
			}
			liege = {
				capital_province = {
					spawn_activity = {
						type = activity_pay_homage
						owner = root
					}
				}
				if = { # Make sure the AI doesn't spam homage
					limit = {
						NOT = { has_variable = pay_homage_cooldown }
					}
					set_variable = { # To stop AI vassals taking decision all at once
						name = pay_homage_cooldown
						years = 2
					}
				}
				else = {
					remove_variable = pay_homage_cooldown
					set_variable = { # To stop AI vassals taking decision all at once
						name = pay_homage_cooldown
						years = 2
					}
				}
			}
		}
	}
	
	ai_potential = {
		is_at_war = no
	}

	ai_will_do = {
		base = 0
		modifier = {
			add = 50
			prestige > standard_activity_cost
		}
		modifier = { # AI's who can give gold are more likely
			add = 50
			gold >= medium_gold_value
			ai_greed < 50
			primary_title.tier > tier_county
		}
		modifier = {
			add = -50
			has_relation_rival = liege
		}
		modifier = {
			add = -25
			opinion = {
				target = liege
				value < 0
			}
		}
		modifier = { # Dukes/kings should be more weighted
			add = 25
			primary_title.tier >= tier_duchy
		}
		modifier = { # Barons should be less weighted
			add = -25
			primary_title.tier < tier_county
		}
	}
}

host_witch_ritual_decision = {
	picture = "gfx/interface/illustrations/decisions/decision_major_religion.dds"
	ai_check_interval = 60
	
	sort_order = 80

	cost = { gold = 50 }

	cooldown = { days = 3650 }

	desc = host_witch_ritual_decision_desc
	selection_tooltip = host_witch_ritual_decision_tooltip

	is_shown = {
		is_witch_trigger = yes
		exists = house
		house = { has_house_modifier = witch_coven }
	}

	is_valid_showing_failures_only = {
		is_available_adult = yes
		is_landed = yes
	}

	effect = {
		capital_province = {
			spawn_activity = {
				type = activity_witch_ritual
				owner = root
			}
		}
	}
	
	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 0

		modifier = {
			add = 50
			short_term_gold > 150
		}
	}
}

playdate_decision = {
	picture = "gfx/interface/illustrations/decisions/decision_realm.dds"

	desc = playdate_decision_desc
	selection_tooltip = playdate_decision_tooltip

	cooldown = { days = standard_playdate_cooldown_time }

	ai_check_interval = 120

	cost = { gold = standard_playdate_activity_cost }
	
	sort_order = 67

	is_shown = {
		is_adult = no
	}

	is_valid_showing_failures_only = {
		is_available = yes
		age >= 4
	}

	effect = {
		hidden_effect = {
			capital_province = {
				save_scope_as = capital_province
				spawn_activity = {
					type = activity_playdate
					owner = root
				}
			}
		}
		custom_tooltip = start_playdate_decision
		custom_tooltip = host_playdate_decision_desc_vassal_and_courtiers
		if = {
			limit = {
				exists = liege
				NOT = { liege = this }
				liege = {
					is_available_for_child_activity_trigger = yes
				}
			}
			custom_tooltip = host_feast_decision_desc_liege_opinion
		}


		#Piety gain
		if = {
			limit = {
				faith = {
					OR = {
						has_doctrine_parameter = piety_from_feasts_active
						AND = {
							has_doctrine_parameter = summer_festivals_active
							# Only during 'summer' (May 1st through July 31st).
							current_month >= 5
							current_month <= 7
						}
					}
				}
			}
			add_piety = {
				value = 0

				faith = {
					if = {
						limit = {
							has_doctrine_parameter = summer_festivals_active
							# Only during 'summer' (May 1st through July 31st).
							current_month >= 5
							current_month <= 7
						}
						add = medium_piety_value
					}
					if = {
						limit = {
							has_doctrine = tenet_ritual_celebrations
						}
						add = minor_piety_value
					}
					if = {
						limit = {
							has_doctrine = tenet_hedonistic
						}
						add = minor_piety_value
					}
				}

				min = minor_piety_value # Always give some piety, even if we don't have any of the specified tenets.
			}
		}

		#Stress loss
		if = {
			limit = {
				has_trait = shy
			}
			custom_tooltip = host_feast_decision_desc_shy
		}
		else_if = {
			limit = {
				has_trait = pensive
			}
			custom_tooltip = host_feast_decision_desc_pensive
		}
		else_if = {
			limit = {
				OR = {
					has_trait = gluttonous
					has_trait = gregarious
					has_trait = reveler_1
					has_trait = reveler_2
					has_trait = reveler_3
					has_trait = drunkard
					has_trait = comfort_eater
					has_trait = greedy
					has_trait = curious
					has_trait = charming
				}
			}
			stress_impact = {
				base = feast_stress_loss_value
				gluttonous = activity_stress_loss_impact
				gregarious = activity_stress_loss_impact
				reveler_1 = activity_stress_loss_impact
				reveler_2 = activity_stress_loss_impact
				reveler_3 = activity_stress_loss_impact
				drunkard = activity_stress_loss_impact
				comfort_eater = activity_stress_loss_impact
				greedy = activity_stress_loss_impact
				curious = activity_stress_loss_impact
				charming = activity_stress_loss_impact

			}
		}
		else = {
			stress_impact = {
				base = feast_stress_loss_value
			}
		}
	}
	
	ai_potential = {
		short_term_gold > standard_playdate_activity_cost
	}

	ai_will_do = {
		base = 1000

		modifier = {
			add = 35
			NOT = { has_trait = shy }
		}

		modifier = {
			add = 30
			short_term_gold >= medium_gold_value
		}

		modifier = {
			add = 15
			stress > low_stress
		}

		modifier = {
			add = 35
			has_trait = charming
		}

		modifier = {
			add = -35
			has_trait = pensive
		}

		modifier = {
			add = 25
			faith = {
				has_doctrine = tenet_ritual_celebrations
			}
		}
	}
}
