###################################
# Challenge House Head
# By Hugo Cortell
# Reworked by Joe Parkin
###################################
fp3_challenge_house_head_interaction = {
	icon = house_unity_sword
	category = interaction_category_hostile
	common_interaction = no
	ai_min_reply_days = 4
	ai_max_reply_days = 9
	popup_on_receive = yes
	pause_on_receive = yes
	use_diplomatic_range = no

	interface_priority = 107

	desc = fp3_challenge_house_head_interaction_desc

	notification_text = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:diplomacy = yes }
				desc = fp3_challenge_house_head_interaction_notification_diplomacy
			}
			desc = fp3_challenge_house_head_interaction_notification
		}
	}
	
	greeting = positive

	ai_maybe = yes
	
	cooldown_against_recipient = { years = 10 }

	is_shown = {
		has_fp3_dlc_trigger = yes
		scope:actor = {
			NOT = { this = scope:recipient }
			government_has_flag = government_is_clan
		}
		scope:actor.house ?= {
			house_head = scope:recipient
			#OR = {
				has_house_unity_parameter = unity_can_challenge_house_head
				#scope:actor = {
				#	any_character_struggle = { has_struggle_phase_parameter = unlocks_challenge_house_head_for_clans }
				#}
			#}
		}
	}

	is_valid_showing_failures_only = {
		scope:actor = {
			is_at_war = no
			is_available_adult = yes
		}
		scope:actor = { NOT = { is_isolated_from_trigger = { target = scope:recipient } } }	# Warcraft
		scope:recipient = {
			is_at_war = no
			is_available_adult = yes
			# Stop challenges from barons and counts against kings
			custom_tooltip = {
				text = fp3_challenge_house_head_interaction_tier_tt
				tier_difference = {
					target = scope:actor
					value <= 1
				}
			}
			# Give some respite after a recent challenge
			custom_tooltip = {
				text = fp3_challenge_house_head_interaction_recent_tt
				NOT = { has_character_flag = fp3_challenge_house_head_recent_flag }
			}
		}
	}
	
	auto_accept = {
		trigger_if = {
			limit = {
				scope:recipient = { is_ruler = no }
			}
			scope:recipient = { is_ruler = no }
		}
		trigger_else_if = {
			limit = { scope:hook = yes }
			custom_description = {
				text = "spending_hook"
				subject = scope:actor
				object = scope:recipient
				scope:hook = yes
			}
		}
		trigger_else_if = {
			limit = {
				scope:actor = { is_heir_of = scope:recipient }
			}
			custom_tooltip = {
				text = fp3_challenge_house_head_interaction_heir_bonus_desc
				scope:actor = { is_heir_of = scope:recipient }
			}
		}
		trigger_else = { always = no }
	}
	
	can_send = {
		scope:actor = {
			# Do not allow house heads who accepted a challenge to ping pong back and forth
			custom_tooltip = {
				text = fp3_challenge_house_head_interaction_accepted_tt
				NOT = { has_character_flag = accepted_house_head_challenge_flag }
			}
		}
		scope:recipient = {
			# Do not allow multiple challenges at the same time
			custom_tooltip = {
				text = fp3_challenge_house_head_interaction_ongoing_tt
				NOT = { has_character_flag = ongoing_house_head_challenge_flag }
			}
		}
	}

	on_send = {
		scope:recipient = {
			add_character_flag = { # stop multiple challenges at same time
				flag = ongoing_house_head_challenge_flag
				months = 1
			}
			add_character_flag = { # stop AI constantly challenging players
				flag = ai_cooldown_house_head_challenge_flag
				years = 5
			}
		}
	}

	on_accept = {
		scope:recipient = { save_scope_as = house_head }
		if = {
			limit = {
				scope:recipient = {
					is_ruler = no
				}
			}
			scope:actor.house = { set_house_head = scope:actor }
		}
		else = {
			scope:actor = {
				save_scope_as = house_challenger
				if = { # Hook consumption
					limit = { scope:hook = yes }
					use_hook = scope:house_head
				}
				if = {
					limit = { scope:diplomacy = yes }
					custom_tooltip = fp3_challenge_house_head_interaction_tooltip_actor.diplomacy
					trigger_event = fp3_misc_decisions.0026
					scope:house_head = { custom_tooltip = fp3_challenge_house_head_interaction_tooltip_recipient.diplomacy }
					house = {
						add_clan_unity_interaction_effect = {
							CHARACTER = scope:house_challenger
							TARGET = scope:house_head
							VALUE = minor_unity_loss
							DESC = clan_unity_challenged_to_duel.desc
							REVERSE_NON_HOUSE_TARGET = yes
						}
					}
				}
				else = {
					if = {
						limit = { scope:lethal = no }
						custom_tooltip = fp3_challenge_house_head_interaction_tooltip_actor.a
						scope:house_head = { custom_tooltip = fp3_challenge_house_head_interaction_tooltip_recipient.b }
						house = {
							add_clan_unity_interaction_effect = {
								CHARACTER = scope:house_challenger
								TARGET = scope:house_head
								VALUE = minor_unity_loss
								DESC = clan_unity_challenged_to_duel.desc
								REVERSE_NON_HOUSE_TARGET = yes
							}
						}
					} 
					else = {
						custom_tooltip = fp3_challenge_house_head_interaction_tooltip_actor.a.lethal
						scope:house_head = { custom_tooltip = fp3_challenge_house_head_interaction_tooltip_recipient.b.lethal }
						house = {
							add_clan_unity_interaction_effect = {
								CHARACTER = scope:house_challenger
								TARGET = scope:house_head
								VALUE = major_unity_loss
								DESC = clan_unity_challenged_to_duel.desc
								REVERSE_NON_HOUSE_TARGET = yes
							}
						}
					}
					trigger_event = fp3_misc_decisions.0022
				}
			}
			if = {
				limit = { scope:diplomacy = no }
				if = {
					limit = { scope:lethal = no }
					custom_tooltip = fp3_challenge_house_head_interaction_duel_tooltip_warning
				}
				else = { custom_tooltip = fp3_challenge_house_head_interaction_duel_tooltip_warning_lethal }
			}
		}
	}

	on_decline = { # Get letter of rejection, to further escalate the situation if the player wills it
		scope:actor = { trigger_event = fp3_misc_decisions.0025 }
		scope:recipient = {
			add_prestige = major_prestige_loss
			remove_character_flag = ongoing_house_head_challenge_flag
		}
	}

	send_option = {
		flag = diplomacy
		localization = CHALLENGE_HOUSE_HEAD_DIPLOMACY_DUEL
		is_valid = {
			custom_tooltip = {
				text = CHALLENGE_HOUSE_HEAD_LETHAL_DUEL_INVALID_TT
				NOT = { scope:lethal = yes }
			}
		}
	}
	send_option = {
		flag = lethal
		localization = CHALLENGE_HOUSE_HEAD_LETHAL_DUEL
		is_valid = {
			scope:actor = { has_relation_rival = scope:recipient }
			custom_tooltip = {
				text = CHALLENGE_HOUSE_HEAD_LETHAL_DUEL_INVALID_TT
				NOT = { scope:diplomacy = yes }
			}
		}
	}
	send_option = {
		flag = hook
		localization = GENERIC_SPEND_A_HOOK
		is_valid = {
			scope:actor = { has_usable_hook = scope:recipient }
		}
	}
	should_use_extra_icon = { scope:actor = { has_usable_hook = scope:recipient } }
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"
	send_options_exclusive = no

	# AI
	
	ai_accept = {
		base = 25
		modifier = {
			add = -50
			scope:lethal = yes
			desc = AI_AVOID_LETHAL_DUEL
		}
		modifier = {
			add = 15
			scope:recipient = { has_trait = ambitious }
			desc = INTERACTION_AMBITIOUS
		}
		modifier = {
			add = 25
			scope:recipient = { has_trait = brave }
			desc = INTERACTION_BRAVE
		}
		modifier = {
			add = {
				value = -25
				if = {
					limit = { scope:lethal = yes }
					multiply = 2
				}
			}
			scope:recipient = { has_trait = craven }
			desc = INTERACTION_CRAVEN
		}
		modifier = {
			scope:recipient.ai_greed != 0
			add = { # Greedy people won't risk a position of power, even if their prestige suffers
				value = scope:recipient.ai_greed
				multiply = -1
				max = 35
				min = -35
			}
			desc = AI_VALUE_MODIFIER_GREED
		}
		modifier = {
			scope:recipient.ai_honor != 0
			add = {
				value = scope:recipient.ai_honor
				max = 75
				min = -35
			}
			desc = AI_VALUE_MODIFIER_HONOR
		}
		modifier = {
			scope:recipient.ai_energy != 0
			add = {
				value = scope:recipient.ai_energy
				max = 10
				min = -10
			}
			desc = AI_VALUE_MODIFIER_ENERGY
		}
		modifier = {
			NOT = { scope:diplomacy = yes }
			add = {
				value = scope:recipient.prowess
				subtract = scope:actor.prowess
				multiply = 2
			}
			desc = CTSC_RELATIVE_PROWESS
		}
		modifier = {
			scope:lethal = yes
			scope:recipient = {
				OR = {
					is_parent_of = scope:actor
					is_child_of = scope:actor
				}
				NOT = { has_relation_rival = scope:actor }
			}
			desc = AI_AVOID_LETHAL_DUEL_WITH_FAMILY
		}
		opinion_modifier = {
			opinion_target = scope:actor
			multiplier = 0.5
		}
	}
	
	ai_frequency = 24
	
	ai_target_quick_trigger = {
		adult = yes
	}
	
	ai_potential = {
		NOR = {
			has_trait = craven
			has_trait = content
		}
		government_has_flag = government_is_clan
		is_physically_able = yes 
	}

	ai_targets = {
		ai_recipients = dynasty
		ai_recipients = family
		max = 10
	}

	ai_targets = {
		ai_recipients = liege
		ai_recipients = head_of_faith
		ai_recipients = hooked_characters
		ai_recipients = scripted_relations
	}

	ai_targets = {
		ai_recipients = peer_vassals
		ai_recipients = vassals
		ai_recipients = neighboring_rulers
		max = 30
	}
	
	ai_will_do = {
		base = 5
		# Base requirements for AI
		modifier = { 
			add = -1000
			NOR = {
				AND = {
					is_independent_ruler = yes
					highest_held_title_tier >= scope:recipient.highest_held_title_tier
				}
				is_powerful_vassal = yes
				is_close_or_extended_family_of = scope:recipient
				opinion = {
					target = scope:recipient
					value >= 25
				}
			}
		}
		# Stop AI constantly challenging players
		modifier = { 
			scope:recipient = { has_character_flag = ai_cooldown_house_head_challenge_flag }
			add = -1000
		}
		# Tiers
		modifier = {
			add = 10
			piety_level >= scope:recipient.piety_level
		}
		modifier = {
			add = 10
			prestige_level >= scope:recipient.prestige_level
		}
		modifier = {
			add = 10
			highest_held_title_tier >= scope:recipient.highest_held_title_tier
		}
		# Traits
		modifier = {
			add = 30
			has_trait = ambitious
		}
		modifier = {
			add = 30
			has_trait = brave
		}
		modifier = {
			add = -30
			has_trait = craven
		}
		# Dread
		modifier = {
			add = -25
			has_dread_level_towards = {
				target = scope:recipient
				level >= 1
			}
		}
		modifier = {
			add = -25
			has_dread_level_towards = {
				target = scope:recipient
				level >= 2
			}
		}
		# Personality
		modifier = {
			ai_boldness > 0
			add = {
				value = ai_boldness
				divide = 2
				min = 1
			}
		}
		modifier = {
			ai_greed >= 50
			add = {
				value = ai_greed
				divide = 2
			}
		}
		modifier = {
			ai_sociability = 100
			add = 10
		}
	}
}
