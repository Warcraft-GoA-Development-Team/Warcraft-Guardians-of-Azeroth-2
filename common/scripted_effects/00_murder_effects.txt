

murder_consequences_known_or_exposed_effect = {
	$MURDERER$ = {
		###ADD TRAITS###
		#Force tooltip is used for everyone but POV to make sure expose secret events looks right for everyone, even though the trait can only be added once. Kinslayer works the same way.
		add_trait_only_force_tooltip_if_not_pov_effect = { TRAIT = murderer POV = $POV$ }
		add_kinslayer_trait_or_nothing_effect = { VICTIM = $VICTIM$ }
		
		if = { #Add piety penalty if the murder was unjust
			limit = {
				NOR = {
					any_close_family_member = {
						even_if_dead = yes
						exists = killer
						killer = $VICTIM$
					}
					any_spouse = {
						even_if_dead = yes
						exists = killer
						killer = $VICTIM$
					}
				}
			}
			add_piety = medium_piety_loss
		}

		# Family Feud
		house_feud_murder_effect = { VICTIM = $VICTIM$ MURDERER = $MURDERER$ }

		###OPINION AND DREAD###
		#Hide this from POV if they're not the murderer
		if = {
			limit = { this = $POV$ }
			add_dread = 15
			murder_opinion_effect = { VICTIM = $VICTIM$ MURDERER = $MURDERER$ }
		}
		else = {
			hidden_effect = {
				add_dread = 15
				murder_opinion_effect = { VICTIM = $VICTIM$ MURDERER = $MURDERER$ }
			}
		}
		# There are some things you just shouldn't do
		show_as_tooltip = {
			if = {
				limit = { $VICTIM$ = { has_character_flag = is_party_baron } }
				add_character_modifier = {
					modifier = party_baron_murdered_the_joy_of_life_modifier
				}
			}
		}
		hidden_effect = {
			if = {
				limit = {
					OR = {
						exists = local_var:murdered_party_baron
						exists = scope:secret.var:murdered_party_baron
					}
				}
				add_character_modifier = {
					modifier = party_baron_murdered_the_joy_of_life_modifier
				}
			}
		}
	}
	
	# Warcraft
	hurt_scourge_jailor_consequences_effect = { HURT_JAILOR = $VICTIM$ SCOURGE = $MURDERER$ }
}

unknown_murder_effect = {
	# Party Baron handling
	if = {
		limit = { $VICTIM$ = { has_character_flag = is_party_baron } }
		set_local_variable = {
			name = murdered_party_baron
			value = yes
		}
	}
	$VICTIM$ = {
		#Killed by murder: set this up first to keep the killer hidden.
		override_death_killer_effect = { death_reason = $REASON$ killer = $MURDERER$ }
	}
	$MURDERER$ = {
		if = {
			limit = { is_alive = yes }
			hidden_effect = {
				add_secret = {
					type = secret_murder
					target = $VICTIM$
				}
			}
			if = {
				limit = { exists = local_var:murdered_party_baron }
				random_secret = {
					limit = {
						secret_type = secret_murder
						secret_target = $VICTIM$
					}
					set_variable = {
						name = murdered_party_baron
						value = yes
					}
				}
			}
		}
	}
}

#If it's a cannibal eating you - so that that fact is saved for future reference
unknown_cannibal_murder_effect = {
	$VICTIM$ = {
		override_death_killer_effect = { death_reason = death_mysterious killer = $MURDERER$ }
	}
	$MURDERER$ = {
		add_secret = {
			type = secret_murder
			target = $VICTIM$
		}
		random_secret = {
			limit = {
				secret_type = secret_murder
				secret_target = $VICTIM$
			}
			set_variable = { #To set the right death reason if the secret is revealed
				name = was_eaten_by_cannibal
				value = yes
			}
		}
	}
}

#Your head is turned into a bell chime
unknown_bell_murder_effect = {
	$VICTIM$ = {
		override_death_killer_effect = {
			death_reason = death_mysterious
			killer = $MURDERER$
		}
	}
	$MURDERER$ = {
		add_secret = {
			type = secret_murder
			target = $VICTIM$
		}
		random_secret = {
			limit = {
				secret_type = secret_murder
				secret_target = $VICTIM$
			}
			save_scope_as = bell_secret
			set_variable = { #To set the right death reason if the secret is revealed
				name = was_turned_into_bell_chime 
				value = yes
			}
		}
	}
}


#KNOWN MURDER

# Exposer can be another character, or the murderer themselves if no specific character makes sense
known_murder_effect = {
	$VICTIM$ = { save_scope_as = victim_scope }
	$MURDERER$ = { save_scope_as = murderer_scope }
	hidden_effect = {
		if = {
			limit = { $VICTIM$ = { has_character_flag = is_party_baron } }
			set_local_variable = {
				name = murdered_party_baron
				value = yes
			}
		}
	}
	$VICTIM$ = {
		every_close_family_member = {
			limit = {
				NOT = { this = $MURDERER$ }
				trigger_if = {
					limit = { exists = scope:scheme }
					NOT = {
						scope:scheme = { scheme_is_character_agent = prev }
					}
				}
				NOT = {
					is_scheming_against = {
						target = $VICTIM$
						type = murder
					}
				}
				opinion = {
					target = $VICTIM$
					value > -50
				}
				NOT = {
					has_any_bad_relationship_with_character_trigger = { CHARACTER = $VICTIM$ }
				}
			}
			hidden_effect = {
				random = {
					chance = 25
					modifier = {
			            factor = 2
			            has_trait = wrathful
			        }
			        modifier = {
			            factor = 2
			            has_trait = vengeful
			        }
			        modifier = {
			            factor = 2
			            has_any_good_relationship_with_character_trigger = { CHARACTER = $VICTIM$ }
			        }
			        modifier = {
			        	factor = 2
			        	OR = {
			        		is_parent_of = $VICTIM$
			        		is_child_of = $VICTIM$
			        	} 	
			        }
				    trigger_event = {
						id = bp1_yearly.8050
						days = 15
					}
				}
			}
		}
		override_death_killer_effect = {
			death_reason = death_murder
			killer = $MURDERER$
		}
		hidden_effect = { set_killer_public = yes }
	}
	$MURDERER$ = {
		hidden_effect = {
			add_secret = {
				type = secret_murder
				target = $VICTIM$
			}
			random_secret = {
				limit = {
					secret_type = secret_murder
					secret_target = $VICTIM$
				}

				set_variable = {
					name = known_murder
					value = yes
				}

				expose_secret = $EXPOSER$
			}
		}
	}
	show_as_tooltip = {
		murder_consequences_known_or_exposed_effect = {
			MURDERER = $MURDERER$
			VICTIM = $VICTIM$
			POV = root
		}
	}
	# Family Feud
	house_feud_murder_effect = { VICTIM = $VICTIM$ MURDERER = $MURDERER$ }
}


murder_opinion_effect = {
	$VICTIM$ = {
		#Victim's family
		every_spouse = {
			limit = { NOT = { this = $MURDERER$ } }
			add_to_temporary_list = close_family_murder_opinion_list
		}
		every_close_family_member = {
			limit = { NOT = { this = $MURDERER$ } }
			add_to_temporary_list = close_family_murder_opinion_list
		}

		if = {
			limit = {
				any_in_list = {
					list = close_family_murder_opinion_list
					always = yes
				}
			}
			every_in_list = {
				list = close_family_murder_opinion_list
				custom = all_close_family_and_spouses

				add_opinion = {
					target = $MURDERER$
					modifier = murdered_close_family_crime
				}
			}
		}
		#Victim's friends and lovers
		every_relation = {
			type = friend
			limit = {
				NOR = {
					this = $VICTIM$
					is_in_list = close_family_murder_opinion_list
				}
			}
			add_to_list = victim_close_relations_list
		}
		every_relation = {
			type = lover
			limit = {
				NOR = {
					this = $VICTIM$
					is_in_list = close_family_murder_opinion_list
					is_in_list = victim_close_relations_list
				}
			}
			add_to_list = victim_close_relations_list
		}
		if = {
			limit = {
				any_in_list = {
					list = victim_close_relations_list
					always = yes
				}
			}
			every_in_list = {
				list = victim_close_relations_list
				custom = all_friends_and_lovers
				add_opinion = {
					target = $MURDERER$
					modifier = executed_close_relation_opinion
				}
			}
		}
	}
}


attempted_murder_opinion_effect = {
	$VICTIM$ = {
		if = {
			limit = { is_alive = yes }
			add_opinion = {
				target = $MURDERER$
				modifier = attempted_murder_me_crime
			}
			hidden_effect = {
				add_opinion = {
					target = $MURDERER$
					modifier = murder_personal_grudge_opinion
					years = 2
				}
			}
		}

		every_spouse = {
			limit = { NOT = { this = $MURDERER$ } }
			add_to_temporary_list = close_family_murder_opinion_list
		}
		every_close_family_member = {
			limit = { NOT = { this = $MURDERER$ } }
			add_to_temporary_list = close_family_murder_opinion_list
		}

		if = {
			limit = {
				any_in_list = {
					list = close_family_murder_opinion_list
					always = yes
				}
			}
			every_in_list = {
				list = close_family_murder_opinion_list
				custom = all_close_family_and_spouses

				add_opinion = {
					target = $MURDERER$
					modifier = attempted_murder_close_family_crime
					years = 20
				}
			}
		}

	}
	
	# Warcraft
	hurt_scourge_jailor_consequences_effect = { HURT_JAILOR = $VICTIM$ SCOURGE = $MURDERER$ }
}

abduct_opinion_effect = {
	$VICTIM$ = {
		add_opinion = {
			target = $ABDUCTER$
			modifier = abducted_me_crime
		}
		#Victim's family
		every_spouse = {
			limit = { NOT = { this = $ABDUCTER$ } }
			add_to_temporary_list = close_family_abduct_opinion_list
		}
		every_close_family_member = {
			limit = { NOT = { this = $ABDUCTER$ } }
			add_to_temporary_list = close_family_abduct_opinion_list
		}

		if = {
			limit = {
				any_in_list = {
					list = close_family_abduct_opinion_list
					always = yes
				}
			}
			every_in_list = {
				list = close_family_abduct_opinion_list
				custom = all_close_family_and_spouses

				add_opinion = {
					target = $ABDUCTER$
					modifier = abducted_close_family_crime
				}
			}
		}
		#Victim's friends and lovers
		every_relation = {
			type = friend
			limit = {
				NOR = {
					this = $ABDUCTER$
					is_in_list = close_family_abduct_opinion_list
				}
			}
			add_to_list = victim_close_relations_list
		}
		every_relation = {
			type = lover
			limit = {
				NOR = {
					this = $VICTIM$
					is_in_list = close_family_abduct_opinion_list
					is_in_list = victim_close_relations_list
				}
			}
			add_to_list = victim_close_relations_list
		}
		if = {
			limit = {
				any_in_list = {
					list = victim_close_relations_list
					always = yes
				}
			}
			every_in_list = {
				list = victim_close_relations_list
				custom = all_friends_and_lovers
				add_opinion = {
					target = $ABDUCTER$
					modifier = abducted_close_relation_opinion
				}
			}
		}
	}
}

attempted_abduction_opinion_effect = {
	$VICTIM$ = {
		if = {
			limit = { is_alive = yes }
			add_opinion = {
				target = $ABDUCTER$
				modifier = attempted_abduct_me_crime
			}
			hidden_effect = {
				add_opinion = {
					target = $ABDUCTER$
					modifier = murder_personal_grudge_opinion
					years = 2
				}
			}
		}
		every_spouse = {
			limit = { NOT = { this = $ABDUCTER$ } }
			add_to_temporary_list = close_family_abduct_opinion_list
		}
		every_close_family_member = {
			limit = { NOT = { this = $ABDUCTER$ } }
			add_to_temporary_list = close_family_abduct_opinion_list
		}

		if = {
			limit = {
				any_in_list = {
					list = close_family_abduct_opinion_list
					always = yes
				}
			}
			every_in_list = {
				list = close_family_abduct_opinion_list
				custom = all_close_family_and_spouses

				add_opinion = {
					target = $ABDUCTER$
					modifier = attempted_abduct_close_family_crime
					years = 20
				}
			}
		}

	}
}


#Pick a Local Creepy Crawly
set_local_venomous_creature_effect = {
	random_list = {
		10 = {
			save_scope_value_as = {
				name = venomous_creature
				value = flag:rare_spider ##Very rare, as spiders poisonous enough to kill a man would need to come from VERY far
			}
		}
		500 = {
			save_scope_value_as = {
				name = venomous_creature
				value = flag:red_scorpion #India, Nepal
			}
			modifier = {
				factor = 0
				trigger_if = {
					limit = {
						exists = location
					}
					# Warcraft
					NOT = { location = { red_scorpion_region_trigger = yes } }
				}
			}
		}
		1000 = {
			save_scope_value_as = {
				name = venomous_creature
				value = flag:deathstalker #North Africa or Middle East
			}
			modifier = {
				factor = 0
				trigger_if = {
					limit = {
						exists = location
					}
					# Warcraft
					NOT = { location = { red_scorpion_region_trigger = yes } }
				}
			}
		}
		500 = {
			save_scope_value_as = {
				name = venomous_creature
				value = flag:fat_tail #Arabia, Middle East, Egypt
			}
			modifier = {
				factor = 0
				trigger_if = {
					limit = {
						exists = location
					}
					# Warcraft
					NOT = { location = { red_scorpion_region_trigger = yes } }
				}
			}
		}
		1000 = {
			save_scope_value_as = {
				name = venomous_creature
				value = flag:viper #Northern and Eastern Europe
			}
			modifier = {
				factor = 0
				trigger_if = {
					limit = {
						exists = location
					}
					# Warcraft
					NOT = { location = { viper_region_trigger = yes } }
				}
			}
		}
		
		# Warcraft
	}
}
