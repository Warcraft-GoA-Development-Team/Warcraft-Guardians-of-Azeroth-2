#Events for Plague Scheme Outcomes

namespace = plague_outcome

##################################
# MAINTENANCE EVENTS 0000 - 0099
##################################

plague_outcome.0001 = {

	hidden = yes

	immediate = {
		scope:scheme.var:plague_center = { save_scope_as = plague_center }
		
		add_character_flag = { #To make sure you never resolve two murders at once
			flag = is_in_event_plague_outcome_0001
			days = 1
		}
		trigger_event = { on_action = plague_setup }
	}
}


#######################################
# "REGULAR" PLAGUING SETUPS 1000 - 1999
#######################################
# Whichever event is randomly rolled here determines what form the event takes.
# Remember to set flags for reference when generating event text in success or failure event.

#Setup for everyone turning into an undead
plague_outcome.1001 = {
	title = plague_outcome.1001.t
	desc = plague_outcome.1001.d
	theme = plague
	left_portrait = scope:owner
	right_portrait = scope:target

	immediate = {
		hostile_scheme_outcome_roll_setup_effect = yes
	}

	option = {
		name = plague_outcome.1001.a
		
		plague_outcome_roll_effect = yes
	}

	option = {
		name = murder_outcome.1001.b
		
		dont_execute_scheme_effect = yes
		
		ai_chance = {
			base = 0
		}
	}
}

#####################################
# SUCCESSFUL OUTCOME 2000 - 2999
#####################################

########################
# Undead conversion
########################

plague_outcome.2000 = {
	type = character_event
	hidden = yes

	immediate = {
		scope:scheme = {
			every_scheme_agent_character = {
				trigger_event_plague_outcome_2001_effect = { OWNER = scope:owner TARGET = scope:target PLAGUE_CENTER = scope:plague_center }
			}
		}
		trigger_event_plague_outcome_2001_effect = { OWNER = scope:owner TARGET = scope:target PLAGUE_CENTER = scope:plague_center }
	}
}

plague_outcome.2001 = {
	type = character_event
	title = plague_outcome.2000.t
	desc = {
		desc = plague_outcome.2000.desc
		
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = scope:scheme_discovered
				}
				desc = plague_outcome.2000.exposed_scheme
			}
			desc = plague_outcome.2000.not_exposed_scheme
		}
	}
	theme = plague

	left_portrait = scope:owner
	right_portrait = scope:target

	immediate = {
		plague_success_immediate_effect = yes
	}

	option = {
		name = plague_outcome.2000.a
		plague_success_option_effect = yes
	}
}

###############################
# FAILURE OUTCOMES 4000 - 4999
###############################

#######################
# Undead Conversion
#######################
plague_outcome.4001 = {
	type = character_event
	title = plague_outcome.4001.t
	### START DESC
	desc = {
		# Start off with declaration of failure
		# Include Target's name!
		random_valid = {
			desc = plague_outcome.4001.failure_declaration_1
			desc = plague_outcome.4001.failure_declaration_2
			desc = plague_outcome.4001.failure_declaration_3
		}
	
		desc = plague_outcome.4001.desc

		first_valid = {
			triggered_desc = {
				trigger = {
					exists = scope:scheme_discovered
				}
				desc = plague_outcome.4001.exposed_scheme
			}
			desc = plague_outcome.4001.not_exposed_scheme
		}
	}
	### END DESC
	theme = plague
	left_portrait = {
		character = scope:owner
		animation = rage
	}
	right_portrait = {
		character = scope:target
		animation = shock
	}

	immediate = {
		# random_dummy_gender_assassin_effect = yes
		plague_failure_immediate_effect = yes
	}

	option = {
		name = plague_outcome.4001.a
		
		abandon_scheme_effect = yes
		
		ai_chance = {
			base = 100
		}
	}

	# option = {
	# 	name = plague_outcome.4001.b
	# 	trigger = {
	# 		NOT = { exists = scope:scheme_discovered }
	# 	}
		
	# 	restart_scheme_effect = yes
		
	# 	ai_chance = {
	# 		base = 0
	# 	}
	# }
}

############################################
# YOU GOT (ATTEMPTED?) PLAGUED 5000 - 5999
############################################

#You've been plagued
plague_outcome.5001 = {
	type = character_event
	title = plague_outcome.5001.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = global_var:terenas_character
					root = global_var:terenas_character
				}
				desc = {
					first_valid = {
						triggered_desc = {
							trigger = {
								game_start_date = 603.1.1
								leads_this_union_trigger = { faction = alliance }
							}
							desc = plague_outcome.5001.terenas_beginning_alliance
						}
						desc = plague_outcome.5001.terenas_beginning_common
					}
					desc = plague_outcome.5001.terenas_ending
				}
			}
			desc = {
				desc = plague_outcome.5001.undead_conversion
				first_valid = {
					triggered_desc = {
						trigger = {
							exists = scope:scheme_discovered
						}
						desc = plague_outcome.5001.exposed_scheme
					}
					desc = plague_outcome.5001.not_exposed_scheme
				}
			}
		}
	}
	theme = plague
	right_portrait = {
		character = root
		animation = shock
	}
	left_portrait = {
		character = scope:owner_to_reveal
		animation = schadenfreude
	}
	
	trigger = {
		NOT = { has_character_flag = plague_notification_timer }
	}

	immediate = {
		plague_success_victim_immediate_effect = yes
		
		add_character_flag = { flag = plague_notification_timer years = 2 }
		
		force_owner_to_reveal_use_stealth_clothes_effect = yes
		if = {
			limit = {
				NOT = { is_target_in_global_variable_list = { name = unavailable_unique_events target = flag:arthas_expedition } }
				frostmourne_can_be_found_trigger = yes
				game_start_date <= 603.1.1
				
				is_independent_ruler = yes
				is_vulnerable_to_plague_character_trigger = yes
				capital_province = { geographical_region = world_eastern_kingdoms_lordaeron }
			}
			add_to_global_variable_list = {
				name = unavailable_unique_events
				target = flag:arthas_expedition
			}
			add_to_global_variable_list = {
				name = unavailable_unique_events
				target = flag:frostmourne_ongoing
			}

			save_scope_value_as = { name = arthas_exists value = yes }
			find_arthas_effect = yes
			primary_title = { save_scope_as = lordaeron }
		}
	}
	
	option = {
		trigger = {
			exists = scope:arthas_exists
			exists = global_var:terenas_character
			root = global_var:terenas_character
		}
		name = wc_arthas_story_9_1_OPT_A
		
		scope:plague_center.title_province = {
			set_global_variable = { name = andorhal_province value = this }
		}
		find_hearthglen_effect = yes
		scope:hearthglen = { set_global_variable = { name = hearthglen value = this } }
		find_stratholme_effect = yes
		scope:stratholme = { set_global_variable = { name = stratholme value = this } }
		add_to_global_variable_list = {
			name = unavailable_unique_events
			target = flag:arthas_activity_good_to_go
		}
		
		global_var:arthas_character = {
			if = { limit = { is_ai = yes } add_character_flag = { flag = wc_cannot_serve_in_army years = 1 } }
			else = { add_character_flag = { flag = wc_cannot_serve_in_army weeks = 10 } }
			trigger_event = wc_arthas_story.9
		}
		
		ai_chance = {
			base = 100
		}
	}

	option = {
		name = DEATH_COMES
		trigger = {
			NOT = {
				exists = scope:arthas_exists
			}
			scope:owner.faith = root.faith
		}
	}

	option = {
		name = plague_outcome.5001.discovered
		trigger = {
			NOT = {
				exists = scope:arthas_exists
				scope:owner.faith = root.faith
			}
			exists = scope:scheme_discovered
		}
	}

	option = {
		trigger = {
			NOR = {
				exists = scope:arthas_exists
				scope:owner.faith = root.faith
				exists = scope:scheme_discovered
			}
		}
		name = plague_outcome.5001.not_discovered
	}
}

#You've survived a murder attempt
plague_outcome.5002 = {
	title = plague_outcome.5002.t
	desc = {
		desc = plague_outcome.5002.undead_conversion
		
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = scope:scheme_discovered
				}
				desc = plague_outcome.5002.exposed_scheme
			}
			desc = plague_outcome.5002.not_exposed_scheme
		}
	}
	theme = plague
	right_portrait = {
		character = root
		animation = shock
	}
	left_portrait = {
		character = scope:owner_to_reveal
		animation = anger
	}

	immediate = {
		plague_failure_victim_immediate_effect = yes
		
		force_owner_to_reveal_use_stealth_clothes_effect = yes
	}

	option = {
		name = plague_outcome.5001.discovered
		trigger = {
			exists = scope:scheme_discovered
		}
	}

	option = {
		name = plague_outcome.5001.not_discovered
		trigger = {
			NOT = { exists = scope:scheme_discovered }
		}
		exclusive = yes
	}
}
