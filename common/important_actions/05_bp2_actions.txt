action_can_offer_hostage = {
	combine_into_one = yes
	priority = 400
	check_create_action = {
		if = {
			limit = { # Must have a valid hostage to send
				any_close_family_member = {
					bp2_valid_to_offer_as_hostage_trigger = { SENDER = root }
				}
			}
			if = { # Neighboring realms
				limit = { 
					is_independent_ruler = yes 
				}
				every_neighboring_top_liege_realm_owner = { 
					limit = {
						highest_held_title_tier >= root.hostage_tier_check_value
						current_military_strength >= root.offer_hostage_military_strength_value
					}
					add_to_list = potential_offer_target_list 
				}
			}
			else = { # Fellow vassals
				liege = {
					every_vassal = {
						limit = { 
							character_is_realm_neighbor = root 
							highest_held_title_tier >= root.hostage_tier_check_value
							current_military_strength >= root.offer_hostage_military_strength_value
						}
						add_to_list = potential_offer_target_list
					}
				}
			}
			# Powerful vassals
			every_powerful_vassal = {
				limit = {
					save_temporary_scope_as = potential_powerful_vassal
					highest_held_title_tier >= tier_duchy
					OR = {
						# Claimants
						any_claim = { this = root.primary_title }
						# Faction members
						root = {
							any_targeting_faction = {
								any_faction_member = { this = scope:potential_powerful_vassal }
								OR = {
									faction_can_press_demands = yes
									faction_power >= 75
								}
							}
						}
					}
				}
				add_to_list = potential_exchange_target_list
			}
			# Check validity
			if = {
				limit = {
					any_in_list = {
						list = potential_offer_target_list
						count >= 1
						trigger_if = {
							limit = {
								root = { is_at_war = no }
							}
							current_strength_with_allies_value >= root.current_strength_ninety_percent_value
						}
					}
				}
				every_in_list = {
					list = potential_offer_target_list
					limit = { bp2_valid_hostage_offer_action_trigger = yes }
					save_scope_as = warden
					try_create_important_action = {
						important_action_type = action_can_offer_hostage
						actor = root
						recipient = scope:warden
					}
				}
			}
		}
	}

	unimportant = {
		scope:recipient = {
			OR = {
				is_allied_to = scope:actor
				has_truce = scope:actor
				NOT = { has_any_cb_on = scope:actor }
			}
		}
	}

	effect = {
		ordered_close_family_member = {
			limit = {
				bp2_valid_to_offer_as_hostage_trigger = { SENDER = root }
				save_temporary_scope_as = my_hostage
				root = {
					is_character_interaction_potentially_accepted = {
						interaction = demand_hostage_interaction
						recipient = scope:recipient
						secondary_actor = scope:my_hostage
					}
				}
			}
			order_by = {
				value = 0
				subtract = age
			}
			save_scope_as = secondary_actor
		}
		open_interaction_window = {
			interaction = offer_hostage_interaction
			actor = scope:actor
			recipient = scope:recipient
		}
	}
}

action_can_demand_hostage = {
	combine_into_one = yes
	priority = 400
	check_create_action = {
		if = { # Neighboring realms
			limit = { 
				is_independent_ruler = yes 
			#	NOT = { has_global_variable = tutorial_current_situation_gradual_reveal_3 }
			}
			every_neighboring_top_liege_realm_owner = { 
				limit = {
					highest_held_title_tier >= root.hostage_tier_check_value
					current_military_strength >= root.demand_hostage_military_strength_value
				}
				add_to_list = potential_demand_target_list 
			}
		}
		else = { # Fellow vassals
			liege ?= {
				every_vassal = {
					limit = { 
						character_is_realm_neighbor = root 
						highest_held_title_tier >= root.hostage_tier_check_value
						current_military_strength >= root.demand_hostage_military_strength_value
					}
					add_to_list = potential_offer_target_list
				}
			}
		}
		# Powerful vassals
		every_powerful_vassal = {
			limit = {
				highest_held_title_tier >= tier_duchy
				save_temporary_scope_as = potential_powerful_vassal
				OR = {
					# Claimants
					any_claim = { this = root.primary_title }
					# Faction members
					root = {
						any_targeting_faction = {
							any_faction_member = { this = scope:potential_powerful_vassal }
							OR = {
								faction_can_press_demands = yes
								faction_power >= 75
							}
						}
					}
				}
			}
			add_to_list = potential_exchange_target_list
		}
		# Check validity
		if = {
			limit = {
				any_in_list = { list = potential_demand_target_list count >= 1 }
			}
			every_in_list = {
				list = potential_demand_target_list
				limit = { bp2_valid_hostage_demand_action_trigger = yes }
				save_scope_as = home_court
				try_create_important_action = {
					important_action_type = action_can_demand_hostage
					actor = root
					recipient = scope:home_court
				}
			}
		}
	}

	unimportant = {
		scope:actor = {
			OR = {
				has_any_cb_on = scope:recipient
				has_truce = scope:recipient
				is_allied_to = scope:recipient
			}
		}
	}

	effect = {
		scope:recipient = {
			ordered_close_family_member = {
				limit = {
					bp2_valid_to_offer_as_hostage_trigger = { SENDER = scope:recipient }
					save_temporary_scope_as = their_hostage
					root = {
						is_character_interaction_potentially_accepted = {
							interaction = demand_hostage_interaction
							recipient = scope:recipient
							secondary_recipient = scope:their_hostage
						}
					}
				}
				order_by = {
					value = 0
					subtract = age
				}
				save_scope_as = secondary_recipient
			}
		}
		open_interaction_window = {
			interaction = demand_hostage_interaction
			actor = scope:actor
			recipient = scope:recipient
			secondary_recipient = scope:secondary_recipient
		}
	}
}

action_can_exchange_hostage = {
	combine_into_one = yes
	priority = 400
	check_create_action = {
		if = {
			limit = { # Must have a valid hostage to send
				any_close_family_member = {
					bp2_valid_to_offer_as_hostage_trigger = { SENDER = root }
				}
					#Warcraft
				#NOT = { has_global_variable = tutorial_current_situation_gradual_reveal_3 }
			}
			if = { # Neighboring realms
				limit = { is_independent_ruler = yes }
				every_neighboring_top_liege_realm_owner = { 
					limit = {
						highest_held_title_tier >= root.hostage_tier_check_value
						current_military_strength >= root.demand_hostage_military_strength_value
					}
					add_to_list = potential_exchange_target_list 
				}
			}
			else = { # Fellow vassals
				liege = {
					every_vassal = {
						limit = { 
							character_is_realm_neighbor = root 
							highest_held_title_tier >= root.hostage_tier_check_value
							current_military_strength >= root.demand_hostage_military_strength_value
						}
						add_to_list = potential_offer_target_list
					}
				}
			}
			# Powerful vassals
			every_powerful_vassal = {
				limit = {
					save_temporary_scope_as = potential_powerful_vassal
					OR = {
						# Claimants
						any_claim = { this = root.primary_title }
						# Faction members
						root = {
							any_targeting_faction = {
								any_faction_member = { this = scope:potential_powerful_vassal }
								OR = {
									faction_can_press_demands = yes
									faction_power >= 75
								}
							}
						}
					}
				}
				add_to_list = potential_exchange_target_list
			}
			# Check validity
			if = {
				limit = {
					any_in_list = { list = potential_exchange_target_list count >= 1 }
				}
				every_in_list = {
					list = potential_exchange_target_list
					limit = { bp2_valid_hostage_exchange_action_trigger = yes }
					save_scope_as = home_court
					try_create_important_action = {
						important_action_type = action_can_exchange_hostage
						actor = root
						recipient = scope:home_court
					}
				}
			}
		}
	}

	unimportant = {
		scope:recipient = {
			OR = {
				is_allied_to = scope:actor
				has_truce = scope:actor
				NOT = { has_any_cb_on = scope:actor }
			}
		}
	}

	effect = {
		open_interaction_window = {
			interaction = exchange_hostage_interaction
			actor = scope:actor
			recipient = scope:recipient
		}
	}
}

action_can_recall_hostage = {
	combine_into_one = yes
	priority = 400
	check_create_action = {
		if = {
			limit = { # Must have a valid hostage to recall
				any_home_court_hostage = {
					save_temporary_scope_as = hostage_temp
					warden = {
						NOT = { is_at_war_with = root }
						root = {
							is_character_interaction_potentially_accepted = {
								interaction = recall_hostage_interaction
								recipient = prev
								secondary_recipient = scope:hostage_temp
							}
						}
					}
					
					hostage_duration = { years >= 1 }
				}
			}
			every_home_court_hostage = {
				limit = {
					warden = {
						NOT = { is_at_war_with = root }
					}
					hostage_duration = { years >= 1 }
				}
				warden = { save_scope_as = warden }
				try_create_important_action = {
					important_action_type = action_can_recall_hostage
					actor = root
					recipient = scope:warden
				}
			}
		}
	}

	effect = {
		open_interaction_window = {
			interaction = recall_hostage_interaction
			actor = scope:actor
			recipient = scope:recipient
		}
	}
}
