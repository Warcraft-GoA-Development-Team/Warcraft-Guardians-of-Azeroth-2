init_elemental_fire_spells_effect = {
    add_to_global_variable_list = { name = elemental_fire_spells target = flag:summon_fire_elemental }
    add_to_global_variable_list = { name = elemental_fire_spells target = flag:lava_lash }
    add_to_global_variable_list = { name = elemental_fire_spells target = flag:backdraft }
    add_to_global_variable_list = { name = elemental_fire_spells target = flag:flame_wall }
    add_to_global_variable_list = { name = elemental_fire_spells target = flag:flame_shock }
    add_to_global_variable_list = { name = elemental_fire_spells target = flag:burnout }
    add_to_global_variable_list = { name = elemental_fire_spells target = flag:planar_fire }
    add_to_global_variable_list = { name = elemental_fire_spells target = flag:cauterize_wound }
    add_to_global_variable_list = { name = elemental_fire_spells target = flag:vernal_solstice }
}

add_or_increase_burned_effect = {
    if = {
        limit = {
            NOT = { has_trait = burned }
        }
        add_trait = burned_1
    }
    else_if = {
        limit = {
            has_trait = burned_1
            NOT = { has_trait = burned_2 }
        }
        remove_trait = burned_1
        add_trait = burned_2
    }
    else_if = {
        limit = {
            has_trait = burned_2
            NOT = { has_trait = burned_3 }
        }
        remove_trait = burned_2
        add_trait = burned_3
    }
}

cast_summon_fire_elemental_effect = {
    if = {
        limit = { exists = var:summon_fire_elemental_recipient }
        var:summon_fire_elemental_recipient = {
            save_temporary_scope_as = first_recipient
        }
    }
    else_if = {
        limit = {
            exists = var:current_spell_name
            var:current_spell_name = flag:summon_fire_elemental
            exists = var:spellbook_open
            exists = var:spell_recipient
        }
        var:spell_recipient = {
            save_temporary_scope_as = first_recipient
        }
    }

    if = {
        limit = {
            exists = scope:first_recipient
        }
        if = {
            limit = {
                exists = scope:first_recipient.holder
            }
            scope:first_recipient.holder = {
                save_scope_as = this_recipient
            }
            if = {
                limit = {
                    exists = scope:first_recipient.holder.liege
                }
                scope:first_recipient.holder.liege = {
                    save_scope_as = this_recipient
                }
            }
            if = {
                limit = {
                    exists = scope:first_recipient.holder.top_liege
                }
                scope:first_recipient.holder.top_liege = {
                    save_scope_as = this_recipient
                }
            }
        }
        else = {
            scope:first_recipient = {
                save_scope_as = this_recipient
            }
        }

        if = {
            limit = {
                exists = scope:this_recipient
                OR = { # current_spell_rank is for tooltips
                    AND = {
                        exists = var:summon_fire_elemental_rank
                        var:summon_fire_elemental_rank >= 1
                    }
                    AND = {
                        exists = var:current_spell_rank
                        var:current_spell_rank >= 1
                    }
                }
            }

            root = {
                save_temporary_scope_value_as = {
                    name = duration
                    value = wc_spell_summon_fire_elemental_duration_days_value
                }
            }
            scope:this_recipient = {
                add_character_modifier = {
                    modifier = wc_summon_fire_elemental_modifier
                    days = wc_current_spell_duration
                }
            }

            if = {
                limit = {
                    OR = {
                        AND = {
                            exists = var:summon_fire_elemental_rank
                            var:summon_fire_elemental_rank >= 2
                        }
                        AND = {
                            exists = var:current_spell_rank
                            var:current_spell_rank >= 2
                        }
                    }
                }
                scope:this_recipient = {
                    add_character_flag = {
                        flag = has_fire_elemental_maa
                        days = 735
                    }
                    liege ?= {
                        add_character_flag = {
                            flag = has_fire_elemental_maa
                            days = 735
                        }
                    }

                    if = {
                        limit = { # actual effect
                            exists = root.var:spell_recipient
                            NOT = {
                                exists = root.var:summon_fire_elemental_recipient
                            }
                        }
                        spawn_army = {
                            uses_supply = no
                            inheritable = yes
                            name = summoned_fire_elemental
                            men_at_arms = {
                                type = fire_elemental
                                stacks = 1
                            }
                            location = root.var:spell_recipient.title_province
                        }
                    }
                    else_if = {
                        limit = { # actual effect
                            exists = root.var:summon_fire_elemental_recipient
                        }
                        spawn_army = {
                            uses_supply = no
                            inheritable = yes
                            name = summoned_fire_elemental
                            men_at_arms = {
                                type = fire_elemental
                                stacks = 1
                            }
                            location = root.var:summon_fire_elemental_recipient.title_province
                        }
                    }
                }
                if = {
                    limit = {
                        OR = {
                            AND = {
                                exists = var:summon_fire_elemental_rank
                                var:summon_fire_elemental_rank = 3
                            }
                            AND = {
                                exists = var:current_spell_rank
                                var:current_spell_rank = 3
                            }
                        }
                    }

                    scope:this_recipient = {
                        add_character_modifier = {
                            modifier = wc_empowered_fire_elemental_modifier
                            days = wc_current_spell_duration
                        }
                    }
                }
            }
        }
    }
}

cast_lava_lash_effect = {
    if = {
        limit = { exists = var:lava_lash_recipient }
        var:lava_lash_recipient = {
            save_temporary_scope_as = this_recipient
        }
    }
    else_if = {
        limit = {
            exists = var:current_spell_name
            var:current_spell_name = flag:lava_lash
            exists = var:spellbook_open
            exists = var:spell_recipient
        }
        var:spell_recipient = {
            save_temporary_scope_as = this_recipient
        }
    }

    if = {
        limit = {
            exists = scope:this_recipient
        }
        root = {
            save_temporary_scope_value_as = {
                name = duration
                value = wc_spell_lava_lash_duration_days_value
            }
        }
        scope:this_recipient.title_province = {
            add_province_modifier = {
                modifier = wc_lava_lash_modifier
                days = wc_current_spell_duration
            }
            if = { # counting stacks
                limit = {
                    has_variable = lava_lash
                }
                set_variable = {
                    name = lava_lash_2
                    value = 1
                    days = wc_current_spell_duration
                }
            }
            else_if = {
                limit = {
                    has_variable = lava_lash_2
                }
                set_variable = {
                    name = lava_lash_3
                    value = 1
                    days = wc_current_spell_duration
                }
            }
            else = {
                set_variable = {
                    name = lava_lash
                    value = 1
                    days = wc_current_spell_duration
                }
            }
        }
        hidden_effect = {
            if = {
                limit = { # empowered perk
                    has_perk = elemental_fire_magic_tree_2_perk_7
                }
                random_list = {
                    90 = {
                        # nothing
                    }
                    10 = {
                        scope:this_recipient.title_province = {
                            random_neighboring_province = {
                                limit = {
                                    is_sea_province = no
                                    has_holding = yes
                                    barony.holder = prev.barony.holder
                                }
                                add_province_modifier = {
                                    modifier = wc_lava_lash_modifier
                                    days = wc_current_spell_duration
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

cast_backdraft_effect = {
    if = {
        limit = { exists = var:backdraft_recipient }
        var:backdraft_recipient = {
            save_scope_as = this_recipient
        }
    }
    else_if = {
        limit = {
            exists = var:current_spell_name
            var:current_spell_name = flag:backdraft
            exists = var:spellbook_open
            exists = var:spell_recipient
        }
        var:spell_recipient = {
            save_scope_as = this_recipient
        }
    }

    if = {
        limit = {
            exists = scope:this_recipient
            exists = scope:this_recipient.title_province
        }
        scope:this_recipient.title_province = {
            custom_tooltip = wc_backdraft_tt
            set_variable = {
                name = backdraft_monitor
                value = root
            }
        }
        # Add to root scope to monitor
        add_to_variable_list = {
            name = backdraft_observer_list
            target = scope:this_recipient
        }
    }

    if = {
        limit = { has_variable_list = backdraft_targets_list }
        backdraft_multiple_effect = { LIST = backdraft_targets_list RANK = backdraft }
    }
    else_if = {
        limit = { has_variable_list = spell_targets_list }
        backdraft_multiple_effect = { LIST = spell_targets_list RANK = current_spell }
    }
}

backdraft_multiple_effect = {
    if = {
        limit = {
            has_variable_list = $LIST$
            var:$RANK$_rank = 2
        }
        every_in_list = {
            variable = $LIST$
            save_scope_as = title_recipient 
            scope:title_recipient = {
                custom_tooltip = wc_backdraft_tt
                set_variable = {
                    name = backdraft_monitor
                    value = root
                }
            }
            root = {
                # Add to root scope to monitor
                add_to_variable_list = {
                    name = backdraft_observer_list
                    target = scope:title_recipient
                }
            }
        }
    }
    else_if = {
        limit = {
            has_variable_list = $LIST$
            var:$RANK$_rank = 3
        }
        every_in_list = {
            variable = $LIST$
            save_scope_as = title_recipient
            scope:title_recipient = {
                custom_tooltip = wc_backdraft_tt
                set_variable = {
                    name = backdraft_monitor
                    value = root
                }
            }
            root = {
                # Add to root scope to monitor
                add_to_variable_list = {
                    name = backdraft_observer_list
                    target = scope:title_recipient
                }
            }
        }
    }
}

backdraft_proc_effect = {
    send_interface_message = {
        title = backdraft_proc_title
        if = {
            limit = {
                wc_current_mana_percent_value < 0.9
            }
            wc_change_mana_by_value_effect = { # add mana
                CHANGE = add
                VALUE = wc_spell_$SPELL$_cost_mana_value
            }
        }
        else = {
            add_character_modifier = {
                modifier = wc_backdraft_proc
                days = 180
            }
        }
    }

    if = { limit = { $RANK$ = 1 }} # error supress
    if = { limit = { flag:$TYPE$ = flag:poop }} # error supress
}

backdraft_check_effect = {
    ## BACKDRAFT
    if = {
        limit = {
            OR = { # is it the required spell type
                var:casted_class = flag:elemental_fire
                var:casted_class = flag:elemental_earth
                var:casted_class = flag:elemental_water
                var:casted_class = flag:elemental_air
                var:casted_class = flag:disorder
                var:casted_class = flag:order
            }
            # The spell is not backdraft itself
            NOT = { var:casted_spell = flag:backdraft }
        }
		# If a barony has backdraft, and also it's county, it will remove from the barony first.
        if = {
            limit = { # If the title itself has backdraft BARONY or COUNTY
                scope:current_target_title = {
                    has_variable = backdraft_monitor
                }
            }
            scope:current_target_title = {
                var:backdraft_monitor = {
                    execute_scoped_spell_effect = {
                        SPELL = root.var:casted_spell
                        EFFECT = backdraft_proc_effect
                    }
					remove_list_variable = {
						name = backdraft_observer_list
						target = scope:current_target_title 
					}
                }
                remove_variable = backdraft_monitor
            }
        }
        else_if = { # If a county has backdraft, but the barony is the target DOES not have it
            limit = {
                scope:current_target_title = {
                    tier = tier_barony
                }
                scope:current_target_title.county = {
                    has_variable = backdraft_monitor
                }
            }
            scope:current_target_title.county = {
                var:backdraft_monitor = {
                    execute_scoped_spell_effect = {
                        SPELL = root.var:casted_spell
                        EFFECT = backdraft_proc_effect
                    }
                    remove_list_variable = {
						name = backdraft_observer_list
						target = scope:current_target_title.county
					}
                }
                remove_variable = backdraft_monitor
            }
        }
    }
}

backdraft_proc_effect_elemental = {
    backdraft_proc_effect = { SPELL = $SPELL$ RANK = $RANK$ TYPE = $TYPE$ }
}

animate_rage_effect = {
    $ARTIFACT$ = {
        save_scope_as = dead_artifact
    }
    # Current Conversions
    # per 20% durability, 1 prowess, dread + 5% hostile scheme sucess chance
    scope:dead_artifact = {
        root = {
            set_variable = {
                name = artifact_dur_percent
                value = prev.artifact_durability_percent_rounded
                days = 5
            }
            change_variable = {
                name = artifact_dur_percent
                multiply = 100
            }
        }
    }
    send_interface_toast = {
        title = animate_rage_complete
        while = {
            count = {
                value = var:artifact_dur_percent
                divide = 20
            }
            add_character_modifier = {
                modifier = wc_animate_rage_modifier
            }
        }
        add_character_flag = {
            flag = animate_rage_cooldown
            days = 3650
        }
    }
}

cast_flame_wall_effect = {
    if = {
        limit = { exists = var:flame_wall_recipient }
        var:flame_wall_recipient = {
            save_scope_as = this_recipient
        }
    }
    else_if = {
        limit = {
            exists = var:current_spell_name
            var:current_spell_name = flag:flame_wall
            exists = var:spellbook_open
            exists = var:spell_recipient
        }
        var:spell_recipient = {
            save_scope_as = this_recipient
        }
    }
    # need to determine good or bad
    if = {
        limit = {
            exists = scope:this_recipient
        }
        root = {
            save_temporary_scope_value_as = {
                name = duration
                value = wc_spell_flame_wall_duration_days_value
            }
        }
        if = {
            limit = {
                OR = {
                    any_war_ally = {
                        any_army = {
                            army_commander = scope:this_recipient.army_commander
                        }
                    }
                    scope:this_recipient.army_commander.top_liege = root # TODO: Frostfire Bolt
                    scope:this_recipient.army_commander.liege = root
                    scope:this_recipient.army_commander = root
                }
            }
            scope:this_recipient.army_commander = {
                add_character_modifier = {
                    modifier = wc_flame_wall_good_modifier
                    days = wc_current_spell_duration
                }
                if = {
                    limit = {
                        NOT = { this = root }
                    }
                    add_opinion = { modifier = wc_casted_helpful_spell target = root }
                }
            }
            scope:this_recipient = {
                custom_tooltip = wc_flame_wall_tt
                set_variable = {
                    name = flame_wall_remainder
                    value = scope:this_recipient.army_commander
                    days = wc_current_spell_duration
                }
            }
        }
        else_if = {
            limit = {
                any_war_enemy = {
                    any_army = {
                        army_commander = scope:this_recipient.army_commander
                    }
                }
            }
            scope:this_recipient.army_commander = {
                add_character_modifier = {
                    modifier = wc_flame_wall_bad_modifier
                    days = wc_current_spell_duration
                }
                add_opinion = { modifier = wc_casted_harmful_spell target = root }
            }
            scope:this_recipient = {
                custom_tooltip = wc_flame_wall_tt
                set_variable = {
                    name = flame_wall_remainder
                    value = scope:this_recipient.army_commander
                    days = wc_current_spell_duration
                }
            }
        }
    }
}

cast_flame_shock_effect = {
    if = {
        limit = { exists = var:flame_shock_recipient }
        var:flame_shock_recipient = {
            save_scope_as = this_recipient
        }
    }
    else_if = {
        limit = {
            exists = var:current_spell_name
            var:current_spell_name = flag:flame_shock
            exists = var:spellbook_open
            exists = var:spell_recipient
        }
        var:spell_recipient = {
            save_scope_as = this_recipient
        }
    }

    scope:this_recipient = {
        if = {
            limit = {
                any_knight = {
                    count > 0
                }
            }
            ordered_knight = { # cannot do a random knight because tooltip and effect will differ.
                limit = {
                    NOT = { has_trait = burned_3 }
                }
                order_by = { # so u can kill weakest knight first
                    value = wc_elemental_fire_magic_resistance_dodge_liege_value
                    multiply = -1
                }
                save_scope_as = target_knight
                save_scope_value_as = {
                    name = spell_dodge_chance
                    value = wc_elemental_fire_magic_resistance_dodge_liege_value
                }
                random_list = {
                    100 = {
                        add_or_increase_burned_effect = yes
                        add_opinion = {
                            modifier = wc_burned_me
                            target = root
                        }
                    }
                    20 = {
                        custom_tooltip = wc_flame_shock_tt
                        modifier = {
                            is_alive = yes
                            add = scope:spell_dodge_chance
                        }
                        hidden_effect = {
                            root = {
                                send_interface_toast = {
                                    title = wc_spell_dodged
                                    left_icon = scope:this_recipient
                                    right_icon = root
                                    custom_tooltip = wc_flame_shock_dodge
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

cast_burnout_effect = {
    if = {
        limit = { exists = var:burnout_recipient }
        var:burnout_recipient = {
            save_scope_as = this_recipient
        }
    }
    else_if = {
        limit = {
            exists = var:current_spell_name
            var:current_spell_name = flag:burnout
            exists = var:spellbook_open
            exists = var:spell_recipient
        }
        var:spell_recipient = {
            save_scope_as = this_recipient
        }
    }
    scope:this_recipient = {
        custom_tooltip = wc_burnout_tt
        root = {
            save_temporary_scope_value_as = {
                name = duration
                value = wc_spell_burnout_duration_days_value
            }
        }
        add_character_modifier = {
            modifier = wc_burnout_modifier
            days = wc_current_spell_duration
        }
        set_variable = { # Start tracking
            name = burnout_count
            value = 0
        }
        set_variable = {
            name = burnout_owner
            value = root
        }
    }
    add_character_modifier = {
        modifier = wc_burnout_good_modifier
        days = wc_current_spell_duration
    }
    set_variable = {
        name = burnout_count
        value = 0
    }
    set_variable = {
        name = burnout_victim
        value = scope:this_recipient
    }
    if = {
        limit = {
            has_perk = elemental_fire_magic_tree_1_perk_7 # Better Bruniut
        }
        random_list = {
            80 = {}
            20 = {
                scope:this_recipient = {
                    add_or_increase_burned_effect = yes
                }
            }
        }
    }
}

clear_burnout_effect = {
    save_scope_as = this_burnout
    if = {
        limit = { # root is target of a burnout spell
            has_variable = burnout_owner
        }

        var:burnout_owner = {
            save_scope_as = burnout_target
        }
        if = {
            limit = { # time to remove variable then
                OR = {
                    has_variable = on_death_maint
                    NOT = { has_character_modifier = wc_burnout_modifier }
                }
            }
            scope:burnout_target = {
                remove_variable = burnout_count
                remove_variable = burnout_victim
                send_interface_message = {
                    title = wc_burnout_triggered
                    remove_character_modifier = wc_burnout_good_modifier
                    if = {
                        limit = {
                            root = {
                                has_variable = on_death_maint
                            }
                        }
                        custom_tooltip = wc_burnout_remove_death
                    }
                    else = {
                        custom_tooltip = wc_burnout_remove_time
                    }
                }
            }
            remove_variable = burnout_count
            remove_variable = burnout_owner
        }
        else = { # add to current burnout
            change_variable = {
                name = burnout_count
                add = 1
            }
            scope:burnout_target = {
                change_variable = {
                    name = burnout_count
                    add = 1
                }
            }
        }
    }
    else_if = { # root has a burnout target
        limit = {
            has_variable = burnout_victim
        }
        var:burnout_victim = {
            save_scope_as = burnout_target
        }
        if = {
            limit = { # time to remove variable then
                OR = {
                    has_variable = on_death_maint
                    scope:burnout_target = { NOT = { has_character_modifier = wc_burnout_modifier } }
                }
            }
            scope:burnout_target = {
                remove_variable = burnout_count
                remove_variable = burnout_owner
                send_interface_message = {
                    title = wc_burnout_triggered
                    if = {
                        limit = {
                            has_character_modifier = wc_burnout_modifier
                        }
                        remove_character_modifier = wc_burnout_modifier
                    }
                    if = {
                        limit = {
                            root = {
                                has_variable = on_death_maint
                            }
                        }
                        custom_tooltip = wc_burnout_remove_death
                    }
                    else = {
                        custom_tooltip = wc_burnout_remove_time
                    }
                }
            }
            remove_variable = burnout_count
            remove_variable = burnout_victim
        }
    }
}

cast_planar_fire_effect = {
    if = {
        limit = {
            has_variable = elemental_type
            exists = var:spellbook_open
            var:elemental_type = flag:spirit
        }
        save_scope_value_as = {
            name = this_spell_type
            value = flag:spirit
        }
    }
    else_if = {
        limit = {
            has_variable = elemental_type
            exists = var:spellbook_open
            var:elemental_type = flag:decay
        }
        save_scope_value_as = {
            name = this_spell_type
            value = flag:decay
        }
    }
    else_if = {
        limit = {
            has_variable = planar_fire_type
            var:planar_fire_type = flag:spirit
        }
        save_scope_value_as = {
            name = this_spell_type
            value = flag:spirit
        }
    }
    else_if = {
        limit = {
            has_variable = planar_fire_type
            var:planar_fire_type = flag:decay
        }
        save_scope_value_as = {
            name = this_spell_type
            value = flag:decay
        }
    }

    else = {
        custom_tooltip = select_elemental_type
    }

    switch = {
        trigger = scope:this_spell_type
        flag:spirit = {
            trigger_event = {
                id = wc_elemental_ritual_events.1001
                days = 3
            }
            custom_tooltip = planar_fire_spirit
        }
        flag:decay = {
            trigger_event = {
                id = wc_elemental_ritual_events.1501
                days = 3
            }
            custom_tooltip = planar_fire_decay
        }
    }
}

cast_cauterize_wound_effect = {
    if = {
        limit = { exists = var:cauterize_wound_recipient }
        var:cauterize_wound_recipient = {
            save_scope_as = this_recipient
        }
    }
    else_if = {
        limit = {
            exists = var:current_spell_name
            var:current_spell_name = flag:cauterize_wound
            exists = var:spellbook_open
            exists = var:spell_recipient
        }
        var:spell_recipient = {
            save_scope_as = this_recipient
        }
    }
    scope:this_recipient = {
        root = {
            save_temporary_scope_value_as = {
                name = duration
                value = wc_spell_cauterize_wound_duration_days_value
            }
        }
        add_character_modifier = {
            modifier = wc_cauterized_wound_modifier
            days = wc_current_spell_duration
        }
        if = {
            limit = {
                root = {
                    has_perk = elemental_fire_magic_tree_1_perk_8
                }
            }
            hidden_effect = {
                random_list = { # TODO: 100% chance of removal, and then re-adding it once the modifier is removed?
                    80 = { }
                    20 = {
                        random_character_trait = {
                            limit = {
                                has_trait_flag = injury
                            }
                            scope:this_recipient = { remove_trait = prev }
                        }
                    }
                }
            }
        }
    }
}

cast_vernal_solstice_effect = {
    if = {
        limit = { exists = var:vernal_solstice_recipient }
        var:vernal_solstice_recipient = {
            save_scope_as = this_recipient
        }
    }
    else_if = {
        limit = {
            exists = var:current_spell_name
            var:current_spell_name = flag:vernal_solstice
            exists = var:spellbook_open
            exists = var:spell_recipient
        }
        var:spell_recipient = {
            save_scope_as = this_recipient
        }
    }
    scope:this_recipient ?= {
        root = {
            save_temporary_scope_value_as = {
                name = duration
                value = wc_spell_vernal_solstice_duration_days_value
            }
        }
        every_de_jure_county = {
            add_county_modifier = {
                modifier = wc_vernal_solstice_modifier
                days = wc_current_spell_duration
            }
            add_county_modifier = {
                modifier = wc_vernal_solstice_cooldown_modifier
                years = 15
            }
        }
    }
}