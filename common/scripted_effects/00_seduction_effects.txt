#Effects used in hunt events


#####################################################################
# EFFECT LIST
#####################################################################
# !! Remember to add all new effects with a short description here !!
#

#Ongoing effects
#seduce_ongoing_add_scheme_modifier_effect
#seduce_ongoing_possible_outcomes_tooltip_effect

#Outcome effects
#seduction_block_character_effect
#seduction_cooldown_for_character_effect
#owner_seduce_outcome_success_send_discovery_event_effect
#owner_seduce_outcome_become_lovers_option_effects
#owner_seduce_outcome_just_sex_effects
#target_seduce_outcome_sex_effect
#owner_seduce_outcome_sex_effect
#seduce_outcome_discovered_effect

#Misc effects
#set_relation_lover_through_seduction_effect
	#Use this to conclude seduction schemes
#get_court_of_residence_effect
#set_object_of_significance_effect


######################################################################
# ONGOING EFFECTS
######################################################################

#Milestone should be 1 or 2, outcome should be success or failure
seduce_ongoing_add_scheme_modifier_effect = {
	scope:scheme = {
		add_scheme_modifier = {
			type = seduce_$OUTCOME$_$MILESTONE$_modifier
		}
	}
}

seduce_ongoing_possible_outcomes_tooltip_effect = {
	show_as_tooltip = {
		random_list = {
			1 = {
				desc = seduce_ongoing_possible_outcomes_tooltip_effect.success.desc
				show_chance = no
				seduce_ongoing_add_scheme_modifier_effect = { MILESTONE = $MILESTONE$ OUTCOME = success }
			}
			1 = {
				desc = seduce_ongoing_possible_outcomes_tooltip_effect.failure.desc
				show_chance = no
				seduce_ongoing_add_scheme_modifier_effect = { MILESTONE = $MILESTONE$ OUTCOME = failure }
			}
		}
	}
}

######################################################################
# OUTCOME EFFECTS
######################################################################

#To add CHARACTER to a list that block seduction schemes from being initiated
## use in the scope of the character that blocks CHARACTER (i.e. the scheme target's scope)
seduction_block_character_effect = {
	if = {
		limit = { root = scope:target }
		custom_tooltip = seduce_outcome.permanent_block

		hidden_effect = {
			add_opinion = {
				target = $CHARACTER$
				modifier = seduce_permanent_blocker_opinion
			}
		}
	}
	else_if = {
		limit = {
			exists = scope:target
			scope:target = {
				is_alive = yes
			}
		}
		add_opinion = {
			target = $CHARACTER$
			modifier = seduce_permanent_blocker_opinion
		}
	}
}

seduction_cooldown_for_character_effect = {
	if = {
		limit = { root = scope:target }
		custom_tooltip = seduce_outcome.cooldown

		hidden_effect = {
			add_opinion = {
				target = $CHARACTER$
				modifier = seduce_regular_cooldown_opinion
			}
		}
	}
	else = {
		add_opinion = {
			target = $CHARACTER$
			modifier = seduce_regular_cooldown_opinion
		}
	}
}

owner_seduce_outcome_success_send_discovery_event_effect = {
	hidden_effect = {
		if = {
			limit = { exists = scope:scheme_discovered }
			trigger_event = {
				id = seduce_outcome.2900
				days = 3
			}
		}
	}
}

owner_seduce_outcome_become_lovers_option_effects = {
	show_as_tooltip = { set_relation_lover = scope:target }
	add_character_flag = { #to assure that this is when the relationship is set
		flag = consummation_and_relationship
		days = 10
	}

	reverse_add_opinion = {
		target = scope:target
		modifier = romance_opinion
		opinion = 20
	}

	if = {
		limit = {
			faith = {
				has_doctrine_parameter = piety_gain_from_successful_intrigue_schemes
			}	
		}
		add_piety = minor_piety_gain
	}

	if = {
		limit = {
			exists = dynasty
			dynasty = {
				has_dynasty_perk = fp1_adventure_legacy_2
			}	
		}
		add_prestige = fp1_adventure_legacy_2_prestige_value
	}

	if = {
		limit = {
			is_close_family_of = scope:target
		}
		create_character_memory = {
			type = seduced_family
			
			participants = {
				family_member = scope:target
			}
		}
	}

	owner_seduce_outcome_success_send_discovery_event_effect = yes
}

owner_seduce_outcome_just_sex_effects = {
	reverse_add_opinion = {
		target = scope:target
		modifier = romance_opinion
		opinion = 20
	}

	if = {
		limit = {
			faith = {
				has_doctrine_parameter = piety_gain_from_successful_intrigue_schemes
			}	
		}
		add_piety = minor_piety_gain
	}

	if = {
		limit = {
			exists = dynasty
			dynasty = {
				has_dynasty_perk = fp1_adventure_legacy_2
			}	
		}
		add_prestige = fp1_adventure_legacy_2_prestige_value
	}

	owner_seduce_outcome_success_send_discovery_event_effect = yes
}


#In most cases, it makes more sense to actually apply the sex effect in the target's events (which are after the owner's events). This is because A) you don't want any pop-ups for the target before they have recieved their event and B) because some effects won't get a tooltip for being applied if they were already applied before. The only exception is when the owner is a player and the target is an AI.

target_seduce_outcome_sex_effect = {
	scope:target = {
		if = {
			limit = {
				NAND = {
					scope:owner = { is_ai = no }
					scope:target = { is_ai = yes }
				}
			}
			had_sex_with_effect = {
				CHARACTER = scope:owner
				PREGNANCY_CHANCE = seduce_pregnancy_chance
			}
		}
		else = {
			show_as_tooltip = {
				had_sex_with_effect = {
					CHARACTER = scope:owner
					PREGNANCY_CHANCE = seduce_pregnancy_chance
				}
			}
		}
	}
}

owner_seduce_outcome_sex_effect = {
	scope:owner = {
		if = {
			limit = {
				scope:owner = { is_ai = no }
				scope:target = { is_ai = yes }
			}
			had_sex_with_effect = {
					CHARACTER = scope:target
				PREGNANCY_CHANCE = seduce_pregnancy_chance
			}
		}
		else = {
			show_as_tooltip = {
				had_sex_with_effect = {
					CHARACTER = scope:owner
					PREGNANCY_CHANCE = seduce_pregnancy_chance
				}
			}
		}
	}
}


seduce_outcome_discovered_expose_secrets_and_adultery_effect = {
	extramarital_sex_attempt_exposure_consequences_with_target_effect = { TARGET = $CHARACTER$ SPOUSE_EVENT = yes } #Adds trait
	if = {
		limit = { relation_with_character_is_incestuous_in_my_or_lieges_faith_trigger = { CHARACTER = $CHARACTER$ } }
		random_secret = {
			limit = { secret_type = secret_incest }
			expose_secret = $EXPOSER$
		}
	}
	if = {
		limit = { relation_with_character_is_sodomy_in_my_or_lieges_faith_trigger = { CHARACTER = $CHARACTER$ } }
		random_secret = {
			limit = { secret_type = secret_homosexual }
			expose_secret = $EXPOSER$
		}
	}
}

seduce_outcome_failure_discovered_apply_secrets_effect = {
	give_incest_secret_or_nothing_with_target_effect = { CHARACTER = scope:target }
	give_homosexual_secret_or_nothing_with_target_effect = { CHARACTER = scope:target }
}

seduce_outcome_success_discovered_effect = {
	if = {
		limit = {
			any_secret = {
				secret_type = secret_lover
				OR = {
					secret_target = scope:target
					secret_target = scope:owner
				}
			}
		}
		random_secret = { #Revealing the secret will send events for both lovers
			limit = {
					secret_type = secret_lover
				OR = {
					secret_target = scope:target
					secret_target = scope:owner
				}
			}
			expose_secret = scope:target_liege
		}
	}
	else = {
		scope:owner = { seduce_outcome_discovered_expose_secrets_and_adultery_effect = { CHARACTER = scope:target EXPOSER = scope:target_liege } }
		scope:target = { seduce_outcome_discovered_expose_secrets_and_adultery_effect = { CHARACTER = scope:owner EXPOSER = scope:target_liege } }
	}
}

seduce_outcome_publicised_attempted_crimes_or_nothing_effect = {
	$TARGET$ = {
		#Grab everyone relevant who might be interested in the attempt.
		every_close_family_member = { add_to_list = relevant_parties }
		every_consort = {
			limit = {
				NOT = { is_in_list = relevant_parties }
			}
			add_to_list = relevant_parties
		}
		if = {
			limit = {
				exists = liege
				liege = {
					NOT = { is_in_list = relevant_parties }
				}
			}
			add_to_list = relevant_parties
		}
		if = {
			limit = {
				exists = court_owner
				court_owner = {
					NOT = { is_in_list = relevant_parties }
				}
			}
			add_to_list = relevant_parties
		}
		every_vassal = {
			limit = {
				NOT = { is_in_list = relevant_parties }
			}
			add_to_list = relevant_parties
		}
		every_relation = {
			type = friend
			limit = {
				NOT = { is_in_list = relevant_parties }
			}
			add_to_list = relevant_parties
		}
		every_relation = {
			type = lover
			limit = {
				NOT = { is_in_list = relevant_parties }
			}
			add_to_list = relevant_parties
		}
		$OWNER$ = {
			every_close_family_member = {
				limit = {
					NOT = { is_in_list = relevant_parties }
				}
				add_to_list = relevant_parties
			}
		}

		#Adulterer
		if = {
			limit = {
				$OWNER$ = { is_married = yes }
				trait_is_shunned_or_criminal_in_faith_trigger = {
					TRAIT = adulterer
					FAITH = this.faith
					GENDER_CHARACTER = $OWNER$
				}
			}
			every_in_list = {
				list = relevant_parties
				limit = {
					#Filter out anyone who wouldn't care about this.
					NOR = {
						#Kids too young to understand the bias have no prejudice.
						is_adult = no
						#Not compos mentis.
						is_incapable_trigger = yes
						#People who are adulterers.
						has_trait = adulterer
						#The person doing the seducing don't think less of themselves either.
						this = $OWNER$
					}
					#And who count the action as adulterous.
					trait_is_shunned_or_criminal_in_faith_trigger = {
						TRAIT = adulterer
						FAITH = faith
						GENDER_CHARACTER = $OWNER$
					}
				}
				custom = characters_close_to_target_who_dislike_adultery
				#Apply attempt opinion effects.
				add_opinion = {
					modifier = adulterer_advances_on_relevant_character
					target = $OWNER$
				}
			}
		}

		#Fornicator
		if = {
			limit = {
				$OWNER$ = { is_married = no }
				trait_is_shunned_or_criminal_in_faith_trigger = {
					TRAIT = fornicator
					FAITH = faith
					GENDER_CHARACTER = $OWNER$
				}
			}
			every_in_list = {
				list = relevant_parties
				limit = {
					#Filter out anyone who wouldn't care about this.
					NOR = {
						#Kids too young to understand the bias have no prejudice.
						is_adult = no
						#Not compos mentis.
						is_incapable_trigger = yes
						#People who are fornicators.
						has_trait = fornicator
						#The person doing the seducing don't think less of themselves either.
						this = $OWNER$
					}
					#And who count the action to be fornication.
					trait_is_shunned_or_criminal_in_faith_trigger = {
						TRAIT = fornicator
						FAITH = this.faith
						GENDER_CHARACTER = $OWNER$
					}
				}
				custom = characters_close_to_target_who_dislike_fornication
				#Apply attempt opinion effects.
				add_opinion = {
					modifier = fornicator_advances_on_relevant_character
					target = $OWNER$
				}
			}
		}

		#Incestuous
		if = {
			limit = {
				relation_with_character_is_incestuous_in_my_faith_trigger = { CHARACTER = $OWNER$ }
			}
			every_in_list = {
				list = relevant_parties
				limit = {
					#Filter out anyone who wouldn't care about this.
					NOR = {
						#Kids too young to understand the bias have no prejudice.
						is_adult = no
						#Not compos mentis.
						is_incapable_trigger = yes
						#People who are incestuous.
						has_trait = incestuous
						#Or who don't count the action as incestuous.
						faith = {
							faith_allows_marriage_consanguinity_trigger = {
								CHARACTER_1 = $OWNER$
								CHARACTER_2 = $TARGET$
							}
						}
						#The person doing the seducing don't think less of themselves either.
						this = $OWNER$
					}
				}
				custom = characters_close_to_target_who_dislike_incest
				#Apply attempt opinion effects.
				add_opinion = {
					modifier = incestuous_advances_on_relevant_character
					target = $OWNER$
				}
			}
		}

		#Sodomite
		if = {
			limit = {
				relation_with_character_is_sodomy_trigger = { CHARACTER = $OWNER$ }
			}
			every_in_list = {
				list = relevant_parties
				limit = {
					#Filter out anyone who wouldn't care about this.
					NOR = {
						#Kids too young to understand the bias have no prejudice.
						is_adult = no
						#Not compos mentis.
						is_incapable_trigger = yes
						#People who are sodomites themselves.
						has_trait = sodomite
						#Males who could be sodomites.
						AND = {
							is_male = yes
							OR = {
								has_sexuality = bisexual
								has_sexuality = homosexual
							}
						}
						#Or who don't count the action as incestuous.
						faith = {
							faith_allows_marriage_consanguinity_trigger = {
								CHARACTER_1 = $OWNER$
								CHARACTER_2 = $TARGET$
							}
						}
						#The person doing the seducing don't think less of themselves either.
						this = $OWNER$
					}
					#And, finally, must actually be fussed about sodomy to begin with.
					relation_between_characters_is_sodomy_in_my_faith_trigger = {
						CHARACTER_1 = $OWNER$
						CHARACTER_2 = $TARGET$
					}
				}
				custom = characters_close_to_target_who_dislike_sodomy
				#Apply attempt opinion effects.
				add_opinion = {
					modifier = sodomite_advances_on_relevant_character
					target = $OWNER$
				}
			}
		}
	}
}



set_relation_lover_through_seduction_effect = {
	$CHARACTER$ = { save_scope_as = second_character }
	if = { #To save a potential important object to be used later on
		limit = {
			exists = scope:scheme
			scope:scheme = { has_variable = object_of_importance }
			NOT = { has_variable_list = lover_object_of_importance }
		}
		add_to_variable_list = {
			name = lover_object_of_importance
			target = scope:scheme.var:object_of_importance
		}
		add_to_variable_list = {
			name = lover_object_of_importance
			target = scope:second_character
		}
	}
	else_if = { #you can save two different seduction objects
		limit = {
			exists = scope:scheme
			scope:scheme = { has_variable = object_of_importance }
			has_variable_list = lover_object_of_importance
			NOT = { has_variable_list = lover_object_of_importance_2 }
		}
		add_to_variable_list = {
			name = lover_object_of_importance_2
			target = scope:scheme.var:object_of_importance
		}
		add_to_variable_list = {
			name = lover_object_of_importance_2
			target = scope:second_character
		}
	}
	scope:scheme = {
		end_scheme = yes
	}
	if = { # Safeguard because so much stuff can happen
		limit = {
			NOT = { has_relation_lover = scope:second_character }
		}
		scope:second_character = {
			set_relation_lover = {
				target = prev
				reason = $REASON$
				province = $LOCATION$
			}
		}
	}
}

set_object_of_significance_effect = {
	if = {
		limit = {
			scope:scheme = {
				NOT = { has_variable = object_of_importance }
			}
		}
		scope:scheme = {
			random_list = {
				1 = {
					set_variable = {
						name = object_of_importance
						value = flag:rose
					}
				}
				1 = {
					set_variable = {
						name = object_of_importance
						value = flag:sea_shell
					}
				}
			}
		}
	}
}





set_random_religious_text_effect = {
	random_list = {
		1 = {
			#Christian
			save_scope_value_as = {
				name = religious_book_title
				value = flag:golden_legend
			}
		}
		1 = {
			#Christian
			save_scope_value_as = {
				name = religious_book_title
				value = flag:city_of_god
			}
		}
		1 = {
			#Christian
			save_scope_value_as = {
				name = religious_book_title
				value = flag:summa_theologica
			}
		}
		1 = {
			#Christian
			save_scope_value_as = {
				name = religious_book_title
				value = flag:sic_et_non
			}
		}
		1 = {
			#Muslim
			save_scope_value_as = {
				name = religious_book_title
				value = flag:the_small_book_on_theism
			}
		}
		1 = {
			#Muslim
			save_scope_value_as = {
				name = religious_book_title
				value = flag:modern_philosophy
			}
		}
		1 = {
			#Any
			save_scope_value_as = {
				name = religious_book_title
				value = flag:stories_from_holy_book
			}
		}
	}
}



set_random_entertainment_text_effect = {
	random_list = {
		# Warcraft
		1 = {
			#Any
			save_scope_value_as = {
				name = entertainment_book_title
				value = flag:riddle_poems
			}
		}
		
		# Warcraft
		1 = {
			save_scope_value_as = {
				name = entertainment_book_title
				value = flag:entertainment_steamy_romance_novel
			}
		}
		2 = {
			trigger = {
				root.culture = {
					has_khazmodan_language_group_trigger = yes
				}
			}
			save_scope_value_as = {
				name = entertainment_book_title
				value = flag:entertainment_the_big_big_book_o_beards
			}
		}
		2 = {
			trigger = {
				root.culture = {
					OR = {
						has_common_language_group_trigger = yes
						# Let's assume it's translated
						has_khazmodan_language_group_trigger = yes
						has_elven_language_group_trigger = yes
					}
				}
			}
			save_scope_value_as = {
				name = entertainment_book_title
				value = flag:entertainment_baron_of_the_barnacles
			}
		}
		2 = {
			trigger = {
				root.culture = {
					has_elven_language_group_trigger = yes
				}
			}
			save_scope_value_as = {
				name = entertainment_book_title
				value = flag:entertainment_the_song_of_scales
			}
		}
		2 = {
			trigger = {
				root.culture = {
					has_elven_language_group_trigger = yes
				}
			}
			save_scope_value_as = {
				name = entertainment_book_title
				value = flag:entertainment_the_emerald_dream
			}
		}
		2 = {
			trigger = {
				root.culture = {
					has_elven_language_group_trigger = yes
				}
			}
			save_scope_value_as = {
				name = entertainment_book_title
				value = flag:entertainment_saga_of_elandrul
			}
		}
		2 = {
			trigger = {
				root.culture = {
					has_pandaria_language_group_trigger = yes
				}
			}
			save_scope_value_as = {
				name = entertainment_book_title
				value = flag:entertainment_song_of_the_vale
			}
		}
		2 = {
			trigger = {
				root.culture = {
					has_pandaria_language_group_trigger = yes
				}
			}
			save_scope_value_as = {
				name = entertainment_book_title
				value = flag:entertainment_song_of_liu_lang
			}
		}
		2 = {
			trigger = {
				root.culture = {
					has_cultural_pillar = language_zandali
				}
			}
			save_scope_value_as = {
				name = entertainment_book_title
				value = flag:entertainment_the_first_troll_legend
			}
		}
		2 = {
			trigger = {
				root.culture = {
					has_draenor_language_group_trigger = yes
				}
			}
			save_scope_value_as = {
				name = entertainment_book_title
				value = flag:entertainment_loktra
			}
		}
		2 = {
			trigger = {
				root.culture = {
					has_draenor_language_group_trigger = yes
				}
			}
			save_scope_value_as = {
				name = entertainment_book_title
				value = flag:entertainment_lokamon
			}
		}
		2 = {
			trigger = {
				root.culture = {
					OR = {
						has_common_language_group_trigger = yes
						has_pandaria_language_group_trigger = yes
					}
				}
			}
			save_scope_value_as = {
				name = entertainment_book_title
				value = flag:entertainment_rime_of_the_time_lost_mariner
			}
		}
		2 = {
			trigger = {
				root.culture = {
					has_elven_language_group_trigger = yes
				}
			}
			save_scope_value_as = {
				name = entertainment_book_title
				value = flag:entertainment_spirit_of_the_moment
			}
		}
		2 = {
			trigger = {
				root.culture = {
					has_pandaria_language_group_trigger = yes
				}
			}
			save_scope_value_as = {
				name = entertainment_book_title
				value = flag:entertainment_the_humble_grummle
			}
		}
		2 = {
			trigger = {
				root.culture = {
					has_titan_language_group_trigger = yes
				}
			}
			save_scope_value_as = {
				name = entertainment_book_title
				value = flag:entertainment_saga_of_the_twins
			}
		}
		2 = {
			trigger = {
				root.culture = {
					has_titan_language_group_trigger = yes
				}
			}
			save_scope_value_as = {
				name = entertainment_book_title
				value = flag:entertainment_saga_of_the_valkyr
			}
		}
		2 = {
			trigger = {
				root.culture = {
					has_titan_language_group_trigger = yes
				}
			}
			save_scope_value_as = {
				name = entertainment_book_title
				value = flag:entertainment_saga_of_the_winter_curse
			}
		}
		2 = {
			trigger = {
				root.culture = {
					has_titan_language_group_trigger = yes
				}
			}
			save_scope_value_as = {
				name = entertainment_book_title
				value = flag:entertainment_ashilvara
			}
		}
		2 = {
			trigger = {
				root.culture = {
					has_pandaria_language_group_trigger = yes
				}
			}
			save_scope_value_as = {
				name = entertainment_book_title
				value = flag:entertainment_the_emperors_burden
			}
		}
	}
}



set_random_informative_text_effect = {
	random_list = {
		1 = {
			#"Any"
			save_scope_value_as = {
				name = informative_book_title
				value = flag:spiritual_medicine
			}
		}
		
		# Warcraft
		2 = {
			trigger = {
				root.culture = {
					has_elemental_language_group_trigger = yes
					# Let's assume it's translated
					has_cultural_pillar = language_tolvir
				}
			}
			save_scope_value_as = {
				name = informative_book_title
				value = flag:informative_beyond_the_throne_of_air
			}
		}
		2 = {
			save_scope_value_as = {
				name = informative_book_title
				value = flag:informative_on_plagues_curses_and_blights
			}
		}
		2 = {
			trigger = {
				root.faith = {
					NOT = { has_doctrine_parameter = order_magic_not_openly_learnable }
				}
			}
			save_scope_value_as = {
				name = informative_book_title
				value = flag:informative_the_schools_of_arcane_magic
			}
		}
		2 = {
			trigger = {
				root.culture = {
					OR = {
						has_cultural_pillar = language_titanic
						has_cultural_pillar = language_giant
						has_cultural_pillar = language_shathyar
						has_cultural_pillar = language_eredun
					}
				}
			}
			save_scope_value_as = {
				name = informative_book_title
				value = flag:informative_sargeras_and_the_betrayal
			}
		}
		2 = {
			trigger = {
				root.culture = {
					OR = {
						has_cultural_pillar = language_titanic
						has_cultural_pillar = language_giant
						has_cultural_pillar = language_shathyar
					}
				}
			}
			save_scope_value_as = {
				name = informative_book_title
				value = flag:informative_the_old_gods_and_the_ordering_of_azeroth
			}
		}
		2 = {
			trigger = {
				root.culture = {
					has_titan_related_language_trigger = yes
				}
			}
			save_scope_value_as = {
				name = informative_book_title
				value = flag:informative_charge_of_the_dragonflights
			}
		}
		2 = {
			trigger = {
				root.culture = {
					OR = {
						has_elven_language_group_trigger = yes
						has_pandaria_language_group_trigger = yes
						has_cultural_pillar = language_taurahe
						has_titan_related_language_trigger = yes
					}
				}
			}
			save_scope_value_as = {
				name = informative_book_title
				value = flag:informative_the_war_of_the_ancients
			}
		}
		2 = {
			trigger = {
				root.culture = {
					has_elven_language_group_trigger = yes
				}
			}
			save_scope_value_as = {
				name = informative_book_title
				value = flag:informative_the_exile_of_the_high_elves
			}
		}
		2 = {
			trigger = {
				root.culture = {
					OR = {
						has_common_language_group_trigger = yes
						has_cultural_pillar = heritage_highborne
						has_cultural_pillar = language_zandali
					}
				}
			}
			save_scope_value_as = {
				name = informative_book_title
				value = flag:informative_arathor_and_the_troll_wars
			}
		}
		2 = {
			trigger = {
				root.culture = {
					OR = {
						has_common_language_group_trigger = yes
						has_cultural_pillar = heritage_highborne
					}
				}
			}
			save_scope_value_as = {
				name = informative_book_title
				value = flag:informative_the_guardians_of_tirisfal
			}
		}
		2 = {
			trigger = {
				root.culture = {
					OR = {
						has_common_language_group_trigger = yes
						has_cultural_pillar = heritage_highborne
						has_cultural_pillar = language_eredun
					}
				}
			}
			save_scope_value_as = {
				name = informative_book_title
				value = flag:informative_the_guardians_of_tirisfal
			}
		}
		2 = {
			trigger = {
				root.culture = {
					has_khazmodan_language_group_trigger = yes
				}
			}
			save_scope_value_as = {
				name = informative_book_title
				value = flag:informative_war_of_the_three_hammers
			}
		}
		2 = {
			trigger = {
				root.culture = {
					OR = {
						has_cultural_pillar = language_zandali
						has_cultural_pillar = language_shathyar
						has_aqir_language_group_trigger = yes
					}
				}
			}
			save_scope_value_as = {
				name = informative_book_title
				value = flag:informative_the_twin_empires
			}
		}
		2 = {
			trigger = {
				root.culture = {
					has_pandaria_language_group_trigger = yes
				}
			}
			save_scope_value_as = {
				name = informative_book_title
				value = flag:informative_the_duel_of_thunder_and_strength
			}
		}
		2 = {
			trigger = {
				root.culture = {
					has_pandaria_language_group_trigger = yes
				}
			}
			save_scope_value_as = {
				name = informative_book_title
				value = flag:informative_the_thunder_king
			}
		}
	}
}

#To set up a location to use for the sex scene custom loc key
set_random_sex_scene_location_effect = {
	hidden_effect = {
		if = {
			limit = { NOT = { has_variable = sex_scene_location } }
			random_list = {
				20 = {
					set_variable = {
						name = sex_scene_location
						value = flag:garden
					}
				}
				20 = {
					set_variable = {
						name = sex_scene_location
						value = flag:private_chamber
					}
				}
				20 = {
					set_variable = {
						name = sex_scene_location
						value = flag:stable
					}
				}
				20 = {
					set_variable = {
						name = sex_scene_location
						value = flag:copse
					}
				}
				20 = {
					set_variable = {
						name = sex_scene_location
						value = flag:kitchen
					}
				}
			}
		}
	}
}

#To transfer the location used in the sex scene custom loc key from one character to another
transfer_sex_scene_location_to_character_effect = {
	if = {
		limit = {
			has_variable = sex_scene_location
		}
		if = {
			limit = {
				var:sex_scene_location = flag:garden
			}
			$CHARACTER$ = {
				set_variable = {
					name = sex_scene_location
					value = flag:garden
				}
			}
		}
		else_if = {
			limit = {
				var:sex_scene_location = flag:private_chamber
			}
			$CHARACTER$ = {
				set_variable = {
					name = sex_scene_location
					value = flag:private_chamber
				}
			}
		}
		else_if = {
			limit = {
				var:sex_scene_location = flag:stable
			}
			$CHARACTER$ = {
				set_variable = {
					name = sex_scene_location
					value = flag:stable
				}
			}
		}
		else_if = {
			limit = {
				var:sex_scene_location = flag:copse
			}
			$CHARACTER$ = {
				set_variable = {
					name = sex_scene_location
					value = flag:copse
				}
			}
		}
		else_if = {
			limit = {
				var:sex_scene_location = flag:kitchen
			}
			$CHARACTER$ = {
				set_variable = {
					name = sex_scene_location
					value = flag:kitchen
				}
			}
		}
	}
}
