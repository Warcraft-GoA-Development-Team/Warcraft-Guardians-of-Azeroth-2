#Completed a travel plan (arrived at final destination, or was completed mid-travel)

namespace = travel_completion_event

############################
## Travel Completion Events
## 1000-3999
## by a Mysterious Unknown
############################
# travel_completion_event.1000 - Generic completion
#
#

#Generic completion
travel_completion_event.1000 = {
	type = character_event
	title = travel_completion_event.1000.t
	desc = {
		# are we home or somewhere abroad?
		first_valid = {
			triggered_desc = {
				trigger = { location = capital_province }
				desc = travel_completion_event.1000.desc.home
			}
			desc = travel_completion_event.1000.desc.abroad
		}
		# do we have an activity to talk about?
		first_valid = {
			triggered_desc = {
				trigger = { exists = involved_activity }
				desc = travel_completion_event.1000.desc.activity
			}
			desc = travel_completion_event.1000.desc.no_activity
		}
		# travel stats
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = current_travel_plan.var:travel_plan_start_date
					exists = current_travel_plan.travel_leader
				}
				desc = travel_completion_event.1000.stats.travel_leader
			}
			triggered_desc = {
				trigger = {
					exists = current_travel_plan.var:travel_plan_start_date
				}
				desc = travel_completion_event.1000.stats
			}
		}
		# cultural ambassador loc
		triggered_desc = {
			trigger = {
				current_travel_plan = {
					has_travel_option = cultural_ambassador_option
				}
			}
			desc = travel_completion_event.1000.desc.cultural_ambassador
		}
		# memory loc
		triggered_desc = {
			trigger = { exists = scope:travel_conc_memory }
			desc = travel_completion_event.1000.desc.memory
		}
	}
	theme = realm 
	override_background = { reference = terrain }
	override_icon = "gfx/interface/icons/event_types/type_travel_stewardship.dds"
	left_portrait = {
		character = root 
		animation = happiness
	}
	right_portrait = {
		character = scope:travel_leader_scope
		animation = personality_honorable
	}

	trigger = {
		is_available_travelling = yes
		is_landed = yes
		is_travelling = yes
		NOT = {
			involved_activity ?= {
				has_activity_type = activity_tour
			}
		}
	}

	immediate = {
		play_music_cue = mx_cue_travel_arrival
		traveler_lifestyle_rank_up_check_effect = yes
		location = { save_scope_as = current_location }
		current_travel_plan = {
			# save scope so we can call the variables in loc
			save_scope_as = travel_plan_scope
			final_destination_province = {
				save_scope_as = final_destination_province
			}
			travel_leader ?= {
				save_scope_as = travel_leader_scope
			}
			# Work with variables we have saved to produce some interesting loc information about the journey
			set_variable = {
				name = travel_plan_end_date
				value = current_date
			}
			set_variable = {
				name = travel_plan_elapsed_days
				value = 0
			}
			if = {
				limit = {
					exists = var:travel_plan_start_date 
					exists = var:travel_plan_end_date
					exists = var:travel_plan_elapsed_days
				}
				change_variable = {
					name = travel_plan_elapsed_days
					add = {
						value = var:travel_plan_end_date
						subtract = var:travel_plan_start_date
					}
				}
			}
			# Cultural Ambassador travel option
			if = {
				limit = {
					has_travel_option = cultural_ambassador_option
				}
				custom_tooltip = cultural_ambassador_option.tt
			}
		}
		random_memory ?= {
			limit = {
				has_memory_category = travel
				is_memory_of_travel = root.current_travel_plan
			}
			save_scope_as = travel_conc_memory
		}
		# Allocates a tiny bit of Horse XP if you have the Hastiluder trait
		if = {
			limit = {
				has_trait = tourney_participant
			}
			add_trait_xp = {
				trait = tourney_participant
				track = horse
				value = tournament_hastiludes_xp_gain_miniscule_value
			}
		}
		# Send all the hired companions back to the pool
		root.current_travel_plan = {
			every_entourage_character = {
				limit = {
					has_character_flag = travel_option_added_character
				}
				select_and_move_to_pool_effect = yes
			}
		}
	}

	#Yay, we're home
	option = { 
		name = travel_completion_event.1000.a
		trigger = { location = root.default_location }
		stress_impact = {
			craven = miniscule_stress_impact_loss
			paranoid = miniscule_stress_impact_loss
		}
	}

	#Let's return home
	option = { 
		name = travel_completion_event.1000.b
		trigger = {
			NOT = { location = root.default_location }
		}
		#Nooo not more outdoors!
		stress_impact = {   
			craven = miniscule_stress_impact_gain
		    paranoid = miniscule_stress_impact_gain
		}
		current_travel_plan = {
			reroute_to_home = yes
		}
		ai_chance = {
			base = 100
		}
	}
}
