JominiMultiplayerLobby = {
	state = {
		name = _show
		on_start = "[GetVariableSystem.Set( 'mp_lobby_tabs', 'show_players' )]"

		using = Animation_FadeIn_Standard
		using = Sound_WindowShow_Standard
	}

	state = {
		name = _hide
		on_start = "[GetVariableSystem.Clear( 'tabs_open' )]"

		using = Animation_FadeOut_Standard
		using = Sound_WindowHide_Standard
	}

	blockoverride "left_panel_properties"
	{
		size = { 390 100% }
		widgetid = "left"
		visible = "[GameIsMultiplayer]"
	}

	blockoverride "lobby_view_back_onclick" {
		onclick = "[ReturnToMenu]"
	}

	blockoverride "host_button"
	{
		text = "[SelectLocalization( IsIronmanEnabled, 'GAME_SETUP_IRONMAN_SINGLEPLAYER_ONLY', 'JOMINI_MULTIPLAYER_GUI_HOST_BUTTON' )]"
	}

	blockoverride "host_button_enabled"
	{
		enabled = "[And( And( JominiIsMultiplayerAccessible, JominiIsHostOrLocal ), Not( IsIronmanEnabled ) )]"
	}

	# blockoverride "lobby_module_background"
	# {
	# 	using = Background_Area_Dark
	# 	margin = { 10 10 }
	# }

	blockoverride "playerbackgroundstyle"
	{
		using = Background_Area
	}

	blockoverride "jominimultiplayertextbox" {
		default_format = "#medium"
	}

	blockoverride "buttonstyle" {
		gfxtype = togglepushbuttongfx
		effectname = "NoHighlight"

		upframe = 1
		uphoverframe = 2
		uppressedframe = 3
		downframe = 4
		downhoverframe = 5
		downpressedframe = 6
		texture = "gfx/interface/buttons/button_entry_02.dds"
		spriteType = Corneredstretched
		spriteborder = { 20 20 }
		framesize  = { 249 78 }

		default_format = "#medium"
	}

	blockoverride "playerlist_playable" {
	}

	blockoverride "game_info" {
		header_pattern = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text" {
				text = "[GetCurrentDate.GetString]"

			}

			blockoverride "button_close" {
				visible = no
			}
		}
	}

	blockoverride "selected_playable" {
		state = {
			name = "jomini_preselected_changed"
			next = "preselected_shown"
			alpha = 0.5
		}

		state = {
			name = "preselected_shown"
			alpha = 1
			duration = 0.5
			using = Animation_Curve_Default

		    start_sound = {
		        soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_selected_playable"

		        soundparam = {
		        	name = "click_index"
		        	value = "[LobbyView.GetSelectionClickIndex]"
		        }

		        soundparam = {
		        	name = "culture"
		        	value = "[LobbyView.GetSelectedPlayable.GetCharacter.GetCulture.GetHeritage.GetAudioParameter]"
		        }
		    }
		}

		datacontext = "[LobbyView.GetSelectedPlayable.GetCharacter]"

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			visible = "[Character.IsValid]"
			ignoreinvisible = yes

			#### MAIN PORTRAIT ###
			vbox = {
				layoutpolicy_horizontal = expanding
				margin_left = -4

				###############
				# Character box
				widget = {
					name = "main_characters"
					layoutpolicy_horizontal = expanding
					size = { 0 310 }

					datacontext = "[GetIllustration( 'character_view_bg' )]"

					background = {
						texture = "[Illustration.GetTexture( Character.MakeScope )]"
						fittype = centercrop
						using = Mask_Rough_Edges
					}

					### Liege
					container = {
						name = "liege"
						datacontext = "[LobbyView.GetSelectedPlayable.GetCharacter.GetLiege]"
						visible = "[And(Character.IsValid, Not(Character.IsSelected))]"
						parentanchor = bottom|left
						position = { 5 -125 }

						portrait_head_small = {

							blockoverride "portrait_transformation"
							{
								portrait_scale = { -1 1 }
								portrait_offset = { 1 0 }
							}

							blockoverride "portrait_transformation"
							{
								portrait_scale = { -1 1 }
								portrait_offset = { 1 0 }
							}

							blockoverride "opinion_box"
							{
								visible = no
							}

							blockoverride "status_icons" {
								visible = no
							}
						}

						text_label_center = {
							parentanchor = top|hcenter
							position = { -10 85 }
							text = "[liege|E]"
						}

						icon = {
							name = "non_dejure_liege"
							visible = "[Not( Character.GetVassalContract.IsRightfulLiege )]"
							parentanchor = top|left
							position = { 65 80 }

							size = { 35 35 }
							texture = "gfx/interface/icons/levy_tax_reduction.dds"

							using = tooltip_ws
							tooltip = "MRW_TT_NOT_RIGHTFUL_LIEGE"
						}
					}

					### Heir
					container = {
						name = "heir"
						datacontext = "[LobbyView.GetSelectedPlayable.GetCharacter.GetPlayerHeir]"
						visible = "[Character.IsValid]"
						parentanchor = bottom|left
						position = { 5 -10 }

						portrait_head_small = {
							blockoverride "portrait_transformation"
							{
								portrait_scale = { -1 1 }
								portrait_offset = { 1 0 }
							}

							blockoverride "opinion_box"
							{
								visible = no
							}

							blockoverride "status_icons" {
								visible = no
							}
						}

						text_label_center = {
							parentanchor = top|hcenter
							position = { 0 85 }
							name = "heir_label"
							text = "[heir|E]"
						}
					}

					### Main Character
					portrait_body = {
						name = "tutorial_highlight_main_character_button"
						parentanchor = bottom|right
						position = { -10 20 }
						size = { 240 300 }

						blockoverride "portrait_button" {
							size = { 280 421 }
						}

						blockoverride "portrait_glow" {}

						blockoverride "portrait_texture" {
							portrait_texture = "[Character.GetPortrait('environment_body', 'camera_character_view_main', 'idle', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
						}

						blockoverride "mask" {
							mask = "gfx/portraits/portrait_mask_character_view.dds"
						}

						blockoverride "portrait_transformation"
						{
							portrait_scale = { -1 1 }
							portrait_offset = { 1 0 }
						}

						blockoverride "portrait_opinion" {
							visible = no
						}

						blockoverride "portrait_status_icons" {
							visible = no
						}

						blockoverride "status_icons" {}
						blockoverride "coa" {}
						blockoverride "opinion_box" {}
					}
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding

				vbox = {
					layoutpolicy_horizontal = expanding

					background = {
						using = Background_Area_Dark
						margin = { 5 0 }
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						margin_top = 10
						spacing = 5

						#Warcraft
						text_single = {
							visible = "[GreaterThan_int32(Character.GetBirthDate.GetYear, '(int32)50')]"
							name = "character_name"
							layoutpolicy_horizontal = expanding
							raw_text = "[Character.GetUINameNotMeNoTooltip], #low [Character.GetAge]#!"
							default_format = "#high"
							using = Font_Size_Medium
							fontsize_min = 14
							align = left|nobaseline
							max_width = 390
							autoresize = yes

							tooltip = "[Character.GetCharacterViewNameNicknamedNoTooltipRegnal]"
						}

						#Warcraft
						text_single = {
							visible = "[LessThanOrEqualTo_int32(Character.GetBirthDate.GetYear, '(int32)50')]"
							name = "character_name2"
							layoutpolicy_horizontal = expanding
							raw_text = "[Character.GetUINameNotMeNoTooltip], #low ???#!"
							default_format = "#high"
							using = Font_Size_Medium
							fontsize_min = 14
							align = left|nobaseline
							max_width = 390
							autoresize = yes

							tooltip = "[Character.GetCharacterViewNameNicknamedNoTooltipRegnal]"
						}

						divider_light = {
							layoutpolicy_horizontal = expanding
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding

						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							margin = { 5 5 }

							hbox = {
								layoutpolicy_horizontal = expanding

								## Traits and modifiers
								fixedgridbox = {
									name = "personality_traits"
									datamodel = "[Character.GetTraitIndices]"
									flipdirection = yes
									addcolumn = 54
									addrow = 55
									maxhorizontalslots = 5

									item = {
										icon_trait = {
											datacontext = "[GetTraitForIndex(int32.GetInt)]"
											visible = "[Trait.IsPersonality]"
											blockoverride "icon_size"
											{
												size = { 55 55 }
											}
										}
									}
								}

								expand = {}
							}

							hbox = {
								layoutpolicy_horizontal = expanding

								hbox = {
									name = "faith_and_culture"

									button_religion_icon = {
										name = "faith_button"
										alwaystransparent = yes
										datacontext = "[Character.GetFaith]"
										size = { 45 45 }

										tooltipwidget = { faith_tooltip_core_tenents = {} }

										using = tooltip_ws
									}

									vbox = {
										margin_right = 10
										margin_left = 3
										minimumsize = { 80 0 }

										text_single = {
											datacontext = "[Character.GetFaith]"
											layoutpolicy_horizontal = expanding
											text = "FAITH_LOBBY_WINDOW"
											default_format = "#clickable;italic"
											align = nobaseline
											max_width = 220

											tooltipwidget = { faith_tooltip_core_tenents = {} }

											using = tooltip_ws
										}

										text_single = {
											datacontext = "[Character.GetCulture]"
											layoutpolicy_horizontal = expanding
											text = "CULTURE_LOBBY_WINDOW"
											default_format = "#clickable;italic"
											align = nobaseline
											max_width = 220

											tooltipwidget = { ruler_designer_culture_tooltip = {} }

											using = tooltip_ws
										}
									}
								}
								expand = {}
							}


							expand = {}
						}

						divider_light = {
							layoutpolicy_vertical = expanding
						}

						### HOUSE COA ###
						vbox = {
							layoutpolicy_vertical = expanding
							margin = { 10 0 }
							margin_bottom = 5

							vbox = {
								name = "house"
								margin_top = 5
								layoutpolicy_vertical = expanding
								maximumsize = { 100 0 }
								datacontext = "[Character.GetHouse]"
								visible = "[Character.HasDynasty]"

								coa_house_medium = {
									alwaystransparent = yes
									using = tooltip_ws

									icon = {
										name = "bastard"
										parentanchor = bottom|right

										visible = "[Not(Character.IsLegitimateMemberOfHouse)]"
										framesize = { 40 40 }
										frame = 4
										size = { 20 20 }
										texture = "gfx/interface/icons/portraits/relation.dds"
										tooltip = "CV_TT_BASTARD"
									}

									icon = {
										name = "head_icon"
										parentanchor = bottom|right
										size = { 20 20 }
										visible = "[LessThan_int32(Character.GetDynastyHeadRelationFrame('(bool)no'), '(int32)9')]"

										texture = "gfx/interface/icons/portraits/relation.dds"
										framesize = { 40 40 }
										frame = "[Character.GetDynastyHeadRelationFrame('(bool)no')]"
										tooltip = "[Character.GetDynastyHeadTooltip]"
									}
								}

								text_multi = {
									autoresize = yes
									max_width = 95
									margin = { 5 0 }
									text = "[DynastyHouse.GetBaseNameNoTooltip]"
									align = top|hcenter
								}
							}

							expand = {}
						}
					}
				}

				### REALM ###
				hbox = {
					layoutpolicy_horizontal = expanding
					margin = { 20 0 }

					visible = "[Character.HasLandedTitles]"

					widget = {
						size = { 85 100 }
						coa_realm_medium_crown = {
							name = "realm_flag"
							alwaystransparent = yes
							blockoverride "OnClickDefault" {}
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding

						text_multi = {
							name = "character_title"
							layoutpolicy_horizontal = expanding
							align = left
							autoresize = yes
							max_width = 280
							text = "[Character.GetPrimaryTitle.GetNameNoTooltip|U]"
							default_format = "#low"
							using = Font_Size_Medium
						}

						text_single = {
							name = "government_type"
							layoutpolicy_horizontal = expanding
							text = "[Character.GetGovernment.GetName]"
							default_format = "#low"
						}
					}

					expand = {}
				}
			}

			spacer = {
				size = { 10 5 }
			}

			scrollarea = {
				layoutpolicy_horizontal = expanding
				maximumsize = { -1 150 }
				autoresizescrollarea = yes
				scrollbarpolicy_horizontal = always_off
				visible = "[Character.HasDifficultyInfo]"

				scrollwidget = {
					### DIFFICULTY ###
					vbox = {
						spacing = 5
						margin_bottom = 10
						visible = "[Character.HasDifficultyInfo]"

						background = {
							using = Background_Area
							margin = { 10 0 }
						}

						text_label_left = {
							name = "difficulty_label"
							layoutpolicy_horizontal = expanding
							margin = { 10 5 }
							text = "MULTIPLAYER_LOBBY_DIFFICULTY_HEADER"
						}

						text_multi = {
							name = "difficulty"
							layoutpolicy_horizontal = expanding
							autoresize = yes
							text = "MULTIPLAYER_LOBBY_DIFFICULTY_INFO_TEXT"
							max_width = 380
						}
					}
				}

				scrollbar_vertical = {
					using = Scrollbar_Vertical
				}
			}

			spacer = {
				size = { 10 5 }
			}

			expand = {}

			divider_light = {
				layoutpolicy_horizontal = expanding
			}

			spacer = { size = {0 8}}
		}
	}

	blockoverride "game_rules" {
		vbox = {
			layoutpolicy_horizontal = expanding
			spacing = 5
			margin_right = 10
			margin_bottom = 15

			flowcontainer_game_rules_mini = {
				layoutpolicy_horizontal = expanding
				name = "game_rules_mini"
				margin = { 10 5 }
			}

			button_standard = {
				name = "game_rules_button"
				layoutpolicy_horizontal = expanding
				size = { 350 45 }

				button_rules = {
					size = { 30 30 }
					parentanchor = left|vcenter
					position = { 5 0 }
					alwaystransparent = yes
				}

				text = "GAME_RULES"
				margin = { 60 0 }
				onclick = "[OpenGameRules]"

				hbox = {
					margin = { 5 0 }
					expand = {}
					datacontext = "[GetGameRules]"

					ironman_save_icon = {
						visible = "[IsIronmanEnabled]"
						size = { 30 30 }
						tooltip = "IRONMAN_ENABLED"
					}

					ironman_disabled_icon = {
						visible = "[Not( IsIronmanEnabled )]"
						size = { 30 30 }
						tooltip = "IRONMAN_DISBLED"
					}
					achievements_enabled_icon = {
						visible = "[CanGetAchievements]"
						size = { 30 30 }
						tooltip = ACHIEVEMENTS_ENABLED
					}
					achievements_disabled_icon = {
						visible = "[Not( CanGetAchievements )]"
						size = { 30 30 }
						tooltip = ACHIEVEMENTS_DISABLED
						using = tooltip_nw
					}
				}
			}

			vbox = {
				name = "select_and_customize_character"
				datacontext = "[LobbyView.GetSelectedPlayable.GetCharacter]"

				button_standard = {
					name = "create_ruler"
					size = { 380 45 }
					visible = "[IsPreparationLobby]"
					datacontext = "[LobbyView.GetSelectedPlayable.GetCharacter]"

					button_edit_text = {
						size = { 30 30 }
						parentanchor = left|vcenter
						position = { 5 0 }
						alwaystransparent = yes
					}

					enabled = "[LobbyView.CanTryStartRulerDesigning( Character.Self )]"

					tooltip = "[LobbyView.GetTryStartRulerDesigningDesc( Character.Self )]"
					text = "RULER_DESIGNER_OPEN"

					onclick = "[LobbyView.UnReady]"
					onclick = "[TryStartRulerDesigning( Character.Self )]"
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					visible = "[Or(Or(Character.IsOtherPlayer, Character.IsLocalPlayer), And(Not(Character.IsValid), IsObserver))]"
					
					vbox = {
						layoutpolicy_horizontal = expanding
						margin = { 5 16 }

						background = {
							using = Background_Area_Dark
						}

						text_single = {
							name = "player"
							visible = "[Character.IsOtherPlayer]"
							text = "MULTIPLAYER_LOBBY_PLAYED_BY"
							align = nobaseline
							default_format = "#high"
						}

						text_single = {
							name = "its_you"
							visible = "[Character.IsLocalPlayer]"
							text = "MULTIPLAYER_LOBBY_PLAYED_BY_YOU"
							align = nobaseline
							default_format = "#high"
						}

						text_single = {
							visible = "[And(Not(Character.IsValid), IsObserver)]"
							size = { 380 100 }
							align = center
							text = "MULTIPLAYER_LOBBY_PLAY_OBSERVER"
						}
					}
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					margin = { 10 10 }
					visible = "[Not( Or( Character.IsOtherPlayer, Character.IsLocalPlayer ) )]"

					button_primary = {
						layoutpolicy_horizontal = expanding
						size = { 350 33 }
						visible = "[And( GameIsMultiplayer, IsPreparationLobby )]"

						text = "JOMINI_MULTIPLAYER_GUI_SELECT"
						onclick = "[LobbyView.ControlSelected]"
						tooltip = "[LobbyView.GetControlToolTip]"
						enabled = "[LobbyView.CanControlSelected]"
					}
				}
			}
		}
	}

	### Chosen character name left side ###
	blockoverride "readyness" {
		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			maximumsize = { 390 -1 }

			text_multi = {
				layoutpolicy_horizontal = expanding
				text = "MULTIPLAYER_LOBBY_READY"
				visible = "[And( LobbyPlayer.HasPlayable, Not( LobbyPlayer.IsObserver ) )]"
				max_width = 245
				autoresize = yes
			}

			text_single = {
				layoutpolicy_horizontal = expanding
				text = "[SelectLocalization( IsMachineRulerDesigning( LobbyPlayer.GetID ), 'MULTIPLAYER_LOBBY_RULER_DESIGNING', 'MULTIPLAYER_LOBBY_NOT_READY' )]"
				visible = "[Not( Or( Or( LobbyPlayer.HasPlayable, LobbyPlayer.IsObserver ), LobbyPlayer.IsHotjoining ) )]"
			}

			text_single = {
				layoutpolicy_horizontal = expanding
				text = "JOMINI_MULTIPLAYER_GUI_OBSERVER"
				visible = "[LobbyPlayer.IsObserver]"
			}

			text_single = {
				layoutpolicy_horizontal = expanding
				visible = "[LobbyPlayer.IsHotjoining]"
				text = "MULTIPLAYER_LOBBY_JOIN_PROGRESS"
			}

			expand = {}
		}
	}

	### MAPMODES, OBSERVE MODE ###
	widget = {
		parentanchor = bottom
		size = { 100% 215 }
		allow_outside = yes

		vbox = {
			expand = {}
			allow_outside = yes

			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 30
				margin_top = 20
				margin_left = 440
				margin_right = 390
				allow_outside = yes

				vbox = {
					spacing = 5

					background = {
						using = Background_Area_Dark
						margin = { 10 15 }
					}

					background = {
						using = Background_Area_Dark
						margin = { 10 10 }

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
							blend_mode = alphamultiply
							mirror = vertical
						}
					}

					button_standard = {
						size = { 200 40 }
						visible = "[InDebugMode]"
						text = "FIND_TITLE"
						shortcut = "find_title_shortcut"
						onclick = "[ToggleGameView( 'find_title' )]"
						tooltip = "IM_TT_FIND_TITLE"
					}
						
					JominiLobbyViewButton = {
						size = { 200 40 }
						onclick = "[SetRandomPlayableObserverCharacter]"
						text = "MULTIPLAYER_LOBBY_CHOOSE_RANDOM_CHARACTER"
					}

					JominiLobbyViewButton = {
						size = { 200 40 }
						onclick = "[LobbyView.ToggleObserve]"
						text = "[SelectLocalization(LobbyView.IsObserver, 'JOMINI_MULTIPLAYER_GUI_DISABLE_OBSERVE', 'JOMINI_MULTIPLAYER_GUI_OBSERVE')]"
						tooltip = "LOBBY_OBSERVER_MODE_TOOLTIP"
						layoutpolicy_horizontal = expanding

						icon_observer = {
							position = { -5 2 }
							parentanchor = right
							size = { 35 35 }
						}
					}
				}

				expand = {}

				map_modes = {
					scale = 0.8
					filter_mouse = all
					alwaystransparent = no
					hotkeys_HUD = {}
				}
			}
		}
	}
}

JominiLobbyViewEndPreparationConfirmation = {}
JominiMultiplayerJoinRequest = {}
JominiMultiplayerOosMessage = {
	blockoverride "oos_item" {
		layoutpolicy_horizontal = expanding

		hbox = {
			datacontext = "[OosData.GetPlayable.GetCharacter]"
			layoutpolicy_horizontal = expanding

			widget = {
				size = { 68 106 }

				coa_realm_medium_crown = {
					visible = "[And( Character.IsValid, Not( OosData.IsObserver ))]"
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				margin = { 5 0 }

				text_single = {
					text = "[Character.GetName]"
					visible = "[And( Character.IsValid, Not( OosData.IsObserver ))]"
					autoresize = yes
					layoutpolicy_horizontal = expanding
				}

				text_single = {
					text = "JOMINI_MULTIPLAYER_GUI_OBSERVER"
					visible = "[OosData.IsObserver]"
					autoresize = yes
					layoutpolicy_horizontal = expanding
				}

				text_single = {
					text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_PLAYER_NAME"
					max_width = 490
					autoresize = yes
					layoutpolicy_horizontal = expanding
				}

				text_single = {
					text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_TYPE"
					max_width = 490
					autoresize = yes
					layoutpolicy_horizontal = expanding
				}

				text_multi = {
					text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_FOLDER"
					max_width = 490
					autoresize = yes
					layoutpolicy_horizontal = expanding
				}
			}
		}
	}
}
