# Warcraft
# reclaim_britannia_decision_effect = {
# restore_the_danelaw_effect = {

# Warcraft - TODO: This is redundant because of Mayo's wc_create_holy_order_effect. We should figure out a way to eliminate one of them. 
create_holy_order_effect = {
	if = {
		limit = {
			exists = faith.religious_head
			NOT = { faith.religious_head = root }
		}
		faith.religious_head = {
			add_opinion = {
				# Warcraft
				target = prev
				modifier = founded_holy_order_opinion
			}
		}
	}
	if = {
		limit = {
			NOT = { has_character_modifier = founded_holy_order_modifier }
		}
		add_character_modifier = {
			modifier = founded_holy_order_modifier
			years = 5
		}
	}
	faith = {
		change_fervor = {
			value = 10
			desc = fervor_gain_holy_order_founded
		}
	}

	# Warcraft
	$LEADER$ = {
		add_gold = 100 #So that they have some money to lend out
		add_piety_level = 2
		add_gold = holy_order_starting_gold
		every_courtier = {
			add_trait = order_member
		}
	}
}

# Warcraft
# embrace_english_culture_effect = {
# form_portugal_decision_effects = {

# unite_the_spanish_thrones_decision_effects = {

# unite_africa_decision_effects = {

# avenge_the_battle_of_tours_decision_effects = {

# unite_the_western_slavs_decision_effects = {

# unite_the_southern_slavs_decision_effects = {

# unite_the_slavs_decision_effects = {

# unite_india_decision_effect = {

# become_saoshyant_decision_effect = {

# build_grand_church_decision_effect = {

accept_cannibalism_decision_effect = {
	custom_tooltip = faith_accept_cannibalism
	root.faith = {
		set_variable = {
			name = accepted_cannibalism
			value = yes
		}
	}
	root = {
		if = {
			limit = {
				any_spouse = {
					is_cannibal_trigger = no
					is_ai = yes
				}
			}
			every_spouse = {
				limit = {
					is_cannibal_trigger = no
					is_ai = yes
				}
				add_trait = cannibal
			}
		}
		if = {
			limit = {
				any_close_family_member = {
					is_cannibal_trigger = no
					is_landed = no
					is_ai = yes
				}
			}
			every_close_family_member = {
				limit = {
					is_cannibal_trigger = no
					is_landed = no
					is_ai = yes
				}
				custom = all_my_family_members
				add_trait = cannibal
			}
		}
		if = {
			limit = {
				any_vassal = {
					is_cannibal_trigger = no
					is_ai = yes
					dread_modified_ai_boldness = { #all vassals that are intimidated
						dreaded_character = root
						value <= -50
					}
				}
			}
			every_vassal = {
				limit = {
					is_cannibal_trigger = no
					is_ai = yes
					dread_modified_ai_boldness = {
						dreaded_character = root
						value <= -50
					}
				}
				custom = all_my_intimidated_vassals
				add_trait = cannibal
			}
		}
	}
	give_nickname = nick_the_devourer
}

found_university_decision_event_effect = {
	if = {
		limit = {
			OR = {
				has_bad_nickname = yes
				has_any_nickname = no
			}
		}
		give_nickname = nick_the_scholar
	}

	hidden_effect = {
		#Event that gives you highly skilled courtier
		trigger_event = {
			id = major_decisions.2011
			days = { 50 365 }
		}
	}
}

found_university_decision_effect = {
	found_university_decision_event_effect = yes

	if = {
		limit = {
			NOT = { has_variable = university }
		}
		show_as_tooltip = {
			every_held_title = {
				custom = decision_found_university_custom
				limit = { tier = tier_barony }
				title_capital_county.title_province = {
					add_special_building_slot = generic_university
				}
			}
		}
	}
}

lunatic_building_decision_effect = {
	capital_province = {
		set_variable = { #To unlock the building
			name = variable_greenhouse
			value = yes
		}
		add_special_building_slot = special_greenhouse_01
		add_special_building = special_greenhouse_01
		#add_province_modifier = extra_building_slot
		#add_building = special_greenhouse_01
	}

	give_nickname = nick_the_glass
}

found_witch_coven_decision_effects = {
	save_scope_as = founder
	custom_tooltip = found_witch_coven_decision_effects.children.tt
	custom_tooltip = found_witch_coven_decision_effects.convert.tt
	custom_tooltip = found_witch_coven_decision_effects.grand_rite.tt
	house = {
		add_house_modifier = {
			modifier = witch_coven
		}
	}

	# Warcraft
}

convert_whole_realm_to_feudalism_effect = {
	#TOOLTIP INFO
	#PLAYER EFFECTS

	# Warcraft
	if = {
		limit = { can_get_necro_government_trigger = yes }
		change_necro_government_effect = yes
	}
	else_if = {
		limit = { can_get_demonic_government_trigger = yes }
		change_demonic_government_effect = yes
	}
	else_if = {
		limit = { can_get_eldritch_government_trigger = yes }
		change_eldritch_government_effect = yes
	}

	##Liege has clan? Convert to clan!
	else_if = {
		limit = {
			is_independent_ruler = no
			OR = {
				liege = { government_has_flag = government_is_clan }
				AND = {
					liege = { government_has_flag = government_is_tribal }

					# Warcraft
					always = no
					# faith = { like_islam_religion_trigger = yes }
				}
			}
		}
		change_government = clan_government
	}
	##Liege has feudal? Convert to feudal!
	else_if = {
		limit = {
			is_independent_ruler = no
			OR = {
				liege = { government_has_flag = government_is_feudal }
				AND = {
					liege = { government_has_flag = government_is_tribal }

					# Warcraft
					always = yes
					# faith = { like_islam_religion_trigger = no }
				}
			}
		}
		change_government = feudal_government
	}
	#Warcraft
	##You're an independant and you can, convert to clan!
	else_if = {
		limit = {
			is_independent_ruler = yes

			# Warcraft
			can_get_clan_government_trigger = yes
			#always = no
			# faith = { like_islam_religion_trigger = yes }
		}
		change_government = clan_government
	}
	##You're an independent anything else? Convert to feudal!
	else = { change_government = feudal_government }
	##General
	custom_tooltip = all_holding_will_change
	##Liege has clan? Convert to clan!
	if = {
		limit = {
			is_independent_ruler = no
			liege = { government_has_flag = government_is_clan }
		}
		custom_tooltip = clan_liege_vassals_will_convert
	}
	#Liege has feudal? Convert to feudal!
	if = {
		limit = {
			is_independent_ruler = no
			liege = { government_has_flag = government_is_feudal }
		}
		custom_tooltip = feudal_liege_vassals_will_convert
	}
	##If I am Islamic, we will become clan.
	if = {
		limit = {
			is_independent_ruler = yes

			# Warcraft
			always = no
			# can_get_clan_government_trigger = yes
			# faith = { like_islam_religion_trigger = yes }
		}
		custom_tooltip = islamic_vassals_will_convert
	}
	##If I am not Islamic, we will become feudal.
	else_if = {
		limit = { is_independent_ruler = yes }
		custom_tooltip = other_vassals_will_convert
	}

	hidden_effect = {
		#Nuke tribal authorities.
		if = {
			limit = { has_realm_law = tribal_authority_0 }
			remove_realm_law = tribal_authority_0
		}
		if = {
			limit = { has_realm_law = tribal_authority_1 }
			remove_realm_law = tribal_authority_1
		}
		if = {
			limit = { has_realm_law = tribal_authority_2 }
			remove_realm_law = tribal_authority_2
		}
		if = {
			limit = { has_realm_law = tribal_authority_3 }
			remove_realm_law = tribal_authority_3
		}
		#Start off crown authorities.
		if = {
			limit = {
				# Warcraft
				realm_law_use_crown_authority = yes

				NOT = { has_realm_law = crown_authority_0 }
			}
			add_realm_law_skip_effects = crown_authority_0
		}

		#Also convert every vassal.
		#Liege has taken clan, so become clan.
		if = {
			limit = {
				government_has_flag = government_is_clan
			}
			every_vassal_or_below = {
				limit = { government_has_flag = government_is_tribal }
				change_government = clan_government
				#Nuke tribal authorities.
				if = {
					limit = { has_realm_law = tribal_authority_0 }
					remove_realm_law = tribal_authority_0
				}
				if = {
					limit = { has_realm_law = tribal_authority_1 }
					remove_realm_law = tribal_authority_1
				}
				if = {
					limit = { has_realm_law = tribal_authority_2 }
					remove_realm_law = tribal_authority_2
				}
				if = {
					limit = { has_realm_law = tribal_authority_3 }
					remove_realm_law = tribal_authority_3
				}
				if = {
					limit = {
						# Warcraft
						realm_law_use_crown_authority = yes

						NOT = { has_realm_law = crown_authority_0 }
					}
					add_realm_law_skip_effects = crown_authority_0
				}
			}
		}
		#Liege is not clan, become feudal.
		else = {
			every_vassal_or_below = {
				limit = { government_has_flag = government_is_tribal }

				# Warcraft
				if = {
					limit = { can_get_necro_government_trigger = yes }
					change_necro_government_effect = yes
				}
				else_if = {
					limit = { can_get_demonic_government_trigger = yes }
					change_demonic_government_effect = yes
				}
				else_if = {
					limit = { can_get_eldritch_government_trigger = yes }
					change_eldritch_government_effect = yes
				}
				else = {
					change_government = feudal_government
				}

				#Nuke tribal authorities.
				if = {
					limit = { has_realm_law = tribal_authority_0 }
					remove_realm_law = tribal_authority_0
				}
				if = {
					limit = { has_realm_law = tribal_authority_1 }
					remove_realm_law = tribal_authority_1
				}
				if = {
					limit = { has_realm_law = tribal_authority_2 }
					remove_realm_law = tribal_authority_2
				}
				if = {
					limit = { has_realm_law = tribal_authority_3 }
					remove_realm_law = tribal_authority_3
				}
				if = {
					limit = {
						# Warcraft
						realm_law_use_crown_authority = yes

						NOT = { has_realm_law = crown_authority_0 }
					}
					add_realm_law_skip_effects = crown_authority_0
				}
			}
		}

		## Spawn holdings in tribal counties

		every_sub_realm_county = { # Spawn temples in your holy sites
			limit = {
				any_county_province = {
					has_holding_type = tribal_holding
				}
				NOT = {
					any_county_province = {
						has_holding_type = church_holding
					}
				}
				any_county_province = {
					has_holding = no
					barony = {
						is_holy_site_of = root.faith
					}
				}
			}
			random_county_province = {
				limit = {
					has_holding = no
					barony = {
						is_holy_site_of = root.faith
					}
				}
				set_holding_type = church_holding
			}
		}

		every_sub_realm_county = { # Spawn a City
			limit = {
				any_county_province = {
					has_holding_type = tribal_holding
				}
				any_county_province = {
					has_holding = no
				}
				NOT = {
					any_county_province = {
						has_holding_type = city_holding
					}
				}
			}
			random_county_province = {
				limit = {
					has_holding = no
					OR = {
						terrain = floodplains
						terrain = oasis
						terrain = farmlands
					}
					is_coastal = yes
					has_special_building_slot = no
				}
				alternative_limit = {
					has_holding = no
					OR = {
						terrain = floodplains
						terrain = oasis
						terrain = farmlands
					}
					has_special_building_slot = no
				}
				alternative_limit = {
					has_holding = no
					OR = {
						terrain = floodplains
						terrain = oasis
						terrain = farmlands
					}
				}
				alternative_limit = {
					has_holding = no
				}
				random = {
					chance = 60
					modifier = {
						add = county.development_level
					}
					modifier = {
						add = 50
						this.county = root.capital_county
					}
					modifier = {
						add = 20
						OR = {
							terrain = floodplains
							terrain = oasis
							terrain = farmlands
						}
					}
					set_holding_type = city_holding
				}
			}
		}

		every_sub_realm_county = { # Spawn a Temple
			limit = {
				any_county_province = {
					has_holding_type = tribal_holding
				}
				any_county_province = {
					has_holding = no
				}
				NOT = {
					any_county_province = {
						has_holding_type = church_holding
					}
				}
			}
			random_county_province = {
				limit = {
					has_holding = no
					OR = {
						terrain = floodplains
						terrain = oasis
						terrain = farmlands
					}
					is_coastal = yes
					has_special_building_slot = no
				}
				alternative_limit = {
					has_holding = no
					OR = {
						terrain = floodplains
						terrain = oasis
						terrain = farmlands
					}
					has_special_building_slot = no
				}
				alternative_limit = {
					has_holding = no
					OR = {
						terrain = floodplains
						terrain = oasis
						terrain = farmlands
					}
				}
				alternative_limit = {
					has_holding = no
				}
				random = {
					chance = 50
					modifier = {
						add = county.development_level
					}
					modifier = {
						add = 50
						this.county = root.capital_county
					}
					modifier = {
						add = 20
						OR = {
							terrain = floodplains
							terrain = oasis
							terrain = farmlands
						}
					}
					set_holding_type = church_holding
				}
			}
		}

		##Sort out new buildings for liege and all vassals
		every_realm_province = {
			limit = {
				has_holding_type = tribal_holding
				NOT = { is_in_list = feudal_conversion }
			}
			add_to_list = feudal_conversion

		}
		every_vassal_or_below = {
			every_realm_province = {
				limit = {
					has_holding_type = tribal_holding
					NOT = { is_in_list = feudal_conversion }
				}
				add_to_list = feudal_conversion

			}
		}
		every_in_list = {
			list = feudal_conversion
			set_variable = {
				name = tribal_to_feudal_building_level
				value = combined_building_level
				days = 1
			}
			set_holding_type = castle_holding
			while = {
				limit = {
					var:tribal_to_feudal_building_level > 1
				}
				generate_building = yes
				change_variable = {
					name = tribal_to_feudal_building_level
					subtract = 1
				}
			}
			remove_variable = tribal_to_feudal_building_level
			remove_from_list = feudal_conversion
		}
	}
}

##################################################
# Add Special Succession Effects

special_succession_witengamot_effect = {
	if = {
		limit = { highest_held_title_tier = tier_empire }
		every_held_title = {
			limit = {
				tier = tier_empire
				NOR = {
					has_title_law_flag = advanced_succession_law
					has_title_law_flag = elective_succession_law
				}
			}
			add_title_law = saxon_elective_succession_law
		}
		every_vassal = {
			limit = { special_succession_witengamot_trigger = yes }
			add_opinion = {
				modifier = implemented_traditional_succession_law_opinion
				years = 20
				target = root
			}
			custom = major_decisions.3100.tt_opinion_witengamot
		}
	}
	else = {
		every_held_title = {
			limit = {
				tier = tier_kingdom
				NOR = {
					has_title_law_flag = advanced_succession_law
					has_title_law_flag = elective_succession_law
				}
			}
			add_title_law = saxon_elective_succession_law
		}
		every_vassal = {
			limit = { special_succession_witengamot_trigger = yes }
			add_opinion = {
				modifier = implemented_traditional_succession_law_opinion
				years = 20
				target = root
			}
			custom = major_decisions.3100.tt_opinion_witengamot
		}
	}
}

special_succession_thing_effect = {
	if = {
		limit = { highest_held_title_tier = tier_empire }
		every_held_title = {
			limit = {
				tier = tier_empire
				NOR = {
					has_title_law_flag = advanced_succession_law
					has_title_law_flag = elective_succession_law
				}
			}
			add_title_law = scandinavian_elective_succession_law
		}
		every_vassal = {
			limit = { special_succession_thing_trigger = yes }
			add_opinion = {
				modifier = implemented_traditional_succession_law_opinion
				years = 20
				target = root
			}
			custom = major_decisions.3100.tt_opinion_thing
		}
	}
	else = {
		every_held_title = {
			limit = {
				tier = tier_kingdom
				NOR = {
					has_title_law_flag = advanced_succession_law
					has_title_law_flag = elective_succession_law
				}
			}
			add_title_law = scandinavian_elective_succession_law
		}
		every_vassal = {
			limit = { special_succession_thing_trigger = yes }
			add_opinion = {
				modifier = implemented_traditional_succession_law_opinion
				years = 20
				target = root
			}
			custom = major_decisions.3100.tt_opinion_thing
		}
	}
}

special_succession_tanistry_effect = {
	if = {
		limit = { highest_held_title_tier = tier_empire }
		every_held_title = {
			limit = {
				tier = tier_empire
				NOR = {
					has_title_law_flag = advanced_succession_law
					has_title_law_flag = elective_succession_law
				}
			}
			add_title_law = gaelic_elective_succession_law
		}
		every_vassal = {
			limit = { special_succession_tanistry_trigger = yes }
			add_opinion = {
				modifier = implemented_traditional_succession_law_opinion
				years = 20
				target = root
			}
			custom = major_decisions.3100.tt_opinion_tanistry
		}
	}
	else = {
		every_held_title = {
			limit = {
				tier = tier_kingdom
				NOR = {
					has_title_law_flag = advanced_succession_law
					has_title_law_flag = elective_succession_law
				}
			}
			add_title_law = gaelic_elective_succession_law
		}
		every_vassal = {
			limit = { special_succession_tanistry_trigger = yes }
			add_opinion = {
				modifier = implemented_traditional_succession_law_opinion
				years = 20
				target = root
			}
			custom = major_decisions.3100.tt_opinion_tanistry
		}
	}
}

special_succession_jirga_effect = {
	if = {
		limit = { highest_held_title_tier = tier_empire }
		every_held_title = {
			limit = {
				tier = tier_empire
				NOR = {
					has_title_law_flag = advanced_succession_law
					has_title_law_flag = elective_succession_law
				}
			}
			add_title_law = tribal_elective_succession_law
		}
		every_vassal = {
			limit = { special_succession_jirga_trigger = yes }
			add_opinion = {
				modifier = implemented_traditional_succession_law_opinion
				years = 20
				target = root
			}
			custom = major_decisions.3100.tt_opinion_thing
		}
	}
	else = {
		every_held_title = {
			limit = {
				tier = tier_kingdom
				NOR = {
					has_title_law_flag = advanced_succession_law
					has_title_law_flag = elective_succession_law
				}
			}
			add_title_law = tribal_elective_succession_law
		}
		every_vassal = {
			limit = { special_succession_jirga_trigger = yes }
			add_opinion = {
				modifier = implemented_traditional_succession_law_opinion
				years = 20
				target = root
			}
			custom = major_decisions.3100.tt_opinion_jirga
		}
	}
}

##################################################
# Launch Hungarian Migration Effects

launch_hungarian_migration_scripted_effect = {
	# Warcraft
}

tribal_transfer_liege_title_effect = {
	create_title_and_vassal_change = {
		type = usurped
		save_scope_as = change
		add_claim_on_loss = no
	}
	scope:title_being_fought_over = {
		change_title_holder = {
			holder = scope:challenger
			change = scope:change
		}
	}
	resolve_title_and_vassal_change = scope:change
	if = {
		limit = {
			root = scope:challenger
		}
		scope:liege_to_challenge = {
			add_opinion = {
				target = scope:challenger
				modifier = usurped_title
			}
		}
	}
	else = {
		hidden_effect = {
			scope:liege_to_challenge = {
				add_opinion = {
					target = scope:challenger
					modifier = usurped_title
				}
			}
		}
	}
}

tribal_challenger_lost_effect = {
	if = {
		limit = {
			root = scope:liege_to_challenge
		}
		scope:liege_to_challenge = {
			add_prestige = medium_prestige_gain
		}
	}
	else = {
		hidden_effect = {
			scope:liege_to_challenge = {
				add_prestige = medium_prestige_gain
			}
		}
	}
	add_prestige_level = -1
	if = {
		limit = {
			root = scope:challenger
		}
		scope:liege_to_challenge = {
			add_opinion = {
				target = scope:challenger
				modifier = tried_to_usurped_title
			}
		}
	}
	else = {
		hidden_effect = {
			scope:liege_to_challenge = {
				add_opinion = {
					target = scope:challenger
					modifier = tried_to_usurped_title
				}
			}
		}
	}
}

##################################################
# Negotiate the Danelaw Effects

# Warcraft
# negotiate_the_danelaw_accept_effect = {

# negotiate_the_danelaw_reject_effect = {

# negotiate_the_danelaw_each_way_effect = {

# resolve_danelaw_partition_effect = {

# formalise_the_daneland_effect = {

##################################################
# Found Cadet House Effects
found_cadet_house_decision_effect = {
	hidden_effect = {
		house.house_head = {
			save_scope_as = former_house_head
		}
		house = {
			save_scope_as = former_house
		}
		# Warcraft
		# add_achievement_flag_effect = { FLAG = achievement_a_house_of_my_own_flag }
	}

	create_cadet_branch = yes
	add_prestige = $PRESTIGE$
	hidden_effect = {
		save_scope_as = new_head
		house = {
			save_scope_as = new_house
		}
		every_player = {
			limit = {
				exists = house
				house = scope:new_house
				NOT = { this = $CHARACTER$ }
			}
			send_interface_toast = {
				type = msg_created_new_house
				title = created_cadet_branch_toast_new_house_desc
				left_icon = scope:new_head
				desc = created_cadet_branch_toast_new_house_other_tt
			}
		}
		send_interface_toast = {
			type = msg_created_new_house
			title = created_cadet_branch_toast_new_house_desc
			left_icon = scope:new_head
			right_icon = scope:former_house_head
			desc = created_cadet_branch_toast_new_house_other_tt
		}
		if = {
			limit = {
				any_child = {
					has_trait = bastard
					is_lowborn = no
					dynasty = scope:new_head.dynasty
					NOT =  { house = scope:new_house }
				}
			}
			every_child = {
				limit = {
					has_trait = bastard
					is_lowborn = no
					dynasty = scope:new_head.dynasty
					NOT =  { house = scope:new_house }
				}
				set_house = scope:new_house
			}
		}
		if = {
			limit = {
				any_artifact = {
					trigger_if = {
						limit = { exists = var:banner_dynasty }
						var:banner_dynasty = root.dynasty
					}
					trigger_else = { always = no }
                    artifact_owner = {
						NOT = { this = root }
						in_diplomatic_range = root
					}
					NOT = {
						any_artifact_house_claimant = {
							this = scope:new_house
						}
					}
				}
			}
			random_artifact = {
				limit = {
					exists = var:banner_dynasty
					var:banner_dynasty = root.dynasty
					artifact_owner = { in_diplomatic_range = root }
					NOT = {
						any_artifact_house_claimant = {
							this = scope:new_house
						}
					}
				}
				save_scope_as = new_branch_dynasty_banner
			}
			scope:new_house = {
				add_house_artifact_claim = scope:new_branch_dynasty_banner
			}
		}

		# Struggle Catalysts. 
		# Warcraft - no thanks
	}
}

learn_language_linguist_effect = {
	hidden_effect = { add_courtier = $LINGUIST$ }
	$LINGUIST$ = { save_scope_as = selected_linguist }
	custom_tooltip = ep1_decision.0201.tt.aptitude
	send_interface_toast = {
		title = learn_court_language_toast_title
		left_icon = root
		right_icon = $LINGUIST$
		if = {
			limit = {
				can_employ_court_position_type = court_tutor_court_position
			}
			appoint_court_position = {
				recipient = $LINGUIST$
				court_position = court_tutor_court_position
			}
		}
		else_if = {
			limit = {
				exists = court_position:court_tutor_court_position
			}
			court_position:court_tutor_court_position = {
				add_opinion = {
					target = root
					modifier = disappointed_opinion
					opinion = -5
				}
			}
			replace_court_position = {
				recipient = $LINGUIST$
				holder = court_position:court_tutor_court_position
				court_position = court_tutor_court_position
			}
		}
		if = {
			limit = {
				NOT = { knows_language_of_culture = $LINGUIST$.culture }
			}
	    	start_scheme = {
				type = learn_language
				target = $LINGUIST$
			}
	    }
	}
}

linguist_bonus_culture_effect = {
	if = {
		limit = { exists = scope:$CULTURE$ }
		if = {
			limit = {
				any_culture_global = {
					exists = culture_head
					has_same_culture_heritage = scope:$CULTURE$
					NOR = {
						has_same_culture_language = scope:$CULTURE$
						has_same_culture_language = root.culture
						AND = {
							exists = scope:target_court_language.culture
							has_same_culture_language = scope:target_court_language.culture
						}
						AND = {
							exists = scope:ling_cul_1_bonus
							THIS = scope:ling_cul_1_bonus
						}
						AND = {
							exists = scope:ling_cul_2_bonus
							THIS = scope:ling_cul_2_bonus
						}
						AND = {
							exists = scope:ling_cul_3_bonus
							THIS = scope:ling_cul_3_bonus
						}
					}
				}
			}
			random_culture_global = { # Find a culture that speaks this language natively
				limit = {
					exists = culture_head
					has_same_culture_heritage = scope:$CULTURE$
					NOR = {
						has_same_culture_language = scope:$CULTURE$
						has_same_culture_language = root.culture
						AND = {
							exists = scope:target_court_language.culture
							has_same_culture_language = scope:target_court_language.culture
						}
						AND = {
							exists = scope:ling_cul_1_bonus
							THIS = scope:ling_cul_1_bonus
						}
						AND = {
							exists = scope:ling_cul_2_bonus
							THIS = scope:ling_cul_2_bonus
						}
						AND = {
							exists = scope:ling_cul_3_bonus
							THIS = scope:ling_cul_3_bonus
						}
					}
				}
				save_scope_as = $CULTURE$_bonus
			}
		}
		else = {
			random_kingdom = {
				limit = {
					exists = holder
					NOR = {
						holder = root
						AND = {
							exists = scope:target_court_language
							holder = scope:target_court_language
						}
					}
					holder = {
						in_diplomatic_range = root
						culture = {
							NOR = {
								has_same_culture_language = scope:$CULTURE$
								has_same_culture_language = root.culture
								AND = {
									exists = scope:target_court_language
									has_same_culture_language = scope:target_court_language.culture
								}
								AND = {
									exists = scope:ling_cul_1_bonus
									this = scope:ling_cul_1_bonus
								}
								AND = {
									exists = scope:ling_cul_2_bonus
									this = scope:ling_cul_2_bonus
								}
								AND = {
									exists = scope:ling_cul_3_bonus
									this = scope:ling_cul_3_bonus
								}
							}
						}
					}
				}
				holder.culture = { save_scope_as = $CULTURE$_bonus }
			}
		}
	}
}

linguist_random_realm_effect = {
	# Save random culture realm to fetch faith
	if = {
		limit = {
			any_independent_ruler = { culture = scope:$CULTURE$ }
		}
		ordered_independent_ruler = {
			limit = { culture = scope:$CULTURE$ }
			order_by = primary_title.tier
			save_scope_as = $CULTURE$_ruler
		}
	}
	# Save fallback to fetch faith
	else = {
		scope:target_court_language = { save_scope_as = $CULTURE$_ruler }
	}
}

isolate_family_decision_effect = {
	show_as_tooltip = {
		every_close_family_member = {
			custom = every_close_family_member_at_court
			limit = {
				is_courtier_of = root
			}
			add_character_modifier = {
				modifier = isolating_modifier
				years = 5
			}
		}
		add_character_modifier = {
			modifier = isolating_modifier
			years = 5
		}
	}
	custom_tooltip = travelling_will_break_isolation_tt
	hidden_effect = {
		every_close_family_member = {
			custom = every_close_family_member_at_court
			limit = {
				is_courtier_of = root
			}
			root = {
				add_to_variable_list = {
					name = isolating_relatives
					target = prev
				}
			}
			add_character_flag = {
				flag = blocked_from_leaving
				years = 5
			}
			add_character_modifier = {
				modifier = isolating_modifier
				years = 5
			}
		}
		every_consort = {
			limit = {
				is_courtier_of = root
			}
			root = {
				add_to_variable_list = {
					name = isolating_relatives
					target = prev
				}
			}
			add_character_flag = {
				flag = blocked_from_leaving
				years = 5
			}
			add_character_modifier = {
				modifier = isolating_modifier
				years = 5
			}
		}
		add_character_modifier = {
			modifier = isolating_modifier
			years = 5
		}
		set_variable = {
			name = isolating_cooldown_var
			years = 1
		}
		add_character_flag = { # Prevent the AI from constantly coming in and out of isolation
			flag = ai_unisolate_cooldown
			years = 1
		}
	}
	stress_impact = {
		brave = minor_stress_impact_gain
		gregarious = minor_stress_impact_gain
	}
}

unisolate_family_decision_effect = {
	show_as_tooltip = {
		every_close_family_member = {
			custom = every_close_family_member_at_court
			limit = {
				is_courtier_of = root
			}
			remove_character_modifier = isolating_modifier
		}
	}
	hidden_effect = {
		every_in_list = {
			variable = isolating_relatives
			limit = { is_alive = yes }
			remove_character_modifier = isolating_modifier
			remove_character_flag = blocked_from_leaving
		}
		clear_variable_list = isolating_relatives
	}
	remove_character_modifier = isolating_modifier
	stress_impact = {
		paranoid = minor_stress_impact_gain
		shy = minor_stress_impact_gain
	}
}
