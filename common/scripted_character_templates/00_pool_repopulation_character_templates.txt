#################################### THE DUKE AND THE BODENSEE ######################################
#																									#
# The Duke of Swabia sat by the shores of the Bodensee with his fishing rod for many months without #
# reward. He had even put a lovely slice of dove pie on the hook, but his bucket remained empty.	#
# "Are there no characters in the lake?" he thought to himself and sighed. "At this rate, my court 	#
# will become desolate within a generation! My heir will have no diligent councillors, no brave 	#
# knights, and no wise crones to help him rule the lands!" 											#		
#																									#
# The Duke cried for a long, long while, and then stood up to gathering his things.					#
# "Thank God!" he suddenly exclaimed. "I have an idea!"												#
# If the lake was empty, could he not create some new characters and release them into the waters?  #
# If some of them married, the Bodensee would surely be repopulated in just a few years!			#
#																									#
# The clever Duke quickly got to work. He made maidens and adventurers, matrons and fools. Young	#
# and old he made them, weak and strong, wicked and pious. The sun rose in the sky and set again.	#
# Under the light of moon and stars, the Duke put the final touch on his creation. 					#
#																									#
# The next morning, he gently released the little characters into the waters. He watched them swim 	#
# away with tears of happiness trailing down his whiskered cheeks. This was farewell, but he was 	#
# certain - they would not be gone for long.														#
#																									#
# And this is the story behind why pools spawn new characters for the royal courts all over the 	#
# world. Whenever we throw our hook into the depths, we send a thought of gratitude to the noble 	#
# Duke of Swabia, and his marvelous creation.														#
#																									#
#####################################################################################################

# Warcraft
@default_demon_chance_value = 20

@default_void_being_chance_value = 20

#Notes
#Random Traits List contains relevant lifestyle traits and all personality traits exist in 1 template
#Template-specific skill min/max regulated through scripted values
#Template-specific education trait is weighted

pool_repopulate_prowess = {
	# Warcraft
	age = { 20 40 }
	random_traits = yes
	gender_female_chance = root_soldier_female_chance
	
	# Warcraft
	random_culture = {
		root.culture = {
			weight = {
				base = 50
			}
		}
		culture:annihilan = {
			trigger = { root = { can_get_demonic_courtiers_trigger = yes } }
			weight = {
				base = @default_demon_chance_value
				dark_frenzy_demon_knight_modifier = { MASTER = root }
			}
		}
		culture:eredruin = {
			trigger = { root = { can_get_demonic_courtiers_trigger = yes } }
			weight = {
				base = @default_demon_chance_value
				dark_frenzy_demon_knight_modifier = { MASTER = root }
			}
		}
		culture:shivarra = {
			trigger = { root = { can_get_demonic_courtiers_trigger = yes } }
			weight = {
				base = @default_demon_chance_value
				dark_frenzy_demon_knight_modifier = { MASTER = root }
			}
		}
		culture:nraqi = {
			trigger = { root = { can_get_void_courtiers_trigger = yes } }
			weight = {
				base = @default_void_being_chance_value
				dark_frenzy_void_creatures_modifier = { MASTER = root }
			}
		}
	}
	
	faith = root.faith
	prowess = {
		min_guest_template_skill max_guest_template_skill
	}
	random_traits_list = {
		education_martial_1 = { weight = { base = 35 } }
		education_martial_2 = { weight = { base = 35 } }
		education_martial_3 = { weight = { base = 20 } }
		education_martial_4 = { weight = { base = 10 } }
	}
	random_traits_list = {
		count = { 0 1 }
		lifestyle_blademaster = {}
		gallant = {}
		brave = {}
		gluttonous = {}
		strong = {}
		athletic = {}
		lifestyle_hunter = {}
	}
	dynasty = none
	after_creation = {
		# Warcraft
		trigger_race_giving_no_gene_effect = yes			#Assigns race trait
		if = {
			limit = { age > age_debug_value }
			debug_log = "pool_repopulate_prowess spawned a character over age borders"
			debug_log_scopes = no
		}


		random = {
			chance = 1
			
			add_trait = poet
			
			modifier = {
				add = 10
				culture = { has_cultural_parameter = poet_trait_more_common }
			}
			modifier = {
				add = 5
				OR = {
					culture = { like_north_germanic_group_trigger = yes }
					like_germanic_religion_trigger = yes
				}
			}
		}
		
		# Cultural Traditions
		if = {
			limit = {
				culture = {
					has_cultural_parameter = winter_soldier_trait_more_common
				}
				NOT = {
					has_trait = winter_soldier
				}
			}
			random = {
				chance = 10
				add_trait = winter_soldier
			}
		}
		if = {
			limit = {
				culture = {
					has_cultural_parameter = forest_fighter_trait_more_common
				}
				NOT = {
					has_trait = forest_fighter
				}
			}
			random = {
				chance = 10
				add_trait = forest_fighter
			}
		}
		if = {
			limit = {
				culture = {
					has_cultural_parameter = rough_terrain_expert_trait_more_common
				}
				NOT = {
					has_trait = rough_terrain_expert
				}
			}
			random = {
				chance = 10
				add_trait = rough_terrain_expert
			}
		}
		if = {
			limit = {
				culture = {
					has_cultural_parameter = desert_warrior_trait_more_common
				}
				NOT = {
					has_trait = desert_warrior
				}
			}
			random = {
				chance = 10
				add_trait = desert_warrior
			}
		}
		if = {
			limit = {
				culture = {
					has_cultural_parameter = jungle_stalker_trait_more_common
				}
				NOT = {
					has_trait = jungle_stalker
				}
			}
			random = {
				chance = 10
				add_trait = jungle_stalker
			}
		}
		#set_interesting_traits_and_modifiers_effect = yes
		add_random_tiered_trait_xp_effect = {
			TRAIT = lifestyle_blademaster
			LEVEL_1 = yes
			LEVEL_3 = yes
		}
		add_random_tiered_trait_track_xp_effect = {
			TRAIT = lifestyle_hunter
			TRACK = hunter
			LEVEL_1 = yes
			LEVEL_3 = no
		}
		# ToTo Hastiluder
		if = {
			limit = { has_dlc_feature = tours_and_tournaments }
			random = {
				chance = 33
				add_trait = tourney_participant
				add_random_tourney_participant_level_effect = yes
			}
		}
	}
}

pool_repopulate_diplomacy = {
	# Warcraft
	age = { 20 40 }
	gender_female_chance = root_faith_dominant_gender_adjusted_female_chance #because chancellor gender is doctrine dependent
	random_traits = yes
	# Warcraft
	random_culture = {
		root.culture = {
			weight = {
				base = 50
			}
		}
		culture:eredar = {
			trigger = { root = { can_get_demonic_courtiers_trigger = yes } }
			weight = {
				base = @default_demon_chance_value
				dark_frenzy_demon_knight_modifier = { MASTER = root }
			}
		}
		culture:nathrezim = {
			trigger = { root = { can_get_demonic_courtiers_trigger = yes } }
			weight = {
				base = @default_demon_chance_value
				dark_frenzy_demon_knight_modifier = { MASTER = root }
			}
		}
		culture:sayaadi = {
			trigger = { root = { can_get_demonic_courtiers_trigger = yes } }
			weight = {
				base = @default_demon_chance_value
				dark_frenzy_demon_knight_modifier = { MASTER = root }
			}
		}
		culture:nraqi = {
			trigger = { root = { can_get_void_courtiers_trigger = yes } }
			weight = {
				base = @default_void_being_chance_value
				dark_frenzy_void_creatures_modifier = { MASTER = root }
			}
		}
	}
	
	#culture = root.culture
	faith = root.faith
	diplomacy = {
		min_guest_template_skill max_guest_template_skill
	}
	random_traits_list = {
		education_diplomacy_1 = { weight = { base = 35 } }
		education_diplomacy_2 = { weight = { base = 35 } }
		education_diplomacy_3 = { weight = { base = 20 } }
		education_diplomacy_4 = { weight = { base = 10 } }
	}
	random_traits_list = {
		count = { 0 1 }
		diplomat = {}
		family_first = {}
		august = {}
		lifestyle_reveler = {}
		generous = {}
		arrogant = {}
		honest = {}
		gregarious = {}
		trusting = {}
		compassionate = {}
		fickle = {}
		forgiving = {}
		poet = {}
		tourney_participant = {}
		lifestyle_traveler = {}
	}
	dynasty = none
	after_creation = {
		# Warcraft
		trigger_race_giving_no_gene_effect = yes			#Assigns race trait
		if = {
			limit = { age > age_debug_value }
			debug_log = "pool_repopulate_diplomacy spawned a character over age borders"
			debug_log_scopes = no
		}

		random = {
			chance = 1
			
			add_trait = poet
			
			modifier = {
				add = 15
				culture = { has_cultural_parameter = poet_trait_more_common }
			}
			modifier = {
				add = 10
				OR = {
					culture = { like_north_germanic_group_trigger = yes }
					like_germanic_religion_trigger = yes
				}
			}
		}
		set_interesting_traits_and_modifiers_effect = yes
		if = {
			limit = { has_trait = lifestyle_reveler }
			add_trait_xp = {
				trait = lifestyle_reveler
				value = {
					integer_range = {
						min = small_lifestyle_random_xp_low
						max = small_lifestyle_random_xp_high
					}
				}
			}
		}
		add_random_tiered_trait_track_xp_effect = {
			TRAIT = tourney_participant
			TRACK = wit
			LEVEL_1 = yes
			LEVEL_3 = no
		}
	}
}

pool_repopulate_martial = {
	# Warcraft
	age = { 30 45 }
	gender_female_chance = root_faith_dominant_gender_adjusted_female_chance #because marshal gender is doctrine dependent
	random_traits = yes
	
	# Warcraft
	random_culture = {
		root.culture = {
			weight = {
				base = 50
			}
		}
		culture:eredar = {
			trigger = { root = { can_get_demonic_courtiers_trigger = yes } }
			weight = {
				base = @default_demon_chance_value
				dark_frenzy_demon_knight_modifier = { MASTER = root }
			}
		}
		culture:annihilan = {
			trigger = { root = { can_get_demonic_courtiers_trigger = yes } }
			weight = {
				base = @default_demon_chance_value
				dark_frenzy_demon_knight_modifier = { MASTER = root }
			}
		}
		culture:eredruin = {
			trigger = { root = { can_get_demonic_courtiers_trigger = yes } }
			weight = {
				base = @default_demon_chance_value
				dark_frenzy_demon_knight_modifier = { MASTER = root }
			}
		}
		culture:shivarra = {
			trigger = { root = { can_get_demonic_courtiers_trigger = yes } }
			weight = {
				base = @default_demon_chance_value
				dark_frenzy_demon_knight_modifier = { MASTER = root }
			}
		}
		culture:nraqi = {
			trigger = { root = { can_get_void_courtiers_trigger = yes } }
			weight = {
				base = @default_void_being_chance_value
				dark_frenzy_void_creatures_modifier = { MASTER = root }
			}
		}
	}
	
	faith = root.faith
	martial = {
		min_guest_template_skill max_guest_template_skill
	}
	random_traits_list = {
		education_martial_1 = { weight = { base = 35 } }
		education_martial_2 = { weight = { base = 35 } }
		education_martial_3 = { weight = { base = 20 } }
		education_martial_4 = { weight = { base = 10 } }
	}
	random_traits_list = {
		count = { 0 1 }
		strategist = {}
		overseer = {}
		wrathful = {}
		zealous = {}
		impatient = {}
		lifestyle_hunter = {}
		tourney_participant = {}
	}
	dynasty = none
	after_creation = {
		# Warcraft
		trigger_race_giving_no_gene_effect = yes			#Assigns race trait
		if = {
			limit = { age > age_debug_value }
			debug_log = "pool_repopulate_martial spawned a character over age borders"
			debug_log_scopes = no
		}
		
		if = {
			limit = {
				OR = {
					culture = { like_north_germanic_group_trigger = yes }
					like_germanic_religion_trigger = yes
				}
			}
			random_list = {
				65 = {}

				# Warcraft
				# 15 = {
					# add_trait = varangian
				# }

				15 = {
					add_trait = berserker
				}
				5 = {
					add_trait = poet
				}
			}
		}
		
		# Cultural Traditions
		if = {
			limit = {
				culture = {
					has_cultural_parameter = poet_trait_more_common
				}
				NOT = {
					has_trait = poet
				}
			}
			random = {
				chance = 10
				add_trait = poet
			}
		}
		if = {
			limit = {
				culture = {
					has_cultural_parameter = winter_soldier_trait_more_common
				}
				NOT = {
					has_trait = winter_soldier
				}
			}
			random = {
				chance = 10
				add_trait = winter_soldier
			}
		}
		if = {
			limit = {
				culture = {
					has_cultural_parameter = forest_fighter_trait_more_common
				}
				NOT = {
					has_trait = forest_fighter
				}
			}
			random = {
				chance = 10
				add_trait = forest_fighter
			}
		}
		if = {
			limit = {
				culture = {
					has_cultural_parameter = rough_terrain_expert_trait_more_common
				}
				NOT = {
					has_trait = rough_terrain_expert
				}
			}
			random = {
				chance = 10
				add_trait = rough_terrain_expert
			}
		}
		if = {
			limit = {
				culture = {
					has_cultural_parameter = desert_warrior_trait_more_common
				}
				NOT = {
					has_trait = desert_warrior
				}
			}
			random = {
				chance = 10
				add_trait = desert_warrior
			}
		}
		if = {
			limit = {
				culture = {
					has_cultural_parameter = jungle_stalker_trait_more_common
				}
				NOT = {
					has_trait = jungle_stalker
				}
			}
			random = {
				chance = 10
				add_trait = jungle_stalker
			}
		}
		set_interesting_traits_and_modifiers_effect = yes
		add_random_tiered_trait_track_xp_effect = {
			TRAIT = lifestyle_hunter
			TRACK = hunter
			LEVEL_1 = yes
			LEVEL_3 = no
		}
		add_random_tiered_trait_track_xp_effect = {
			TRAIT = tourney_participant
			TRACK = wit
			LEVEL_1 = yes
			LEVEL_3 = no
		}
	}
}

pool_repopulate_stewardship = {
	# Warcraft
	age = { 20 40 }
	gender_female_chance = root_faith_dominant_gender_adjusted_female_chance #because steward gender is doctrine dependent
	random_traits = yes
	
	# Warcraft
	random_culture = {
		root.culture = {
			weight = {
				base = 50
			}
		}
		culture:eredar = {
			trigger = { root = { can_get_demonic_courtiers_trigger = yes } }
			weight = {
				base = @default_demon_chance_value
				dark_frenzy_demon_knight_modifier = { MASTER = root }
			}
		}
		culture:observer = {
			trigger = { root = { can_get_demonic_courtiers_trigger = yes } }
			weight = {
				base = @default_demon_chance_value
				dark_frenzy_demon_knight_modifier = { MASTER = root }
			}
		}
		culture:nraqi = {
			trigger = { root = { can_get_void_courtiers_trigger = yes } }
			weight = {
				base = @default_void_being_chance_value
				dark_frenzy_void_creatures_modifier = { MASTER = root }
			}
		}
	}
	
	faith = root.faith
	stewardship = {
		min_guest_template_skill max_guest_template_skill
	}
	random_traits_list = {
		education_stewardship_1 = { weight = { base = 35 } }
		education_stewardship_2 = { weight = { base = 35 } }
		education_stewardship_3 = { weight = { base = 20 } }
		education_stewardship_4 = { weight = { base = 10 } }
	}
	random_traits_list = {
		count = { 0 1 }
		architect = {}
		administrator = {}
		avaricious = {}
		temperate = {}
		greedy = {}
		just = {}
		stubborn = {}
		ambitious = {}
	}
	dynasty = none
	after_creation = {
		# Warcraft
		trigger_race_giving_no_gene_effect = yes			#Assigns race trait
		if = {
			limit = { age > age_debug_value }
			debug_log = "pool_repopulate_stewardship spawned a character over age borders"
			debug_log_scopes = no
		}
		
		random = {
			chance = 1
			
			add_trait = poet
			
			modifier = {
				add = 10
				culture = { has_cultural_parameter = poet_trait_more_common }
			}
			modifier = {
				add = 5
				OR = {
					culture = { like_north_germanic_group_trigger = yes }
					like_germanic_religion_trigger = yes
				}
			}
		}
		set_interesting_traits_and_modifiers_effect = yes
	}
}

pool_repopulate_intrigue = {
	# Warcraft
	age = { 25 40 }
	random_traits = yes
	gender_female_chance = 50 #No gender blocks for spymaster
	
	# Warcraft
	random_culture = {
		root.culture = {
			weight = {
				base = 50
			}
		}
		culture:eredar = {
			trigger = { root = { can_get_demonic_courtiers_trigger = yes } }
			weight = {
				base = @default_demon_chance_value
				dark_frenzy_demon_knight_modifier = { MASTER = root }
			}
		}
		culture:nathrezim = {
			trigger = { root = { can_get_demonic_courtiers_trigger = yes } }
			weight = {
				base = @default_demon_chance_value
				dark_frenzy_demon_knight_modifier = { MASTER = root }
			}
		}
		culture:observer = {
			trigger = { root = { can_get_demonic_courtiers_trigger = yes } }
			weight = {
				base = @default_demon_chance_value
				dark_frenzy_demon_knight_modifier = { MASTER = root }
			}
		}
		culture:sayaadi = {
			trigger = { root = { can_get_demonic_courtiers_trigger = yes } }
			weight = {
				base = @default_demon_chance_value
				dark_frenzy_demon_knight_modifier = { MASTER = root }
			}
		}
		culture:nraqi = {
			trigger = { root = { can_get_void_courtiers_trigger = yes } }
			weight = {
				base = @default_void_being_chance_value
				dark_frenzy_void_creatures_modifier = { MASTER = root }
			}
		}
	}
	
	faith = root.faith
	intrigue = {
		min_guest_template_skill max_guest_template_skill
	}
	random_traits_list = {
		education_intrigue_1 = { weight = { base = 35 } }
		education_intrigue_2 = { weight = { base = 35 } }
		education_intrigue_3 = { weight = { base = 20 } }
		education_intrigue_4 = { weight = { base = 10 } }
	}
	random_traits_list = {
		count = { 0 1 }
		schemer = {}
		seducer = {}
		torturer = {}
		deceitful = {}
		lustful = {}
		calm = {}
		arbitrary = {}
		paranoid = {}
		callous = {}
		sadistic = {}
		vengeful = {}
		craven = {}
	}
	dynasty = none
	after_creation = {
		# Warcraft
		trigger_race_giving_no_gene_effect = yes			#Assigns race trait
		if = {
			limit = { age > age_debug_value }
			debug_log = "pool_repopulate_intrigue spawned a character over age borders"
			debug_log_scopes = no
		}
		
		random = {
			chance = 1
			
			add_trait = poet
			
			modifier = {
				add = 10
				culture = { has_cultural_parameter = poet_trait_more_common }
			}
			modifier = {
				add = 5
				OR = {
					culture = { like_north_germanic_group_trigger = yes }
					like_germanic_religion_trigger = yes
				}
			}
		}
	}
}

pool_repopulate_learning = {
	# Warcraft
	age = { 25 60 }
	gender_female_chance = 50 #No gender blocks for physicians
	random_traits = yes
	
	# Warcraft
	random_culture = {
		root.culture = {
			weight = {
				base = 50
			}
		}
		culture:eredar = {
			trigger = { root = { can_get_demonic_courtiers_trigger = yes } }
			weight = {
				base = @default_demon_chance_value
				dark_frenzy_demon_knight_modifier = { MASTER = root }
			}
		}
		culture:nathrezim = {
			trigger = { root = { can_get_demonic_courtiers_trigger = yes } }
			weight = {
				base = @default_demon_chance_value
				dark_frenzy_demon_knight_modifier = { MASTER = root }
			}
		}
		culture:observer = {
			trigger = { root = { can_get_demonic_courtiers_trigger = yes } }
			weight = {
				base = @default_demon_chance_value
				dark_frenzy_demon_knight_modifier = { MASTER = root }
			}
		}
		culture:nraqi = {
			trigger = { root = { can_get_void_courtiers_trigger = yes } }
			weight = {
				base = @default_void_being_chance_value
				dark_frenzy_void_creatures_modifier = { MASTER = root }
			}
		}
	}
	
	faith = root.faith
	learning = {
		min_guest_template_skill max_guest_template_skill
	}
	random_traits_list = {
		education_learning_1 = { weight = { base = 35 } }
		education_learning_2 = { weight = { base = 35 } }
		education_learning_3 = { weight = { base = 20 } }
		education_learning_4 = { weight = { base = 10 } }
	}
	random_traits_list = {
		count = { 0 1 }
		scholar = {}
		theologian = {}
		whole_of_body = {}
		lifestyle_physician = {}
		lifestyle_mystic = {}
		lifestyle_herbalist = {}
		chaste = {}
		diligent = {}
		patient = {}
		humble = {}
		shy = {}
		content = {}
		cynical = {}
		lazy = {}
	}
	dynasty = none
	after_creation = {
		# Warcraft
		trigger_race_giving_no_gene_effect = yes			#Assigns race trait
		if = {
			limit = { age > age_debug_value }
			debug_log = "pool_repopulate_learning spawned a character over age borders"
			debug_log_scopes = no
		}
		
		if = {
			limit = {
				faith = {
					has_doctrine = tenet_monasticism
				}
			}
			random_list = {
				75 = {}
				25 = {
					add_trait = devoted
				}
			}
		}
		random = {
			chance = 1
			
			add_trait = poet
			
			modifier = {
				add = 10
				culture = { has_cultural_parameter = poet_trait_more_common }
			}
			modifier = {
				add = 5
				OR = {
					culture = { like_north_germanic_group_trigger = yes }
					like_germanic_religion_trigger = yes
				}
			}
		}
		set_interesting_traits_and_modifiers_effect = yes
		add_random_tiered_trait_xp_effect = {
			TRAIT = lifestyle_physician
			LEVEL_1 = yes
			LEVEL_3 = yes
		}
		add_random_tiered_trait_xp_effect = {
			TRAIT = lifestyle_mystic
			LEVEL_1 = yes
			LEVEL_3 = no
		}
	}
}


pool_repopulate_spouse = {
	gender_female_chance = root.marriage_gender_adjusted_female_chance
	age = { 16 26 }
	random_traits = yes
	culture = root.culture
	faith = root.faith
	random_traits_list = {
		education_diplomacy_1 = { weight = { base = 35 } }
		education_diplomacy_2 = { weight = { base = 35 } }
		education_diplomacy_3 = { weight = { base = 20 } }
		education_diplomacy_4 = { weight = { base = 10 } }
		education_martial_1 = {
			weight = {
				base = 35
				modifier = { # Less common with martial education if character can't be combatant because of gender
					factor = 0.3
					trigger_if = {
						limit = { root = { is_female = yes } }
						dummy_male = { NOT = { can_be_combatant_based_on_gender_trigger = { ARMY_OWNER = root } } }
					}
					trigger_else = {
						dummy_female = { NOT = { can_be_combatant_based_on_gender_trigger = { ARMY_OWNER = root } } }
					}
				}
			}
		}
		education_martial_2 = {
			weight = {
				base = 35
				modifier = { # Less common with martial education if character can't be combatant because of gender
					factor = 0.3
					trigger_if = {
						limit = { root = { is_female = yes } }
						dummy_male = { NOT = { can_be_combatant_based_on_gender_trigger = { ARMY_OWNER = root } } }
					}
					trigger_else = {
						dummy_female = { NOT = { can_be_combatant_based_on_gender_trigger = { ARMY_OWNER = root } } }
					}
				}
			}
		}
		education_martial_3 = {
			weight = {
				base = 20
				modifier = { # Less common with martial education if character can't be combatant because of gender
					factor = 0.3
					trigger_if = {
						limit = { root = { is_female = yes } }
						dummy_male = { NOT = { can_be_combatant_based_on_gender_trigger = { ARMY_OWNER = root } } }
					}
					trigger_else = {
						dummy_female = { NOT = { can_be_combatant_based_on_gender_trigger = { ARMY_OWNER = root } } }
					}
				}
			}
		}
		education_martial_4 = {
			weight = {
				base = 10
				modifier = { # Less common with martial education if character can't be combatant because of gender
					factor = 0.3
					trigger_if = {
						limit = { root = { is_female = yes } }
						dummy_male = { NOT = { can_be_combatant_based_on_gender_trigger = { ARMY_OWNER = root } } }
					}
					trigger_else = {
						dummy_female = { NOT = { can_be_combatant_based_on_gender_trigger = { ARMY_OWNER = root } } }
					}
				}
			}
		}
		education_stewardship_1 = { weight = { base = 35 } }
		education_stewardship_2 = { weight = { base = 35 } }
		education_stewardship_3 = { weight = { base = 20 } }
		education_stewardship_4 = { weight = { base = 10 } }
		education_intrigue_1 = { weight = { base = 35 } }
		education_intrigue_2 = { weight = { base = 35 } }
		education_intrigue_3 = { weight = { base = 20 } }
		education_intrigue_4 = { weight = { base = 10 } }
		education_learning_1 = { weight = { base = 35 } }
		education_learning_2 = { weight = { base = 35 } }
		education_learning_3 = { weight = { base = 20 } }
		education_learning_4 = { weight = { base = 10 } }
	}
	random_traits_list = {
		count = { 0 1 }
		diplomat = {}
		strategist = {}
		architect = {}
		schemer = {}
		scholar = {}
		whole_of_body = {}
		fecund = {}
		intellect_good_1 = {}
		physique_good_1 = {}
		beauty_good_1 = {}

		# Warcraft
		magic_good_1 = {}

	}
	dynasty = none
	after_creation = {
		# Warcraft
		trigger_race_giving_no_gene_effect = yes			#Assigns race trait
		if = {
			limit = { age > age_debug_value }
			debug_log = "pool_repopulate_spouse spawned a character over age borders"
			debug_log_scopes = no
		}
		
		random = {
			chance = 1
			
			add_trait = poet
			
			modifier = {
				add = 10
				culture = { has_cultural_parameter = poet_trait_more_common }
			}
			modifier = {
				add = 5
				OR = {
					culture = { like_north_germanic_group_trigger = yes }
					like_germanic_religion_trigger = yes
				}
			}
		}
		set_interesting_traits_and_modifiers_effect = yes
	}
}

pool_repopulate_local_flavor = {
	# Warcraft
	age = { 25 45 }
	gender_female_chance = root_faith_dominant_gender_adjusted_female_chance #because council gender is doctrine dependent
	random_traits = yes

	# Warcraft
	culture = root.culture

	faith = root.faith
	
	# Warcraft
	
	learning = {
		min_guest_template_skill max_guest_template_skill
	}
	
	stewardship = {
		min_guest_template_skill max_guest_template_skill
	}
	
	diplomacy = {
		min_guest_template_skill max_guest_template_skill
	}
	
	random_traits_list = {
		education_learning_3 = { weight = { base = 10 } }
		education_learning_4 = { weight = { base = 20 } }
		education_stewardship_3 = { weight = { base = 5 } }
		education_stewardship_4 = { weight = { base = 10 } }
		education_diplomacy_3 = { weight = { base = 10 } }
		education_diplomacy_4 = { weight = { base = 20 } }
	}
	random_traits_list = {
		scholar = {}
		theologian = {}
		lifestyle_physician = {}
		lifestyle_mystic = {}
		lifestyle_herbalist = {}
		administrator = {}
		architect = {}
		diplomat = {}
		lifestyle_hunter = {}
	}
	dynasty = none
	
	after_creation = {
		# Warcraft
		trigger_race_giving_no_gene_effect = yes			#Assigns race trait
		if = {
			limit = { age > age_debug_value }
			debug_log = "pool_repopulate_local_flavor spawned a character over age borders"
			debug_log_scopes = no
		}

		if = {
			limit = {
				religion = { like_pagan_religion_trigger = yes }
			}
			random_list = {
				10 = {
					add_trait = one_eyed
				}
				10 = {
					add_trait = albino
				}
				10 = {
					trigger = { scaly_possible_trigger = yes }
					add_trait = scaly
				}
				10 = {
					add_trait = torturer
				}
				10 = {
					add_trait = whole_of_body
				}
				10 = {
					add_trait = flagellant
				}
				10 = {
					add_trait = scarred
				}
				10 = {
					add_trait = blind
				}
				10 = {
					add_trait = shrewd
				}
				10 = {
					add_trait = strong
				}
				10 = {
					add_trait = giant
				}
				
				# Warcraft
				10 = {
					trigger = { dire_possible_trigger = yes }
					add_trait = dire
				}
				
				10 = {
					add_trait = poet
				}
				450 = {
					trigger = {
						NOT = {
							trait_is_criminal_in_faith_trigger = { TRAIT = witch FAITH = this.faith GENDER_CHARACTER = this }
						}
					}
					add_trait = witch
				}
				150 = {
					trigger = {
						faith = {
							# Warcraft
							has_doctrine_tenet_warmonger_trigger = yes
						}
						OR = {
							culture = { like_north_germanic_group_trigger = yes }
							like_germanic_religion_trigger = yes
						}
						NOR = {
							has_trait = craven
							has_trait = berserker
							has_trait = calm
						}
					}
					add_trait = berserker
				}
			}
		}
		
		# Warcraft
		# Learn flavorful & appropriate languages
		
		if = { # Guaranteed warriors
			limit = {
				# Warcraft
				has_warrior_culture_or_religion_trigger = yes
			}
			remove_trait = education_learning_3
			remove_trait = education_learning_4
			remove_trait = education_stewardship_3
			remove_trait = education_stewardship_4
			remove_trait = education_diplomacy_3
			remove_trait = education_diplomacy_4
			remove_trait = lifestyle_physician
			remove_trait = lifestyle_mystic
			remove_trait = theologian
			remove_trait = lifestyle_herbalist
			remove_trait = diplomat
			remove_trait = administrator
			remove_trait = architect
			remove_trait = scholar
			add_martial_skill = 4
			add_prowess_skill = 6
			random_list = {
				50 = {
					add_trait = education_martial_3
				}
				50 = {
					add_trait = education_martial_4
				}
			}
			random_list = {
				10 = {
					add_trait = strategist
				}
				30 = {
					add_trait = lifestyle_blademaster
					add_random_tiered_trait_xp_effect = {
						TRAIT = lifestyle_blademaster
						LEVEL_1 = yes
						LEVEL_3 = yes
					}
				}
				10 = {
					add_trait = tourney_participant
					add_random_tiered_trait_track_xp_effect = {
						TRAIT = tourney_participant
						TRACK = bow
						LEVEL_1 = yes
						LEVEL_3 = yes
					}
				}
				10 = {
					add_trait = overseer
				}
			}
			give_random_commander_trait_effect = yes
		}
		set_interesting_traits_and_modifiers_effect = yes
		add_random_tiered_trait_xp_effect = {
			TRAIT = lifestyle_physician
			LEVEL_1 = yes
			LEVEL_3 = yes
		}
		add_random_tiered_trait_xp_effect = {
			TRAIT = lifestyle_mystic
			LEVEL_1 = yes
			LEVEL_3 = no
		}
		add_random_tiered_trait_track_xp_effect = {
			TRAIT = lifestyle_hunter
			TRACK = hunter
			LEVEL_1 = yes
			LEVEL_3 = no
		}
	}
}
