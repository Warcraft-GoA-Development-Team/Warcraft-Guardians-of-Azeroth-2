# On actions for army events, triggered automatically by the game

# called for armies every 30 days; exact date dependent on army ID
# root is the owner of the army
# scope:army is the army

on_army_monthly = {
	events = {
	}
	effect = {
		scope:army ?= {
			if = {
				limit = {
					exists = army_commander
					NOT = { has_variable = commander_death_events_pulse_cooldown }
				}
				set_variable = {
					name = commander_death_events_pulse_cooldown
					value = yes
					days = 365
				}
				army_commander = {
					trigger_event = { on_action = commander_death_events_pulse }
				}
			}
		}
	}
}

# called when a county is (fully) occupied. Does not fire on reoccupation by province owner
# root is the occupant
# scope:county is the county title
# scope:barony is the barony title that got occupied
# scope:previous_controller is the previous controller of the county
# scope:war is the war causing the previous controller and the occupant to be hostile
on_county_occupied = {
	effect = {
		# Warcraft
		if = {
			limit = { government_has_flag = government_dark_frenzy_from_sieges_and_raids }
			send_interface_message = {
				type = msg_event_dark_frenzy_good
				title = msg_dark_frenzy_from_siege
				change_dark_frenzy_effect = { VALUE = dark_frenzy_from_siege_value }
			}
		}
		if = {
			limit = { scope:county = title:c_dark_portal }
			trigger_event = WCDRA.3
		}
		
		scope:county = {
			if = {
				limit = {
					holder = {
						NOT = { has_perk = enduring_hardships_perk }
					}
				}
				change_county_control = county_control_loss_value
				random_list = {
					25 = {
						change_development_progress_with_overflow = -10
					}
					25 = {
						change_development_progress_with_overflow = -15
					}
					25 = {
						change_development_progress_with_overflow = -20
					}
					25 = {
						change_development_progress_with_overflow = -25
					}
				}
			}
			if = {			#used by hold_court.6000
				limit = {
					holder.top_liege = {
						is_ai = no
					}
				}
				scope:barony.holder = {
					add_character_flag = {
						flag = recently_occupied_flag
						days = 720
					}
				}
			}
		}

		# Warcraft
		# Mongol Devastation
	}
}

# called when a siege completes. Does *not* fire on reoccupation by province order
# root is the occupant
# scope:barony is the barony title that got occupied
# scope:county is the county title for the barony
# scope:previous_controller is the previous controller of the county
# scope:war is the war causing the previous controller and the occupant to be hostile
# occupied_baronies is a list of all baronies that the siege caused the occupier to control (I.E., can include baronies with no fort level)
on_siege_completion = {
	events = {
		siege.0101 # Notify holders/lieges that the county was lost to siege
		siege.0001 # Capture/kill prisoners
		siege.0031 # Chance to steal an artifact
		faction_demand.1010 #Reinforce populist rebels
		faction_demand.1110 #Reinforce peasant rebels
		siege.1001 #Someone I care about was immured here...
		intrigue_scheming.1804 # I had genuine/fake info about the defenses. Follows up intrigue_scheming.1801 so this won't actually trigger after every siege
	}
	#effect = {
	#	save_scope_as = occupant
	#	scope:barony = {
	#		if = {
	#			limit = { title_province = holder.capital_province }
	#			holder = {
	#				random = {
	#					chance = 50
	#					trigger_event = fp3_decision.0002 #FP3 Event to possibly lose your royal fire
	#				}
	#			}
	#		}
	#	}
	#}
}

# Called when a siege loots a holding
# root is sieging character
# scope:barony is the barony title that got looted
# scope:county is the county title for the barony
# scope:previous_controller is the previous controller
on_siege_looting = {
}

# called for armies whenever they enter a province
# root is the owner of the army
# scope:army is the army

on_army_enter_province = {
	events = {
		great_holy_war.0060 #Give Crusaders their trait upon reaching the holy land.
	}
	random_events = {
		chance_of_no_event = 97
		100 = bp2_yearly.4030 # Winter province event
		1 = epidemic_events.1120 # Corpse catapult event
	}
	effect = {
		# Warcraft
		# Blizzard Spell
		if = {
			limit = {
				exists = scope:army.location.county
				scope:army.location.county = {
					has_county_modifier = wc_blizzard_county_modifier
				}
			}

			scope:army.army_commander = {
				apply_character_blizzard_effect = yes
			}

			scope:army.army_owner = {
				every_knight = {
					limit = {
						exists = knight_army
						knight_army = scope:army
					}
					apply_character_blizzard_effect = yes
				}
			}
		}
		else_if = {
			limit = {
				exists = scope:army.location.county
				OR = {
					AND = {
						exists = scope:army.army_commander
						scope:army.army_commander = {
							has_character_modifier = wc_blizzard_character_modifier
						}
					}
					has_character_modifier = wc_blizzard_character_modifier
				}
			}

			scope:army.army_commander = {
				remove_character_modifier = wc_blizzard_character_modifier
			}

			scope:army.army_owner = {
				every_knight = {
					limit = {
						exists = knight_army
						knight_army = scope:army
					}
				}
				remove_character_modifier = wc_blizzard_character_modifier
			}
		}
		# Evocation Ritual
		if = {
			limit = {
				exists = scope:army.location
				scope:army.location = {
					has_province_modifier = wc_evocation_province_modifier
				}
			}

			scope:army.army_commander = {
				apply_character_evocation_effect = yes
			}

			scope:army.army_owner = {
				every_knight = {
					limit = {
						exists = knight_army
						knight_army = scope:army
					}
					apply_character_evocation_effect = yes
				}
			}
		}
		else_if = {
			limit = {
				exists = scope:army.location
				OR = {
					AND = {
						exists = scope:army.army_commander
						scope:army.army_commander = {
							has_character_modifier = wc_evocation_character_modifier
						}
					}
					has_character_modifier = wc_evocation_character_modifier
				}
			}

			scope:army.army_commander = {
				remove_character_modifier = wc_evocation_character_modifier
			}

			scope:army.army_owner = {
				every_knight = {
					limit = {
						exists = knight_army
						knight_army = scope:army
					}
				}
				remove_character_modifier = wc_evocation_character_modifier
			}
		}
		# Arcane Dome
		if = {
			limit = {
				exists = scope:army.location.county
				scope:army.location.county = {
					has_county_modifier = wc_arcane_dome_county_modifier
				}

				NOR = {
					any_ally = {
						any_army = {
							army_commander = scope:army.army_commander
						}
					}
					any_war_ally = {
						any_army = {
							army_commander = scope:army.army_commander
						}
					}
					scope:army.army_commander = { target_is_liege_or_above = scope:army.location.county.holder }
					scope:army.army_commander = { target_is_vassal_or_below = scope:army.location.county.holder }
					scope:army.army_commander = scope:army.location.county.holder
					scope:army.army_owner = { target_is_liege_or_above = scope:army.location.county.holder }
					scope:army.army_owner = { target_is_vassal_or_below = scope:army.location.county.holder }
					scope:army.army_owner = scope:army.location.county.holder
				}
			}

			scope:army.army_commander = {
				apply_character_arcane_dome_effect = yes
			}
		}
		else_if = {
			limit = {
				exists = scope:army.location.county
				OR = {
					AND = {
						exists = scope:army.army_commander
						scope:army.army_commander = {
							has_character_modifier = wc_arcane_dome_character_modifier
						}
					}
					has_character_modifier = wc_arcane_dome_character_modifier
				}
			}

			scope:army.army_commander = {
				remove_character_arcane_dome_effect = yes
			}
		}
		# End Warcraft
	}
}

# Called when a raid action starts
# root is the raid army
# scope:raider is the person owning the raid army
# scope:barony is the barony title that got raided
# scope:county is the county title for the barony
on_raid_action_start = {
	events = {
		fp1_trade_events.0001	# A fearsome target causes scope:raider to reconsider their intent.
	}
	effect = { # The target isn't too keen on the raider...
		scope:barony.holder = {
			if = {
				limit = {
					has_opinion_modifier = {
						target = scope:raider
						modifier = raided_me_opinion
					}
				}
				remove_opinion = { # We reapply it so that the counter is reset
					target = scope:raider
					modifier = raided_me_opinion
				}
			}
			add_opinion = {
				target = scope:raider
				modifier = raided_me_opinion
			}
			every_liege_or_above = {
				if = {
					limit = {
						has_opinion_modifier = {
							target = scope:raider
							modifier = raided_me_opinion
						}
					}
					remove_opinion = { # We reapply it so that the counter is reset
						target = scope:raider
						modifier = raided_me_opinion
					}
				}
				add_opinion = {
					target = scope:raider
					modifier = raided_me_opinion
				}
			}
		}
	}
	random_events = {
		100 = fp1_yearly.0692	# FP1 - setup event for one of your knights converting to a reformed faith.
	}
}

# Called when a raid action finishes
# root is the raid army
# scope:raider is the person owning the raid army
# scope:barony is the barony title that got raided
# scope:county is the county title for the barony
on_raid_action_completion = {
	events = {
		raiding.0001 # An independent liege personally raids a county capital.
		raiding.0021 # Adjust raider completion tally.
		raiding.0022 # Chance to fire viking/raider acquisition event
		raiding.0013 # Chance to kidnap prisoners
		raiding.0014 # Chance to steal an artifact
		bp2_yearly.8031 # Steal a doll
	}
	effect = {
		scope:raider = {
			if = {
				limit = { government_has_flag = government_dark_frenzy_from_sieges_and_raids }
				send_interface_message = {
					type = msg_event_dark_frenzy_good
					title = msg_dark_frenzy_from_raid
					change_dark_frenzy_effect = { VALUE = dark_frenzy_from_raid_value }
				}
			}
		}
		scope:barony.title_province = {
			add_province_modifier = {
				modifier = recently_looted_modifier
				years = 5
			}
			county = {
				if = {
					limit = {
						holder = {
							NOT = { has_perk = enduring_hardships_perk }
						}
					}
					change_county_control = raid_county_control_loss_value
					random_list = {
						25 = {
							change_development_progress_with_overflow = -2
						}
						25 = {
							change_development_progress_with_overflow = -3
						}
						25 = {
							change_development_progress_with_overflow = -4
						}
						25 = {
							change_development_progress_with_overflow = -5
						}
					}
				}
			}
		}

		## Struggles - Warcraft: removed 1.12.1
	}
}

# Called every 7 days during a raid action (except if the raid is stalled due to combat). First call might be anywhere from 1 to 7 days after the raid action begins
# root is the raid army
# scope:raider is the person owning the raid army
# scope:barony is the barony title that got raided
# scope:county is the county title for the barony
on_raid_action_weekly = {
}

# Called when a raider returns to their own territory and deposits loot
# Use root.raid_loot to see how much was deposited
# root is the raid army
# scope:raider is the person owning the raid army
on_raid_loot_delivered = {
	effect = {
		# If the ruler led their own army, flag that for events.
		if = {
			limit = { army_commander = scope:raider }
			scope:raider = {
				add_character_flag = {
					flag = has_recently_performed_raid
					years = 3
				}
			}
		}
	}
	events = {
		raiding.0011 # Loot delivered notification.
	}
	random_events = {
		chance_to_happen = 25
		200 = 0

		100 = fp1_yearly.0622	# FP1 - setup event for a child demanding some of your loot.
		100 = fp1_yearly.0632	# FP1 - setup event for noticing a cynical knight refuse to sacrifice.
	}
}

# Called when a raid army is defeated in battle and gets its loot (if any) stolen
# Use root.raid_loot to see how they're carrying
# root is the raid army
# scope:raider is the person owning the raid army
# scope:receiver is the person getting the raid loot
on_defeat_raid_army = {
	events = {
		raiding.0012 # Defending army take raider loot notifications.
	}
}
