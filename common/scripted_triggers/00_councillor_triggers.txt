

###TRIGGER LIST

# councillor_loyalty_trigger

#Spouse councillor:
#


#TRIGGERS

can_be_councillor_basics_trigger = {
	is_capable_adult = yes
	is_imprisoned = no
	is_at_war_with_liege = no
	trigger_if = {
		limit = { has_variable = block_hire_councillor }
		NOT = { var:block_hire_councillor = liege }
	}
}

can_be_chancellor_trigger = {
	can_be_councillor_basics_trigger = yes
	NOT = { has_council_position = councillor_spouse }
	OR = {
		is_ruler = yes
		AND = {
			is_female = yes
			$COURT_OWNER$.faith = { NOT = { has_doctrine_parameter = male_dominated_council } }
		}
		AND = {
			is_male = yes
			$COURT_OWNER$.faith = { NOT = { has_doctrine_parameter = female_dominated_council } }
		}
		
		# Exception so Katrana Prestor can be councilor
		this = character:58050
	}
}

can_be_steward_trigger = {
	can_be_councillor_basics_trigger = yes
	NOT = { has_council_position = councillor_spouse }
	OR = {
		is_ruler = yes
		AND = {
			is_female = yes
			$COURT_OWNER$.faith = { NOT = { has_doctrine_parameter = male_dominated_council } }
		}
		AND = {
			is_male = yes
			$COURT_OWNER$.faith = { NOT = { has_doctrine_parameter = female_dominated_council } }
		}
		
		# Exception so Katrana Prestor can be councilor
		this = character:58050
	}
}

can_be_marshal_trigger = {
	can_be_councillor_basics_trigger = yes
	NOT = { has_council_position = councillor_spouse }
	OR = {
		is_ruler = yes
		AND = {
			is_female = yes
			$COURT_OWNER$.faith = { NOT = { has_doctrine_parameter = male_dominated_council } }
		}
		AND = {
			is_male = yes
			$COURT_OWNER$.faith = { NOT = { has_doctrine_parameter = female_dominated_council } }
		}
		AND = {
			has_trait = shieldmaiden
			$COURT_OWNER$.culture = { has_cultural_parameter = has_access_to_shieldmaidens }
		}
	}
}

can_be_spymaster_trigger = {
	can_be_councillor_basics_trigger = yes
	NOT = { has_council_position = councillor_spouse }
	exists = $COURT_OWNER$ #so we can have the argument but get no errors
}

can_be_court_chaplain_trigger = {
	save_temporary_scope_as = court_chaplain_check
	can_be_councillor_basics_trigger = yes
	NOT = { has_council_position = councillor_spouse }
	$COURT_OWNER$.faith = { has_allowed_gender_for_clergy = scope:court_chaplain_check }
	faith = $COURT_OWNER$.faith
	trigger_if = {
		limit = {
			faith = { has_doctrine = doctrine_theocracy_temporal }
		}
		OR = {
			is_ruler = no
			has_government = theocracy_government
		}
	}
	trigger_if = {
		limit = {
			exists = var:escaped_imprisonment_from
		}
		NOT = { var:escaped_imprisonment_from = $COURT_OWNER$ }
	}
	trigger_if = { # An excommunicated ruler tolerate excommunicated bishops
		limit = {
			$COURT_OWNER$ = { NOT = { has_trait = excommunicated } }
		}
		NOT = { has_trait = excommunicated }
	}
}

can_be_spouse_councillor_trigger = {
	save_temporary_scope_as = spouse_councillor_check
	can_be_councillor_basics_trigger = yes
	trigger_if = {
		limit = { is_ruler = yes }
		exists = liege
		liege = $COUNCIL_OWNER$
		$COUNCIL_OWNER$ = { primary_spouse = scope:spouse_councillor_check }
	}
	trigger_else = {
		exists = $COUNCIL_OWNER$
		$COUNCIL_OWNER$ = { primary_spouse = scope:spouse_councillor_check }
	}
}


councillor_loyalty_trigger = {
	weighted_calc_true_if = {
		amount >= 50
		20 = {
			NOT = { has_trait = ambitious }
		}
		20 = {
			opinion = {
				target = liege
				value > 0
			}
		}
		20 = {
			opinion = {
				target = liege
				value > 20
			}
		}
		20 = {
			opinion = {
				target = liege
				value > 40
			}
		}
		20 = {
			opinion = {
				target = liege
				value > 60
			}
		}
	}
}


councillor_positive_event_opinion_trigger = {
	always = yes
#	opinion = {
#		target = liege
#		value >= -20
#	}
}

############################
#SPOUSE COUNCILLOR TRIGGERS#
############################

valid_spouse_councillor_trigger = {
	exists = cp:councillor_spouse
	scope:councillor = { is_alive = yes }
	cp:councillor_spouse = scope:councillor
}

is_blocked_from_being_fired_from_council_trigger = {
	custom_description = {
		text = "is_blocked_from_being_fired_from_council"
		subject = this
		object = $COURT_OWNER$
		
		OR = {
			# Check in code if the court owner is prevented from firing the councilor
			# can_fire_position must take a council task as input, but checks the councilor behind the task.
			AND = {
				exists = this.council_task
				this.council_task = { can_fire_position = no }
			}
			# Check for variable preventing the firing of a councilor set by script
			AND = {
				has_variable = block_fire_councillor
				var:block_fire_councillor = $COURT_OWNER$
			}
		}
	}
}


can_be_fired_from_council_trigger = {
	NOT = {
		is_blocked_from_being_fired_from_council_trigger = { COURT_OWNER = $COURT_OWNER$ }
	}
	trigger_if = {
		limit = {
			has_council_position = councillor_court_chaplain
		}
		faith = {
			OR = {
				has_doctrine = doctrine_clerical_succession_temporal_appointment
				has_doctrine = doctrine_clerical_succession_spiritual_appointment
			}
		}
	}
}


#Faith/culture triggers
same_faith_or_culture_as_councillor_trigger = {
	OR = {
		culture = scope:councillor.culture
		faith = scope:councillor.faith
	}
}

different_faith_and_or_culture_from_councillor_trigger = {
	OR = {
		NOT = { culture = scope:councillor.culture }
		NOT = { faith = scope:councillor.faith }
	}
}

character_same_faith_as_councillor_but_different_from_root_trigger = {
	faith = scope:councillor.faith
	NOT = { faith = root.faith }
}

character_same_culture_as_councillor_but_different_from_root_trigger = {
	culture = scope:councillor.culture
	NOT = { culture = root.culture }
}


character_same_faith_or_culture_as_councillor_but_different_from_root_trigger = {
	OR = {
		character_same_faith_as_councillor_but_different_from_root_trigger = yes
		character_same_culture_as_councillor_but_different_from_root_trigger = yes
	}
}

character_different_culture_than_councillor_and_root_trigger = {
	NOR = {
		culture = scope:councillor.culture
		culture = root.culture
	}
}

character_different_faith_than_councillor_and_root_trigger = {
	NOR = {
		faith = scope:councillor.faith
		faith = root.faith
	}
}

character_different_faith_or_culture_than_councillor_and_root_trigger = {
	OR = {
		character_different_culture_than_councillor_and_root_trigger = yes
		character_different_faith_than_councillor_and_root_trigger = yes
	}
}

province_same_faith_or_culture_as_councillor_but_different_from_root_trigger = {
	OR = {
		AND = {
			culture = scope:councillor.culture
			NOT = { culture = root.culture }
		}
		AND = {
			faith = scope:councillor.faith
			NOT = { faith = root.faith }
		}
	}
}
#End of faith/culture triggers


#Councillor Spouse threshold triggers

#Intrigue
spouse_intrigue_tier_1_trigger = {
	scope:councillor = {
		OR = {
			has_character_modifier = councillor_spouse_intrigue_2_modifier
			has_character_modifier = councillor_spouse_intrigue_1_modifier
			has_trait = schemer
			intrigue >= spouse_skill_rating_1
			is_performing_council_task = task_court_intrigue
		}
	}
}

spouse_intrigue_tier_2_trigger = {
	scope:councillor = {
		opinion = {
			target = liege
			value > 30
		}
		OR = {
			has_character_modifier = councillor_spouse_intrigue_2_modifier
			has_trait = schemer
			intrigue >= spouse_skill_rating_3
			AND = {
				is_performing_council_task = task_court_intrigue
				OR = {
					intrigue >= spouse_skill_rating_2
					has_character_modifier = councillor_spouse_intrigue_2_modifier
					has_character_modifier = councillor_spouse_intrigue_1_modifier
					has_trait = schemer
				}
			}
		}
	}
}

spouse_intrigue_tier_3_trigger = {
	scope:councillor = {
		opinion = {
			target = liege
			value > 50
		}
		OR = {
			has_trait = schemer
			intrigue >= spouse_skill_rating_4
			AND = {
				is_performing_council_task = task_court_intrigue
				OR = {
					intrigue >= high_skill_rating
					has_character_modifier = councillor_spouse_intrigue_2_modifier
					has_trait = schemer
				}
			}
		}
	}
}

#Diplomacy
spouse_diplomacy_tier_1_trigger = {
	scope:councillor = {
		OR = {
			has_character_modifier = councillor_spouse_diplomacy_2_modifier
			has_character_modifier = councillor_spouse_diplomacy_1_modifier
			has_trait = diplomat
			diplomacy >= spouse_skill_rating_1
			is_performing_council_task = task_court_politics
		}
	}
}

spouse_diplomacy_tier_2_trigger = {
	scope:councillor = {
		opinion = {
			target = liege
			value > 30
		}
		OR = {
			has_character_modifier = councillor_spouse_diplomacy_2_modifier
			has_trait = diplomat
			diplomacy >= spouse_skill_rating_3
			AND = {
				is_performing_council_task = task_court_politics
				OR = {
					diplomacy >= spouse_skill_rating_2			
					has_character_modifier = councillor_spouse_diplomacy_2_modifier
					has_character_modifier = councillor_spouse_diplomacy_1_modifier
					has_trait = diplomat
				}
			}
		}
	}
}

spouse_diplomacy_tier_3_trigger = {
	scope:councillor = {
		opinion = {
			target = liege
			value > 50
		}
		OR = {
			has_trait = diplomat
			diplomacy >= spouse_skill_rating_4
			AND = {
				is_performing_council_task = task_court_politics
				OR = {
					diplomacy >= spouse_skill_rating_2
					has_trait = diplomat
					has_character_modifier = councillor_spouse_diplomacy_2_modifier
				}
			}
		}
	}
}


#Martial
spouse_martial_tier_1_trigger = {
	scope:councillor = {
		OR = {
			has_character_modifier = councillor_spouse_martial_2_modifier
			has_character_modifier = councillor_spouse_martial_1_modifier
			has_trait = strategist
			martial >= spouse_skill_rating_1
			is_performing_council_task = task_chivalry
		}
	}
}

spouse_martial_tier_2_trigger = {
	scope:councillor = {
		opinion = {
			target = liege
			value > 30
		}
		OR = {
			has_character_modifier = councillor_spouse_martial_2_modifier
			has_trait = strategist
			martial >= spouse_skill_rating_3
			AND = {
				is_performing_council_task = task_chivalry
				OR = {
					martial >= spouse_skill_rating_2
					has_character_modifier = councillor_spouse_martial_2_modifier
					has_character_modifier = councillor_spouse_martial_1_modifier
					has_trait = strategist
				}
			}
		}
	}
}

spouse_martial_tier_3_trigger = {
	scope:councillor = {
		opinion = {
			target = liege
			value > 50
		}
		OR = {
			has_trait = strategist
			martial >= spouse_skill_rating_4
			AND = {
				is_performing_council_task = task_chivalry
				OR = {
					martial >= spouse_skill_rating_2
					has_character_modifier = councillor_spouse_martial_2_modifier
					has_trait = strategist
				}
			}
		}
	}
}



#Stewardship
spouse_stewardship_tier_1_trigger = {
	scope:councillor = {
		OR = {
			has_character_modifier = councillor_spouse_stewardship_2_modifier
			has_character_modifier = councillor_spouse_stewardship_1_modifier
			has_trait = architect
			stewardship >= spouse_skill_rating_1
			is_performing_council_task = task_manage_domain
		}
	}
}

spouse_stewardship_tier_2_trigger = {
	scope:councillor = {
		opinion = {
			target = liege
			value > 30
		}
		OR = {
			has_character_modifier = councillor_spouse_stewardship_2_modifier
			has_trait = architect
			stewardship >= spouse_skill_rating_3
			AND = {
				is_performing_council_task = task_manage_domain
				OR = {
					stewardship >= spouse_skill_rating_2
					has_character_modifier = councillor_spouse_stewardship_2_modifier
					has_character_modifier = councillor_spouse_stewardship_1_modifier
					has_trait = architect
				}
			}
		}
	}
}

spouse_stewardship_tier_3_trigger = {
	scope:councillor = {
		opinion = {
			target = liege
			value > 50
		}
		OR = {
			has_trait = architect
			stewardship >= spouse_skill_rating_4
			AND = {
				is_performing_council_task = task_manage_domain
				OR = {
					stewardship >= spouse_skill_rating_2
					has_character_modifier = councillor_spouse_stewardship_2_modifier
					has_trait = architect
				}
			}
		}
	}
}




#Learning
spouse_learning_tier_1_trigger = {
	scope:councillor = {
		OR = {
			has_character_modifier = councillor_spouse_learning_2_modifier
			has_character_modifier = councillor_spouse_learning_1_modifier
			has_trait = scholar
			learning >= spouse_skill_rating_1
			is_performing_council_task = task_patronage
		}
	}
}

spouse_learning_tier_2_trigger = {
	scope:councillor = {
		opinion = {
			target = liege
			value > 30
		}
		OR = {
			has_character_modifier = councillor_spouse_learning_2_modifier
			has_trait = scholar
			learning >= spouse_skill_rating_3
			AND = {
				is_performing_council_task = task_patronage
				OR = {
					learning >= spouse_skill_rating_2
					has_character_modifier = councillor_spouse_learning_2_modifier
					has_character_modifier = councillor_spouse_learning_1_modifier
					has_trait = scholar
				}
			}
		}
	}
}

spouse_learning_tier_3_trigger = {
	scope:councillor = {
		opinion = {
			target = liege
			value > 50
		}
		OR = {
			has_trait = scholar
			learning >= spouse_skill_rating_4
			AND = {
				is_performing_council_task = task_patronage
				OR = {
					learning >= spouse_skill_rating_2
					has_character_modifier = councillor_spouse_learning_2_modifier
					has_trait = scholar
				}
			}
		}
	}
}

# Court Espionage task triggers
spymaster_task_find_secrets_interesting_secret_type_trigger = {
	save_temporary_scope_as = suitable_secret
	trigger_if = {
		limit = {
			secret_type = secret_disputed_heritage
			exists = secret_target
		}
		NOT = { secret_target = { has_trait = legitimized_bastard } }
	}
	OR = {
		secret_is_always_interesting_trigger = yes
		is_blackmailable_secret_trigger = { BLACKMAILER = scope:councillor_liege PARTICIPANT = scope:suitable_secret.secret_owner }
	}
}

spymaster_task_find_secrets_block_spymaster_self_reveal_trigger = {
	# Spymaster should not reveal secrets targeting themselves unless it is a murder attempt
	trigger_if = {
		limit = {
			exists = secret_target
			NOT = { secret_type = secret_murder_attempt }
		}
		NOT = { secret_target = scope:councillor }
	}
	# If the spymaster is the father of a secret bastard, don't reveal that
	trigger_if = {
		limit = {
			OR = {
				secret_type = secret_disputed_heritage
				secret_type = secret_unmarried_illegitimate_child
			}
			exists = secret_target.real_father
		}
		NOT = { secret_target.real_father = scope:councillor }
	}
}

spymaster_task_find_secrets_suitable_minor_secret_trigger = {
	OR = {
		is_shunned_for = secret_owner
		AND = {
			NOT = {
				is_blackmailable_secret_trigger = {
					PARTICIPANT = secret_owner
					BLACKMAILER = scope:councillor_liege
				}
			}
			secret_is_always_interesting_trigger = yes
		}
	}
	NOT = { is_known_by = scope:councillor_liege }
	spymaster_task_find_secrets_block_spymaster_self_reveal_trigger = yes
	NOT = {
		any_secret_participant = {
			OR = {
				this = scope:councillor
				this = scope:councillor_liege
			}
		}
	}
	spymaster_task_find_secrets_interesting_secret_type_trigger = yes
}

spymaster_task_find_secrets_suitable_major_secret_trigger = {
	is_criminal_for = secret_owner
	NOT = { is_known_by = scope:councillor_liege }
	spymaster_task_find_secrets_block_spymaster_self_reveal_trigger = yes
	NOT = {
		any_secret_participant = {
			OR = {
				this = scope:councillor
				this = scope:councillor_liege
			}
		}
	}
	spymaster_task_find_secrets_interesting_secret_type_trigger = yes
}

spymaster_task_find_secrets_court_has_minor_secrets_trigger = {
	OR = {
		AND = {
			has_any_secrets = yes
			any_secret = {
				spymaster_task_find_secrets_suitable_minor_secret_trigger = yes
			}
		}
		any_vassal = {
			has_any_secrets = yes
			NOT = { this = scope:councillor_liege }
			NOT = { this = scope:councillor }
			any_secret = {
				spymaster_task_find_secrets_suitable_minor_secret_trigger = yes
			}	
		}
		any_courtier_or_guest = {
			has_any_secrets = yes
			NOT = { this = scope:councillor_liege }
			NOT = { this = scope:councillor }
			any_secret = {
				spymaster_task_find_secrets_suitable_minor_secret_trigger = yes			
			}
		}
	}
}

spymaster_task_find_secrets_court_has_major_secrets_trigger = {
	OR = {
		AND = {
			has_any_secrets = yes
			any_secret = {
				spymaster_task_find_secrets_suitable_major_secret_trigger = yes	
			}
		}
		any_vassal = {
			has_any_secrets = yes
			NOT = { this = scope:councillor_liege }
			NOT = { this = scope:councillor }
			any_secret = {
				spymaster_task_find_secrets_suitable_major_secret_trigger = yes
			}	
		}
		any_courtier_or_guest = {
			has_any_secrets = yes
			NOT = { this = scope:councillor_liege }
			NOT = { this = scope:councillor }
			any_secret = {
				spymaster_task_find_secrets_suitable_major_secret_trigger = yes			
			}
		}
	}
}

spymaster_find_secrets_secret_holder_is_interesting_to_me_trigger = {
	scope:councillor_liege = {
		save_temporary_scope_as = me
	}
	exists = scope:secret_holder
	scope:secret_holder = {
		OR = {
			is_ruler = yes
			is_close_or_extended_family_of = scope:me
			is_courtier_of = scope:me
			has_relation_rival = scope:me
			has_relation_lover = scope:me
			is_player_heir_of_trigger = { CHARACTER = scope:me }
		}
	}
}

spymaster_find_secrets_secret_target_is_interesting_to_me_trigger = {
	scope:councillor_liege = {
		save_temporary_scope_as = me
	}
	trigger_if = {
		limit = {
			exists = secret_target
		}
		secret_target = {
			OR = {
				is_close_or_extended_family_of = scope:me
				is_courtier_of = scope:me
				has_relation_rival = scope:me
				has_relation_lover = scope:me
				is_player_heir_of_trigger = { CHARACTER = scope:me }
			}
		}
	}
	trigger_else = {
		always = no
	}
}


# Event triggers
	# Defined here because they need to be used in event + council task desc

marshal_task_1101_county_trigger = {
	holder = root
	NOT = {
		has_county_modifier = marshal_task_organized_service_modifier
	}
}

marshal_task_1102_county_trigger = {
	NOT = {
		has_county_modifier = marshal_task_military_presence_modifier
	}
}

marshal_task_1003_county_trigger = {
	is_valid_for_county_corruption_trigger = yes
	OR = {
		NOT = { has_county_modifier = county_corruption_unsafe_highways_modifier }
		NOT = { has_county_modifier = county_corruption_thieves_guild_modifier }
		NOT = { has_county_modifier = county_corruption_bandits_rampant_modifier }
	}
}

steward_task_county_corruption_county_trigger = {
	holder = {
		OR = {
			is_ai = yes
			this = root
		}
	}
}

councillor_spouse_learning_2603_valid_councillor_trigger = {
	is_available_ai_adult = yes
	NOT = { this = scope:councillor }
}


councillor_liege_has_erudition_legacy_5_perk = {
	exists = scope:councillor_liege.dynasty
	scope:councillor_liege.dynasty = { has_dynasty_perk = erudition_legacy_5 }
}


councillor_liege_has_customs_legacy_perk = {
	exists = scope:councillor_liege.dynasty
	scope:councillor_liege.dynasty = { has_dynasty_perk = ep1_culture_legacy_2 }
}

councillor_liege_has_family_business_bonus = {
	exists = scope:councillor_liege.culture
	exists = scope:councillor
	scope:councillor_liege.culture = { has_cultural_parameter = close_family_better_councillors }
	scope:councillor = {
		is_close_family_of = scope:councillor_liege
	}
}

councillor_is_unskilled_trigger = {
	trigger_if = {
		limit = { this = $EMPLOYER$.cp:councillor_chancellor }
		diplomacy < mediocre_skill_rating
	}
	trigger_else_if = {
		limit = { this = $EMPLOYER$.cp:councillor_steward }
		stewardship < mediocre_skill_rating
	}
	trigger_else_if = {
		limit = { this = $EMPLOYER$.cp:councillor_marshal }
		martial < mediocre_skill_rating
	}
	trigger_else_if = {
		limit = { this = $EMPLOYER$.cp:councillor_spymaster }
		intrigue < mediocre_skill_rating
	}
	trigger_else = { learning < mediocre_skill_rating }
}

councillor_is_skilled_trigger = {
	trigger_if = {
		limit = { this = $EMPLOYER$.cp:councillor_chancellor }
		diplomacy > decent_skill_rating
	}
	trigger_else_if = {
		limit = { this = $EMPLOYER$.cp:councillor_steward }
		stewardship > decent_skill_rating
	}
	trigger_else_if = {
		limit = { this = $EMPLOYER$.cp:councillor_marshal }
		martial > decent_skill_rating
	}
	trigger_else_if = {
		limit = { this = $EMPLOYER$.cp:councillor_spymaster }
		intrigue > decent_skill_rating
	}
	trigger_else = { learning > decent_skill_rating }
}
