JominiMultiplayerLobby = {
    state = {
        name = _show
        on_start = "[GetVariableSystem.Set( 'mp_lobby_tabs', 'show_players' )]"
        on_finish = "[OpenGameView( 'lobby_helper_window' )]"
        on_finish = "[CloseGameView( 'outliner' )]"

        using = Animation_FadeIn_Standard
        using = Sound_WindowShow_Standard
    }

    state = {
        name = _hide
        on_start = "[GetVariableSystem.Clear( 'tabs_open' )]"
        on_finish = "[CloseGameView( 'lobby_helper_window' )]"

        using = Animation_FadeOut_Standard
        using = Sound_WindowHide_Standard
    }

    # Tabs setup
    oncreate = "[BindTabsContext]"
    oncreate = "[PdxGuiTabs.SetResetOnShown( '(bool)yes' )]"
    oncreate = "[PdxGuiTabs.AddTab( 'character' )]"
    oncreate = "[PdxGuiTabs.AddTab( 'landless_rulers' )]"

    # Code can send an event which we can listen for to switch tabs
    oncreate = "[PdxGuiTabs.ListenFor( 'lobby_window_change_tab' )]"

    blockoverride "left_panel_properties"
    {
        size = { 390 100% }
        widgetid = "left"
        visible = "[GameIsMultiplayer]"
    }

    blockoverride "lobby_view_back_onclick" {
        onclick = "[ReturnToMenu]"
    }

    blockoverride "host_button"
    {
        text = "[SelectLocalization( IsIronmanEnabled, 'GAME_SETUP_IRONMAN_SINGLEPLAYER_ONLY', 'JOMINI_MULTIPLAYER_GUI_HOST_BUTTON' )]"
    }

    blockoverride "host_button_enabled"
    {
        enabled = "[And( And( JominiIsMultiplayerAccessible, JominiIsHostOrLocal ), Not( IsIronmanEnabled ) )]"
    }

    blockoverride "playerbackgroundstyle"
    {
        using = Background_Area
    }

    blockoverride "jominimultiplayertextbox" {
        default_format = "#medium"
    }

    blockoverride "buttonstyle" {
        gfxtype = togglepushbuttongfx
        effectname = "NoHighlight"

        upframe = 1
        uphoverframe = 2
        uppressedframe = 3
        downframe = 4
        downhoverframe = 5
        downpressedframe = 6
        texture = "gfx/interface/buttons/button_entry_02.dds"
        spriteType = Corneredstretched
        spriteborder = { 20 20 }
        framesize  = { 249 78 }

        default_format = "#medium"
    }

    blockoverride "playerlist_playable" {
    }

    blockoverride "game_info" {
        header_pattern = {
            layoutpolicy_horizontal = expanding

            blockoverride "header_text" {
                text = "[GetCurrentDate.GetString]"

            }

            blockoverride "button_close" {
                visible = no
            }
        }
    }

    blockoverride "selected_playable" {
        datacontext = "[LobbyView.GetSelectedPlayable.GetCharacter]"

        state = {
            name = "jomini_preselected_changed"
            next = "preselected_shown"
            alpha = 0.5

            on_finish = "[PdxGuiTabs.SetTabByKey( 'character' )]"
        }

        state = {
            name = "preselected_shown"
            alpha = 1
            duration = 0.5
            using = Animation_Curve_Default

            start_sound = {
                soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_selected_playable"

                soundparam = {
                    name = "click_index"
                    value = "[LobbyView.GetSelectionClickIndex]"
                }

                soundparam = {
                    name = "culture"
                    value = "[LobbyView.GetSelectedPlayable.GetCharacter.GetCulture.GetHeritage.GetAudioParameter]"
                }
            }
        }

        ### Tabs header
        hbox_tab_buttons = {
            name = "tab_buttons"
            blockoverride "tab_name"
            {
                text = "[PdxGuiTabItem.LocalizeTab( 'lobby_tab' )]"
            }
        }

        ### Tab Character (Unseleceted/Observer)
        scrollbox = {
            name = "tab_character_unselected"
            visible = "[And( PdxGuiTabs.IsTabSet( 'character' ), Not( LobbyView.HasSelectedPlayable ) )]"

            layoutpolicy_horizontal = expanding
            layoutpolicy_vertical = expanding

            using = Animation_Tab_Switch

            blockoverride "scrollbox_margins" {}

            blockoverride "scrollbox_content"
            {
                text_multi = {
                    layoutpolicy_horizontal = expanding
                    layoutpolicy_vertical = expanding
                    default_format = "#I"
                    align = center
                    text = "MULTIPLAYER_GUI_CLICK_TO_SELECT"
                    visible = "[Not( LobbyView.IsObserver )]"
                }


                vbox = {
                    layoutpolicy_horizontal = expanding
                    layoutpolicy_vertical = expanding
                    visible = "[LobbyView.IsObserver]"

                    spacer = {size = {0 20}}

                    text_label_center = {
                        name = "header"
                        text = "JOMINI_MULTIPLAYER_GUI_OBSERVER"
                    }

                    text_multi = {
                        name = "desc"
                        text = "FRONTEND_OBSERVER_DESC"
                        autoresize = yes
                        max_width = 300
                        align = left
                    }

                    expand = {}
                }
            }
        }

        ### Tab Character (Character is selected)
        scrollbox = {
            name = "tab_character"
            datacontext = "[GetLobbyHelper]"
            visible = "[And( And( PdxGuiTabs.IsTabSet( 'character' ), Character.IsValid ), LobbyView.HasSelectedPlayable )]"

            layoutpolicy_horizontal = expanding
            layoutpolicy_vertical = expanding

            using = Animation_Tab_Switch

            state = {
                name = _show
                on_start = "[LobbyHelperWindow.SetLandlessTabSelected( '(bool)no' )]"
            }

            blockoverride "scrollbox_margins" {}

            blockoverride "scrollbox_content"
            {
                #### MAIN PORTRAIT ###
                vbox = {
                    layoutpolicy_horizontal = expanding

                    ###############
                    # Character box
                    widget = {
                        name = "main_characters"
                        layoutpolicy_horizontal = expanding
                        size = { 0 310 }

                        datacontext = "[GetIllustration( 'character_view_bg' )]"

                        background = {
                            texture = "[Illustration.GetTexture( Character.MakeScope )]"
                            fittype = centercrop
                            using = Mask_Rough_Edges
                        }

                        ### Liege
                        container = {
                            name = "liege"
                            datacontext = "[LobbyView.GetSelectedPlayable.GetCharacter.GetLiege]"
                            visible = "[And(Character.IsValid, Not(Character.IsSelected))]"
                            parentanchor = bottom|left
                            position = { 5 -125 }

                            portrait_head_small = {

                                blockoverride "portrait_transformation"
                                {
                                    portrait_scale = { -1 1 }
                                    portrait_offset = { 1 0 }
                                }

                                blockoverride "portrait_transformation"
                                {
                                    portrait_scale = { -1 1 }
                                    portrait_offset = { 1 0 }
                                }

                                blockoverride "opinion_box"
                                {
                                    visible = no
                                }

                                blockoverride "status_icons" {
                                    visible = no
                                }
                            }

                            text_label_center = {
                                parentanchor = top|hcenter
                                position = { -10 85 }
                                text = "[liege|E]"
                            }

                            icon = {
                                name = "non_dejure_liege"
                                visible = "[Not( Character.GetVassalContract.IsRightfulLiege )]"
                                parentanchor = top|left
                                position = { 65 80 }

                                size = { 35 35 }
                                texture = "gfx/interface/icons/levy_tax_reduction.dds"

                                using = tooltip_ws
                                tooltip = "MRW_TT_NOT_RIGHTFUL_LIEGE"
                            }
                        }

                        ### Heir
                        container = {
                            name = "heir"
                            datacontext = "[LobbyView.GetSelectedPlayable.GetCharacter.GetPlayerHeir]"
                            visible = "[Character.IsValid]"
                            parentanchor = bottom|left
                            position = { 5 -10 }

                            portrait_head_small = {
                                blockoverride "portrait_transformation"
                                {
                                    portrait_scale = { -1 1 }
                                    portrait_offset = { 1 0 }
                                }

                                blockoverride "opinion_box"
                                {
                                    visible = no
                                }

                                blockoverride "status_icons" {
                                    visible = no
                                }
                            }

                            text_label_center = {
                                parentanchor = top|hcenter
                                position = { 0 85 }
                                name = "heir_label"
                                text = "[heir|E]"
                            }
                        }

                        ### Main Character
                        portrait_body = {
                            name = "tutorial_highlight_main_character_button"
                            parentanchor = bottom|right
                            position = { -10 0 }
                            size = { 240 300 }

                            blockoverride "portrait_button" {
                                size = { 280 421 }
                            }

                            blockoverride "portrait_glow" {}

                            blockoverride "portrait_texture" {
                                portrait_texture = "[Character.GetPortrait('environment_body', 'camera_character_view_main', 'idle', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
                            }

                            blockoverride "mask" {
                                mask = "gfx/portraits/portrait_mask_character_view.dds"
                            }

                            blockoverride "portrait_transformation"
                            {
                                portrait_scale = { -1 1 }
                                portrait_offset = { 1 0 }
                            }

                            blockoverride "portrait_opinion" {
                                visible = no
                            }

                            blockoverride "portrait_status_icons" {
                                visible = no
                            }

                            blockoverride "status_icons" {}
                            blockoverride "coa" {}
                            blockoverride "opinion_box" {}
                        }
                    }
                }

                vbox = {
                    layoutpolicy_horizontal = expanding

                    vbox = {
                        layoutpolicy_horizontal = expanding

                        vbox = {
                            layoutpolicy_horizontal = expanding
                            layoutpolicy_vertical = expanding
                            margin = { 0 10 }
                            spacing = 5

                            background = {
                                using = Background_Area_Dark
                            }

                            vbox = {
                                layoutpolicy_horizontal = expanding
                                margin_top = 10
                                spacing = 5

                                #Warcraft
                                text_single = {
                                    visible = "[GreaterThan_int32(Character.GetBirthDate.GetYear, '(int32)50')]"
                                    name = "character_name"
                                    layoutpolicy_horizontal = expanding
                                    raw_text = "[Character.GetUINameNotMeNoTooltip], #low [Character.GetAge]#!"
                                    default_format = "#high"
                                    using = Font_Size_Medium
                                    fontsize_min = 14
                                    align = left|nobaseline
                                    max_width = 375
                                    autoresize = yes

                                    tooltip = "[Character.GetCharacterViewNameNicknamedNoTooltipRegnal]"
                                }
                            }

                            #Warcraft
                            text_single = {
                                visible = "[LessThanOrEqualTo_int32(Character.GetBirthDate.GetYear, '(int32)50')]"
                                name = "character_name2"
                                layoutpolicy_horizontal = expanding
                                raw_text = "[Character.GetUINameNotMeNoTooltip], #low ???#!"
                                default_format = "#high"
                                using = Font_Size_Medium
                                fontsize_min = 14
                                align = left|nobaseline
                                max_width = 390
                                autoresize = yes

                                tooltip = "[Character.GetCharacterViewNameNicknamedNoTooltipRegnal]"
                            }

                            divider_light = {
                                layoutpolicy_horizontal = expanding
                            }
                        }

                        hbox = {
                            layoutpolicy_horizontal = expanding

                            background = {
                                using = Background_Area
                                margin_top = 5
                            }

                            vbox = {
                                layoutpolicy_horizontal = expanding
                                layoutpolicy_vertical = expanding
                                margin = { 10 5 }

                                hbox = {
                                    layoutpolicy_horizontal = expanding

                                    ## Traits and modifiers
                                    fixedgridbox = {
                                        name = "personality_traits"
                                        datamodel = "[Character.GetTraitIndices]"
                                        flipdirection = yes
                                        addcolumn = 50
                                        addrow = 50
                                        maxhorizontalslots = 5

                                        item = {
                                            icon_trait = {
                                                datacontext = "[GetTraitForIndex(int32.GetInt)]"
                                                visible = "[Trait.IsPersonality]"

                                                blockoverride "icon_size"
                                                {
                                                    size = { 50 50 }
                                                }
                                            }
                                        }
                                    }

                                    expand = {}
                                }

                                hbox = {
                                    name = "faith_and_culture"
                                    layoutpolicy_horizontal = expanding
                                    layoutpolicy_vertical = expanding

                                    button_religion_icon = {
                                        name = "faith_button"
                                        alwaystransparent = yes
                                        datacontext = "[Character.GetFaith]"
                                        size = { 45 45 }

                                        tooltipwidget = {
                                            faith_tooltip_core_tenents = {}
                                        }

                                        using = tooltip_ws
                                    }

                                    vbox = {
                                        text_single = {
                                            datacontext = "[Character.GetFaith]"
                                            layoutpolicy_horizontal = expanding
                                            text = "FAITH_LOBBY_WINDOW"
                                            default_format = "#clickable;italic"
                                            align = nobaseline
                                            max_width = 220

                                            tooltipwidget = {
                                                faith_tooltip_core_tenents = {}
                                            }

                                            using = tooltip_ws
                                        }

                                        text_single = {
                                            datacontext = "[Character.GetCulture]"
                                            layoutpolicy_horizontal = expanding
                                            text = "CULTURE_LOBBY_WINDOW"
                                            default_format = "#clickable;italic"
                                            align = nobaseline
                                            max_width = 220

                                            tooltipwidget = {
                                                ruler_designer_culture_tooltip = {}
                                            }

                                            using = tooltip_ws
                                        }
                                    }

                                    expand = {}
                                }

                                expand = {}
                            }

                            vbox = {
                                layoutpolicy_vertical = expanding

                                divider_light = {
                                    layoutpolicy_vertical = expanding

                                    modify_texture = {
                                        texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick_vertical.dds"
                                        blend_mode = alphamultiply
                                    }
                                }
                            }

                            ### HOUSE COA ###
                            vbox = {
                                datacontext = "[Character.GetHouse]"
                                visible = "[Character.HasDynasty]"
                                layoutpolicy_vertical = expanding

                                margin = { 10 0 }
                                margin_bottom = 15

                                widget = {
                                    name = "house"
                                    layoutpolicy_vertical = expanding
                                    size = { 88 84 }

                                    coa_house_medium = {
                                        parentanchor = top|hcenter
                                        alwaystransparent = yes
                                        using = tooltip_ws
                                    }

                                    widget = {
                                        parentanchor = bottom|right
                                        position = { -3 3 }
                                        size = { 30 30 }

                                        background = {
                                            using = Background_Area_Dark

                                            modify_texture = {
                                                texture = "gfx/interface/component_masks/mask_fade_circle.dds"
                                                blend_mode = alphamultiply
                                            }
                                        }

                                        icon = {
                                            name = "bastard"
                                            parentanchor = center

                                            visible = "[Not(Character.IsLegitimateMemberOfHouse)]"
                                            framesize = { 40 40 }
                                            frame = 4
                                            size = { 20 20 }
                                            texture = "gfx/interface/icons/portraits/relation.dds"
                                            tooltip = "CV_TT_BASTARD"
                                        }

                                        icon = {
                                            name = "head_icon"
                                            parentanchor = center
                                            size = { 20 20 }
                                            visible = "[LessThan_int32(Character.GetDynastyHeadRelationFrame('(bool)no'), '(int32)9')]"

                                            texture = "gfx/interface/icons/portraits/relation.dds"
                                            framesize = { 40 40 }
                                            frame = "[Character.GetDynastyHeadRelationFrame('(bool)no')]"
                                            tooltip = "[Character.GetDynastyHeadTooltip]"
                                        }
                                    }
                                }

                                text_multi = {
                                    autoresize = yes
                                    max_width = 95
                                    text = "[DynastyHouse.GetBaseNameNoTooltip]"
                                    align = center
                                }

                                expand = {}
                            }
                        }
                    }



                    ### REALM ###
                    hbox = {
                        visible = "[Character.HasLandedTitles]"
                        layoutpolicy_horizontal = expanding
                        layoutpolicy_vertical = expanding

                        widget = {
                            size = { 85 100 }

                            coa_realm_medium_crown = {
                                name = "realm_flag"
                                alwaystransparent = yes
                                parentanchor = center

                                blockoverride "OnClickDefault" {}
                            }
                        }

                        vbox = {
                            layoutpolicy_horizontal = expanding

                            text_multi = {
                                name = "character_title"
                                layoutpolicy_horizontal = expanding

                                align = left
                                autoresize = yes
                                max_width = 310
                                text = "[Character.GetPrimaryTitle.GetNameNoTooltip|U]"
                                default_format = "#low"
                                using = Font_Size_Medium
                            }

                            text_single = {
                                name = "government_type"
                                layoutpolicy_horizontal = expanding

                                text = "[SelectLocalization( Character.GetGovernment.IsValid(), 'GOVERNMENT_ADJECTIVE_ICON', '' )]"
                                default_format = "#low"
                            }

                            hbox = {
                                visible = "[Character.GetGovernment.IsType('landless_adventurer_government')]"
                                layoutpolicy_horizontal = expanding
                                margin_top = 3
                                spacing = 5

                                icon = {
                                    size = { 25 25 }
                                    texture = "gfx/interface/icons/map_icons/map_icon_camp.dds"
                                }

                                text_single = {
                                    text = RULER_DESIGNER_CAMP_LOCATION
                                    align = left
                                }

                                expand = {}
                            }

                            hbox = {
                                visible = "[And( Character.HasDomicile, Character.GetGovernment.IsType('administrative_government') )]"
                                layoutpolicy_horizontal = expanding
                                margin_top = 3
                                spacing = 5

                                icon = {
                                    size = { 25 25 }
                                    texture = "gfx/interface/icons/map_icons/map_icon_estate.dds"
                                }

                                text_single = {
                                    text = RULER_DESIGNER_ESTATE_LOCATION
                                    align = left
                                }

                                expand = {}
                            }
                        }

                        expand = {}
                    }
                }

                expand = {
                    layoutpolicy_vertical = expanding
                }

                ### DIFFICULTY ###
                vbox = {
                    visible = "[Character.HasDifficultyInfo]"
                    layoutpolicy_horizontal = expanding
                    spacing = 5
                    margin = { 5 0 }
                    margin_top = 5
                    margin_bottom = 10


                    background = {
                        using = Background_Area_Dark
                    }

                    text_single = {
                        name = "difficulty_label"
                        layoutpolicy_horizontal = expanding
                        margin = { 5 0 }
                        text = "MULTIPLAYER_LOBBY_DIFFICULTY_HEADER"
                    }

                    text_multi = {
                        name = "difficulty"
                        layoutpolicy_horizontal = expanding
                        autoresize = yes
                        text = "MULTIPLAYER_LOBBY_DIFFICULTY_INFO_TEXT"
                        max_width = 380
                    }
                }
            }
        }

        ### Tab Landless Rulers
        scrollbox = {
            name = "tab_landless_rulers"
            datacontext = "[GetLobbyHelper]"
            visible = "[PdxGuiTabs.IsTabSet( 'landless_rulers' )]"

            layoutpolicy_horizontal = expanding
            layoutpolicy_vertical = expanding

            using = Animation_Tab_Switch

            state = {
                name = _show
                on_start = "[LobbyHelperWindow.SetLandlessTabSelected( '(bool)yes' )]"
                on_start = "[SetMapMode('landless_rulers')]"
            }

            state = {
                name = _hide
                on_start = "[LobbyHelperWindow.SetLandlessTabSelected( '(bool)no' )]"
                on_start = "[SetMapMode('realms')]"
            }

            blockoverride "scrollbox_margins"
            {
                margin = { 5 0 }
            }

            blockoverride "scrollbox_content"
            {
                datacontext = "[GetLobbyHelper]"
                datacontext = "[LobbyHelperWindow.GetCharacterList]"

                spacing = 4

                hbox_lobby_government_filter = { }

                vbox_character_list = {
                    name = "landless_rulers_list"
                    layoutpolicy_horizontal = expanding
                    layoutpolicy_vertical = expanding

                    blockoverride "button_texture"
                    {
                        background = {
                            texture = "gfx/interface/buttons/button_entry_characterlist.dds"
                            spriteType = Corneredtiled
                            using = Color_Orange
                            alpha = 0
                            using = Mask_Rough_Edges
                        }
                    }

                    blockoverride "container_implementation"
                    {
                        fixedgridbox = {
                            name = "characters_grid"
                            datamodel = "[CharacterSelectionList.GetList]"
                            visible = "[Not(CharacterSelectionList.IsBuildingList)]"

                            block "character_gridbox"
                            {
                                addcolumn = 370
                                addrow = 120
                                datamodel_reuse_widgets = yes
                            }

                            item = {
                                button_landless_ruler_list_item = {
                                    size = { 370 110 }
                                    margin = { 0 2 }
                                }
                            }
                        }
                    }

                    blockoverride "scrollbox_background" {}

                    blockoverride "scrollbox_background_fade" {}

                    blockoverride "sort_buttons" {}

                    blockoverride "character_count"
                    {
                        hbox = {
                            layoutpolicy_horizontal = growing
                            margin = { 15 0 }
                            margin_top = 5
                            margin_bottom = 10
                            spacing = 5

                            expand = {}

                            widget = {
                                size = { 20 15 }

                                warning_icon = {
                                    size = { 25 25 }
                                    visible = "[Not( CharacterSelectionList.IsAllDefault )]"
                                    tooltip = "CHARACTER_FINDER_FILTER_SET"
                                    position = { -3 -5 }
                                }
                            }

                            text_single = {
                                name = "character_count"
                                datacontext = "[CharacterSelectionList]"
                                text = "CHARACTER_FINDER_COUNT"
                                align = center|nobaseline
                                default_format = "#low"
                            }
                        }
                    }
                }
            }
        }
        expand = {}
    }

    blockoverride "game_rules" {
        vbox = {
            layoutpolicy_horizontal = expanding
            spacing = 5
            margin_right = 10
            margin_bottom = 15
            margin_top = 5

            flowcontainer_game_rules_mini = {
                layoutpolicy_horizontal = expanding
                name = "game_rules_mini"
                margin = { 10 5 }
            }

            button_standard = {
                name = "game_rules_button"
                size = { 380 45 }

                button_rules = {
                    size = { 30 30 }
                    parentanchor = left|vcenter
                    position = { 5 0 }
                    alwaystransparent = yes
                }

                text = "GAME_RULES"
                margin = { 60 0 }
                onclick = "[OpenGameRules]"

                hbox = {
                    margin = { 5 0 }
                    expand = {}
                    datacontext = "[GetGameRules]"

                    ironman_save_icon = {
                        visible = "[IsIronmanEnabled]"
                        size = { 30 30 }
                        tooltip = "IRONMAN_ENABLED"
                    }

                    ironman_disabled_icon = {
                        visible = "[Not( IsIronmanEnabled )]"
                        size = { 30 30 }
                        tooltip = "IRONMAN_DISBLED"
                    }
                    achievements_enabled_icon = {
                        visible = "[CanGetAchievements]"
                        size = { 30 30 }
                        tooltip = ACHIEVEMENTS_ENABLED
                    }
                    achievements_disabled_icon = {
                        visible = "[Not( CanGetAchievements )]"
                        size = { 30 30 }
                        tooltip = ACHIEVEMENTS_DISABLED
                        using = tooltip_nw
                    }
                }
            }

            vbox = {
                name = "select_and_customize_character"
                datacontext = "[LobbyView.GetSelectedPlayable.GetCharacter]"

                button_standard = {
                    name = "create_ruler"
                    size = { 380 45 }
                    visible = "[IsPreparationLobby]"
                    datacontext = "[LobbyView.GetSelectedPlayable.GetCharacter]"

                    button_edit_text = {
                        size = { 30 30 }
                        parentanchor = left|vcenter
                        position = { 5 0 }
                        alwaystransparent = yes
                    }

                    enabled = "[LobbyView.CanTryStartRulerDesigning( Character.Self )]"

                    tooltip = "[LobbyView.GetTryStartRulerDesigningDesc( Character.Self )]"
                    text = "RULER_DESIGNER_OPEN"

                    onclick = "[LobbyView.UnReady]"
                    onclick = "[TryStartRulerDesigning( Character.Self, '(bool)no' )]"
                }

                button_standard = {
                    name = "create_adventurer"
                    size = { 380 45 }
                    visible = "[And( IsPreparationLobby, LobbyView.CanMakeLandlessCharacter )]"
                    datacontext = "[LobbyView.GetSelectedPlayable.GetCharacter]"

                    button_icon = {
                        size = { 30 30 }
                        parentanchor = left|vcenter
                        position = { 5 0 }
                        alwaystransparent = yes
                        texture = "gfx/interface/icons/flat_icons/adventurer.dds"
                    }

                    enabled = "[LobbyView.CanTryStartRulerDesigning( Character.Self )]"

                    tooltip = "[LobbyView.GetTryStartLandlessDesigningDesc( Character.Self )]"
                    text = RULER_DESIGNER_OPEN_LANDLESS

                    onclick = "[TryStartRulerDesigning( Character.Self, '(bool)yes' )]"
                    onclick = "[LobbyView.UnReady]"
                }

                vbox = {
                    layoutpolicy_horizontal = expanding
                    visible = "[Or(Or(Character.IsOtherPlayer, Character.IsLocalPlayer), And(Not(Character.IsValid), IsObserver))]"

                    vbox = {
                        layoutpolicy_horizontal = expanding
                        margin = { 5 16 }

                        background = {
                            using = Background_Area_Dark
                        }

                        text_single = {
                            name = "player"
                            visible = "[Character.IsOtherPlayer]"
                            text = "MULTIPLAYER_LOBBY_PLAYED_BY"
                            align = nobaseline
                            default_format = "#high"
                        }

                        text_single = {
                            name = "its_you"
                            visible = "[Character.IsLocalPlayer]"
                            text = "MULTIPLAYER_LOBBY_PLAYED_BY_YOU"
                            align = nobaseline
                            default_format = "#high"
                        }

                        text_single = {
                            visible = "[And(Not(Character.IsValid), IsObserver)]"
                            size = { 380 100 }
                            align = center
                            text = "MULTIPLAYER_LOBBY_PLAY_OBSERVER"
                        }
                    }
                }

                vbox = {
                    layoutpolicy_horizontal = expanding
                    margin = { 10 10 }
                    visible = "[Not( Or( Character.IsOtherPlayer, Character.IsLocalPlayer ) )]"

                    button_primary = {
                        datacontext = "[LobbyView.GetSelectedPlayable.GetCharacter]"
                        visible = "[And( GameIsMultiplayer, IsPreparationLobby )]"

                        layoutpolicy_horizontal = expanding
                        size = { 350 33 }

                        text = "JOMINI_MULTIPLAYER_GUI_SELECT"
                        onclick = "[LobbyView.Control( Character.GetPlayable )]"
                        tooltip = "[LobbyView.GetControlToolTip( Character.GetPlayable )]"
                        enabled = "[LobbyView.CanControl( Character.GetPlayable )]"
                    }
                }
            }
        }
    }

    ### Chosen character name left side ###
    blockoverride "readyness" {
        hbox = {
            layoutpolicy_horizontal = expanding
            layoutpolicy_vertical = expanding
            maximumsize = { 390 -1 }

            text_multi = {
                layoutpolicy_horizontal = expanding
                text = "MULTIPLAYER_LOBBY_READY"
                visible = "[And( LobbyPlayer.HasPlayable, Not( LobbyPlayer.IsObserver ) )]"
                max_width = 245
                autoresize = yes
            }

            text_single = {
                layoutpolicy_horizontal = expanding
                text = "[SelectLocalization( IsMachineRulerDesigning( LobbyPlayer.GetID ), 'MULTIPLAYER_LOBBY_RULER_DESIGNING', 'MULTIPLAYER_LOBBY_NOT_READY' )]"
                visible = "[Not( Or( Or( LobbyPlayer.HasPlayable, LobbyPlayer.IsObserver ), LobbyPlayer.IsHotjoining ) )]"
            }

            text_single = {
                layoutpolicy_horizontal = expanding
                text = "JOMINI_MULTIPLAYER_GUI_OBSERVER"
                visible = "[LobbyPlayer.IsObserver]"
            }

            text_single = {
                layoutpolicy_horizontal = expanding
                visible = "[LobbyPlayer.IsHotjoining]"
                text = "MULTIPLAYER_LOBBY_JOIN_PROGRESS"
            }

            expand = {}
        }
    }

    ### MAPMODES, OBSERVE MODE ###
    widget = {
        parentanchor = bottom
        size = { 100% 215 }
        allow_outside = yes

        vbox = {
            expand = {}
            allow_outside = yes

            hbox = {
                layoutpolicy_horizontal = expanding
                spacing = 30
                margin_top = 20
                margin_left = 440
                margin_right = 390
                allow_outside = yes

                vbox = {
                    spacing = 5

                    background = {
                        using = Background_Area_Dark
                        margin = { 10 15 }
                    }

                    background = {
                        using = Background_Area_Dark
                        margin = { 10 10 }

                        modify_texture = {
                            texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
                            blend_mode = alphamultiply
                            mirror = vertical
                        }
                    }

                    button_standard = {
                        visible = "[InDebugMode]"
                        size = { 200 40 }

                        onclick = "[ToggleGameView( 'find_title' )]"
                        tooltip = "IM_TT_FIND_TITLE"
                        shortcut = "find_title_shortcut"

                        text = "FIND_TITLE"
                    }

                    JominiLobbyViewButton = {
                        size = { 200 40 }

                        onclick = "[SetRandomPlayableObserverCharacter]"

                        text = "MULTIPLAYER_LOBBY_CHOOSE_RANDOM_CHARACTER"
                    }

                    JominiLobbyViewButton = {
                        layoutpolicy_horizontal = expanding
                        size = { 200 40 }

                        onclick = "[CloseGameView( 'find_title' )]"
                        onclick = "[LobbyView.ToggleObserve]"
                        tooltip = "LOBBY_OBSERVER_MODE_TOOLTIP"

                        text = "[SelectLocalization(LobbyView.IsObserver, 'JOMINI_MULTIPLAYER_GUI_DISABLE_OBSERVE', 'JOMINI_MULTIPLAYER_GUI_OBSERVE')]"

                        icon_observer = {
                            position = { -5 2 }
                            parentanchor = right
                            size = { 35 35 }
                        }
                    }
                }

                expand = {}

                map_modes = {
                    scale = 0.8
                    filter_mouse = all
                    alwaystransparent = no
                    hotkeys_HUD = {}
                }
            }
        }
    }

    error_horse = {
        parentanchor = bottom|left
        position = { 675 -10 }
        visible = "[And( Not( IsPauseMenuShown ), Not( ReleaseMode ) )]"
    }
}

JominiLobbyViewEndPreparationConfirmation = {}
JominiMultiplayerJoinRequest = {}
JominiMultiplayerOosMessage = {
	blockoverride "oos_item" {
		layoutpolicy_horizontal = expanding

		hbox = {
			datacontext = "[OosData.GetPlayable.GetCharacter]"
			layoutpolicy_horizontal = expanding

			widget = {
				size = { 68 106 }

				coa_realm_medium_crown = {
					visible = "[And( Character.IsValid, Not( OosData.IsObserver ))]"
				}

				icon_observer = {
					size = { 68 68 }
					visible = "[Or( Not( Character.IsValid ), OosData.IsObserver )]"
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				margin = { 5 0 }

				text_single = {
					text = "[Character.GetName]"
					visible = "[And( Character.IsValid, Not( OosData.IsObserver ))]"
					autoresize = yes
					layoutpolicy_horizontal = expanding
				}

				text_single = {
					text = "JOMINI_MULTIPLAYER_GUI_OBSERVER"
					visible = "[OosData.IsObserver]"
					autoresize = yes
					layoutpolicy_horizontal = expanding
				}

				text_single = {
					text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_PLAYER_NAME"
					max_width = 490
					autoresize = yes
					layoutpolicy_horizontal = expanding
				}

				text_single = {
					text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_TYPE"
					max_width = 490
					autoresize = yes
					layoutpolicy_horizontal = expanding
				}

				text_multi = {
					text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_FOLDER"
					max_width = 490
					autoresize = yes
					layoutpolicy_horizontal = expanding
				}
			}
		}
	}
}

types LobbyWindowTypes {

    type button_landless_ruler_list_item = button_standard {
        datacontext = "[CharacterListItem.GetCharacter]"

        onclick = "[CharacterListItem.OnClick('character')]"
        enabled = "[CharacterListItem.IsSelectable]"
        tooltip = "[CharacterListItem.GetUnselectableReason]"

        block "overlay" {
            using = default_character_list_overlay
        }

        hbox = {
            layoutpolicy_vertical = expanding

            spacing = 4

            portrait_head_small = {}

            vbox = {
                layoutpolicy_horizontal = expanding

                text_multi = {
                    layoutpolicy_horizontal = expanding
                    min_width = 250
                    max_width = 250
                    max_height = 50
                    autoresize = yes
                    alwaystransparent = yes

                    text = lobby_landless_ruler_name
                    using = Font_Size_Medium
                }

                text_single = {
                    layoutpolicy_horizontal = expanding
                    max_width = 250
                    alwaystransparent = yes

                    text = lobby_landless_domicile_location
                }

                text_single = {
                    layoutpolicy_horizontal = expanding
                    max_width = 250
                    alwaystransparent = yes

                    text = lobby_landless_domicile_followers
                }
            }
        }

        block "widget" {}
    }

    type hbox_lobby_government_filter = hbox {
        name = "filters"
        layoutpolicy_horizontal = expanding

        text_single = {
            text = lobby_landless_government_filter
        }

        expand = { }

        dropdown_menu_standard = {
            blockoverride "dropdown_properties"
            {
                datamodel = "[LobbyHelperWindow.GetLandlessGovernmentFilters]"
                onselectionchanged = "[LobbyHelperWindow.OnSelectGovernmentFilter]"
                selectedindex = "[LobbyHelperWindow.GetLandlessGovernmentSetIndex]"
            }

            blockoverride "dropdown_size"
            {
                size = { 150 32 }
            }

            blockoverride "dropdown_list_maxsize"
            {
                maximumsize = { 150 550 }
            }

            blockoverride "dropdown_active_item_properties"
            {
                text_single = {
                    visible = "[GovernmentType.IsValid]"
                    align = nobaseline|left
                    margin_left = 10
                    parentanchor = vcenter

                    text = "[GovernmentType.GetNameNoTooltip]"
                }

                text_single = {
                    visible = "[Not( GovernmentType.IsValid )]"
                    align = nobaseline|left
                    margin_left = 10
                    parentanchor = vcenter

                    text = "any_filter_option"
                }
            }

            blockoverride "dropdown_item_properties"
            {
                text_single = {
                    visible = "[GovernmentType.IsValid]"
                    align = nobaseline|left
                    margin_left = 5
                    parentanchor = vcenter

                    text = "[GovernmentType.GetNameNoTooltip]"
                }

                text_single = {
                    visible = "[Not( GovernmentType.IsValid )]"
                    align = nobaseline|left
                    margin_left = 5
                    parentanchor = vcenter

                    text = "any_filter_option"
                }
            }

            tooltip = lobby_landless_government_filter_tt
            using = tooltip_ne
        }
    }
}
