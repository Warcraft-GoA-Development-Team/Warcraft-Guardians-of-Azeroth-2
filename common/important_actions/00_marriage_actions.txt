action_adult_player_heir_not_married = {
	type = alert

	check_create_action = {
		if = {
			limit = {
				NOT = { has_pending_interaction_of_type = marry_off_interaction }
				NOT = { has_pending_interaction_of_type = arrange_marriage_interaction }
				exists = player_heir
				player_heir = {
					dynasty = root.dynasty
					can_marry_trigger = yes
					is_concubine = no
					can_have_children = yes
					is_married = no
					is_adult = yes
					is_betrothed = no
				}
				is_character_interaction_valid = {
					recipient = player_heir
					interaction = marry_off_interaction
				}
				NOT = {
					has_government = landless_adventurer_government
				}
			}
			try_create_important_action = {
				important_action_type = action_adult_player_heir_not_married
				actor = root
				recipient = player_heir
			}
		}
	}

	effect = {
		open_interaction_window = {
			interaction = marry_off_interaction
			actor = scope:actor
			recipient = scope:recipient
		}
	}
}

action_adult_ruler_not_married = {
	type = alert

	check_create_action = {
		if = {
			limit = {
				NOT = { has_pending_interaction_of_type = marry_off_interaction }
				NOT = { has_pending_interaction_of_type = arrange_marriage_interaction }
				can_marry_trigger = yes
				is_concubine = no
				is_married = no
				is_betrothed = no
				is_adult = yes
				is_character_interaction_valid = {
					recipient = root
					interaction = marry_off_interaction
				}
				NOT = {
					has_government = landless_adventurer_government
				}
			}
			try_create_important_action = {
				important_action_type = action_adult_ruler_not_married
				actor = root
				recipient = root
			}
		}
	}

	effect = {
		open_interaction_window = {
			interaction = marry_off_interaction
			actor = scope:actor
			recipient = scope:recipient
		}
	}
}

action_non_adult_ruler_not_betrothed = {
	type = alert

	check_create_action = {
		if = {
			limit = {
				# Warcraft
				age_in_relation_to_humans_more_than_trigger = { age = 10 }
				NOT = { has_pending_interaction_of_type = marry_off_interaction }
				NOT = { has_pending_interaction_of_type = arrange_marriage_interaction }
				is_married = no
				is_betrothed = no
				is_adult = no
				is_character_interaction_valid = {
					recipient = root
					interaction = marry_off_interaction
				}
				NOT = {
					has_government = landless_adventurer_government
				}
			}
			try_create_important_action = {
				important_action_type = action_non_adult_ruler_not_betrothed
				actor = root
				recipient = root
			}
		}
	}

	effect = {
		open_interaction_window = {
			interaction = marry_off_interaction
			actor = scope:actor
			recipient = scope:recipient
		}
	}
}

action_betrothed_can_marry = {
	type = alert

	check_create_action = {
		every_potential_marriage_option = {
			if = {
				limit = {
					is_betrothed = yes
					is_adult = yes
					can_marry_common_trigger = yes
					betrothed = {
						is_adult = yes
						can_marry_common_trigger = yes
						trigger_if = {
							limit = {
								sex_opposite_of = prev
							}
							NAND = { # To avoid getting two alerts when both parties are in your own court. Since sex is really the only thing we can check to make sure it's just one of them we're picking this will only work if they're opposite sex
								is_female = no
								matchmaker = prev.matchmaker
							}
						}
					}
					NOT = {
						root = {
							exists = prev.betrothed.court_owner
							is_at_war_with = prev.betrothed.court_owner
						}
					}
					# Check that a promise of grand wedding was not attached to this. If there is one, it should trigger the specific Organize Grand Wedding action
					NOR = {
						prev = { has_been_promised_grand_wedding = yes }
						betrothed = { has_been_promised_grand_wedding = yes }
					}
				}
				try_create_important_action = {
					important_action_type = action_betrothed_can_marry
					actor = root
					recipient = betrothed.matchmaker
					secondary_actor = this
					secondary_recipient = betrothed
				}
			}
		}
	}

	effect = {
		open_interaction_window = {
			interaction = arrange_marriage_interaction
			actor = scope:actor
			recipient = scope:recipient
			secondary_actor = scope:secondary_actor
			secondary_recipient = scope:secondary_recipient
		}
	}
}

action_close_family_can_marry = {
	combine_into_one = yes
	priority = 400
	check_create_action = {

		every_child = {
			if = {
				limit = {
					is_playable_character = yes
					is_married = no
					is_betrothed = no
					is_adult = yes
					can_marry_trigger = yes
					root = {
						is_character_interaction_valid = {
							recipient = prev
							interaction = marry_off_interaction
						}
					}
				}
				try_create_important_action = {
					important_action_type = action_close_family_can_marry
					actor = root
					recipient = this
				}
			}
		}
		every_courtier = {
			if = {
				limit = {
					NAND = {
						is_child_of = root
						is_playable_character = yes
					}
					is_married = no
					is_betrothed = no
					is_adult = yes
					is_close_family_of = root
					can_marry_trigger = yes
					root = {
						is_character_interaction_valid = {
							recipient = prev
							interaction = marry_off_interaction
						}
					}
					is_visibly_fertile = yes
					NOR = {
						is_parent_of = root
						is_grandparent_of = root
						is_great_grandparent_of = root
					}
				}
				try_create_important_action = {
					important_action_type = action_close_family_can_marry
					actor = root
					recipient = this
				}
			}
		}
	}

	unimportant = {
		scope:recipient = {
			NOT = { is_heir_of = root }
			OR = { #Either not a child of root, or not one of the three oldest
				NOT = { is_child_of = root }
				any_sibling = {
					is_alive = yes
					is_child_of = root
					# Warcraft
					age_in_relation_to_humans_more_than_trigger = { age = scope:recipient.age }
					count >= 3
				}
			}
		}
	}

	effect = {
		open_interaction_window = {
			interaction = marry_off_interaction
			actor = scope:actor
			recipient = scope:recipient
		}
	}
}


action_can_take_concubine = {
	priority = 450
	check_create_action = {
		if = {
			limit = {
				allowed_concubines = yes
				allowed_more_concubines = yes
				is_adult = yes
				number_of_concubines < number_of_desired_concubines
				NOT = { has_pending_interaction_of_type = make_concubine_interaction }
				OR = {
					any_prisoner = {
						trigger_if = {
							limit = {
								root = { allowed_to_marry_same_sex_trigger = no }
							}
							sex_opposite_of = root
						}
						is_adult = yes
						is_imprisoned_by = root
						save_temporary_scope_as = concubine
					}
					any_courtier = {
						trigger_if = {
							limit = {
								root = { allowed_to_marry_same_sex_trigger = no }
							}
							sex_opposite_of = root
						}
						is_adult = yes
						is_married = no
						is_betrothed = no
						is_courtier_of = root
						is_at_home = yes
						save_temporary_scope_as = concubine
					}
				}
				is_character_interaction_valid = {
					recipient = scope:concubine
					interaction = make_concubine_interaction
				}
				NOT = {
					has_government = landless_adventurer_government
				}
			}
			try_create_important_action = {
				important_action_type = action_can_take_concubine
				actor = root
				recipient = scope:concubine
			}
		}
	}

	effect = {
		open_interaction_window = {
			interaction = find_concubine
			actor = scope:actor
			recipient = scope:recipient
		}
	}
}

action_too_few_spouses = {
	priority = 900
	check_create_action = {
		if = {
			limit = {
				faith = { has_doctrine = doctrine_polygamy }
				allowed_more_spouses = yes
				is_adult = yes
				trigger_if = {
					limit = {
						primary_title.tier >= 5
					}
					any_spouse = {
						count < 4
					}
				}
				trigger_else_if = {
					limit = {
						primary_title.tier >= 4
					}
					any_spouse = {
						count < 3
					}
				}
				trigger_else_if = {
					limit = {
						primary_title.tier >= 3
					}
					any_spouse = {
						count < 2
					}
				}
				trigger_else = {
					any_spouse = {
						count < 1
					}
				}
				NOT = {
					has_government = landless_adventurer_government
				}
			}
			try_create_important_action = {
				important_action_type = action_too_few_spouses
			}
		}
	}

	effect = {
		open_interaction_window = {
			interaction = marry_off_interaction
			actor = root
			recipient = root
		}
	}
}

action_grand_wedding_can_marry = {
	type = alert

	check_create_action = {
		every_potential_marriage_option = {
			if = {
				limit = {
					NOT = {
						has_government = landless_adventurer_government
					}
					is_betrothed = yes
					is_adult = yes
					has_been_promised_grand_wedding = yes
					var:promised_grand_wedding_by = root
					betrothed = {
						is_adult = yes
						has_been_promised_grand_wedding = yes
						var:promised_grand_wedding_by = root
						trigger_if = {
							limit = {
								sex_opposite_of = prev
							}
							NAND = { # To avoid getting two alerts when both parties are in your own court. Since sex is really the only thing we can check to make sure it's just one of them we're picking this will only work if they're opposite sex
								is_female = no
								matchmaker = prev.matchmaker
							}
						}
					}
					NOR = {
						root = {
							exists = prev.betrothed.court_owner
							is_at_war_with = prev.betrothed.court_owner
						}
						# Invalidate the alert if you are already organizing/participating in the same wedding!
						root = {
							exists = involved_activity
							involved_activity = {
								has_activity_type = activity_wedding
								activity_host = root
							}
						}
						# Make the alert disappear if you are planning the wedding
						is_game_view_open = activity_planner
					}
				}
				try_create_important_action = {
					important_action_type = action_grand_wedding_can_marry
					actor = root
					recipient = betrothed.matchmaker
					secondary_actor = this
					secondary_recipient = betrothed
				}
			}
		}
	}

	effect = {
		open_view_data = {
			view = activity_list_detail_host_window
			data = activity_type:activity_wedding
		}
	}
}
