wc_on_mana_regeneration = {
    effect = {
        if = {
            limit = { has_variable = wc_current_mana_variable }

            wc_change_mana_by_value_effect = {
                CHANGE = add
                VALUE = wc_mana_regeneration_value
            }
        }
        else = {
            set_variable = { name = wc_current_mana_variable value = wc_max_mana_value }
            wc_recalculate_prowess_from_mana_effect = yes
        }
        magic_buff_maintenance_effect = yes
        trigger_event = { on_action = wc_on_mana_regeneration months = 1 }
    }
}

wc_on_health_regeneration = {
    effect = {
        if = {
            limit = { has_variable = wc_current_hp_variable }
            wc_change_hp_by_value_effect = {
                CHANGE = add
                VALUE = wc_hp_replenishment_value
            }
        }

        else = {
            set_variable = { name = wc_current_hp_variable value = wc_hp_capacity_value }
        }

        trigger_event = { on_action = wc_on_health_regeneration months = 1 }
    }
}

wc_on_spell_progression = {
    effect = {
        every_in_list = {
            variable = current_spells_casting
            save_scope_as = casting_spell
            root = {
                execute_scoped_spell_effect = {
                    SPELL = scope:casting_spell
                    EFFECT = add_spell_progression_effect
                }
            }
        }
        every_in_list = {
            variable = spells_cd
            save_scope_as = cd_spell
            root = {
                execute_scoped_spell_effect = {
                    SPELL = scope:cd_spell
                    EFFECT = update_spell_cooldown_effect
                }
            }
        }
        if = { # so it doesnt double count spells
            limit = {
                NOT = { exists = var:spell_loop_on }
            }
            set_variable = { name = spell_loop_on value = yes }
        }
        trigger_event = { on_action = wc_on_spell_progression days = 1 }
    }
}

## root is the caster
### before removing the mana of the spell cast and doing anything
### Variable prefix: current_
### Variables: spell_name, rank, targets_list (variable list), recipient, elemental_type (for elemental type), class (spell class), target_type
### e.g. var:current_spell_type = flag:decay
wc_on_spell_cast_started = {
    effect = {
        if = {
            limit = {
                has_variable = current_target_type
                var:current_target_type = flag:character
                has_variable = spell_recipient
            }
            var:spell_recipient = {
                save_scope_as = current_target_character
                root = {
                    trigger_event = {
                        on_action = wc_on_spell_cast_started_character
                    }
                }
            }
        }
        else_if = {
            limit = {
                has_variable = current_target_type
                var:current_target_type = flag:character_list
                has_variable = spell_targets_list
            }

            every_in_list = {
                variable = spell_targets_list
                save_scope_as = current_target_character
                root = {
                    trigger_event = {
                        on_action = wc_on_spell_cast_started_character
                    }
                }
            }
        }
        else_if = {
            limit = {
                has_variable = current_target_type
                var:current_target_type = flag:title
                has_variable = spell_recipient
            }
            var:spell_recipient = {
                save_scope_as = current_target_title
                root = {
                    trigger_event = {
                        on_action = wc_on_spell_cast_started_title
                    }
                }
            }
        }
        else_if = {
            limit = {
                has_variable = current_target_type
                var:current_target_type = flag:title_list
                has_variable = spell_targets_list
            }

            every_in_list = {
                variable = spell_targets_list
                save_scope_as = current_target_title
                root = {
                    trigger_event = {
                        on_action = wc_on_spell_cast_started_title
                    }
                }
            }
        }

        if = {
            limit = {
                var:current_spell_name = flag:conjure_refreshment
                var:current_spell_rank < 3
            }
            trigger_event = wc_magic_spell_events.2001
        }

        # Flame and Frost synergy
        if = {
            limit = {
                spell_is_arcane_frost = {
                    SPELL = var:current_spell_name
                }
            }
            remove_variable = freeze_time_mult

            set_variable = {
                name = freeze_time_mult
                value = {
                    value = 0.01
                    multiply = var:current_cost
                }
            }
        }
        else_if = {
            limit = {
                spell_is_arcane_fire = {
                    SPELL = var:current_spell_name
                }
            }
            remove_character_flag = frost_synergy
        }
    }
}

## root is the caster
### before removing the mana of the spell cast and doing anything
### Is called for every target character of a spell
### Scope current_target_character, is the current target character
### Variable prefix: current_
### Variables: spell_name, rank, targets_list (variable list), recipient, elemental_type (for elemental type), class (spell class), target_type
### e.g. var:current_spell_type = flag:decay
wc_on_spell_cast_started_character = {
    effect = {

    }
}

## root is the caster
### before removing the mana of the spell cast and doing anything
### Is called for every target title of a spell
### Scope current_target_title, is the current target title
### Variable prefix: current_
### Variables: spell_name, rank, targets_list (variable list), recipient, elemental_type (for elemental type), class (spell class), target_type
### e.g. var:current_spell_type = flag:decay
wc_on_spell_cast_started_title = {
    effect = {

    }
}

## root is the caster
### upon finishing the spell cast, before the spell is executed ###
### Setting the var should_cast to no will stop the actual execution of the spell effect
### Setting the var should_reflect to yes will execute the spell effects on the caster instead
### Setting the var should_include to no on a spell target will stop it from being included in the effects
### Variable prefix: casted_
### Variables: spell, recipient, targets_list (variable list), rank, type (for elemental type), class (spell class), target_type, cost
### e.g. var:casted_spell = flag:lava_lash
wc_on_spell_cast_before_cast = {
    effect = {
        if = {
            limit = {
                has_variable = casted_target_type
                var:casted_target_type = flag:character
                has_variable = casted_recipient
                spell_is_harmful_trigger = {
                    SPELL = var:casted_spell
                }
            }
            if = {
                limit = {
                    spell_is_harmful_trigger = {
                        SPELL = var:casted_spell
                    }
                    NOT = {
                        var:casted_spell = flag:spellsteal
                    }
                    var:casted_recipient = {
                        has_character_modifier = wc_counterspell_modifier
                    }
                }
                var:casted_recipient = {
                    remove_character_modifier = wc_counterspell_modifier
                }
                set_variable = {
                    name = should_reflect
                    value = yes
                }
            }
            else_if = {
                limit = {
                    var:casted_recipient = {
                        has_character_modifier = wc_frost_armor_modifier
                    }
                }
                root = {
                    save_scope_as = ice_caster
                }
                var:casted_recipient = {
                    save_scope_as = blocker
                    trigger_event = wc_magic_spell_events.0001
                }
                root = {
                    send_interface_toast = {
                        title = wc_ice_block
                        left_icon = var:$SPELL$_recipient
                        right_icon = root
                        custom_tooltip = wc_iceblock_tt
                    }
                }
                set_variable = {
                    name = should_cast
                    value = no
                }
            }
            else_if = {
                limit = {
                    var:casted_recipient = {
                        has_character_modifier = wc_divine_shield_modifier
                    }
                    NOT = { var:casted_class = flag:light }
                }
                var:casted_recipient = {
                    save_scope_as = blocker
                    send_interface_toast = {
                        title = wc_spell_blocked
                        left_icon = scope:blocker
                        right_icon = root
                        custom_tooltip = wc_divine_shield_tt_self
                        remove_character_modifier = wc_divine_shield_modifier
                    }
                }
                root = {
                    send_interface_toast = {
                        title = wc_spell_blocked
                        left_icon = scope:blocker
                        right_icon = root
                        custom_tooltip = wc_divine_shield_tt
                        show_as_tooltip = {
                            var:casted_recipient = {
                                remove_character_modifier = wc_divine_shield_modifier
                            }
                        }
                    }
                }
                set_variable = {
                    name = should_cast
                    value = no
                }
            }
        }
        else_if = {
            limit = {
                has_variable = casted_target_type
                var:casted_target_type = flag:character_list
                has_variable = casted_targets_list
                spell_is_harmful_trigger = {
                    SPELL = var:casted_spell
                }
            }
            if = {
                limit = {
                    any_in_list = {
                        variable = casted_targets_list
                        has_character_modifier = wc_counterspell_modifier
                    }
                    NOT = {
                        var:casted_spell = flag:spellsteal
                    }
                }
                every_in_list = {
                    variable = casted_targets_list
                    limit = {
                        has_character_modifier = wc_counterspell_modifier
                    }
                    remove_character_modifier = wc_counterspell_modifier
                    set_variable = {
                        name = should_include
                        value = no
                    }
                    root = {
                        set_variable = {
                            name = should_reflect
                            value = yes
                        }
                    }
                }
            }
            else_if = {
                limit = {
                    any_in_list = {
                        variable = casted_targets_list
                        has_character_modifier = wc_frost_armor_modifier
                    }
                }
                every_in_list = {
                    variable = casted_targets_list
                    limit = {
                        has_character_modifier = wc_frost_armor_modifier
                    }
                    root = {
                        save_scope_as = ice_caster
                    }
                    save_scope_as = blocker
                    trigger_event = wc_magic_spell_events.0001
                    root = {
                        send_interface_toast = {
                            title = wc_ice_block
                            left_icon = var:$SPELL$_recipient
                            right_icon = root
                            custom_tooltip = wc_iceblock_tt
                        }
                    }
                    set_variable = {
                        name = should_include
                        value = no
                    }
                }
            }
            else_if = {
                limit = {
                    any_in_list = {
                        variable = casted_targets_list
                        has_character_modifier = wc_divine_shield_modifier
                    }
                    NOT = { var:casted_class = flag:light }
                }
                every_in_list = {
                    variable = casted_targets_list
                    save_scope_as = blocker
                    send_interface_toast = {
                        title = wc_spell_blocked
                        left_icon = scope:blocker
                        right_icon = root
                        custom_tooltip = wc_divine_shield_tt_self
                        remove_character_modifier = wc_divine_shield_modifier
                    }
                    root = {
                        send_interface_toast = {
                            title = wc_spell_blocked
                            left_icon = scope:blocker
                            right_icon = root
                            custom_tooltip = wc_divine_shield_tt
                            show_as_tooltip = {
                                scope:blocker = {
                                    remove_character_modifier = wc_divine_shield_modifier
                                }
                            }
                        }
                    }
                }
                set_variable = {
                    name = should_cast
                    value = no
                }
            }
        }
    }
}

## root is the caster
### upon finishing the spell cast, after setting cd and everything ###
### Variable prefix: casted_
### Variables: spell, recipient, targets_list (variable list), rank, type (for elemental type), class (spell class), target_type, cost
### e.g. var:casted_spell = flag:lava_lash
wc_on_spell_cast_finish = {
    effect = {
        # MOVED EVERYTHING INTO SCRIPTED EFFECTS BECAUSE ON_ACTIONS DONT HOT UPDATE ANYMORE
        record_magic_stats_effect = yes

        wc_on_spell_cast_finish_effect = yes
    }
}

## root is the caster
### Is called for every target character of a spell
### Scope current_target_character, is the current target character
### upon finishing the spell cast, before setting cd or anything ###
### Variable prefix: casted_
### Variables: spell, recipient, targets_list (variable list), rank, type (for elemental type), class (spell class), target_type, cost
### e.g. var:casted_spell = flag:lava_lash
wc_on_spell_cast_finish_character = {
    effect = {
        # Send interface message to target
        if = {
            limit = {
                NOT = { scope:current_target_character = root }
            }
            scope:current_target_character = {
                save_temporary_scope_as = castee
            }
            scope:castee = {
                root = {
                    save_temporary_scope_as = caster
                }
                set_variable = {
                    name = on_casted_spell
                    value = root.var:casted_spell
                }
                send_interface_message = {
                    title = spell_cast_on_you_title
                    custom_tooltip = spell_cast_on_you_desc
                }
            }

            if = {
                limit = {
                    NOT = {
                        root = scope:current_target_character
                    }
                    scope:current_target_character = {
                        has_perk = order_magic_tree_2_perk_1
                    }
                }

                scope:current_target_character = {
                    send_interface_toast = {
                        title = wc_aether_tap_title
                        left_icon = scope:current_target_character
                        wc_change_mana_by_value_effect = {
                            CHANGE = add
                            VALUE = 5
                        }
                    }
                }
            }

            if = {
                limit = {
                    scope:current_target_character = {
                        is_courtier = yes
                        NOT = {
                            root = court_owner
                        }
                        court_owner = {
                            has_perk = order_magic_tree_2_perk_1
                        }
                    }
                }
                scope:current_target_character = {
                    court_owner = {
                        save_scope_as = aether_tapper
                    }
                }
            }
            else_if = {
                limit = {
                    scope:current_target_character = {
                        is_councillor = yes
                        is_ruler = no
                        NOT = {
                            root = employer
                        }
                        employer = {
                            has_perk = order_magic_tree_2_perk_1
                        }
                    }
                }
                scope:current_target_character = {
                    employer = {
                        save_scope_as = aether_tapper
                    }
                }
            }

            scope:aether_tapper ?= {
                send_interface_toast = {
                    title = wc_aether_tap_title
                    left_icon = this
                    wc_change_mana_by_value_effect = {
                        CHANGE = add
                        VALUE = 5
                    }
                }
            }
        }

        # Clear Scorch cooldown when hit with elemental or fel hostile magic
        if = {
            limit = {
                NOT = { scope:current_target_character = root }
                OR = {
                    var:casted_class = flag:elemental_fire
                    var:casted_class = flag:elemental_earth
                    var:casted_class = flag:elemental_water
                    var:casted_class = flag:elemental_air
                    var:casted_class = flag:disorder
                }
                spell_is_harmful_trigger = {
                    SPELL = var:casted_spell
                }
            }

            scope:current_target_character = {
                remove_spell_cooldown_effect = { SPELL = scorch }
            }
        }

        # Burn caster when target has Fire Shield
        if = {
            limit = {
                scope:current_target_character = {
                    has_character_modifier = wc_fire_shield_modifier
                }
                spell_is_harmful_trigger = {
                    SPELL = var:casted_spell
                }
            }

            # TODO: Maybe remove Fire Shield modifier?

            root = {
                add_or_increase_burned_effect = yes

                send_interface_toast = {
                    title = wc_spell_reflected
                    left_icon = root
                    right_icon = scope:current_target_character
                    custom_tooltip = wc_fire_shield_reflect_tt
                }
            }
        }

        # Netherburn
        if = {
            limit = {
                NOT = {
                    has_character_flag = netherburn_triggered
                }
                var:casted_class = flag:order
                has_perk = order_magic_tree_4_perk_2
                spell_is_harmful_trigger = {
                    SPELL = var:casted_spell
                }
            }
            scope:current_target_character = {
                save_scope_value_as = {
                    name = spell_dodge_chance
                    value = wc_order_magic_resistance_dodge_value
                }
            }
            random_list = {
                25 = {
                    burned_target_frostbite_modifier = { TARGET = var:casted_recipient CHANGE = add }
                    scope:current_target_character = {
                        add_or_increase_burned_effect = yes
                        add_opinion = {
                            modifier = wc_burned_me
                            target = scope:current_target_character
                        }
                    }

                    send_interface_toast = {
                        title = wc_netherburn_triggered
                        left_icon = root
                        right_icon = scope:current_target_character
                        custom_tooltip = wc_netherburn_tt
                    }

                    add_character_flag = {
                        flag = netherburn_triggered
                        years = 1
                    }
                }
                75 = {
                    modifier = {
                        is_alive = yes
                        add = scope:spell_dodge_chance
                    }
                    burned_target_frostbite_modifier = { TARGET = var:casted_recipient CHANGE = subtract }
                }
            }
        }

        # If spell is hostile
        if = {
            limit = {
                spell_is_harmful_trigger = {
                    SPELL = var:casted_spell
                }
            }
            if = {
                limit = {
                    has_character_modifier = wc_vengeance_aura_modifier
                    var:current_target_character = {
                        NOT = { has_character_modifier = wc_vengeance_aura_modifier_negative }
                    }
                }
                var:current_target_character = {
                    send_interface_message = {
                        title = wc_vengeance_aura_title
                        add_character_modifier = {
                            modifier = wc_vengeance_aura_modifier_negative
                            months = 6
                        }
                    }
                }
            }
            if = {
                limit = {
                    var:current_target_character = { 
                        has_character_flag = wc_retribution_aura_flag 
                        NOT = { has_character_modifier = wc_retribution_aura_modifier }
                    }
                }
                var:current_target_character = {
                    send_interface_message = {
                        title = wc_retribution_aura_title
                        add_character_modifier = {
                            modifier = wc_retribution_aura_modifier
                            months = 6
                        }
                    }
                }
            }
            if = {
                limit = {
                    var:current_target_character = { has_trait = holy_wrath }
                }
                random_list = {
                    90 = {}
                    10 = {
                        if = {
                            limit = {
                                NOT = {
                                    var:current_target_character = root
                                }
                            }
                            root = {
                                send_interface_message = {
                                    title = trait_holy_wrath
                                    show_as_tooltip = {
                                        var:current_target_character = {
                                            add_or_increase_burned_effect = yes
                                        }
                                    }
                                }
                            }
                        }
                        var:current_target_character = {
                            send_interface_message = {
                                title = trait_holy_wrath
                                add_or_increase_burned_effect = yes
                            }
                        }
                    }
                }
            }
        }

        # Echo of Light
        if = {
            limit = {
                var:casted_class = flag:light
                has_perk = light_magic_tree_1_perk_7
                OR = {
                    spell_is_helpful_trigger = {
                        SPELL = var:casted_spell
                    }
                    spell_is_dispel_type_trigger = {
                        SPELL = var:casted_spell
                    }
                    var:casted_spell = flag:salvation
                }
            }
            var:current_target_character = {
                random_list = {
                    75 = {
                        send_interface_message = {
                            title = wc_echo_of_light_modifier
                            add_character_modifier = {
                                modifier = wc_echo_of_light_modifier
                                months = 3
                            }
                        }
                        if = {
                            limit = {
                                NOT = {
                                    var:current_target_character = root
                                }
                            }
                            root = {
                                send_interface_message = {
                                    title = wc_echo_of_light_modifier
                                    left_icon = root
                                    show_as_tooltip = {
                                        var:current_target_character = {
                                            add_character_modifier = {
                                                modifier = wc_echo_of_light_modifier
                                                months = 3
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    25 = {}
                }
            }
        }
    }
}

## root is the caster
### Is called for every target title of a spell
### Scope current_target_title, is the current target title
### upon finishing the spell cast, before setting cd or anything ###
### Variable prefix: casted_
### Variables: spell, recipient, targets_list (variable list), rank, type (for elemental type), class (spell class), target_type, cost
### e.g. var:casted_spell = flag:lava_lash
wc_on_spell_cast_finish_title = {
    effect = {
        # Send interface message to target
        if = {
            limit = {
                NOT = { scope:current_target_title.holder = root }
            }
            scope:current_target_title.holder = {
                save_temporary_scope_as = castee
            }
            scope:castee = {
                root = {
                    save_temporary_scope_as = caster
                }
                set_variable = {
                    name = on_casted_spell
                    value = root.var:casted_spell
                }
                send_interface_message = {
                    title = spell_cast_on_you_title
                    custom_tooltip = spell_cast_on_you_desc
                }
            }
        }

        backdraft_check_effect = yes
    }
}
## root is the caster
### upon canceling spell, after refunding mana and everything ###
### Variable prefix: cancelled_
### Variables: spell, recipient, targets_list (variable list), rank, type (for elemental type), class (spell class), target_type, cost
### e.g. var:cancelled_spell = flag:lava_lash
wc_on_spell_cast_cancelled = {
    effect = {

    }
}