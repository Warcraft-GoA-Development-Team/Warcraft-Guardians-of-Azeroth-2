######################################################
##################### MY REALM #######################
######################################################

window = {
	name = "my_realm_window"
	datacontext = "[GetVariableSystem]"
	datacontext = "[GetPlayer]"
	parentanchor = top|right
	allow_outside = yes
	movable = no
	layer = windows_layer
	
	# Warcraft
	visible = "[And(IsGameViewOpen('my_realm'), Not(GetVariableSystem.HasValue( 'right_window_open', 'pol_factions' )))]"

	using = Window_Size_MainTab

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
		using = Window_Position_MainTab

		# Warcraft
		on_start = "[GetVariableSystem.Set( 'right_window_open', 'my_realm' )]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
		using = Window_Position_MainTab_Hide

		# Warcraft
		on_start = "[GetVariableSystem.ClearIf( 'right_window_open', GetVariableSystem.HasValue( 'right_window_open', 'my_realm' ) )]"
	}

	state = {
		name = dismiss
		next = _hide

		trigger_when = "[GetVariableSystem.Exists( 'hide_right_windows' )]"
	}

	margin_widget = {
		size = { 100% 100% }
		margin = { 0 26 }
		margin_right = 13

		widget = {
			size = { 100% 100% }

			### WINDOW CONTENT
			vbox = {
				using = Window_Margins

				##### HEADER NO LIEGE TEXT #####
				header_with_picture = {
					layoutpolicy_horizontal = expanding
					minimumsize = { 0 180 }

					blockoverride "header_text" {
						text = "[GetPlayer.GetPrimaryTitle.GetNameNoTooltip|U]"
					}

					blockoverride "size" {
						size = { 100% 198 }
					}

					blockoverride "illustration_texture" {
						texture = "gfx/interface/illustrations/window_headers/header_my_realm.dds"
					}

					blockoverride "button_close"
					{
						onclick = "[MyRealmWindow.Close]"
					}

					vbox = {
						margin_top = 42
						margin_bottom = 10

						hbox = {
							spacing = 20

							text_single = {
								name = "realm_type"
								text = "MY_REALM_WINDOW_TYPE"
							}

							text_single = {
								text = "REALM_WINDOW_SIZE"
								tooltip = "REALM_WINDOW_SIZE_TT"
							}
						}

						spacer = {
							visible = "[GetPlayer.HasLiege]"
							layoutpolicy_vertical = expanding
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							margin_top = 12
							margin_left = 10
							margin_right = 10
							spacing = 15

							hbox = {
								name = "crown_authority"
								datamodel = "[MyRealmWindow.GetRealmLaws]"

								item = {
									vbox = {
										layoutpolicy_vertical = expanding
										datacontext = "[GuiLawGroup.GetLawGroup]"
										visible = "[And( GuiLawGroup.GetLawGroup.HasFlag( 'realm_law' ), GuiLawGroup.IsAvailable )]"
										spacing = 3

										text_label_center = {
											visible = "[Not(GetPlayer.HasLiege)]"
											text = "[LawGroup.GetName]"
										}

										hbox = {
											margin_left = 5
											layoutpolicy_horizontal = expanding

											text_label_left = {
												visible = "[GetPlayer.HasLiege]"
												layoutpolicy_horizontal = expanding
												text = "[LawGroup.GetName]"
												margin_left = 10
											}
										}
										
										# Warcraft
										progressbar_standard = {
											name = "dark_frenzy"
											visible = "[GuiLawGroup.GetLawGroup.HasFlag( 'dark_frenzy' )]"
											datacontext = "[MyRealmWindow.GetCharacter.MakeScope]"

											value = "[FixedPointToProgressbarValue(Scope.ScriptValue('dark_frenzy_percent_value'))]"
											tooltipwidget = {
												complex_tooltip = {
													blockoverride "content" {
														spacing = 5
														text_single = {
															layoutpolicy_horizontal = expanding
															using = Background_Area
															default_format = "#T"

															text = "DARK_FRENZY_TOOLTIP"
														}
														text_single = {
															visible = "[LessThan_CFixedPoint( Scope.Var( 'dark_frenzy' ).GetValue, Scope.ScriptValue( 'dark_frenzy_next_level_value' ) )]"
															layoutpolicy_horizontal = expanding
															text = "DARK_FRENZY_NEXT_LEVEL_TOOLTIP"
														}

														text_single = {
															layoutpolicy_horizontal = expanding
															using = Background_Area
															default_format = "#T"

															text = "MONTHLY_DARK_FRENZY_TOOLTIP"
														}
														text_single = {
															layoutpolicy_horizontal = expanding

															text = "MONTHLY_DARK_FRENZY_LIST"
														}
														
														divider_light = {
															layoutpolicy_horizontal = expanding
														}
														
														text_single = {
															layoutpolicy_horizontal = expanding

															text = "MONTHLY_DARK_FRENZY_TOTAL"
														}
													}
												}
											}
											
											layoutpolicy_horizontal = expanding
										}

										hbox = {
											datamodel = "[GuiLawGroup.GetLaws]"
											visible = "[Not(GetPlayer.HasLiege)]"

											background = {
												texture = "gfx/lines/line_lifestyles_unavailable.dds"
												margin = { -8 -12 }
												tintcolor = { 0.7 0.5 0.25 1 }
											}

											item = {
												icon_button_decorative = {
													datacontext = "[GuiLaw.GetLaw]"
													size = { 60 60 }
													enabled = "[Or(GuiLaw.CanEnact, GuiLaw.IsEnacted)]"
													down = "[GuiLaw.IsEnacted]"
													alwaystransparent = "[GuiLaw.IsEnacted]"
													onclick = "[GuiLaw.Enact]"
													tooltipwidget = { pass_law_tooltip = {} }
													using = tooltip_below

													icon_button_decorative = {
														size = { 54 54 }
														parentanchor = center
														alwaystransparent = yes
													}

													button_icon = {
														visible = "[Not(GuiLaw.IsEnacted)]"
														texture = "[Law.GetIcon]"
														parentanchor = center
														size = { 42 42 }
														alwaystransparent = yes
													}

													icon = {
														visible = "[And( GuiLaw.IsEnacted , Not( GuiLaw.CanEnact ) )]"
														texture = "[Law.GetIcon]"
														parentanchor = center
														size = { 42 42 }
														alwaystransparent = yes

														using = Master_Button_Modify_Texture

														blockoverride "master_color_frame" {
															frame = 2
														}
													}
												}
											}
										}

										hbox = {
											datamodel = "[GuiLawGroup.GetLaws]"
											visible = "[GetPlayer.HasLiege]"
											margin_left = 8

											background = {
												texture = "gfx/lines/line_lifestyles_unavailable.dds"
												margin = { -16 -12 }
												tintcolor = { 0.7 0.5 0.25 1 }
											}

											item = {
												icon_button_decorative = {
													datacontext = "[GuiLaw.GetLaw]"
													size = { 50 50 }
													enabled = "[Or(GuiLaw.CanEnact, GuiLaw.IsEnacted)]"
													down = "[GuiLaw.IsEnacted]"
													alwaystransparent = "[GuiLaw.IsEnacted]"
													onclick = "[GuiLaw.Enact]"
													tooltipwidget = { pass_law_tooltip = {} }
													using = tooltip_below

													icon_button_decorative = {
														size = { 44 44 }
														parentanchor = center
														alwaystransparent = yes
													}

													button_icon = {
														visible = "[Not(GuiLaw.IsEnacted)]"
														texture = "[Law.GetIcon]"
														parentanchor = center
														size = { 32 32 }
														alwaystransparent = yes
													}

													icon = {
														visible = "[And( GuiLaw.IsEnacted , Not( GuiLaw.CanEnact ) )]"
														texture = "[Law.GetIcon]"
														parentanchor = center
														size = { 42 42 }
														alwaystransparent = yes

														using = Master_Button_Modify_Texture

														blockoverride "master_color_frame" {
															frame = 2
														}
													}
												}
											}
										}
									}
								}
							}

							## LIEGE INFO
							vbox = {
								name = "liege"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								datacontext = "[MyRealmWindow.GetCharacter.GetLiege]"
								visible = "[GetPlayer.HasLiege]"

								text_label_left = {
									text = "MY_REALM_WINDOW_MY_LIEGE"
									layoutpolicy_horizontal = expanding
									margin_left = 2
								}

								expand = {}

								vbox = {
									layoutpolicy_horizontal = expanding

									text_single = {
										layoutpolicy_horizontal = expanding
										text = "[Character.GetUIName]"
										autoresize = no
										align = left
										max_width = 330
									}

									hbox = {
										layoutpolicy_horizontal = expanding

										widget = {
											size = { 30 25 }

											button_icon_highlight = {
												datacontext = "[Character.GetActiveLawInGroupWithFlag( 'realm_law' )]"
												size = { 35 35 }
												parentanchor = center
												texture = "[Law.GetIcon]"
												tooltipwidget = { general_law_tooltip = {} }
												using = tooltip_ws
											}
										}

										text_single = {
											text = "[Character.GetGovernment.GetName]"
										}

										expand = {}
									}
								}

								expand = {}
							}
						}

						expand = {}
					}

					widget = {
						visible = "[GetPlayer.HasLiege]"
						allow_outside = yes
						size = { 55 80	}

						coa_realm_small_crown = {
							parentanchor = top|hcenter
							position = { 10 5 }
						}
					}

					widget = {
						visible = "[Not(GetPlayer.HasLiege)]"
						allow_outside = yes
						size = { 89 98 }

						coa_realm_big_crown = {
							parentanchor = top|hcenter
							position = { 5 5 }
						}
					}
				}

				### Diarchy view button
				button_standard = {
					name = "open_future_diarchy_tutorial_uses_this"
					layoutpolicy_horizontal = expanding
					size = { 0 60 }
					
					onclick = "[ToggleGameViewData( 'diarchy', GetPlayer.GetID )]"
					onclick = "[MyRealmWindow.SendButtonClickedTelemetry( 'diarchy' )]"
					
					tooltip = "DIARCHY_WINDOW_OPEN_TOOLTIP"

					hbox = {
						datacontext = "[Character.GetDiarchy]"
						layoutpolicy_horizontal = expanding
						
						margin = { 15 0 }
						
						icon_flat_standard = {
							size = { 40 40 }
							texture = "gfx/interface/window_regency/scale_of_power.dds"

							blockoverride "master_color_frame" {
								frame = 1
							}
						}

						vbox = {
							margin_left = 15

							text_single = {
								layoutpolicy_horizontal = expanding
								alwaystransparent = yes
								text = "[MyRealmWindow.GetDiarchLabel]"
								align = left|nobaseline
								max_width = 480
							}

							text_single = {
								visible = "[Diarchy.IsValid]"
								layoutpolicy_horizontal = expanding
								alwaystransparent = yes
								
								text = "MY_REALM_WINDOW_ACTIVE_DIARCHY"
								align = left|nobaseline
								max_width = 480
							}

							text_single = {
								visible = "[Not( Diarchy.IsValid )]"
								layoutpolicy_horizontal = expanding
								alwaystransparent = yes
								
								text = "MY_REALM_WINDOW_STATUS_INACTIVE_DIARCHY"
								align = left|nobaseline
								max_width = 480
							}
						}

						expand = {}

					}
				}

				hbox = {
					name = "vassals_succession_tabs"
					layoutpolicy_horizontal = expanding

					button_tab = {
						name = "tutorial_highlight_domain_tab"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						down = "[MyRealmWindow.IsShowingDomain]"

						onclick = "[MyRealmWindow.ShowDomain]"
						onclick = "[MyRealmWindow.SendTabClickedTelemetry( 'domain' )]"

						text = "MY_REALM_WINDOW_DOMAIN_TAB"
					}

					button_tab = {
						name = "tutorial_highlight_vassals_tab"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						down = "[MyRealmWindow.IsShowingVassals]"

						onclick = "[MyRealmWindow.ShowVassals]"
						onclick = "[MyRealmWindow.SendTabClickedTelemetry( 'vassals' )]"

						text = "MY_REALM_WINDOW_VASSALS_TAB"
					}

					button_tab = {
						name = "tutorial_highlight_succession_tab"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						down = "[MyRealmWindow.IsShowingSuccession]"

						onclick = "[MyRealmWindow.ShowSuccession]"
						onclick = "[MyRealmWindow.SendTabClickedTelemetry( 'succession' )]"

						text = "MY_REALM_WINDOW_SUCCESSION_TAB"
					}
				}

				### DOMAIN TAB
				vbox = {
					name = "tab_domain"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					visible = "[MyRealmWindow.IsShowingDomain]"

					using = Animation_Tab_Switch

					scrollbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						blockoverride "scrollbox_content" {
							vbox = {
								datamodel = "[MyRealmWindow.GetDomainItems]"
								layoutpolicy_horizontal = expanding
								spacing = 20

								item = {
									vbox = {
										layoutpolicy_horizontal = expanding
										name = "duchy_group"

										hbox = {
											layoutpolicy_horizontal = expanding

											hbox = {
												spacing = 5

												coa_title_tiny_crown = {
													datacontext = "[DuchyGroup.GetDuchy]"
													using = tooltip_ws
												}

												text_label_center = {
													text = "[DuchyGroup.GetDuchy.GetNameNoTooltip]"
													using = Font_Size_Medium
													default_format = "#low"
												}
											}
										}

										hbox = {
											layoutpolicy_horizontal = expanding
											margin = { 10 0 }

											divider_light = {
												layoutpolicy_horizontal = expanding
												alpha = 0.6
											}
										}

										vbox = {
											name = "county_group"
											datamodel = "[DuchyGroup.GetCounties]"
											layoutpolicy_horizontal = expanding
											spacing = 20

											item = {
												vbox = {
													layoutpolicy_horizontal = expanding
													datacontext = "[CountyGroup.GetCounty]"
													datacontext = "[CountyGroup.GetCapitalProvince.GetCounty]"

													hbox = {
														layoutpolicy_horizontal = expanding
														margin_left = 5
														margin_right = 10
														spacing = 7

														coa_title_tiny = {}

														text_single = {
															layoutpolicy_horizontal = expanding
															text = "[Title.GetNameNoTooltip]"
															max_width = 180
														}

														expand = {}

														text_single = {
															name = "development"
															text = "MY_REALM_WINDOW_DEVELOPMENT"
															tooltip = "COUNTY_DEVELOPMENT_TOOLTIP"
															max_width = 140
														}

														text_single = {
															name = "tutorial_highlight_control"
															text = "[CountyGroup.GetCountyControlColored]"
															tooltip = "MY_REALM_WINDOW_CONTROL_TOOLTIP"
															max_width = 130
														}
													}

													vbox = {
														datamodel = "[CountyGroup.GetHoldings]"
														layoutpolicy_horizontal = expanding
														margin_left = 10
														margin_right = 10
														margin_bottom = 5
														spacing = 3

														item = {
															vbox = {
																layoutpolicy_horizontal = expanding
																datacontext = "[HoldingItem.GetHolding]"

																background = {
																	fittype = centercrop
																	alpha = 0.7
																	texture = "[HoldingItem.GetHolding.GetIllustration]"

																	modify_texture = {
																		texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
																		blend_mode = alphamultiply
																	}

																	modify_texture = {
																		texture = "gfx/interface/component_overlay/overlay_effect.dds"
																		blend_mode = overlay
																	}
																}

																button_standard_clean = {
																	layoutpolicy_horizontal = expanding
																	size = { 0 80 }

																	onclick = "[HoldingItem.OnClick]"
																	onclick = "[MyRealmWindow.SendButtonClickedTelemetry( 'holding' )]"

																	tooltipwidget = { holding_tooltip_click = {} }

																	background = {
																		using = Background_Button_Illustration
																		visible = "[Holding.IsSelected]"
																	}

																	using = Background_Vignette_Button
																	using = Holding_Mouse_Entry

																	vbox = {
																		margin = { 10 2 }

																		hbox = {
																			name = "holding_header"
																			layoutpolicy_horizontal = expanding
																			spacing = 6

																			hbox = {
																				spacing = 6

																				background = {
																					margin_left = 15
																					margin_right = 25
																					margin_top = 0
																					margin_bottom = 5

																					texture = "gfx/interface/component_tiles/tile_title_bg_01.dds"
																					spriteType = Corneredtiled
																					spriteborder = { 40 8 }
																					texture_density = 2

																					modify_texture = {
																						name = "mask"
																						texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
																						blend_mode = alphamultiply
																						mirror = horizontal
																					}
																				}

																				icon = {
																					name = "realm_capital_icon"
																					size = { 25 25 }
																					framesize = { 63 63 }
																					texture = "gfx/interface/icons/icon_capital.dds"
																					visible = "[HoldingItem.IsRealmCapital]"
																					frame = 2
																					tooltip = "REALM_CAPITAL_TOOLTIP"
																				}

																				text_single = {
																					text = "MY_REALM_WINDOW_HOLDING_NAME"
																				}
																			}

																			expand = {}

																			text_single = {
																				alwaystransparent = yes
																				default_format = "#high"
																				minimumsize = { 60 0}

																				text = "MY_REALM_WINDOW_HOLDING_TAX"
																				tooltip = "[Holding.GetTaxTooltip]"
																			}

																			text_single = {
																				alwaystransparent = yes
																				margin_left = 4
																				minimumsize = { 70 0}
																				text = "MY_REALM_WINDOW_HOLDING_LEVY"
																				default_format = "#high"
																				tooltip = "[Holding.GetLeviesTooltip]"
																			}
																		}

																		hbox = {
																			layoutpolicy_horizontal = expanding
																			name = "holding_buildings"

																			minimumsize = { 0 40 }

																			vbox = {
																				tooltip = "MY_REALM_WINDOW_BUILDING_CONSTRUCTION_TT"
																				using = tooltip_ne


																				text_single = {
																					text = "[HoldingItem.GetStatusText]"
																					align = nobaseline
																				}

																				hbox = {
																					layoutpolicy_horizontal = expanding

																					progressbar_standard = {
																						name = "building_progressbar"
																						visible = "[HoldingItem.GetHolding.IsConstructionInProgress]"
																						alwaystransparent = yes

																						layoutpolicy_horizontal = expanding
																						maximumsize = { -1 15 }
																						value = "[HoldingItem.GetHolding.GetConstructionProgress]"
																						direction = horizontal
																					}

																					expand = {}
																				}
																			}

																			text_single = {
																				layoutpolicy_horizontal = expanding
																				visible = "[HoldingItem.GetHolding.CanConstructAnyBuilding(GetPlayer)]"
																				text = "MY_REALM_WINDOW_CONSTRUCT_BUILDING"
																				default_format = "#P"
																			}

																			expand = {}

																		}
																	}
																}
															}
														}
													}

													vbox = {
														layoutpolicy_horizontal = expanding
														visible = "[DataModelHasItems(CountyGroup.GetEmptyHoldings)]"
														spacing = 5
														margin_left = 10
														margin_right = 10

														button_group = {
															layoutpolicy_horizontal = expanding

															onclick = "[CountyGroup.ToggleExpanded]"
															onclick = "[MyRealmWindow.SendButtonClickedTelemetry( 'empty_holdings' )]"

															flowcontainer = {
																spacing = 5

																widget = {
																	size = { 18 22 }

																	button_expand = {
																		frame = "[Select_int32( CountyGroup.IsExpanded, '(int32)2', '(int32)1' )]"
																		parentanchor = center
																	}
																}

																text_single = {
																	text = "ME_REALM_WINDOW_EMPTY_HOLDINGS"
																	default_format = "#low"
																	align = nobaseline
																}
															}
														}

														expand = {}

														vbox = {
															datamodel = "[CountyGroup.GetEmptyHoldings]"
															visible = "[CountyGroup.IsExpanded]"
															layoutpolicy_horizontal = expanding
															margin_left = 23
															margin_bottom = 5
															spacing = 4

															item = {
																vbox = {
																	layoutpolicy_horizontal = expanding
																	datacontext = "[HoldingItem.GetHolding]"

																	button_standard = {
																		layoutpolicy_horizontal = expanding
																		layoutpolicy_vertical = expanding
																		minimumsize = { 0 45 }

																		datacontext = "[HoldingItem.GetHolding]"
																		onclick = "[HoldingItem.OnClick]"
																		down = "[Holding.IsSelected]"

																		using = Holding_Mouse_Entry
																		using = Background_Vignette_Button

																		tooltipwidget = {
																			holding_tooltip_click = {}
																		}
																		using = tooltip_ne

																		widget = {
																			scissor = yes
																			size = { 350 43 }
																			parentanchor = right|top

																			icon = {
																				name = "illustration"
																				parentanchor = right|top
																				size = { 180 90 }
																				texture = "[HoldingItem.GetHolding.GetProvince.GetTerrain.GetIllustration]"
																				alpha = 0.4
																				mirror = horizontal
																				using = Mask_Rough_Edges

																				modify_texture = {
																					texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
																					blend_mode = alphamultiply
																				}
																			}
																		}

																		hbox = {
																			margin = { 10 0 }

																			vbox = {
																				layoutpolicy_vertical = expanding
																				margin_top = 2

																				text_single = {
																					text = "[HoldingItem.GetBarony.GetNameNoTierNoTooltip]"
																				}

																				expand = {}
																			}

																			expand = {}

																			vbox = {
																				layoutpolicy_vertical = expanding
																				visible = "[HoldingItem.GetHolding.IsConstructionInProgress]"
																				margin = { 0 4 }

																				text_single = {
																					layoutpolicy_horizontal = expanding
																					text = "[HoldingItem.GetStatusText]"

																					align = nobaseline
																				}

																				expand = {}

																				hbox = {
																					layoutpolicy_horizontal = expanding
																					margin_bottom = 3

																					progressbar_standard = {
																						name = "building_progressbar"
																						alwaystransparent = yes
																						size = { 180 12 }
																						value = "[HoldingItem.GetHolding.GetConstructionProgress]"
																						direction = horizontal
																					}
																				}
																			}

																			vbox = {
																				layoutpolicy_vertical = expanding
																				margin_top = 2

																				text_label_right = {
																					visible = "[HoldingItem.GetHolding.CanConstructAnyBuilding(GetPlayer)]"
																					layoutpolicy_vertical = fixed
																					text = "MY_REALM_WINDOW_CONSTRUCT_HOLDING"
																					default_format = "#P"
																				}

																				expand = {}
																			}
																		}
																	}
																}
															}
														}
													}

													expand = {}
												}
											}
										}
									}
								}
							}
						}
					}
				}

				### VASSALS TAB
				vbox = {
					name = "tab_vassals"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					visible = "[MyRealmWindow.IsShowingVassals]"

					state = {
						name = _show
						using = Animation_FadeIn_Quick
					}

					state = {
						name = _hide
						alpha = 0
					}

					hbox = {
						name = "vassal_filters_container"
						margin = { 0 4 }
						layoutpolicy_horizontal = expanding

						dropdown_menu_standard = {
							name = "government_filters_dropdown"

							blockoverride "dropdown_properties"
							{
								datamodel = "[MyRealmWindow.GetGovernmentTypeFilters]"

								onselectionchanged = "[MyRealmWindow.SelectActiveGovernmentTypeFilter]"
								selectedindex = "[MyRealmWindow.GetActiveGovernmentTypeFilterIndex]"
							}

							blockoverride "dropdown_active_item_properties"
							{
								text = "MRW_GOVERNMENT_FILTER"
								tooltip = "MRW_GOVERNMENT_FILTER_DROPDOWN_TT"
							}

							blockoverride "dropdown_item_properties"
							{
								text = "MRW_GOVERNMENT_FILTER"
								tooltip = "MRW_GOVERNMENT_FILTER_TT"
							}
						}

						dropdown_menu_standard = {
							name = "vassal_stance_filters_dropdown"

							blockoverride "dropdown_properties"
							{
								datamodel = "[MyRealmWindow.GetVassalStanceFilters]"

								onselectionchanged = "[MyRealmWindow.SelectActiveVassalStanceFilter]"
								selectedindex = "[MyRealmWindow.GetActiveVassalStanceFilterIndex]"
							}

							blockoverride "dropdown_active_item_properties"
							{
								text = "MRW_VASSAL_STANCE_FILTER"
								tooltip = "MRW_VASSAL_STANCE_FILTER_DROPDOWN_TT"
							}

							blockoverride "dropdown_item_properties"
							{
								text = "MRW_VASSAL_STANCE_FILTER"
								tooltip = "MRW_VASSAL_STANCE_FILTER_TT"
							}
						}
					}

					text_single = {
						name = "government_filter_label"
						margin_bottom = 10

						visible = "[MyRealmWindow.HasActiveGovernmentTypeFilter]"
						text = "[MyRealmWindow.GetActiveGovernmentTypeFilter.GetVassalsLabel]"
					}

					scrollbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						blockoverride "scrollbox_margins" {
							margin = { 4 4 }
						}

						blockoverride "scrollbox_content"
						{
							visible = "[GreaterThan_int32( MyRealmWindow.GetVassalCount, '(int32)0' )]"

							fixedgridbox = {
								layoutpolicy_horizontal = expanding
								datacontext = "[MyRealmWindow.GetPowerfulVassals]"
								datamodel = "[CharacterSelectionList.GetList]"
								visible = "[Not(CharacterSelectionList.IsBuildingList)]"
								addcolumn = 545
								addrow = 190
								setitemsizefromcell = yes

								item = {
									widget_vassal_list_item = {
										datacontext = "[CharacterListItem.GetCharacter]"
										datacontext = "[MyRealmWindow.GetVassalInfo( Character.Self )]"
										datacontext = "[MyRealmWindowVassalItem.GetContract]"

										blockoverride "feudal_contract_button_round"
										{
											onclick = "[MyRealmWindow.SendButtonClickedTelemetry( 'vassal_contract' )]"
										}

										blockoverride "vassal_portrait"
										{
											portrait_shoulders = {}
										}
									}
								}
							}

							fixedgridbox = {
								layoutpolicy_horizontal = expanding
								datacontext = "[MyRealmWindow.GetRegularVassals]"
								datamodel = "[CharacterSelectionList.GetList]"
								visible = "[Not(CharacterSelectionList.IsBuildingList)]"
								addcolumn = 545
								addrow = 190
								setitemsizefromcell = yes

								item = {
									widget_vassal_list_item = {
										datacontext = "[CharacterListItem.GetCharacter]"
										datacontext = "[MyRealmWindow.GetVassalInfo( Character.Self )]"
										datacontext = "[MyRealmWindowVassalItem.GetContract]"
									}
								}
							}
							expand = {}
						}

						vbox = {
							visible = "[EqualTo_int32( MyRealmWindow.GetVassalCount, '(int32)0' )]"
							text_single = {
								text = "NO_VASSALS_TO_DISPLAY"
								default_format = "#weak"
							}
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						margin = { 16 16 }

						vbox = {
							layoutpolicy_horizontal = expanding
							margin = { 8 4 }
							spacing = 4

							background = {
								using = Background_Area
								margin_bottom = 8
								margin_top = 4
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								margin = { 8 0 }

								text_single = {
									default_format = "#high"
									text = "MY_REALM_WINDOW_VASSAL_OPINION"
									max_width = 170
									tooltip = "MY_REALM_WINDOW_VASSAL_OPINION_TT"
								}

								expand = {}

								hbox = {
									tooltip = "[GetPlayer.GetDreadBreakdown]"

									icon = {
										name = "dread_icon"
										size = { 30 30 }
										texture = "gfx/interface/icons/icon_dread.dds"
									}

									text_single = {
										name = "dread_name"
										text = "[dread|E]: [GetPlayer.GetDread|0]"
										default_format = "#high"
										max_width = 90
									}
								}

								expand = {}

								hbox = {
									name = "tutorial_highlight_vassal_limit"
									spacing = 4
									
									tooltip = "[Character.GetVassalLimitTooltip]"

									background = {
										visible = "[GreaterThan_int32( Character.GetNumVassalsTowardsLimit, Character.GetVassalLimit )]"
										using = Status_Bad
									}

									icon = {
										size = { 30 30 }
										texture = "gfx/interface/icons/icon_vassal.dds"
									}

									text_single = {
										text = "MY_REALM_WINDOW_VASSAL_LIMIT"
										max_width = 130
									}

									text_single = {
										text = "MY_REALM_WINDOW_VASSAL_LIMIT_VALUE"
										max_width = 50
									}
								}
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								margin = { 8 0 }

								text_single = {
									margin_bottom = 4
									text = MY_REALM_WINDOW_VASSAL_STANCES
								}

								spacing = 8
								
								hbox = {
									datamodel = "[GetAllVassalStances]"
									spacing = 8
									
									item = {
										hbox = {
											visible = "[NotEqualTo_int32( MyRealmWindow.GetNumVassalsWithStance( VassalStance.Self ), '(int32)0' )]"
											
											text_single = {
												margin_bottom = 4
												margin_right = 4
												margin_left = 4
												using = Background_Area_Border
												text = "MY_REALM_WINDOW_VASSAL_STANCE_COUNT"
												tooltip = "MY_REALM_WINDOW_VASSAL_STANCE_COUNT_TT"
											}
										}
									}
								}

								expand = {}
							}
						}
					}
				}

				### SUCCESSION TAB
				vbox = {
					name = "tab_succession"
					visible = "[MyRealmWindow.IsShowingSuccession]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					state = {
						name = _show
						using = Animation_FadeIn_Quick
					}

					state = {
						name = _hide
						alpha = 0
					}

					vbox = {
						margin = { 20 15 }
						margin_bottom = 10
						spacing = 4
						layoutpolicy_horizontal = expanding

						text_label_center = {
							text = "MY_REALM_WINDOW_CURRENT_SUCCESSION"
						}

						vbox = {
							datamodel = "[MyRealmWindow.GetRealmLaws]"
							spacing = 10
							margin_bottom = 5
							ignoreinvisible = yes
							layoutpolicy_horizontal = expanding

							item = {
								hbox = {
									visible = "[And( Not( GuiLawGroup.GetLawGroup.HasFlag( 'realm_law' ) ), GuiLawGroup.IsAvailable )]"
									layoutpolicy_horizontal = growing

									vbox = {
										layoutpolicy_horizontal = growing

										text_single = {
											layoutpolicy_horizontal = growing
											max_width = 350
											raw_text = "[GuiLawGroup.GetLawGroup.GetNameSingular]:"
										}

										text_single = {
											layoutpolicy_horizontal = growing
											max_width = 350
											text = "[GuiLawGroup.GetCurrentLevel.GetLaw.GetName]"
											default_format = "#high"
										}

										text_single = {
											layoutpolicy_horizontal = growing
											max_width = 350
											visible = "[GuiLawGroup.GetCurrentLevel.GetLaw.HasSubName]"
											text = "[GuiLawGroup.GetCurrentLevel.GetLaw.GetSubName]"
											default_format = "#F"
										}
									}
									expand = {
										layoutpolicy_horizontal = growing
									}

									button_standard = {
										datacontext = "[GuiLawGroup]"
										size = { 150 32 }

										onclick = "[OpenSuccessionLawChangeWindow(GuiLawGroup.Self)]"
										onclick = "[MyRealmWindow.SendButtonClickedTelemetry( GuiLawGroup.GetLawGroup.GetKey )]"

										text = "MRW_CHANGE_LAW"
										tooltip = "MRW_CHANGE_LAW_TT"
									}
								}
							}
						}

						divider_light = {
							layoutpolicy_horizontal = growing
						}

						hbox = {
							layoutpolicy_horizontal = growing

							vbox = {
								layoutpolicy_horizontal = growing


								text_single = {
									layoutpolicy_horizontal = growing
									max_width = 350
									text = "MRW_DESIGNATED_HEIR_LABEL"
								}

								text_single = {
									visible = "[MyRealmWindow.GetCharacter.GetDesignatedHeir.IsValid]"
									layoutpolicy_horizontal = growing
									text = "MRW_DESIGNATED_HEIR"
									max_width = 350
								}

								text_single = {
									visible = "[Not(MyRealmWindow.GetCharacter.GetDesignatedHeir.IsValid)]"
									layoutpolicy_horizontal = growing
									text = "MRW_NO_DESIGNATED_HEIR"
									max_width = 350
								}
							}

							button_standard = {
								text = "MY_REALM_WINDOW_DESIGNATE_HEIR"
								size = { 150 32 }
								tooltip = "MRW_DESIGNATE_HEIR_TT"
								enabled = "[MyRealmWindow.CanDesignateHeir]"
								onclick = "[OpenDesignateHeirWindow]"
							}
						}
					}

					scrollbox = {
						name = "succession_scrollbox"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						minimumsize = { 0 350 }

						blockoverride "scrollbox_content"
						{
							margin = { 20 10 }
							spacing = 10

							hbox = {
								name = "current_heir"
								layoutpolicy_horizontal = expanding

								background = {
									using =  Background_Area_Dark
									alpha = 0.8

									modify_texture = {
										texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
										blend_mode = alphamultiply
										mirror = horizontal
									}
								}

								portrait_head = {
									datacontext = "[MyRealmWindow.GetCharacter.GetPlayerHeir]"
									blockoverride "glow_visible"
									{
										visible = no
									}
								}

								vbox = {
									layoutpolicy_vertical = expanding
									layoutpolicy_horizontal = expanding
									margin = { 5 0 }
									margin_top = 5

									vbox = {
										layoutpolicy_horizontal = expanding

										text_single = {
											visible = "[MyRealmWindow.HasHeir]"
											layoutpolicy_horizontal = expanding
											autoresize = no
											using = Font_Size_Medium
											fontsize_min = 14

											text = "[MyRealmWindow.GetCharacter.GetPlayerHeir.GetUINameNoTooltip]"
											default_format = "#low"
										}

										text_single = {
											name = "vassal_stances_that_prefer"
											datacontext = "[MyRealmWindow.GetCharacter.GetPlayerHeir]"

											visible = "[And( MyRealmWindow.HasHeir, Not( StringIsEmpty( MyRealmWindow.GetCharacter.GetVassalStancesThatPrefer( Character.Self ) ) ) )]"

											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
											autoresize = no

											text = "MRW_HEIR_PREFERRED"
											using = Font_Size_Medium
										}

										text_single = {
											visible = "[MyRealmWindow.HasHeir]"
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
											autoresize = no

											text = "MRW_YOUR_PLAYER_HEIR"
											default_format = "#weak"
										}
									}

									vbox = {
										layoutpolicy_horizontal = expanding

										text_single = {
											name = "no_heir_warning"
											visible = "[Not( MyRealmWindow.HasHeir )]"
											layoutpolicy_horizontal = expanding
											text = "MY_REALM_WINDOW_NO_HEIR_FLAVOR"
										}

										text_single = {
											name = "not_primary_heir"
											visible = "[And( MyRealmWindow.HasHeir, Not( ObjectsEqual( MyRealmWindow.GetCharacter.GetPlayerHeir, MyRealmWindow.GetCharacter.GetPrimaryTitle.GetHeir.Self ) ) )]"
											layoutpolicy_horizontal = expanding
											text = "MY_REALM_WINDOW_NOT_PRIMARY_HEIR"
										}
									}

									expand = {}
								}
							}

							##### FROM REALM'S PARTITION #####
							vbox = {
								layoutpolicy_horizontal = expanding

								vbox = {
									name = "their_partition_share"
									visible = "[And(MyRealmWindow.HasPartition, DataModelHasItems(MyRealmWindow.GetMyPartitionShare))]"
									layoutpolicy_horizontal = expanding
									margin_left = 5

									hbox = {
										layoutpolicy_horizontal = expanding

										text_label_left = {
											layoutpolicy_horizontal = expanding
											text = "MY_REALM_WINDOW_PARTITION_SHARE"
										}

										expand = {}
									}

									overlappingitembox = {
										name = "partition_share_box"
										datamodel = "[MyRealmWindow.GetMyPartitionShare]"
										layoutpolicy_horizontal = expanding
										size = { 460 55 }
										spacing = 10

										item = {
											coa_title_tiny_crown = {
												datacontext = "[TitleItem.GetTitle]"
												using = tooltip_ne
											}
										}
									}
								}

								spacer = {
									size = { 5 5 }
								}

								hbox = {
									layoutpolicy_horizontal = expanding
									visible = "[DataModelHasItems(MyRealmWindow.GetTitleSuccession)]"
									margin = { 5 0 }

									button_group = {
										onclick = "[GetVariableSystem.Toggle( 'expand_partition' )]"

										button_standard = {
											size = { 510 28 }
											
											modify_texture = {
												texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
												blend_mode = alphamultiply
												mirror = horizontal
											}
										}

										flowcontainer = {
											ignoreinvisible = yes
											spacing = 5
											margin_top = 2.5
											margin_left = 5

											widget = {
												size = { 18 22 }

												button_expand = {
													visible = "[Not(GetVariableSystem.Exists( 'expand_partition' ))]"
													parentanchor = center
													frame = 1
												}

												button_expand = {
													visible = "[GetVariableSystem.Exists( 'expand_partition' )]"
													parentanchor = center
													frame = 2
												}
											}

											text_single = {
												text = "MY_REALM_WINDOW_TITLES_LOST_ON_SUCCESSION"
												align = nobaseline
											}

										}
									}

									expand = {}
								}

								spacer = {
									visible = "[GetVariableSystem.Exists( 'expand_partition' )]"
									size = { 5 5 }
								}

								dynamicgridbox = {
									name = "title_succession"
									datamodel = "[MyRealmWindow.GetTitleSuccession]"
									visible = "[GetVariableSystem.Exists( 'expand_partition' )]"
									layoutpolicy_horizontal = expanding

									item = {
										hbox = {
											maximumsize = { -1 100 }
											margin_left = 10
											margin_bottom = 5
											datacontext = "[TitleSuccessionItem.GetHeir]"

											background = {
												using = Background_Area_With_Header
											}

											vbox = {
												layoutpolicy_horizontal = expanding
												layoutpolicy_vertical = growing
												margin_bottom = 5

												text_single = {
													name = "heir_name"
													text = "[Character.GetUINameNoTooltip]"
													layoutpolicy_horizontal = expanding
													using = Font_Size_Medium
													max_width = 400
													fontsize_min = 14
												}

												spacer = {
													size = { 10 5 }
												}

												text_single = {
													name = "heir_not_your_dynasty"
													layoutpolicy_horizontal = expanding

													text = "MY_REALM_WINDOW_HEIR_NOT_MY_DYNASTY"
													visible = "[Not(ObjectsEqual(Character.GetHouse.GetDynasty.Self, GetPlayer.GetHouse.GetDynasty.Self))]"
													using = Font_Size_Small
												}

												text_single = {
													name = "vassal_stances_that_prefer"
													visible = "[Not( StringIsEmpty( MyRealmWindow.GetCharacter.GetVassalStancesThatPrefer( Character.Self ) ) )]"

													layoutpolicy_horizontal = expanding
													layoutpolicy_vertical = expanding
													autoresize = no

													text = "MRW_HEIR_PREFERRED"
													using = Font_Size_Medium
												}

												text_single = {
													name = "heir_share"
													datacontext = "[GetPlayer]"
													visible = "[DataModelHasItems(TitleSuccessionItem.GetPartitionTitles)]"
													layoutpolicy_horizontal = expanding

													text = "MY_REALM_WINDOW_PARTITION_SHARE"
												}

												overlappingitembox = {
													name = "titles_box"
													datamodel = "[TitleSuccessionItem.GetPartitionTitles]"
													visible = "[DataModelHasItems(TitleSuccessionItem.GetPartitionTitles)]"
													minimumsize = { 350 50 }
													spacing = 10

													item = {
														container = {

															coa_title_tiny_crown = {
																datacontext = "[TitleItem.GetTitle]"
																using = tooltip_ne
															}

															icon = {
																name = "has_laws"
																visible = "[TitleItem.GetTitle.HasLaws]"
																parentanchor = bottom|right
																size = { 25 25 }
																position = { 5 0 }
																texture = "gfx/interface/icons/title_status/icon_title_law.dds"
															}
														}
													}
												}

												text_single = {
													name = "exception_label"
													visible = "[DataModelHasItems(TitleSuccessionItem.GetExceptionTitles)]"
													layoutpolicy_horizontal = expanding

													text = "MY_REALM_WINDOW_EXCEPTIONS"
												}

												overlappingitembox = {
													name = "exception_box"
													datamodel = "[TitleSuccessionItem.GetExceptionTitles]"
													visible = "[DataModelHasItems(TitleSuccessionItem.GetExceptionTitles)]"
													minimumsize = { 350 50 }
													spacing = 10

													item = {
														container = {

															coa_title_tiny_crown = {
																datacontext = "[TitleItem.GetTitle]"
																using = tooltip_ne

																icon = {
																	name = "has_laws"
																	visible = "[TitleItem.GetTitle.HasLaws]"
																	parentanchor = bottom|right
																	size = { 25 25 }
																	position = { 5 0 }
																	texture = "gfx/interface/icons/title_status/icon_title_law.dds"
																}
															}
														}
													}
												}
											}

											vbox = {
												layoutpolicy_vertical = expanding

												portrait_head = {
													name = "heir_portrait"
													blockoverride "portrait_button" {
														using = tooltip_ws
													}
												}

												expand = {}
											}
										}
									}
								}
							}

							vbox = {
								name = "exceptions"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = growing
								margin_left = 5

								visible = "[DataModelHasItems(MyRealmWindow.GetSuccessionExceptions)]"

								hbox = {
									layoutpolicy_horizontal = expanding

									text_label_left = {
										layoutpolicy_horizontal = expanding
										text = "MY_REALM_WINDOW_EXCEPTIONS"
									}

									expand = {}
								}

								overlappingitembox = {
									name = "exceptions_box"
									layoutpolicy_horizontal = expanding
									size = { 460 55 }
									spacing = 10

									datamodel = "[MyRealmWindow.GetSuccessionExceptions]"

									item = {
										container = {
											coa_title_tiny_crown = {
												datacontext = "[TitleItem.GetTitle]"
												using = tooltip_ne
											}
										}
									}
								}
							}

							vbox = {
								name = "line_of_succession"
								visible = "[MyRealmWindow.HasSingleHeir]"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = growing
								spacing = 10
								margin = { 5 0 }

								hbox = {
									layoutpolicy_horizontal = expanding

									text_label_left = {
										name = "line_of_succession_label"
										layoutpolicy_horizontal = expanding
										text = "MY_REALM_WINDOW_LINE_OF_SUCCESSION"
									}

									expand = {}
								}

								dynamicgridbox = {
									name = "line_of_succession_box"
									datamodel = "[MyRealmWindow.GetLineOfSuccession]"
									layoutpolicy_horizontal = expanding

									item = {
										hbox = {
											maximumsize = { -1 100 }
											margin_left = 10
											margin_bottom = 5
											datacontext = "[LineOfSuccessionItem.GetCharacter]"

											background = {
												using = Background_Area_With_Header
											}

											vbox = {
												layoutpolicy_vertical = growing
												margin_bottom = 5
												spacing = 2

												hbox = {
													layoutpolicy_horizontal = expanding

													text_single = {
														name = "heir_name"
														raw_text = "#bold [LineOfSuccessionItem.GetOrder|V]#!  [Character.GetShortUINameNoTooltip], "
														margin_left = 2
														max_width = 300
														fontsize = 20
														fontsize_min = 14
														using = Font_Size_Medium
													}

													text_single = {
														name = "character_age"
														raw_text = " [Character.GetAge]"
														default_format = "#low"
														tooltip = "[Character.GetDeathOrBirthDateInfo]"
														fontsize = 20
													}

													vbox = {
														layoutpolicy_vertical = expanding

														expand = {}

														icon = {
															visible = "[Not(Character.IsDeadAndValid)]"
															size = { 23 23 }
															framesize = { 60 60 }
															frame = "[Character.GetHealthIconFrame]"
															texture = "gfx/interface/icons/character_status/icon_health.dds"
															tooltip = "[Character.GetHealthInfo]"
														}
													}

													expand = {}
												}

												spacer = {
													size = { 10 3 }
												}

												hbox = {
													layoutpolicy_horizontal = expanding

													text_single = {
														name = "character_relation_to_you"
														text = "[Character.GetRelationToString( GetPlayer )]"
														tooltip = "EXTENDED_RELATIONS_TOOLTIP"

														fontsize_min = 13
														align = nobaseline
														max_width = 300
													}

													expand = {}
												}

												hbox_traits_list_small = {
													name = "traits_list"
													datacontext = "[LineOfSuccessionItem.GetTraitArrays]"
												}

												text_single = {
													name = "vassal_stances_that_prefer"
													visible = "[Not( StringIsEmpty( MyRealmWindow.GetCharacter.GetVassalStancesThatPrefer( Character.Self ) ) )]"

													layoutpolicy_horizontal = expanding
													autoresize = no

													text = "MRW_HEIR_PREFERRED"
													using = Font_Size_Medium
												}

												expand = {}
											}

											expand = {}

											vbox = {
												layoutpolicy_vertical = expanding

												portrait_shoulders = {
													name = "heir_portrait"
													blockoverride "portrait_button" {
														using = tooltip_ws
													}
												}

												expand = {}
											}
										}
									}
								}
							}

							#### ELECTIONS ####
							vbox = {
								layoutpolicy_horizontal = expanding
								visible = "[MyRealmWindow.CanVote]"
								margin_left = 5

								hbox = {
									layoutpolicy_horizontal = expanding

									text_label_left = {
										layoutpolicy_horizontal = expanding
										text = "MY_REALM_WINDOW_ELECTIONS"
									}

									expand = {}
								}

								flowcontainer = {
									name = "elections"
									direction = vertical

									fixedgridbox = {
										name = "exceptions_box"
										addcolumn = 510
										addrow = 90
										datamodel = "[MyRealmWindow.GetTitlesCanVote]"

										item = {
											widget = {
												name = "election_title"
												size = { 510 90 }
												datacontext = "[TitleItem.GetTitle]"

												hbox = {
													spacing = 10

													coa_title_small_crown = {
														datacontext = "[Title]"
														using = tooltip_ne
													}

													vbox = {
														spacing = 7

														text_single = {
															layoutpolicy_horizontal = expanding
															text = "[Title.GetNameNoTooltip]"
														}

														hbox = {
															layoutpolicy_horizontal = expanding

															button_standard_select_arrow = {
																name = "go_to_vote"

																onclick = "[OpenSuccessionElectionWindowForTitle(Title.Self)]"
																onclick = "[MyRealmWindow.SendButtonClickedTelemetry( 'election' )]"

																blockoverride "button_text"{
																	text = "MY_REALM_WINDOW_VOTE"
																}

																tooltip = "MY_REALM_WINDOW_VOTE_TOOLTIP"
															}

															expand = {}
														}
													}

													expand = {}
												}
											}
										}
									}
								}
							}

							expand = {
								layoutpolicy_vertical = expanding
							}
						}
					}
				}

				vbox = {
					visible = "[Or( MyRealmWindow.IsShowingDomain, MyRealmWindow.IsShowingVassals)]"
					layoutpolicy_horizontal = expanding
					margin = { 15 5 }
					margin_bottom = 15
					spacing = 8

					hbox = {
						visible = "[MyRealmWindow.IsShowingDomain]"
						tooltip = "[GetPlayer.GetDomainLimitTooltip]"
						spacing = 2

						text_single = {
							text = "[SelectLocalization(MyRealmWindow.IsOverDomainLimit, 'MY_REALM_WINDOW_DOMAIN_LIMIT_WARNING', 'MY_REALM_WINDOW_DOMAIN_LIMIT')]"
						}

						icon = {
							size = { 35 35 }
							texture = "gfx/interface/icons/icon_domain.dds"
						}

						text_single = {
							text = "[SelectLocalization(MyRealmWindow.IsOverDomainLimit, 'MY_REALM_WINDOW_DOMAIN_LIMIT_VALUE_WARNING', 'MY_REALM_WINDOW_DOMAIN_LIMIT_VALUE')]"
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						margin = { 80 0 }

						background = {
							using = Background_Area
							margin = { -65 0 }
							margin_bottom = 8
							margin_top = 3
						}

						hbox = {
							margin_bottom = 5
							layoutpolicy_horizontal = expanding

							expand = {
								minimumsize = { 150 0 }
							}

							text_single = {
								text = "MY_REALM_WINDOW_TAXES"
								min_width = 100
								max_width = 100
								align = right
							}

							text_single = {
								text = "MY_REALM_WINDOW_LEVIES"
								minimumsize = { 100 0 }
								maximumsize = { 100 40 }
								align = right
							}
						}

						divider_light = {
							layoutpolicy_horizontal = expanding
						}

						hbox = {
							name = "domain_income_row"
							layoutpolicy_horizontal = expanding

							background = {
								visible = "[MyRealmWindow.IsShowingDomain]"
								using = Status_Highlight
							}

							flowcontainer = {
								spacing = 5

								text_single = {
									layoutpolicy_horizontal = expanding
									text = "MY_REALM_WINDOW_FROM_HOLDINGS"
									align = bottom
								}

								warning_icon = {
									visible = "[MyRealmWindow.IsOverDomainLimit]"
									size = { 25 25 }
									tooltip = "[Character.GetDomainLimitTooltip]"
								}
							}

							expand = {}

							text_single = {
								datacontext = "[MyRealmWindow.GetDomainIncome]"
								text = "[ValueBreakdown.GetValue]"
								min_width = 100
								max_width = 100
								align = right

								tooltipwidget = {
									widget_gold_breakdown_tooltip = {
										blockoverride "income"
										{
											visible = no
										}
									}
								}
							}

							text_single = {
								datacontext = "[MyRealmWindow.GetDomainLevy]"
								text = "[ValueBreakdown.GetValue]"
								minimumsize = { 100 0 }
								align = right
								tooltipwidget = {
									widget_gold_breakdown_tooltip = {
										blockoverride "income"
										{
											visible = no
										}
									}
								}
							}
						}

						hbox = {
							name = "vassals_income_row"
							layoutpolicy_horizontal = expanding

							background = {
								visible = "[MyRealmWindow.IsShowingVassals]"
								using = Status_Highlight
							}

							flowcontainer = {
								spacing = 5

								text_single = {
									layoutpolicy_horizontal = expanding
									text = "MY_REALM_WINDOW_FROM_VASSALS"
									align = bottom
								}

								warning_icon = {
									visible = "[GreaterThan_int32( Character.GetNumVassalsTowardsLimit, Character.GetVassalLimit )]"
									size = { 25 25 }
									tooltip = "[Character.GetVassalLimitTooltip]"
								}
							}

							expand = {}

							text_single = {
								datacontext = "[MyRealmWindow.GetVassalsIncome]"
								text = "[ValueBreakdown.GetValue]"
								min_width = 100
								max_width = 100
								align = right

								tooltipwidget = {
									widget_gold_breakdown_tooltip = {
										blockoverride "income"
										{
											visible = no
										}
									}
								}
							}

							text_single = {
								datacontext = "[MyRealmWindow.GetVassalsLevy]"
								text = "[ValueBreakdown.GetValue]"
								min_width = 100
								max_width = 100
								align = right

								tooltipwidget = {
									widget_gold_breakdown_tooltip = {
										blockoverride "income"
										{
											visible = no
										}
									}
								}
							}
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							visible = "[GetPlayer.HasLiege]"

							text_single = {
								layoutpolicy_horizontal = expanding
								text = "MY_REALM_WINDOW_FROM_TO_LIEGE"
							}

							text_single = {
								datacontext = "[MyRealmWindow.GetIncomeTax]"
								text = "[ValueBreakdown.GetValue]"
								min_width = 100
								max_width = 100
								align = right

								tooltipwidget = {
									my_realm_window_contribution_tooltip = {
										datacontext = "[MyRealmWindow.GetCharacter]"
										blockoverride "contribution_tooltip_header"
										{
											text = "MRW_TT_TAXES_TO_MY_LIEGE"
										}
										blockoverride "contribution_tooltip_content_suffix" {}
									}
								}
							}

							text_single = {
								datacontext = "[MyRealmWindow.GetLevyTax]"
								text = "[ValueBreakdown.GetValue]"
								min_width = 100
								max_width = 100
								align = right

								tooltipwidget = {
									my_realm_window_contribution_tooltip = {
										datacontext = "[MyRealmWindow.GetCharacter]"
										blockoverride "contribution_tooltip_header"
										{
											text = "MRW_TT_LEVIES_TO_MY_LIEGE"
										}
										blockoverride "contribution_tooltip_content_suffix" {}
									}
								}
							}
						}

						hbox = {
							name = "vassal_contract"
							datacontext = "[MyRealmWindow.GetCharacter.GetLiege]"
							datacontext = "[MyRealmWindow.GetCharacter.GetVassalContract]"
							visible = "[Character.IsPlayerInteractionShown('vassal_modify_vassal_contract_interaction')]"
							margin_left = 3
							spacing = 10

							button_replace = {
								enabled = "[Character.IsPlayerInteractionValid('vassal_modify_vassal_contract_interaction')]"
								onclick = "[Character.OpenPlayerInteraction('vassal_modify_vassal_contract_interaction')]"
								tooltip = "[Character.GetPlayerInteractionTooltip('vassal_modify_vassal_contract_interaction')]"
							}

							text_single = {
								visible = "[VassalContract.UsesObligationLevels]"
								layoutpolicy_horizontal = expanding
								align = center
								text = "MY_REALM_WINDOW_MY_OBLIGATIONS"
							}

							vassal_contract_not_default_icon = {}
						}
					}
				}
			}
		}
	}
}

######################################################
################ TYPES AND TEMPLATES #################
######################################################

types MyRealmWindow
{
	type my_realm_window_contribution_tooltip = container {
		alwaystransparent = no
		widget = {
			name = "background"
			using = Background_Tooltip
			size = { 100% 100% }
			alwaystransparent = no
		}

		flowcontainer = {
			margin = { 10 0 }
			margin_top = 10
			spacing = 15
			direction = vertical
			ignoreinvisible = yes

			text_single = {
				margin = { 5 0 }
				block "contribution_tooltip_header" {}
			}

			widget_gold_breakdown_tooltip = {
				layoutpolicy_horizontal = expanding
				blockoverride "income"
				{
					visible = no
				}

				blockoverride "background" {}
			}

			block "contribution_tooltip_content_suffix" {
				text_single = {
					multiline = yes
					maximumsize = { 250 -1 }
					text = "MY_REALM_WINDOW_CONTRIBUTION_TO_THEOCRATIC_LIEGE"
					visible = "[Character.IsTheocraticLessee]"
				}
			}

			flowcontainer = {
				spacing = 15
				direction = vertical
				ignoreinvisible = yes
				block "tax_info_visible" {}
				block "tax_info" {}
			}

			flowcontainer = {
				spacing = 15
				direction = vertical
				ignoreinvisible = yes
				block "levy_info_visible" {}
				block "levy_info" {}
			}
		}
	}

	type vassal_contract_not_default_icon = icon
	{
		texture = "gfx/interface/icons/icon_contract_modification.dds"
		framesize = { 60 60 }
		frame = 1
		name = "vassal_contract_not_default"
		size = { 25 25 }
		visible = "[Not( VassalContract.IsContractDefault )]"
		tooltip = "VASSAL_CONTRACT_NOT_DEFAULT"
		using = tooltip_sw
	}

	type vassal_stance_icon = icon
	{
		datacontext = "[Character.GetVassalStance]"
		visible = "[And( Character.IsVassalOf( GetPlayer ), Not( Character.IsPlayer ) )]"

		texture = "[VassalStance.GetIcon]"
		tooltipwidget = {
			using = vassal_stance_tooltip
		}
	}
}
