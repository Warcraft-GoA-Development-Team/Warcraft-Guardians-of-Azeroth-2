#######################################################################
# Structure 
#######################################################################

### brief: any_database_key
# Flavourization is a modification made to how names and titles are 
# presented. The properties of a flavourization is tested in the order
# they are presented in this document. For a flavourization to apply
# all conditions must apply to the character being evaluated. 
#
# Flavourizations are evaluated by looking at a Character, a Contextual
# Character, a Causing Title and a Current Priority. 
#	-	Character 
#			The character the flavourization is being applied to. 
#	-	Contextual Character
#			The target character which is being tested for conditions.
#			This is the owner of the Causing Title. 
#	-	Causing Title
#			The title the contextual character has. This is the Naming 
#			Title of the Character, which is either the Character's 
#			Primary Title or the Primary Title of their spouse, 
#			depending on whose title is the highest rank. 
#	-	Current Priority
#			The priority assigned to this flavourization. A 
#			flavourization entry will only be evaluated if its priority
#			is higher than the previously tested flavourization's 
#			priority.
#
# Unless otherwise specified all tests MUST be fulfilled for a 
# flavourization to be eligible. 
#
# If all conditions are met, the flavourization type will localize a 
# localization key of the same name.
#
flavourization_type = {

	### brief: type ( enum )
	# What type of object does this flavourization apply to? Some 
	# checks may not be applicable to all objects, this will be noted
	# in the documentation on that member. 
	#
	# Valid values: 
	# 	character
	#		The flavourization given to the character as their title. 
	#		Character flavourizations are further divided into 
	#		sub-categories to simplify the search process. They are 
	#		divided into tiered flavour and non-tiered flavour, where
	#		tiered flavours are based on the landed title tier a 
	#		character may be part of and non-tiered flavour is 
	#		independent of title ranks. Both of these are then further
	#		divided into sub-groups of special flavours, as defined by
	#		the special member as defined below.
	#
	#		Example: 
	#			Emperor vs. High King
	#		 	Petty King vs. Duke
	#
	#	title
	#		The flavourization given to a title to denote its rank. 
	#		These are also divided into tiers and non-tier groups.
	#
	#		Example: 
	#			Duchy vs. Petty Kingdom
	#			Swiss Confederation vs. Archduchy of Austria
	#
	#	domicile
	#		The flavourization given to a domicile. 
	#
	#		Example: 
	#			X's Estate vs. X's Grounds
	#
	type = character 

	### brief: gender ( enum )
	# Is this flavourization being applied to a male or female 
	# character. 
	#
	# Only applies if the type is character. 
	#
	# Valid values: 
	#	male
	#	female
	#
	gender = male

	### brief: tier ( enum )
	# Whether this flavourization is part of the tiered or non-tiered
	# flavourization. 
	#
	# If a flavorization does not have a tier it can apply to all tiers
	# of characters. Too many non-tiered flavorizations is bad for 
	# performance, YOU HAVE BEEN WARNED!
	#
	# Only applies if the type is character or title.
	#
	# Valid values: 
	#	barony
	#	county
	#	douchy
	#	kingdom
	#	empire
	#	none
	#
	tier = none

	### brief: special ( enum )
	# Is this a special type of flavourization? Some of these these are
	# explicitly tested before regular flavourization is checked. It 
	# will find the first eligible of these and proceed with regular 
	# flavourization. 
	#
	# Only applies if the type is character. 
	#
	# Valid values: 
	#	head_of_faith
	#		Applies if the character is a head of faith.
	#
	#	councillor
	#		Applies if the character is a councillor.
	#
	#	queen_mother
	#		Applies if the character is the mother of an underage 
	#		ruler.
	#
	#	ruler_child
	#		Applies if the character is the child of a ruler. 
	#
	#	domicile
	#		Applies if the character or their spouse has a domicile. 
	#
	# 	holder
	#		Default value. This will always get checked. 
	#
	special = holder

	### brief: priority ( int32 )
	# A static priority assigned to this flavourization. Will pick the
	# flavourization with the highest priority. A flavourization with
	# lower priority than what has already been evaluated will be 
	# skipped.
	#
	priority = 1

	### brief: flavourization_rules ( enum bitmask container )
	# The properties of a flavourization type that is referenced in 
	# code. These are evaluated in sequence. 
	#
	flavourization_rules = {

		### brief: faction ( bool )
		# Default: no
		# Enabling this will apply this flavourization to characters  
		# that are faction leaders. The Causing Title MUST have a 
		# faction. 
		#
		faction = no

		### brief: only_independent ( bool )
		# Default: no
		# Enabling this will apply this flavourization only if the 
		# Context Character is independent. 
		#
		only_independent = no

		### brief: spouse_takes_title ( bool )
		# Default: yes
		# Enabling this will make the spouse of the Context Character
		# valid for this flavourization. 
		#
		spouse_takes_title = yes

		### brief: only_holder ( bool )
		# Enabling this will apply this flavourization if and only if
		# the character being evaluated is also the Contexted 
		# Character, i.e the holder of the Causing Title. 
		#
		only_holder = no

		### brief: top_liege ( bool )
		# Default: yes
		# Enabling this will make the Context Character instead target
		# the top liege for all other tests involving the Context 
		# Character. 
		#
		top_liege = yes

		### brief: only_vassals ( bool )
		# Default: no
		# Enabling this will apply this flavourization only if and only
		# if the the character being evaluated is NOT independent,
		# meaning they are the vassal of another ruler.
		#
		only_vassals = no

		### brief: ignore_top_liege_government ( bool )
		# Default: no
		# Only works if top_liege rule is enabled (default).
		# Enabling this will use the top_liege as the reference for all
		# checks EXCEPT government, which will depend on the character
		# being checked.
		#
		ignore_top_liege_government = no
	}

	### brief: flag ( integer flag )
	# Does the contexted character have the specified flag?
	#
	flag = some_integer_flag

	### brief: governments ( array of database keys )
	# The Context Character must have one of the government types 
	# listed within. 
	#
	# Keys are mapped to the governments database: common/governments/ 
	#
	governments = { }

	### brief: domicile_type ( database key )
	# The Context Character must have the specified domicile type. 
	#
	# Requires field when type is domicile.
	#
	# Key is mapped to the domiciles database: common/domiciles/ 
	#
	domicile_type = some_domicile_database_key 

	### brief:  ( array of database keys  )
	# The Context Character's culture must be part of one of the 
	# culture names listed within. 
	#
	# Keys are mapped to the culture names list database: 
	# common/culture/name_lists 
	#
	name_lists = { }

	### brief: heritages ( array of database keys )
	# The Context Character's culture must have one of the cultural 
	# heritages listed within. 
	#
	# Keys are mapped to the culture pillars with the heritage type 
	# within the database: common/culture/pillars 
	#
	heritages = { }

	### brief: faiths ( array of database keys )
	# The Context Character's faith must be one of the faiths listed 
	# within.
	#
	# Keys are mapped to the faith templates found within the religion
	# database: common/religion/religions
	# 	some_religion = { 
	#		... 
	#		faiths = { 
	#			faith_1 = { ... } 
	#			faith_2 = { ... } 
	#		}
	#	}
	#
	faiths = { }

	### brief: religions ( array of database keys )
	# The Context Character's faith must be one of the faiths listed 
	# within.
	#
	# Keys are mapped to the religion template database: 
	# common/religion/religions 
	#
	religions = { }

	### brief: council_position ( database key )
	# Is the Character holding the specified council position?
	#
	# Key is mapped to the council position database: 
	# common/council_positions
	#
	council_position = council_position_key

	### brief: de_jure_liege ( array of database keys )
	# Does the Causing Title fall under the De Jure of the specified
	# title?
	#
	# Keys are mapped to the landed titles database: 
	# common/landed_titles
	#
	de_jure_liege = { }

	### brief: holding ( database key )
	# Checks if the holding at the Causing Title is of the specified 
	# type.
	# 
	# Only applies if the type is title.
	# Requires tier to be barony.
	#
	# Key is mapped to the holding database: common/holdings/ 
	#
	holding = holding_database_key

	### brief: titles ( array of database keys )
	# Is the Causing Title one of the specified titles? 
	#
	# Only applies if the type is character or title.
	#
	# Keys are mapped to the landed titles database: 
	# common/landed_titles
	#
	titles = { }
}

#######################################################################
# Example 
#######################################################################

# This example will add the flavourization "Badass Queen" to the Queen 
# of Norway if she holds the kingdom title herself while she is 
# independent and feudal. 
#
my_example_flavourization = {
	type = character
	gender = female
	priority = 1000
	titles = { k_norway }
	governments = { feudal_government }
	
	flavourization_rules = {
		only_independent = yes
		only_holder = yes
	}
}
my_example_flavourization: "Badass Queen"


