##Events for hostile scheme discovery

namespace = hostile_scheme_discovery

## 1001-1999: Agent discovered
## 2001-2999: Scheme discovered

#Agent discovered
hostile_scheme_discovery.1001 = {
	type = character_event
	title = hostile_scheme_discovery.1001.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:agent = {
						OR = {
							has_friendly_relationship_with_root_trigger = yes
							is_close_family_of = root
							is_consort_of = root
						}
					}
				}
				desc = {
					first_valid = {
						triggered_desc = {
						    trigger = {
								scope:scheme = { scheme_target = root }
						    }
						    desc = {
						    	first_valid = {
									triggered_desc = {
										trigger = {
											exists = scope:spymaster
										}
										desc = hostile_scheme_discovery.1001.close_relation
									}
									desc = hostile_scheme_discovery.1001.close_relation_no_spymaster
								}
						    }
						}
						desc = {
							first_valid = {
								triggered_desc = {
									trigger = {
										exists = scope:spymaster
										scope:targeted_courtier = scope:spymaster
									}
									desc = hostile_scheme_discovery.1001.close_relation_spymaster_other_target
								}
								triggered_desc = {
									trigger = {
										exists = scope:spymaster
									}
									desc = hostile_scheme_discovery.1001.close_relation_other_target
								}
								desc = hostile_scheme_discovery.1001.close_relation_no_spymaster_other_target
							}
						}
					}
				}
			}
			desc = {
				first_valid = {
					triggered_desc = {
					    trigger = {
							scope:scheme = { scheme_target = root }
					    }
					    desc = {
					    	first_valid = {
								triggered_desc = {
									trigger = {
										exists = scope:spymaster
									}
									desc = hostile_scheme_discovery.1001.desc
								}
								desc = hostile_scheme_discovery.1001.desc_no_spymaster
							}
					    }
					}
					desc = {
						first_valid = {
							triggered_desc = {
								trigger = {
									exists = scope:spymaster
									scope:targeted_courtier = scope:spymaster
								}
								desc = hostile_scheme_discovery.1001.desc_other_target_spymaster
							}
							triggered_desc = {
								trigger = {
									exists = scope:spymaster
								}
								desc = hostile_scheme_discovery.1001.desc_other_target
							}
							desc = hostile_scheme_discovery.1001.desc_no_spymaster_other_target
						}
					}
				}
			}
		}
	}
	theme = generic_intrigue_scheme
	left_portrait = scope:spymaster
	lower_left_portrait = {
		trigger = {
			NOT = { scope:targeted_courtier = scope:spymaster }
		}
		character = scope:targeted_courtier
		animation = shock
	}
	right_portrait = scope:agent

	immediate = {
		play_music_cue = "mx_cue_murder"
		if = {
			limit = {
				scope:scheme = {
					scheme_target = { NOT = { this = root } }
				}
			}
			scope:scheme = {
				scheme_target = { save_scope_as = targeted_courtier }
			}
		}
		scope:agent = {
			add_character_flag = {
				flag = use_stealth_clothes
				days = 1
			}
		}
	}

	#Accuse and let go
	option = {
		name = hostile_scheme_discovery.1001.a
		scope:scheme = {
			expose_scheme_agent = scope:agent
		}
		scope:agent = {
			add_prestige = medium_prestige_loss
			add_opinion = {
				target = root
				modifier = accused_of_scheming_opinion
			}
		}
		save_scope_value_as = {
			name = agent_treatment
			value = flag:accused
		}
		ai_chance = {
			base = 40
		}
	}

	#Accuse and imprison
	option = {
		name = hostile_scheme_discovery.1001.b
		scope:scheme = {
			expose_scheme_agent = scope:agent
		}
		scope:agent = {
			add_prestige = medium_prestige_loss
			add_opinion = {
				target = root
				modifier = accused_of_scheming_opinion
			}
		}
		rightfully_imprison_character_effect = { #Exposing scheme agent above will add opinion making the imprisonment rightful
			TARGET = scope:agent
			IMPRISONER = root
		}
		save_scope_value_as = {
			name = agent_treatment
			value = flag:imprisoned
		}
		ai_chance = {
			base = 100
		}
	}
	
	#Let them go
	option = {
		name = hostile_scheme_discovery.1001.c
		scope:scheme = {
			expose_scheme_agent = scope:agent
		}
		custom_tooltip = hostile_scheme_discovery.1001.c.tt
		scope:agent = {
			add_character_flag = {
				flag = free_to_scheme
				days = 1825
			}
		}
		ai_chance = {
			base = 20
			modifier = {
				add = 20
				has_trait = forgiving
			}
		}
	}

	after = {
		#If the agent has not been let go, send notification to scheme owner
		if = {
			limit = {
				exists = scope:agent_treatment
			}
			scope:owner = {
				trigger_event = hostile_scheme_discovery.3001
			}
		}
	}
}


#Owner discovered
# by Linnéa Thimrén
hostile_scheme_discovery.1002 = {
	type = character_event
	title = hostile_scheme_discovery.1002.t
	desc = {
		desc = {
			first_valid = {
				triggered_desc = {
					trigger = {
						exists = scope:spymaster
					}
					desc = hostile_scheme_discovery.1002.intro
				}
				desc = hostile_scheme_discovery.1002.intro_no_spymaster
			}
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:scheme = {
						scheme_type = murder
					}
				}
				desc = hostile_scheme_discovery.1002.murder
			}
			triggered_desc = {
				trigger = {
					scope:scheme = {
						scheme_type = abduct
					}
				}
				desc = hostile_scheme_discovery.1002.abduction
			}
			triggered_desc = {
				trigger = {
					scope:scheme = {
						scheme_type = elope
					}
				}
				desc = hostile_scheme_discovery.1002.elope
			}
			triggered_desc = {
				trigger = {
					scope:scheme = {
						scheme_type = steal_back_artifact
					}
				}
				desc = hostile_scheme_discovery.1002.steal_back_artifact
			}
			desc = hostile_scheme_discovery.1002.fallback
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					NOT = { scope:target = root }
				}
				desc = hostile_scheme_discovery.2001.target_other
			}
			desc = hostile_scheme_discovery.2001.target_me
		}
	}
	theme = generic_intrigue_scheme
	left_portrait = scope:owner
	right_portrait = scope:spymaster
	lower_right_portrait = scope:targeted_courtier

	immediate = {
		play_music_cue = "mx_cue_murder"
		if = {
			limit = {
				scope:scheme = {
					scheme_target = { NOT = { this = root } }
				}
			}
			scope:scheme = {
				scheme_target = {
					trigger_event = hostile_scheme_discovery.1002
					save_scope_as = targeted_courtier
				}
			}
		}
	}

	#
	option = {
		name = hostile_scheme_discovery.1002.a
		show_as_tooltip = {
			scope:owner = {
				add_dread = minor_dread_gain
			}
			if = {
				limit = { 
					scope:scheme = {
						scheme_type = murder
					}
				}
				attempted_murder_opinion_effect = {
					VICTIM = scope:target
					MURDERER = scope:owner
				}
			}
			if = {
				limit = { #Double check since it seems the scheme sometimes hangs around as a scope
					exists = scope:scheme
					exists = scope:scheme.scheme_target
				}
				scope:scheme = {
					end_scheme = yes
				}
			}
		}
	}

	after = {
		if = { #Only send it from the host's event so that owner doesn't get duplication if the host and the target isn't the same person
			limit = {
				exists = scope:scheme.scheme_target
				scope:scheme.scheme_target = { this = root }
			}
			scope:owner = { #Event for the owner that actually ends the scheme
				trigger_event = hostile_scheme_discovery.3003
			}
		}
	}
}



#Discover Scheme
hostile_scheme_discovery.2001 = {
	type = character_event
	title = hostile_scheme_discovery.1001.t
	desc = {
		desc = {
			first_valid = {
				triggered_desc = {
					trigger = {
						exists = scope:spymaster
					}
					desc = hostile_scheme_discovery.2001.intro
				}
				desc = hostile_scheme_discovery.2001.intro_no_spymaster
			}
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:scheme = {
						scheme_type = murder
					}
				}
				desc = hostile_scheme_discovery.2001.murder
			}
			triggered_desc = {
				trigger = {
					scope:scheme = {
						scheme_type = abduct
					}
				}
				desc = hostile_scheme_discovery.2001.abduction
			}
			triggered_desc = {
				trigger = {
					scope:scheme = {
						scheme_type = elope
					}
				}
				desc = hostile_scheme_discovery.2001.elope
			}
			triggered_desc = {
				trigger = {
					scope:scheme = {
						scheme_type = steal_back_artifact
					}
				}
				desc = hostile_scheme_discovery.2001.steal_back_artifact
			}
			desc = hostile_scheme_discovery.2001.fallback
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					NOT = { scope:target = root }
					scope:target = scope:spymaster
				}
				desc = hostile_scheme_discovery.2001.target_spymaster
			}
			triggered_desc = {
				trigger = {
					NOT = { scope:target = root }
				}
				desc = hostile_scheme_discovery.2001.target_other
			}
			desc = hostile_scheme_discovery.2001.target_me
		}
	}
	theme = generic_intrigue_scheme
	left_portrait = {
		character = scope:spymaster
		animation = eavesdrop
	}
	right_portrait = {
		trigger = {
			NOT = { scope:target = scope:spymaster }
		}
		character = scope:target
		animation = disbelief
	}

	immediate = {
		play_music_cue = "mx_cue_murder"
	}

	#Schemes are bad
	option = {
		name = hostile_scheme_discovery.2001.a
		scope:scheme = {
			expose_scheme = yes
		}
		scope:owner = {
			trigger_event = hostile_scheme_discovery.3002
		}
	}
}



#Agent discovery notification for scheme owner
hostile_scheme_discovery.3001 = {
	type = character_event
	title = hostile_scheme_discovery.3001.t
	desc = {

		desc = hostile_scheme_discovery.3001.intro

		first_valid = {
			triggered_desc = {
				trigger = {
					scope:agent_treatment = flag:imprisoned
				}
				desc = hostile_scheme_discovery.3001.imprisoned
			}
			triggered_desc = {
				trigger = {
					scope:agent_treatment = flag:accused
				}
				desc = hostile_scheme_discovery.3001.accused
			}
		}
	}
	theme = generic_intrigue_scheme
	left_portrait = scope:agent
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	immediate = {
		play_music_cue = "mx_cue_murder"
		scope:target.court_owner = {
			save_scope_as = court_owner
		}
		show_as_tooltip = {
			rightfully_imprison_character_effect = {
				TARGET = scope:agent
				IMPRISONER = scope:target.court_owner
			}
		}
		scope:agent = {
			add_character_flag = {
				flag = use_stealth_clothes
				days = 1
			}
		}
	}
	
	option = {
		name = hostile_scheme_discovery.3001.a
	}
}

#Scheme discovery notification for scheme owner
hostile_scheme_discovery.3002 = {
	type = character_event
	title = hostile_scheme_discovery.3002.t
	desc = hostile_scheme_discovery.3002.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:target
	right_portrait = scope:portrait
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	immediate = {
		play_music_cue = "mx_cue_murder"
		if = {
			limit = { exists = scope:target.court_owner }
			scope:target.court_owner = {
				save_scope_as = court_owner
				if = {
					limit = {
						NOT = { scope:target = scope:court_owner }
					}
					save_scope_as = portrait
				}
			}
		}
		show_as_tooltip = {
			scope:scheme = {
				expose_scheme = yes
			}
		}	
	}

	option = {
		name = hostile_scheme_discovery.3002.a
	}
}

#Scheme owner discovery notification for scheme owner
hostile_scheme_discovery.3003 = {
	type = character_event
	title = hostile_scheme_discovery.3003.t
	desc = {
		desc = hostile_scheme_discovery.3003.desc
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:scheme = {
						scheme_type = murder
					}
				}
				desc = hostile_scheme_discovery.3003.murder
			}
			triggered_desc = {
				trigger = {
					scope:scheme = {
						scheme_type = abduct
					}
				}
				desc = hostile_scheme_discovery.3003.abduction
			}
			triggered_desc = {
				trigger = {
					scope:scheme = {
						scheme_type = elope
					}
				}
				desc = hostile_scheme_discovery.3003.elope
			}
			triggered_desc = {
				trigger = {
					scope:scheme = {
						scheme_type = steal_back_artifact
					}
				}
				desc = hostile_scheme_discovery.3003.steal_back_artifact
			}
			desc = hostile_scheme_discovery.3003.fallback
		}
	}
	theme = generic_intrigue_scheme
	left_portrait = {
		character = scope:target
		triggered_animation = {
			trigger = { ai_boldness > 0 }
			animation = anger
		}
		triggered_animation = {
			trigger = { always = yes }
			animation = fear
		}
	}
	right_portrait = scope:portrait
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	immediate = {
		play_music_cue = "mx_cue_murder"
		if = {
			limit = { exists = scope:target.court_owner }
			scope:target.court_owner = {
				save_scope_as = court_owner
				if = {
					limit = {
						NOT = { scope:target = scope:court_owner }
					}
					save_scope_as = portrait
				}
			}
		}
	}

	option = {
		name = hostile_scheme_discovery.3003.a
		scope:scheme = {
			end_scheme = yes
		}
		scope:owner = {
			add_dread = minor_dread_gain
		}
		if = {
			limit = {
				scope:scheme = {
					scheme_type = steal_back_artifact
				}
			}
			steal_back_artifact_failure_effect = yes
		}

		if = {
			limit = {
				scope:scheme = {
					scheme_type = murder
				}
			}
			attempted_murder_opinion_effect = {
				VICTIM = scope:target
				MURDERER = scope:owner
			}
		}
	}
}


######################################
# SCHEMES AT OWN COURT ARE DISCOVERED
######################################

#Fallback for any type of Hostile Scheme
hostile_scheme_discovery.4001 = {
	type = character_event
	title = hostile_scheme_discovery.4001.t
	desc = {
		desc = hostile_scheme_discovery.4001.opening
		desc = hostile_scheme_discovery.4001.end
	}
	theme = generic_intrigue_scheme
	left_portrait = scope:target

	immediate = {
		play_music_cue = "mx_cue_murder"
		scope:target = {
			add_opinion = {
				target = root
				modifier = liege_scheming_against_me_opinion
			}
		}
	}

	#End the Scheme
	option = {
		name = hostile_scheme_discovery.4001.a
		scope:scheme = {
			end_scheme = yes
		}
		add_prestige = medium_prestige_loss
		add_tyranny = minor_tyranny_gain
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_honor = 1
				ai_rationality = 0.5
			}
			compare_modifier = {
				trigger = {
					tyranny < high_tyranny
				}
				value = tyranny
			}
		}
	}

	#Keep it going
	option = {
		name = hostile_scheme_discovery.4001.b
		add_tyranny = medium_tyranny_gain
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_honor = -0.5
				ai_boldness = 0.5
				ai_rationality = 0.5
				ai_vengefulness = 0.5
				ai_compassion = -1
			}
			compare_modifier = {
				value = dread
			}
		}
	}
}

#Reaction to Murder
hostile_scheme_discovery.4002 = {
	type = character_event
	title = hostile_scheme_discovery.4001.t
	desc = {
		desc = hostile_scheme_discovery.4002.opening
		desc = hostile_scheme_discovery.4001.end
	}
	theme = generic_intrigue_scheme
	left_portrait = scope:target

	immediate = {
		play_music_cue = "mx_cue_murder"
		#Target dislikes you for trying to kill them
		scope:target = {
			add_opinion = {
				target = root
				modifier = liege_attempting_to_murder_me_opinion
			}
			
			# Warcraft
			hurt_scourge_jailor_consequences_effect = { HURT_JAILOR = scope:target SCOURGE = root }
		}
	}

	#End the Scheme
	option = {
		name = hostile_scheme_discovery.4001.a
		scope:scheme = {
			end_scheme = yes
		}
		add_tyranny = minor_tyranny_gain
		add_prestige = medium_prestige_loss
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_honor = 1
				ai_rationality = 0.5
			}
			compare_modifier = {
				trigger = {
					tyranny < high_tyranny
				}
				value = tyranny
			}
		}
	}

	#Keep it going
	option = {
		name = hostile_scheme_discovery.4001.b
		add_tyranny = execution_tyranny_gain
		add_dread = minor_dread_gain
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_honor = -0.5
				ai_boldness = 0.5
				ai_rationality = 0.5
				ai_vengefulness = 0.5
				ai_compassion = -1
			}
			compare_modifier = {
				value = dread
			}
		}
	}
}

