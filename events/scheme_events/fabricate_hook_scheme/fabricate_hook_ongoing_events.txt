#Events handling Fabricate Hook outcomes

namespace = fabricate_hook_ongoing

################################
# Family Offers Understanding of Target
# by Petter Vilberg
################################
scripted_trigger fabricate_hook_ongoing_0001_family_member_trigger = {
	is_available_ai_adult = yes
	is_ruler = no
	NOT = { this = root }
	NOT = {
		has_relation_rival = root
	}
	opinion = {
		target = root
		value > 0
	}
}

fabricate_hook_ongoing.0001 = {
	type = character_event
	title = fabricate_hook_ongoing.0001.t
	desc = fabricate_hook_ongoing.0001.desc
	theme = intrigue
	left_portrait = scope:family_member
	right_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = {
		NOT = { exists = scope:scheme.var:had_event_ongoing_0001 }
		scope:target = {
			NOT = { is_close_family_of = root }
			any_close_family_member = {
				fabricate_hook_ongoing_0001_family_member_trigger = yes
			}
		}
	}

	immediate = {
		scope:scheme = {
			set_variable = {
				name = had_event_ongoing_0001
				value = yes
			}
		}
		scope:target = {
			random_close_family_member = {
				limit = {
					fabricate_hook_ongoing_0001_family_member_trigger = yes
				}
				weight = {
					base = 1
					opinion_modifier = {
						opinion_target = scope:target
						multiplier = -0.05
					}
					modifier = {
						add = 10
						is_of_major_interest_to_root_trigger = yes
					}
					modifier = {
						add = 5
						is_of_minor_interest_to_root_trigger = yes
					}
					modifier = {
						add = 10
						has_relation_potential_friend = root
					}
				}
				save_scope_as = family_member
			}
		}
	}

	option = { # How would I Hook them?
		name = fabricate_hook_ongoing.0001.a
		scope:scheme = {
			add_scheme_modifier = {
				type = fabricate_hook_family_success_modifier
			}
		}
	}

	option = { # I need this to be as quick as possible
		name = fabricate_hook_ongoing.0001.b
		scope:scheme = {
			add_scheme_modifier = {
				type = fabricate_hook_family_speed_modifier
			}
		}
	}

	after = {
		scope:target = { save_scope_as = relationship_reason_involved_character }
		progress_towards_friend_effect = {
			CHARACTER = scope:family_member
			OPINION = 0
			REASON = friend_family_informant
		}
		clear_saved_scope = relationship_reason_involved_character
	}
}


################################
# Observe Deference in the Target
# by Petter Vilberg
################################
scripted_trigger fabricate_hook_ongoing_0002_enforcing_character_trigger = {
	NOT = { this = root }
	is_available_ai_adult = yes
	has_hook = scope:target
}

fabricate_hook_ongoing.0002 = {
	type = character_event
	title = fabricate_hook_ongoing.0002.t
	desc = fabricate_hook_ongoing.0002.desc
	theme = intrigue
	left_portrait = scope:target
	right_portrait = scope:hooking_character
	
	trigger = {
		NOT = { exists = scope:scheme.var:had_event_ongoing_0002 }
		scope:scheme = {
			scheme_progress < 8
		}
		scope:target = {
			OR = {
				any_close_or_extended_family_member = {
					is_ruler = no
					fabricate_hook_ongoing_0002_enforcing_character_trigger = yes
				}
				any_courtier_or_guest = {
					fabricate_hook_ongoing_0002_enforcing_character_trigger = yes
				}
				any_vassal = {
					fabricate_hook_ongoing_0002_enforcing_character_trigger = yes
				}
			}
		}
	}

	immediate = {
		scope:scheme = {
			set_variable = {
				name = had_event_ongoing_0002
				value = yes
			}
		}
		scope:target = {
			every_close_or_extended_family_member = {
				limit = {
					is_ruler = no
					fabricate_hook_ongoing_0002_enforcing_character_trigger = yes
				}
				add_to_list = hooking_characters
			}
			every_courtier_or_guest = {
				limit = {
					fabricate_hook_ongoing_0002_enforcing_character_trigger = yes
				}
				add_to_list = hooking_characters
			}
			every_vassal = {
				limit = {
					fabricate_hook_ongoing_0002_enforcing_character_trigger = yes
				}
				add_to_list = hooking_characters
			}
		}
		random_in_list = {
			list = hooking_characters
			weight = {
				base = 1
				modifier = {
					add = 10
					is_of_major_interest_to_root_trigger = yes
				}
				modifier = {
					add = 5
					is_of_minor_interest_to_root_trigger = yes
				}
			}
			save_scope_as = hooking_character
		}
	}

	option = { # How do they do it?
		name = fabricate_hook_ongoing.0002.a
		scope:scheme = {
			add_scheme_modifier = {
				type = fabricate_hook_careful_study_modifier
			}
		}
	}

	option = { # How are they making Target act?
		name = fabricate_hook_ongoing.0002.b
		scope:scheme = {
			add_scheme_progress = 2
		}
	}
}



################################
# Spread rumors among servants
# by Linnéa Thimrén
################################

fabricate_hook_ongoing.0003 = {
	type = character_event
	title = fabricate_hook_ongoing.0003.t
	desc = {
		first_valid = {
			triggered_desc = {
			    trigger = {
					exists = scope:servant
			    }
			    desc = fabricate_hook_ongoing.0003.desc_servant
			}
			desc = fabricate_hook_ongoing.0003.desc
		}
		desc = fabricate_hook_ongoing.0003.desc_ending
	}
	theme = intrigue
	left_portrait = scope:target
	right_portrait = scope:servant
	
	trigger = {
		NOT = { exists = scope:scheme.var:had_event_ongoing_0003 }
		scope:scheme = {
			scheme_progress < 8
		}
		scope:target = {
			is_lowborn = no
		}
	}

	immediate = {
		scope:scheme = {
			set_variable = {
				name = had_event_ongoing_0003
				value = yes
			}
		}

		scope:target = {
			if = { # we only create a new character if the target is not a player
				limit = {
					is_ai = yes
				}
				create_character = {
					template = servant_character
					dynasty = none
					location = scope:target.location
					save_scope_as = servant
				}
				hidden_effect = {
					scope:target = {
						if = {
							limit = {
								is_landed = yes
							}
							add_courtier = scope:servant
						}
						else_if = {
							limit = {
								exists = host
							}
							host = {
								add_courtier = scope:servant
							}
						}
						else_if = {
							limit = {
								exists = liege
							}
							liege = {
								add_courtier = scope:servant
							}
						}
						save_scope_as = dummy_servant_gender #For loc
					}
				}
			}
			else = {
				random_dummy_gender_servant_effect = yes
			}
		}
	}

	option = { # Work with the servant!
		name = fabricate_hook_ongoing.0003.a
		trigger = {
			NOT = { has_trait = gregarious }
		}
		remove_short_term_gold = minor_gold_value
		scope:scheme = {
			add_scheme_modifier = {
				type = fabricate_hook_gossip_modifier
			}
		}
		stress_impact = {
			greedy = medium_stress_impact_gain
		}
		ai_chance = {
			base = 50
			modifier = {
				add = -50
				short_term_gold < minor_gold_value
			}
			modifier = {
				add = -25
				has_trait = greedy
			}
		}
	}

	option = { # Work with the servant! Gregarious
		name = fabricate_hook_ongoing.0003.a_gregarious
		trigger = {
			has_trait = gregarious
		}
		trait = gregarious
		scope:scheme = {
			add_scheme_modifier = {
				type = fabricate_hook_gossip_modifier
			}
		}
		ai_chance = {
			base = 50
			modifier = {
				add = -25
				short_term_gold < minor_gold_value
			}
		}
	}

	option = { # Just recruit the servant
		name = fabricate_hook_ongoing.0003.b
		scope:scheme = {
			add_scheme_modifier = {
				type = fabricate_hook_servant_modifier
			}
		}
		ai_chance = {
			base = 10
		}
	}

	option = { # Lustful opt out - work with the servant in other ways...
		name = fabricate_hook_ongoing.0003.b_lustful
		trigger = {
			has_trait = lustful
			exists = scope:servant
			OR = {
				matching_gender_and_sexuality_trigger = { CHARACTER_1 = root CHARACTER_2 = scope:servant }
				AND = {
					scope:servant = {
						# Warcraft
						can_have_sexual_relation_with_and_attracted_to_trigger = { target = root }
						
						is_attracted_to_gender_of = root
					}
					root = { has_perk = unshackled_lust_perk }
				}
			}
		}
		trait = lustful
		had_sex_with_effect = {
			CHARACTER = scope:servant
			PREGNANCY_CHANCE = pregnancy_chance
		}
		ai_chance = {
			base = 100
		}
	}
}



################################
# Study their personality
# by Linnéa Thimrén
################################

fabricate_hook_ongoing.0004 = {
	type = character_event
	title = fabricate_hook_ongoing.0004.t
	desc = fabricate_hook_ongoing.0004.desc
	theme = intrigue
	left_portrait = scope:target
	
	trigger = {
		NOT = { exists = scope:scheme.var:had_event_ongoing_0004 }
		scope:scheme = {
			scheme_progress >= 2
		}
	}

	immediate = {
		scope:scheme = {
			set_variable = {
				name = had_event_ongoing_0004
				value = yes
			}
		}
		scope:target = { assign_quirk_effect = yes }
	}

	option = { # Spy!
		name = fabricate_hook_ongoing.0004.a
		duel = {
			skill = intrigue
			target = scope:target
			20 = {
				desc = fabricate_hook_ongoing.0004.b.success
				compare_modifier = {
					value = scope:duel_value
					multiplier = 0.5
				}
				show_as_tooltip = {
					scope:scheme = {
						add_scheme_modifier = {
							type = fabricate_hook_studied_personality_modifier
						}
					}
				}
				trigger_event = fabricate_hook_ongoing.0005
			}
			10 = {
				desc = fabricate_hook_ongoing.0004.b.failure
				compare_modifier = {
					value = scope:duel_value
					multiplier = -0.5
				}
				send_interface_toast = {
					title = fabricate_hook_ongoing.0004.b.failure
					left_icon = scope:target
					scope:scheme = {
						add_scheme_modifier = {
							type = fabricate_hook_suspicious_target_modifier
						}
					}
				}
			}
		}
	}

	option = { # Take your time
		name = fabricate_hook_ongoing.0004.b
		scope:scheme = {
			add_scheme_modifier = {
				type = fabricate_hook_studied_personality_modifier
			}
			add_scheme_progress = -2
		}
	}
}


fabricate_hook_ongoing.0005 = {
	type = character_event
	title = fabricate_hook_ongoing.0004.t
	desc = fabricate_hook_ongoing.0005.desc
	theme = intrigue
	left_portrait = scope:target

    immediate = {
    	scope:target = {
    		assign_quirk_effect = yes
    	}
    	scope:scheme = {
			add_scheme_modifier = {
				type = fabricate_hook_studied_personality_modifier
			}
		}
    }

    option = {
        name = fabricate_hook_ongoing.0005.a
    }
}
