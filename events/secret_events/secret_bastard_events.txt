#Events dealing with the birth and revelations of secret bastards

namespace = secret_bastard

#0001-0009
#0010-3999 - Reaction events for reveal of secret bastard
	#0010-0999 - For married mother, unborn
	#1000-1999 - For unmarried mother, unborn
	#2000-2999 - For married mother, born
	#3000-3999 - For unmarried mother, born



#A secret bastard is born - Share the news with everyone who knew that it was a bastard
secret_bastard.0001 = {
	type = character_event
	title = secret_bastard.0001.t
	desc = {
		first_valid = {
			first_valid = {
				triggered_desc = {
					trigger = {
						scope:real_father = root
						NOT = { exists = scope:assumed_father }
					}
					desc = secret_bastard.0001.real_father.no_assumed_father
				}
				triggered_desc = {
					trigger = { scope:real_father = root }
					desc = secret_bastard.0001.real_father
				}
				triggered_desc = {
					trigger = {
						exists = scope:assumed_father
						scope:assumed_father = root
					}
					desc = secret_bastard.0001.assumed_father
				}
				triggered_desc = {
					trigger = {
						scope:mother = {
							save_temporary_scope_as = compare_character
						}
						is_close_family_of_compare_character_trigger = yes
					}
					desc = secret_bastard.0001.family_of_mother
				}
				triggered_desc = {
					trigger = {
						scope:real_father = {
							save_temporary_scope_as = compare_character
						}
						is_close_family_of_compare_character_trigger = yes
					}
					desc = secret_bastard.0001.family_of_real_father
				}
				triggered_desc = {
					trigger = {
						exists = scope:assumed_father
						scope:assumed_father = {
							save_temporary_scope_as = compare_character
						}
						is_close_family_of_compare_character_trigger = yes
					}
					desc = secret_bastard.0001.family_of_assumed_father
				}
			}
			desc = secret_bastard.0001.other
		}
	}
	left_portrait = {
		character = scope:mother
		animation = newborn
	}
	lower_left_portrait = scope:child
	right_portrait = {
		character = scope:real_father
		animation = flirtation
	}
	lower_right_portrait = {
		character = scope:child.father
		trigger = {
			exists = scope:child.father
			NOT = { scope:child.father = scope:real_father }
		}
	}
	theme = bastardy

	trigger = {
		exists = scope:new_secret # Secret may be invalidated before this is fired for root
	}

	immediate = {
		play_music_cue = mx_cue_seduction
		scope:new_secret = {
			reveal_to_without_events_effect = { CHARACTER = root }
		}
		if = {
			limit = {
				exists = scope:child.father
			}
			scope:child.father = {
				save_scope_as = assumed_father
			}
		}
	}

	option = {
		name = secret_bastard.0001.a
	}
}

#A bastard with a secret father is born - Share the news with everyone who knew the father's identity
secret_bastard.0002 = {
	type = character_event
	title = secret_bastard.0002.t
	desc = {
		first_valid = {
			first_valid = {
				triggered_desc = {
					trigger = { scope:real_father = root }
					desc = secret_bastard.0002.real_father
				}
				triggered_desc = {
					trigger = {
						scope:mother = {
							save_temporary_scope_as = compare_character
						}
						is_close_family_of_compare_character_trigger = yes
					}
					desc = secret_bastard.0002.family_of_mother
				}
				triggered_desc = {
					trigger = {
						scope:real_father = {
							save_temporary_scope_as = compare_character
						}
						is_close_family_of_compare_character_trigger = yes
					}
					desc = {
						desc = secret_bastard.0002.family_of_real_father
						triggered_desc = {
							trigger = {
								opinion = {
									target = scope:real_father
									value < 5
								}
							}
							desc = secret_bastard.0002.family_of_real_father.dislike
						}
					}
				}
			}
			desc = secret_bastard.0002.other
		}
	}
	theme = bastardy
	left_portrait = {
		character = scope:mother
		animation = newborn
	}
	lower_left_portrait = scope:child
	#left_portrait = scope:real_father

	trigger = {
		exists = scope:new_secret # A few things might invalidate the Secret extremely quickly
	}

	immediate = {
		play_music_cue = mx_cue_seduction
	}

	option = {
		name = secret_bastard.0002.a
		scope:new_secret = {
			reveal_to_without_events_effect = {
				CHARACTER = root
			}
		}
		ai_chance = {
			base = 100
		}
	}

	option = {
		name = secret_bastard.0002.b
		trigger = {
			root = scope:child.real_father
		}
		scope:new_secret = {
			# To ensure the back-end is set up correctly while avoiding redundant event notifications
			hidden_effect = {
				reveal_to_without_events_effect = {
					CHARACTER = root
				}
			}
			expose_secret = root
		}

		# If there is an existing Lover secret between the mother and real-father, the tooltip should indicate that this will be exposed (done automatically as part of revealing the child's heritage).
		if = {
			limit = {
				scope:real_father = {
					any_secret = {
						secret_type = secret_lover
						secret_target = scope:mother
					}
				}
			}
			show_as_tooltip = {
				random_secret = {
					limit = {
						secret_type = secret_lover
						secret_target = scope:mother
					}
					expose_secret = root
				}
			}
		}

		ai_chance = {
			base = 20
		}
	}
}

########################
##  MARRIED - UNBORN  ##
########################
#0010-0999

#Expose-reaction event for mother, pregnancy
secret_bastard.0010 = {
	type = character_event
	title = secret_bastard.0010.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:secret_exposer = scope:father }
				desc = secret_bastard.0010.spouse_reveal
			}
			desc = secret_bastard.0010.other_reveal
		}
		desc = secret_bastard.0010.desc
	}
	left_portrait = {
		character = scope:real_father
		animation = flirtation
	}
	right_portrait = {
		character = scope:father
		animation = shock
	}
	theme = bastardy

	immediate = {
		play_music_cue = mx_cue_seduction
		set_known_bastard_on_pregnancy = yes
	}

	option = {
		name = secret_bastard.0010.a
	}
}

#Expose-reaction event for spouse
secret_bastard.0011 = {
	type = character_event
	title = secret_bastard.0011.t
	desc = {
		desc = secret_bastard.001.opening
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:secret_exposer = root
				}
				desc = secret_bastard.0011.spouse_exposer
			}
			desc = secret_bastard.0011.desc
		}
	}
	left_portrait = {
		character = scope:mother
		animation = shame
	}
	right_portrait = {
		character = scope:real_father
		animation = flirtation
	}
	theme = bastardy

	immediate = {
		play_music_cue = mx_cue_seduction
	}

	option = {
		name = secret_bastard.0011.a
	}

	option = {
		name = secret_bastard.0011.b
		trigger = {
			scope:secret_exposer = root
		}
		exclusive = yes
	}
}

#Expose-reaction for every secret knower
secret_bastard.0012 = {
	type = character_event
	title = secret_bastard.0012.t
	desc = {
		desc = secret_bastard.001.opening
		first_valid = {
			triggered_desc = {
				trigger = {
					opinion = {
						target = scope:mother
						value < 10
					}
				}
				desc = secret_bastard.0012.dislike_desc
			}
			triggered_desc = {
				trigger = {
					OR = {
						opinion = {
							target = scope:mother
							value > 10
						}
						any_relation = {
							type = friend
							this = scope:mother
						}
					}
					
				}
				desc = secret_bastard.0012.like_desc
			}
		}
	}
	left_portrait = {
		character = scope:mother
		animation = shame
	}
	right_portrait = {
		character = scope:real_father
		trigger = {
			exists = scope:real_father
		}
		animation = disbelief
	}
	lower_right_portrait = {
		character = scope:mother.primary_partner
		trigger = {
			exists = scope:mother.primary_partner
			NOT = {
				exists = scope:real_father
				scope:mother.primary_partner = scope:real_father
			}
		}
		animation = shock
	}
	theme = bastardy

	immediate = {
		play_music_cue = mx_cue_seduction	
	}

	option = {
		name = secret_bastard.0012.a
	}
}

#Expose-reaction event for real father
secret_bastard.0013 = {
	type = character_event
	title = secret_bastard.0013.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:secret_exposer = root }
				desc = secret_bastard.0013.secret_exposer
			}
			desc = {	
				desc = secret_bastard.001.opening
				desc = secret_bastard.0013.suspicious_desc
			}
		}
	}
	left_portrait = {
		character = scope:mother
		animation = shame
	}
	right_portrait = {
		character = scope:mother.primary_partner
		trigger = {
			exists = scope:mother.primary_partner
			NOT = {
				exists = scope:real_father
				scope:mother.primary_partner = scope:real_father
			}
		}
	}
	theme = bastardy

	immediate = {
		play_music_cue = mx_cue_seduction
	}

	option = {
		name = secret_bastard.0013.a
		show_as_tooltip = {
			scope:mother = {
				set_known_bastard_on_pregnancy = yes
			}
		}
	}
}


#Event for spouse of real_father
secret_bastard.0014 = {
	type = character_event
	title = secret_bastard.0014.t
	desc = {
		desc = secret_bastard.001.opening
		desc = secret_bastard.0014.desc
	}
	theme = bastardy
	left_portrait = {
		character = scope:mother
		animation = shame
	}
	right_portrait = {
		character = scope:real_father
		trigger = {
			exists = scope:real_father
		}
		animation = disbelief
	}

	option = {
		name = secret_bastard.0014.a
	}
}

#########################
##  UNMARRIED - UNBORN ##
#########################
#1000-1999

#For mother
secret_bastard.1000 = {
	type = character_event
	title = secret_bastard.1000.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { exists = scope:real_father_revealing }
				desc = secret_bastard.1000.real_father_reveal
			}
			desc = secret_bastard.1000.desc
		 }
	}
	left_portrait = {
		character = scope:real_father
		trigger = {
			exists = scope:real_father
		}
		animation = disbelief
	}
	right_portrait = {
		character = primary_partner
		trigger = {
			exists = primary_partner
		}
		animation = shock
	}
	theme = bastardy

	trigger = {
		is_pregnant = yes # Might fire if the pregnancy gets removed in the 1-day gap before this event is fired
	}

	immediate = {
		play_music_cue = mx_cue_seduction
		set_known_bastard_on_pregnancy = yes
	}

	option = {
		name = secret_bastard.1000.a
		custom_tooltip = secret_bastard.1000.a.tt
	}
}

#Parents
secret_bastard.1001 = {
	type = character_event
	title = secret_bastard.1001.t
	desc = secret_bastard.1001.desc
	theme = bastardy
	left_portrait = {
		character = scope:mother
		animation = shame
	}
	right_portrait = {
		character = scope:real_father
		trigger = {
			exists = scope:real_father
			NOT = { this = root }
		}
		animation = disbelief
	}
	lower_right_portrait = {
		character = scope:mother.primary_partner
		trigger = {
			exists = scope:mother.primary_partner
			NOT = {
				exists = scope:real_father
				scope:mother.primary_partner = scope:real_father
			}
			NOT = { this = root }
		}
		animation = shock
	}

	immediate = {
		play_music_cue = mx_cue_seduction
	}

	option = {
		name = secret_bastard.1001.a
	}
}

#every_secret_knower
secret_bastard.1002 = {
	type = character_event
	title = secret_bastard.1002.t
	desc = secret_bastard.1002.desc
	theme = bastardy
	left_portrait = {
		character = scope:mother
		animation = shame
	}
	right_portrait = {
		character = scope:real_father
		trigger = {
			exists = scope:real_father
			NOT = { this = root }
		}
		animation = disbelief
	}
	lower_right_portrait = {
		character = scope:mother.primary_partner
		trigger = {
			exists = scope:mother.primary_partner
			NOT = {
				exists = scope:real_father
				scope:mother.primary_partner = scope:real_father
			}
			NOT = { this = root }
		}
		animation = shock
	}

	immediate = {
		play_music_cue = mx_cue_seduction
	}

	option = {
		name = secret_bastard.1000.a
	}
}

#real_father
secret_bastard.1003 = {
	type = character_event
	title = secret_bastard.1003.t
	desc = secret_bastard.1003.desc
	theme = bastardy
	left_portrait = {
		character = scope:mother
		animation = shame
	}
	right_portrait = {
		character = scope:mother.primary_partner
		trigger = {
			exists = scope:mother.primary_partner
		}
		animation = shock
	}

	immediate = {
		play_music_cue = mx_cue_seduction
	}

	option = {
		name = secret_bastard.1000.a
	}
}

#Spouse of real_father
secret_bastard.1004 = {
	type = character_event
	title = secret_bastard.0014.t
	desc = secret_bastard.1004.desc
	theme = bastardy
	left_portrait = {
		character = scope:mother
		animation = shame
	}
	right_portrait = {
		character = scope:real_father
		trigger = {
			exists = scope:real_father
			NOT = { this = root }
		}
		animation = disbelief
	}

	immediate = {
		play_music_cue = mx_cue_seduction
	}

	option = {
		name = secret_bastard.0014.a
	}
}

#####################
##  MARRIED		##
#####################
#2000-2999

#Reaction event for mother (ALSO FOR UNMARRIED!)
secret_bastard.2000 = {
	type = character_event
	title = secret_bastard.2000.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:secret_exposer = root }
				desc = secret_bastard.2000.desc_opening.me
			}
			desc = secret_bastard.2000.desc_opening
		}
		desc = secret_bastard.2000.desc
	}
	theme = bastardy
	left_portrait = {
		character = scope:secret_exposer
		animation = disapproval
	}
	right_portrait = {
		character = scope:real_father
		trigger = {
			exists = scope:real_father
			NOT = { this = scope:secret_exposer }
		}
		animation = shock
	}
	lower_right_portrait = {
		character = primary_partner
		trigger = {
			exists = primary_partner
			NOT = { this = scope:secret_exposer }
		}
	}
	lower_center_portrait = scope:child

	immediate = {
		play_music_cue = mx_cue_seduction
		show_as_tooltip = {
			secret_exposed_owner_effects_effect = { SECRET = scope:secret POV = scope:secret_exposer }	
		}
		secret_exposed_owner_opinion_effects_effect = yes
		if = {
			limit = { exists = scope:unhostaged_child }
			show_as_tooltip = {
				scope:child = {
					return_hostage = yes
					scope:warden = { add_courtier = root }
				}
			}
		}
	}

	option = {
		name = secret_bastard.2000.a
	}
}

##Reaction event for scope:father if they are the exposer
secret_bastard.2001 = {
	type = character_event
	title = secret_bastard.2001.t
	desc = {
		desc = secret_bastard.2001.desc_opening.me
		desc = secret_bastard.2001.desc
		triggered_desc = {
			trigger = { exists = scope:real_father }
			desc = secret_bastard.2001.father
		}
		desc = secret_bastard.2001.keep_lineage
	}
	theme = bastardy
	left_portrait = {
		character = scope:owner
		animation = shame
	}
	right_portrait = {
		character = scope:real_father
		trigger = {
			exists = scope:real_father
			NOT = { this = scope:secret_exposer }
		}
		animation = shock
	}
	lower_center_portrait = scope:child
	
	immediate = {
		play_music_cue = mx_cue_seduction
		secret_exposed_notification_effects_effect = {
			SECRET = scope:secret
			CHARACTER = scope:mother
		}
	}

	option = {
		name = secret_bastard.2001.a
		trigger = {
			scope:child.age < bastard_legitimacy_change_cutoff_age
		}
	}

	option = {
		name = secret_bastard.2001.b
		trigger = {
			scope:child.age >= bastard_legitimacy_change_cutoff_age
		}
	}
}

#Reaction event for real_father
secret_bastard.2002 = {
	type = character_event
	title = secret_bastard.2002.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:secret_exposer = root
				}
				desc = secret_bastard.2002.i_am_exposer
			}
			desc = secret_bastard.2002.other_exposer
		}
		first_valid = {
			first_valid = {
				triggered_desc = {
					trigger = {
						scope:real_father = {
							has_character_flag = real_father_knows
						}
					}
					desc = secret_bastard.2002.known
				}
				triggered_desc = {
					trigger = {
						scope:real_father = {
							NOT = { has_character_flag = real_father_knows }
						}
					}
					desc = secret_bastard.2002.not_known
				}
			}
		}
		triggered_desc = {
			trigger = { exists = scope:father }
			desc = secret_bastard.2002.assumed_father_exists
		}
	}
	theme = bastardy
	left_portrait = {
		character = scope:secret_exposer
		animation = disapproval
	}
	right_portrait = {
		character = scope:mother
		animation = shame
	}
	lower_right_portrait = {
		character = scope:assumed_father
		trigger = {
			exists = scope:assumed_father
			NOT = { this = scope:child.real_father }
			NOT = { this = scope:secret_exposer }
		}
	}
	lower_center_portrait = scope:child

	immediate = {
		play_music_cue = mx_cue_seduction
		if = {
			limit = {
				exists = scope:child.father
				NOT = { scope:child.father = scope:child.real_father }
			}
			scope:child.father = {
				save_scope_as = assumed_father
			}
		}
		secret_exposed_notification_effects_effect = {
			SECRET = scope:secret
			CHARACTER = scope:mother
		}
	}

	option = {
		name = secret_bastard.2002.a
		trigger = {
			scope:real_father = {
				has_character_flag = real_father_knows
			}
		}
		scope:real_father = {
			remove_character_flag = real_father_knows
		}
	}
	option = {
		name = secret_bastard.2002.b
		trigger = {
			scope:real_father = {
				NOT = { has_character_flag = real_father_knows }
			}
		}
	}
}

#Reaction event for child
secret_bastard.2003 = {
	type = character_event
	title = secret_bastard.2003.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { root = scope:secret_exposer }
				desc = secret_bastard.2003.i_exposed
			}
			desc = secret_bastard.2003.other_exposer
		}
		first_valid = {
			first_valid = {
				triggered_desc = {
					trigger = {
						scope:child = {
							has_character_flag = child_knows
						}
					}
					desc = secret_bastard.2003.known
				}
				triggered_desc = {
					trigger = {
						scope:child = {
							NOT = { has_character_flag = child_knows }
						}
					}
					desc = secret_bastard.2003.not_known
				}
			}
		}
		first_valid = { #Was the father the one who exposed or not?
			triggered_desc = {
				trigger = {
					scope:father = {
						this = scope:secret_exposer
					}
				}
				desc = secret_bastard.2003.desc_ending_exposer
			}
			triggered_desc = {
				trigger = {
					scope:child = {
						has_character_flag = child_knows
					}
				}
				desc = secret_bastard.2003.desc_ending_known
			}
			triggered_desc = {
				trigger = {
					scope:child = {
						NOT = { has_character_flag = child_knows }
					}
				}
				desc = secret_bastard.2003.desc_ending_not_known
			}
		}
	}
	theme = bastardy
	left_portrait = {
		character = scope:secret_exposer
		animation = disapproval
	}
	right_portrait = {
		character = scope:mother
		animation = shame
	}
	lower_right_portrait = {
		character = scope:real_father
		trigger = {
			exists = scope:real_father
		}
	}
	lower_left_portrait = {
		character = scope:assumed_father
		trigger = {
			exists = scope:assumed_father
			NOT = { this = scope:child.real_father }
			NOT = { this = scope:secret_exposer }
		}
	}

	immediate = {
		play_music_cue = mx_cue_seduction
		if = {
			limit = {
				exists = scope:child.father
				NOT = { scope:child.father = scope:child.real_father }
			}
			scope:child.father = {
				save_scope_as = assumed_father
			}
		}
		secret_exposed_notification_effects_effect = {
			SECRET = scope:secret
			CHARACTER = scope:mother
		}
	}

	option = {
		name = secret_bastard.2003.a
		scope:child = {
			remove_character_flag = child_knows
		}
	}
}


########################
##  UNMARRIED - BORN  ##
########################
#3000-3999

#Reaction event for mother is same as for married!

#Reaction event for real_father, child is born
secret_bastard.3000 = {
	type = character_event
	title = secret_bastard.3000.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:real_father = {
						has_character_flag = real_father_knows
					}
				}
				desc = secret_bastard.3000.known
			}
			triggered_desc = {
				trigger = {
					scope:real_father = {
						NOT = { has_character_flag = real_father_knows }
					}
				}
				desc = secret_bastard.3000.not_known
			}
			triggered_desc = {
				trigger = {
					scope:real_father = {
						is_married = yes
						has_character_flag = real_father_knows
					}
				}
				desc = secret_bastard.3000.married_known
			}
			triggered_desc = {
				trigger = {
					scope:real_father = {
						is_married = yes
						NOT = { has_character_flag = real_father_knows }
					}
				}
				desc = secret_bastard.3000.married_not_known
			}
		}			
	}
	theme = bastardy
	left_portrait = {
		character = scope:child
		animation = shock
	}
	right_portrait = {
		character = scope:mother
		animation = shame
		trigger = {
			scope:mother = { is_alive = yes }
		}
	}
	lower_right_portrait = {
		character = scope:real_father
		trigger = {
			exists = scope:real_father
		}
	}
	lower_center_portrait = {
		character = scope:mother
		trigger = {
			scope:mother = { is_alive = no }
		}
	}
	lower_left_portrait = {
		character = scope:assumed_father
		trigger = {
			exists = scope:assumed_father
			NOT = { this = scope:child.real_father }
			NOT = { this = scope:secret_exposer }
		}
	}

	immediate = {
		if = {
			limit = {
				exists = scope:child.father
				NOT = { scope:child.father = scope:child.real_father }
			}
			scope:child.father = {
				save_scope_as = assumed_father
			}
		}
		show_as_tooltip = {
			secret_exposed_owner_effects_effect = { SECRET = scope:secret POV = root }
			secret_exposed_owner_opinion_effects_effect = yes
		}
		secret_exposed_owner_opinion_effects_effect = yes
		if = {
			limit = { exists = scope:unhostaged_child }
			show_as_tooltip = {
				scope:child = {
					return_hostage = yes
					scope:warden = { add_courtier = root }
				}
			}
		}
	}

	option = {
		name = secret_bastard.3000.a
		trigger = { has_character_flag = real_father_knows }
		remove_character_flag = real_father_knows
	}
	option = {
		name = secret_bastard.3000.b
		trigger = {
			scope:real_father = {
				NOT = { has_character_flag = real_father_knows }
			}
		}
	}
}

#Reaction event for child
secret_bastard.3001 = {
	type = character_event
	title = secret_bastard.3001.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = scope:incest_spouse
				}
				desc = secret_bastard.3001.incest_marriage
			}
			first_valid = {
				triggered_desc = {
					trigger = {
						scope:child = {
							has_character_flag = child_knows
						}
					}
					desc = secret_bastard.3001.known
				}
				triggered_desc = {
					trigger = {
						scope:child = {
							NOT = { has_character_flag = child_knows }
						}
					}
					desc = secret_bastard.3001.not_known
				}
			}
		}
	}
	theme = bastardy
	left_portrait = {
		character = scope:mother
		animation = shame
	}
	lower_left_portrait = {
		character = scope:real_father
		trigger = {
			exists = scope:real_father
		}
	}
	right_portrait = {
		character = scope:assumed_father
		trigger = {
			exists = scope:assumed_father
		}
		animation = shock
	}
	lower_right_portrait = {
		character = scope:incest_spouse
		trigger = { exists = scope:incest_spouse }
		animation = shame
	}

	immediate = {
		play_music_cue = mx_cue_murder
		if = {
			limit = {
				exists = scope:child.father
				NOT = { scope:child.father = scope:child.real_father }
			}
			scope:child.father = {
				save_scope_as = assumed_father
			}
		}
		if = { #Did I accidentally marry my sibling?
			limit = {
				any_spouse = {
					real_father = scope:real_father
				}
			}
			random_spouse = {
				limit = {
					real_father = scope:real_father
				}
				save_scope_as = incest_spouse
			}
		}
		show_as_tooltip = {
			secret_exposed_owner_effects_effect = { SECRET = scope:secret POV = root }
			secret_exposed_owner_opinion_effects_effect = yes
		}
		secret_exposed_owner_opinion_effects_effect = yes
		if = {
			limit = { exists = scope:unhostaged_child }
			show_as_tooltip = {
				scope:child = {
					return_hostage = yes
					scope:warden = { add_courtier = root }
				}
			}
		}
	}

	option = {
		name = secret_bastard.3001.a
		trigger = {
			scope:child = {
				has_character_flag = child_knows
			}
		}
		scope:child = {
			remove_character_flag = child_knows
		}
	}

	option = {
		name = secret_bastard.3001.b
		trigger = {
			scope:child = {
				NOT = { has_character_flag = child_knows }
			}
		}
	}
}

