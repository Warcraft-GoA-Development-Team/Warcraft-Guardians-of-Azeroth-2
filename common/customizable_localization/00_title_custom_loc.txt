ClaimThroneMythicalFounder = {#Warcraft
	type = character
	random_valid = yes

	text = {
		localization_key = MythicalFounder_fallback
		trigger = { # Zenobia			
			var:mythical_founder = flag:fallback
		}
	}
}

ClaimThroneMythicalFounderHerselfHimself = {#Warcraft
	type = character

	# Structured with extra ORs for the sake of clarity

	text = {
		localization_key = MythicalFounder_themselves

		fallback = yes
	}
}

TitleRelationToMe = {
	type = character

	text = {
		localization_key = TitleRelationToMe_Your_PrimaryTitle
		trigger = {
			primary_title = scope:second
		}
	}

	text = {
		localization_key = TitleRelationToMe_Your_Title
		trigger = {
			root = scope:second.holder
		}
	}

	text = {
		localization_key = TitleRelationToMe_PrimaryTitle
		trigger = {
			scope:second.holder = { save_temporary_scope_as = title_holder }
			exists = scope:title_holder
			has_relation_to = scope:title_holder
			scope:title_holder.primary_title = scope:second
		}
	}

	text = {
		localization_key = TitleRelationToMe_Title
		trigger = {
			scope:second.holder = { save_temporary_scope_as = title_holder }
			exists = scope:title_holder
			has_relation_to = scope:title_holder
		}
	}

	text = {
		localization_key = TitleRelationToMe_None
		fallback = yes
	}
}

GetQueenKing = {
	type = character

	text = {
		localization_key = king
		trigger = { is_male = yes }
	}
	text = {
		localization_key = king_female
		trigger = { is_female = yes }
	}
}
#Warcraft

GetTierIcon = {
	type = landed_title

	text = {
		localization_key = empire_icon
		trigger = {
			tier = tier_empire
		}
	}

	text = {
		localization_key = kingdom_icon
		trigger = {
			tier = tier_kingdom
		}
	}

	text = {
		localization_key = duchy_icon
		trigger = {
			tier = tier_duchy
		}
	}

	text = {
		localization_key = county_icon
		trigger = {
			tier = tier_county
		}
	}

	text = {
		localization_key = barony_icon
		trigger = {
			tier = tier_barony
		}
	}
}

GetPrimaryTitleTierIcon = {
	type = character

	text = {
		localization_key = empire_icon
		trigger = {
			primary_title.tier = tier_empire
		}
	}

	text = {
		localization_key = kingdom_icon
		trigger = {
			primary_title.tier = tier_kingdom
		}
	}

	text = {
		localization_key = duchy_icon
		trigger = {
			primary_title.tier = tier_duchy
		}
	}

	text = {
		localization_key = county_icon
		trigger = {
			primary_title.tier = tier_county
		}
	}

	text = {
		localization_key = barony_icon
		trigger = {
			primary_title.tier = tier_barony
		}
	}

	text = {
		localization_key = current_situation_blank
	}
}

GetSuccessionLinePositionCurrentSituation = {
	type = character

	text = {
		localization_key = in_line_of_succession_short_current_situation
		trigger = {
			scope:second.primary_title ?= {
				place_in_line_of_succession = {
					target = root
					value <= 20
				}
			}
		}
	}

	text = {
		localization_key = current_situation_blank
	}
}

GetSuccessionLinePositionLongCurrentSituation = {
	type = character

	text = {
		localization_key = in_line_of_succession_long_current_situation
		trigger = {
			scope:second.primary_title ?= {
				place_in_line_of_succession = {
					target = root
					value <= 20
				}
			}
		}
	}

	text = {
		localization_key = current_situation_blank
	}
}

GetInOrOutsideRealm = {
	type = character

	text = {
		localization_key = not_in_realm_current_situation
		trigger = {
			NOT = { government_has_flag = government_is_landless_adventurer }
			scope:second = {
				is_independent_ruler = no
				any_liege_or_above = {
					this = root
				}
			}
		}
	}

	text = {
		localization_key = in_realm_current_situation
		trigger = {
			NOT = { government_has_flag = government_is_landless_adventurer }
		}
	}

	text = {
		localization_key = independent_realm_landless_current_situation
		trigger = {
			government_has_flag = government_is_landless_adventurer
			scope:second.top_liege = scope:second
		}
	}

	text = {
		localization_key = vassal_realm_landless_current_situation
		trigger = {
			government_has_flag = government_is_landless_adventurer
			scope:second.top_liege != scope:second
		}
	}
}

GetInOrOutsideRealmAllianceInfo = {
	type = character

	text = {
		localization_key = in_realm_alliance_current_situation
		trigger = {
			scope:second = {
				is_independent_ruler = no
				any_liege_or_above = {
					this = root
				}
			}
		}
	}

	text = {
		localization_key = not_in_realm_alliance_current_situation
	}
}

GetIncumbentOrNone = {
	type = landed_title

	text = {
		localization_key = GetIncumbentOrNone.holder
		trigger = { exists = holder }
	}
	text = {
		localization_key = GetIncumbentOrNone.uncreated
		trigger = { always = no }
		fallback = yes
	}
}

GetIncumbentOrNone_Possessive = {
	type = landed_title

	text = {
		localization_key = CHARACTER_HERHIS_HER
		trigger = {
			holder ?= { is_female = yes }
		}
	}
	text = {
		localization_key = CHARACTER_HERHIS_HIS
		trigger = {
			holder ?= { is_female = yes }
		}
	}
	text = {
		localization_key = CHARACTER_HERHIS_ITS
		trigger = { always = no }
		fallback = yes
	}
}

GetTierBaseTitleFemale = {
	type = landed_title

	text = {
		localization_key = emperor_female
		trigger = { tier = tier_empire }
	}
	text = {
		localization_key = king_female
		trigger = { tier = tier_kingdom }
	}
	text = {
		localization_key = duke_female
		trigger = { tier = tier_duchy }
	}
	text = {
		localization_key = count_female
		trigger = { tier = tier_county }
	}
	text = {
		localization_key = baron_female
		trigger = { tier = tier_barony }
	}
}

GetTierBaseTitleMale = {
	type = landed_title

	text = {
		localization_key = emperor
		trigger = { tier = tier_empire }
	}
	text = {
		localization_key = king
		trigger = { tier = tier_kingdom }
	}
	text = {
		localization_key = duke
		trigger = { tier = tier_duchy }
	}
	text = {
		localization_key = count
		trigger = { tier = tier_county }
	}
	text = {
		localization_key = baron
		trigger = { tier = tier_barony }
	}
}

GetTierBase = {
	type = landed_title

	text = {
		localization_key = empire
		trigger = { tier = tier_empire }
	}
	text = {
		localization_key = kingdom
		trigger = { tier = tier_kingdom }
	}
	text = {
		localization_key = duchy
		trigger = { tier = tier_duchy }
	}
	text = {
		localization_key = county
		trigger = { tier = tier_county }
	}
	text = {
		localization_key = barony
		trigger = { tier = tier_barony }
	}
}

GetTierBasePlural = {
	type = landed_title

	text = {
		localization_key = game_concept_empires
		trigger = { tier = tier_empire }
	}
	text = {
		localization_key = game_concept_kingdoms
		trigger = { tier = tier_kingdom }
	}
	text = {
		localization_key = game_concept_duchies
		trigger = { tier = tier_duchy }
	}
	text = {
		localization_key = game_concept_counties
		trigger = { tier = tier_county }
	}
	text = {
		localization_key = game_concept_baronies
		trigger = { tier = tier_barony }
	}
}

GetTierBaseConcept = {
	type = landed_title

	text = {
		localization_key = concept_empire
		trigger = { tier = tier_empire }
	}
	text = {
		localization_key = concept_kingdom
		trigger = { tier = tier_kingdom }
	}
	text = {
		localization_key = concept_duchy
		trigger = { tier = tier_duchy }
	}
	text = {
		localization_key = concept_county
		trigger = { tier = tier_county }
	}
	text = {
		localization_key = concept_barony
		trigger = { tier = tier_barony }
	}
}

GetCoRulerDiffGenderBestTitle = {
	type = character

	# If our liege has a primary spouse, and that spouse isn't a ruler, try to take their title.
	text = {
		localization_key = GetCoRulerDiffGenderBestTitle_Spouse
		trigger = {
			liege.primary_spouse ?= { is_ruler = no }
		}
	}
	# Else, fall back on doing it by tier.
	## Empire.
	text = {
		localization_key = councillor_spouse_empress
		trigger = {
			is_female = yes
			liege.highest_held_title_tier >= tier_empire
		}
	}
	text = {
		localization_key = councillor_spouse_emperor
		trigger = {
			is_male = yes
			liege.highest_held_title_tier >= tier_empire
		}
	}
	## Kingdom.
	text = {
		localization_key = councillor_spouse_queen
		trigger = {
			is_female = yes
			liege.highest_held_title_tier >= tier_kingdom
		}
	}
	text = {
		localization_key = councillor_spouse_king
		trigger = {
			is_male = yes
			liege.highest_held_title_tier >= tier_kingdom
		}
	}
	## Duchy.
	text = {
		localization_key = councillor_spouse_duchess
		trigger = {
			is_female = yes
			liege.highest_held_title_tier >= tier_duchy
		}
	}
	text = {
		localization_key = councillor_spouse_duke
		trigger = {
			is_male = yes
			liege.highest_held_title_tier >= tier_duchy
		}
	}
	## County.
	text = {
		localization_key = councillor_spouse_countess
		trigger = {
			is_female = yes
			liege.highest_held_title_tier >= tier_county
		}
	}
	text = {
		localization_key = councillor_spouse_count
		trigger = {
			is_male = yes
			liege.highest_held_title_tier >= tier_county
		}
	}
	## Barony.
	text = {
		localization_key = councillor_spouse_baroness
		trigger = {
			is_female = yes
			liege.highest_held_title_tier >= tier_barony
		}
	}
	text = {
		localization_key = councillor_spouse_baron
		trigger = {
			is_male = yes
			liege.highest_held_title_tier >= tier_barony
		}
	}
}
