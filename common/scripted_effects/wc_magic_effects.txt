wc_learn_spell_effect = {
    if = {
        limit = {
            NOT = {
                is_known_spell_trigger = {
                    SPELL = flag:$SPELL$
                }
            }
        }
        add_to_variable_list = {
            name = known_spells
            target = flag:$SPELL$
        }
    }
}

learn_spell_rank_effect = {
    add_to_variable_list = {
        name = known_rank_$RANK$_spells
        target = flag:$SPELL$
    }
}

# change_elemental_favour_effect = {
# 	if = {
# 		limit = {
# 			has_variable = wc_$TYPE$_favour_variable
# 		}
# 		# nothing
# 	}
# 	else = {
# 		set_variable = {
# 			name = wc_$TYPE$_favour_variable
# 			value = wc_$TYPE$_favour_current_value
# 		}
# 	}
# 	change_variable = {
# 		name = wc_$TYPE$_favour_variable
# 		$CHANGE$ = $VALUE$
# 	}
# 	# TODO : recalculate traits / secrets

# }

show_spell_tt_effect = {
	spell_execute = { EFFECT = cast_$SPELL$_effect }
	if = { # Chance to double cast if you have Evocation
		limit = {
			has_character_modifier = wc_evocation_character_modifier
			NOT = {
				spell_is_ritual_trigger = { SPELL = flag:$SPELL$ }
			}
		}
		random_list = {
			50 = {
				custom_tooltip = evocation_double_cast_tt
				spell_execute = { EFFECT = cast_$SPELL$_effect }
			}
			50 = {

			}
		}
	}

    # Chance to expose secret
    wc_expose_magic_effect = { MAGIC = $TYPE$ SPELL = $SPELL$ }

    if = { limit = { $RANK$ = 2 } } # error suppression
}

show_spell_tt_effect_elemental = {
    show_spell_tt_effect = { SPELL = $SPELL$ TYPE = $TYPE$ RANK = $RANK$ }
    if = {
        limit = { # Change elemental disposition
            spell_is_elemental_trigger = { SPELL = flag:$SPELL$ }
            OR = {
                exists = var:$SPELL$_type
                exists = var:elemental_type
            }
        }
        if = {
            limit = {
                NOT = {
                    spell_is_ritual_trigger = {
                        SPELL = flag:$SPELL$
                    }
                }
            }
            save_scope_value_as = {
                name = elemental_favour_change
                value = {
                    add = wc_spell_$SPELL$_cost_mana_value
                    divide = 2
                }
            }
        }
        else = {
            save_scope_value_as = {
                name = elemental_favour_change
                value = {
                    add = wc_spell_$SPELL$_cost_mana_value
                    divide = 4
                }
            }
        }

        if = {
            limit = {
                OR = {
                    AND = {
                        exists = var:$SPELL$_type
                        NOT = { exists = var:elemental_type }
                        var:$SPELL$_type = flag:spirit
                    }
                    AND = {
                        exists = var:elemental_type
                        var:elemental_type = flag:spirit
                    }
                }
            }
            wc_change_amount_element_favour_effect = {
                ELEMENT = $TYPE$
                CHANGE = add
                VALUE = scope:elemental_favour_change
            }
        }
        else_if = {
            limit = {
                OR = {
                    AND = {
                        exists = var:$SPELL$_type
                        NOT = { exists = var:elemental_type }
                        var:$SPELL$_type = flag:decay
                    }
                    AND = {
                        exists = var:elemental_type
                        var:elemental_type = flag:decay
                    }
                }
            }
            wc_change_amount_element_favour_effect = {
                ELEMENT = $TYPE$
                CHANGE = subtract
                VALUE = scope:elemental_favour_change
            }
        }
    }
}

execute_scoped_spell_effect = {
	if = { limit = { NOT = { has_variable = current_spell_rank } } set_variable = { name = current_spell_rank value = 1 }  }
	switch = { 
		trigger = $SPELL$
		# Elemental Fire
		flag:backdraft = { $EFFECT$_elemental = { SPELL = backdraft RANK = var:current_spell_rank TYPE = elemental_fire } }
		flag:summon_fire_elemental = { $EFFECT$_elemental = { SPELL = summon_fire_elemental RANK = var:current_spell_rank TYPE = elemental_fire } }
		flag:lava_lash = { $EFFECT$_elemental = { SPELL = lava_lash RANK = var:current_spell_rank TYPE = elemental_fire } }
		flag:flame_wall = { $EFFECT$_elemental = { SPELL = flame_wall RANK = var:current_spell_rank TYPE = elemental_fire } }
		flag:flame_shock = { $EFFECT$_elemental = { SPELL = flame_shock RANK = var:current_spell_rank TYPE = elemental_fire } }
		flag:burnout = { $EFFECT$_elemental = { SPELL = burnout RANK = var:current_spell_rank TYPE = elemental_fire } }
		flag:planar_fire = { $EFFECT$_elemental = { SPELL = planar_fire RANK = var:current_spell_rank TYPE = elemental_fire } }
		flag:cauterize_wound = { $EFFECT$_elemental = { SPELL = cauterize_wound RANK = var:current_spell_rank TYPE = elemental_fire } }
		flag:vernal_solstice = { $EFFECT$_elemental = { SPELL = vernal_solstice RANK = var:current_spell_rank TYPE = elemental_fire } }

		# Order
		flag:polymorph = { $EFFECT$ = { SPELL = polymorph RANK = var:current_spell_rank TYPE = order } }
		flag:counterspell = { $EFFECT$ = { SPELL = counterspell RANK = var:current_spell_rank TYPE = order } }

		## Fire
		flag:scorch = { $EFFECT$ = { SPELL = scorch RANK = var:current_spell_rank TYPE = order } }
		flag:pyroblast = { $EFFECT$ = { SPELL = pyroblast RANK = var:current_spell_rank TYPE = order } }
		flag:flamestrike = { $EFFECT$ = { SPELL = flamestrike RANK = var:current_spell_rank TYPE = order } }
		flag:fire_shield = { $EFFECT$ = { SPELL = fire_shield RANK = var:current_spell_rank TYPE = order } }

		## Frost
		flag:frostbolt = { $EFFECT$ = { SPELL = frostbolt RANK = var:current_spell_rank TYPE = order } }
		flag:frost_nova = { $EFFECT$ = { SPELL = frost_nova RANK = var:current_spell_rank TYPE = order } }
		flag:frost_armor = { $EFFECT$ = { SPELL = frost_armor RANK = var:current_spell_rank TYPE = order } }
		flag:blizzard = { $EFFECT$ = { SPELL = blizzard RANK = var:current_spell_rank TYPE = order } }

		## Both
		flag:frostfire_bolt = { $EFFECT$ = { SPELL = frostfire_bolt RANK = var:current_spell_rank TYPE = order } }
		flag:spellsteal = { $EFFECT$ = { SPELL = spellsteal RANK = var:current_spell_rank TYPE = order } }
		flag:scry = { $EFFECT$ = { SPELL = scry RANK = var:current_spell_rank TYPE = order } }
		flag:haste = { $EFFECT$ = { SPELL = haste RANK = var:current_spell_rank TYPE = order } }
		flag:conjure_refreshment = { $EFFECT$ = { SPELL = conjure_refreshment RANK = var:current_spell_rank TYPE = order } }
		flag:chronomancy = { $EFFECT$ = { SPELL = chronomancy RANK = var:current_spell_rank TYPE = order } }
		flag:evocation = { $EFFECT$ = { SPELL = evocation RANK = var:current_spell_rank TYPE = order } }
		flag:arcane_dome = { $EFFECT$ = { SPELL = arcane_dome RANK = var:current_spell_rank TYPE = order } }

		## Fire
		flag:scorch = { $EFFECT$ = { SPELL = scorch RANK = var:current_spell_rank TYPE = order } }
		flag:pyroblast = { $EFFECT$ = { SPELL = pyroblast RANK = var:current_spell_rank TYPE = order } }
		flag:flamestrike = { $EFFECT$ = { SPELL = flamestrike RANK = var:current_spell_rank TYPE = order } }
		flag:fire_shield = { $EFFECT$ = { SPELL = fire_shield RANK = var:current_spell_rank TYPE = order } }

		## Frost
		flag:frostbolt = { $EFFECT$ = { SPELL = frostbolt RANK = var:current_spell_rank TYPE = order } }
		flag:frost_nova = { $EFFECT$ = { SPELL = frost_nova RANK = var:current_spell_rank TYPE = order } }
		flag:frost_armor = { $EFFECT$ = { SPELL = frost_armor RANK = var:current_spell_rank TYPE = order } }
		flag:blizzard = { $EFFECT$ = { SPELL = blizzard RANK = var:current_spell_rank TYPE = order } }

		## Both
		flag:frostfire_bolt = { $EFFECT$ = { SPELL = frostfire_bolt RANK = var:current_spell_rank TYPE = order } }

        ## Light
        flag:flash_of_light = { $EFFECT$ = { SPELL = flash_of_light RANK = var:current_spell_rank TYPE = light } }
        flag:dispel = { $EFFECT$ = { SPELL = dispel RANK = var:current_spell_rank TYPE = light } }
        flag:holy_fire = { $EFFECT$ = { SPELL = holy_fire RANK = var:current_spell_rank TYPE = light } }
        flag:lightwell = { $EFFECT$ = { SPELL = lightwell RANK = var:current_spell_rank TYPE = light } }
        flag:judgement = { $EFFECT$ = { SPELL = judgement RANK = var:current_spell_rank TYPE = light } }
        flag:exorcism = { $EFFECT$ = { SPELL = exorcism RANK = var:current_spell_rank TYPE = light } }
        flag:expulsion = { $EFFECT$ = { SPELL = expulsion RANK = var:current_spell_rank TYPE = light } }
        flag:avenging_wrath = { $EFFECT$ = { SPELL = avenging_wrath RANK = var:current_spell_rank TYPE = light } }
	}
}

set_spell_mana_cost_variable_effect = { # not actually used in casting, just for triggers
    set_variable = {
        name = current_spell_mana_cost
        value = wc_spell_$SPELL$_cost_mana_value
    }
    if = { limit = { $RANK$ = 2 } } # error suppression
    if = { limit = { flag:$TYPE$ = flag:none } } # error suppression
}

set_spell_mana_cost_variable_effect_elemental = { # not actually used in casting, just for triggers
    set_spell_mana_cost_variable_effect = { SPELL = $SPELL$ RANK = $RANK$ TYPE = $TYPE$ }
}

spell_cast_effect = {
    set_variable = {
        name = current_cost
        value = wc_spell_$SPELL$_cost_mana_value
    }

    trigger_event = {
        on_action = wc_on_spell_cast_started
    }

    wc_change_mana_by_value_effect = { # Remove mana
        CHANGE = subtract
        VALUE = wc_spell_$SPELL$_cost_mana_value
    }
    remove_variable = current_cost

    # Save Variables so when the event triggers they wont be lost
    set_variable = {
        name = $SPELL$_rank
        value = $RANK$
    }
    if = {
        limit = {
            exists = var:spell_recipient
        }
        set_variable = {
            name = $SPELL$_recipient
            value = var:spell_recipient
        }
    }

    else_if = {
        limit = {
            has_variable_list = spell_targets_list
        }
        every_in_list = {
            variable = spell_targets_list
            save_scope_as = new_target
            root = {
                add_to_variable_list = {
                    name = $SPELL$_targets_list
                    target = scope:new_target
                }
            }
        }
    }

    if = {
        limit = { has_variable = elemental_type }
        set_variable = {
            name = $SPELL$_type
            value = var:elemental_type
        }
    }

    set_variable = {
        name = $SPELL$_class
        value = flag:$TYPE$
    }

    set_variable = {
        name = $SPELL$_progress
        value = 0
    }

    set_variable = {
        name = $SPELL$_target_type
        value = var:current_target_type
    }

    if = {
        limit = {
            exists = var:original_recipient
        }
        set_variable = {
            name = $SPELL$_original_recipient
            value = var:original_recipient
        }
    }

    set_variable = {
        name = $SPELL$_progress_percent
        value = 0
    }

    set_variable = {
        name = $SPELL$_progress_remaining
        value = wc_spell_$SPELL$_cast_time_value
    }

    if = { # start the loop if its not on already
        limit = {
            NOT = { exists = var:spell_loop_on }
        }
        trigger_event = { on_action = wc_on_spell_progression days = 1 }
    }

    add_to_variable_list = { # add to loop
        name = current_spells_casting
        target = flag:$SPELL$
    }

    if = { # friendly fire warning
        limit = {
            spell_is_harmful_trigger = {
                SPELL = flag:$SPELL$
            }
        }
        if = {
            limit = {
                var:current_target_type = flag:character
                exists = var:spell_recipient
                OR = {
                    var:spell_recipient = root
                    var:spell_recipient = {
                        is_vassal_or_below_of = root
                    }
                }
            }
            custom_tooltip = friendly_fire_warning
        }
    }


    if = {
        limit = {
            spell_is_helpful_trigger = {
                SPELL = flag:$SPELL$
            }
        }

        if = {
            limit = {
                var:current_target_type = flag:character
                exists = var:spell_recipient
                NOT = { this = var:spell_recipient }
            }
            var:spell_recipient = {
                add_opinion = { modifier = wc_casted_helpful_spell target = root }
            }
        }
        else_if = {
            limit = {
                var:current_target_type = flag:title
                exists = var:spell_recipient.holder
                NOT = { this = var:spell_recipient.holder }
            }
            if = {
                limit = {
                    exists = var:spell_recipient.holder.liege
                    NOT = { var:spell_recipient.holder.liege = var:spell_recipient.holder }
                    NOT = { var:spell_recipient.holder.liege = root }
                }
                var:spell_recipient.holder.liege = {
                    add_opinion = { modifier = wc_casted_helpful_spell target = root }
                }
            }
            else = {
                var:spell_recipient.holder = {
                    add_opinion = { modifier = wc_casted_helpful_spell target = root }
                }
            }
        }
        else_if = {
            limit = {
                var:current_target_type = flag:character_list
                has_variable_list = spell_targets_list
            }
            every_in_list = {
                variable = spell_targets_list
                save_scope_as = new_target
                if = {
                    limit = {
                        NOT = { scope:new_target = root }
                    }
                    scope:new_target = {
                        add_opinion = { modifier = wc_casted_helpful_spell target = root }
                    }
                }
            }
        }
        else_if = {
            limit = {
                var:current_target_type = flag:title_list
                has_variable_list = spell_targets_list
            }
            every_in_list = {
                variable = spell_targets_list
                save_scope_as = new_target
                if = {
                    limit = {
                        NOT = { scope:new_target.holder = root }
                    }
                    scope:new_target.holder = {
                        add_opinion = { modifier = wc_casted_helpful_spell target = root }
                    }
                    if = {
                        limit = {
                            exists = scope:new_target.holder.liege
                            NOT = { scope:new_target.holder.liege = root }
                        }
                        scope:new_target.holder.liege = {
                            add_opinion = { modifier = wc_casted_helpful_spell target = root }
                        }
                    }
                }
            }
        }
    }

    if = {
        limit = {
            spell_is_harmful_trigger = {
                SPELL = flag:$SPELL$
            }
        }
        if = {
            limit = {
                var:current_target_type = flag:character
                exists = var:spell_recipient
                NOT = { this = var:spell_recipient }
            }
            var:spell_recipient = {
                add_opinion = { modifier = wc_casted_harmful_spell target = root }
            }
        }
        else_if = {
            limit = {
                var:current_target_type = flag:title
                exists = var:spell_recipient.holder
                NOT = { this = var:spell_recipient.holder }
            }
            var:spell_recipient.holder = {
                add_opinion = { modifier = wc_casted_harmful_spell target = root }
            }
            if = {
                limit = {
                    exists = var:spell_recipient.holder.liege
                    NOT = { var:spell_recipient.holder.liege = var:spell_recipient.holder }
                    NOT = { var:spell_recipient.holder.liege = root }
                }
                var:spell_recipient.holder.liege = {
                    add_opinion = { modifier = wc_casted_harmful_spell target = root }
                }
            }
        }
        else_if = {
            limit = {
                var:current_target_type = flag:character_list
                has_variable_list = spell_targets_list
            }
            every_in_list = {
                variable = spell_targets_list
                save_scope_as = new_target
                if = {
                    limit = {
                        NOT = { scope:new_target = root }
                    }
                    scope:new_target = {
                        add_opinion = { modifier = wc_casted_harmful_spell target = root }
                    }
                }
            }
        }
        else_if = {
            limit = {
                var:current_target_type = flag:title_list
                has_variable_list = spell_targets_list
            }
            every_in_list = {
                variable = spell_targets_list
                save_scope_as = new_target
                if = {
                    limit = {
                        NOT = { scope:new_target.holder = root }
                    }
                    scope:new_target.holder = {
                        add_opinion = { modifier = wc_casted_harmful_spell target = root }
                    }
                }
                if = {
                    limit = {
                        exists = scope:new_target.holder.liege
                        NOT = { scope:new_target.holder.liege = root }
                    }
                    scope:new_target.holder.liege = {
                        add_opinion = { modifier = wc_casted_harmful_spell target = root }
                    }
                }
            }
        }
    }

    if = { limit = { flag:$TYPE$ = flag:none } } # error suppression
}

spell_cast_effect_elemental = {
    spell_cast_effect = { SPELL = $SPELL$ RANK = $RANK$ TYPE = $TYPE$ }
}

update_spell_cooldown_effect = {
    if = {
        limit = {
            var:$SPELL$_cd > 0
        }
        change_variable = {
            name = $SPELL$_cd
            add = -1
        }
        set_variable = {
            name = $SPELL$_cd_percent # for gui
            value = {
                add = 1
                add = {
                    value = {
                        add = var:$SPELL$_cd # e.g. 80 days left
                        divide = wc_spell_$SPELL$_cooldown_value # 80 / 120 = 0.66 left
                        multiply = -1 # 1 - 0.66 = 0.33
                    }
                }
                multiply = 100 # 0.33 * 100 = 33% done, 66% remaning.
            }
        }
    }
    else = {
        remove_variable = $SPELL$_cd
        remove_variable = $SPELL$_cd_percent
        remove_list_variable = {
            name = spells_cd
            target = flag:$SPELL$
        }
    }
    if = { limit = { $RANK$ = 2 } } # error suppression
    if = { limit = { flag:$TYPE$ = flag:none } } # error suppression
}
update_spell_cooldown_effect_elemental = {
    update_spell_cooldown_effect = { SPELL = $SPELL$ RANK = $RANK$ TYPE = $TYPE$ }
}

add_spell_progression_effect = {
    if = {
        limit = {
            var:$SPELL$_progress < wc_spell_$SPELL$_cast_time_value
        }
        change_variable = {
            name = $SPELL$_progress
            add = 1
        }
        change_variable = {
            name = $SPELL$_progress_remaining
            add = -1
        }
        set_variable = {
            name = $SPELL$_progress_percent
            value = {
                add = var:$SPELL$_progress
                divide = wc_spell_$SPELL$_cast_time_value
                multiply = 100
            }
        }
    }
    else = {
        remove_list_variable = {
            name = current_spells_casting
            target = flag:$SPELL$
        }

        set_variable = spell_complete

        set_variable = {
            name = casted_spell
            value = flag:$SPELL$
        }

        if = {
            limit = {
                exists = var:$SPELL$_recipient
            }
            set_variable = {
                name = casted_recipient
                value = var:$SPELL$_recipient
            }
        }

        if = {
            limit = {
                has_variable_list = $SPELL$_targets_list
            }
            every_in_list = {
                variable = $SPELL$_targets_list
                save_scope_as = new_target
                root = {
                    add_to_variable_list = {
                        name = casted_targets_list
                        target = scope:new_target
                    }
                }
            }
        }

        set_variable = {
            name = casted_rank
            value = var:$SPELL$_rank
        }

        set_variable = {
            name = casted_type
            value = var:$SPELL$_type
        }

        set_variable = {
            name = casted_target_type
            value = var:$SPELL$_target_type
        }

        if = {
            limit = {
                exists = var:$SPELL$_original_recipient
            }
            set_variable = {
                name = casted_original_recipient
                value = var:$SPELL$_original_recipient
            }
        }

        set_variable = {
            name = casted_class
            value = var:$SPELL$_class
        }

		## trigger on_action
		trigger_event = {
			on_action = wc_on_spell_cast_before_cast
		}

        if = {
			limit = {
				has_variable = should_reflect
				var:should_reflect = yes
			}
			if = {
				limit = {
					var:$SPELL$_target_type = flag:character
				}
				set_variable = {
					name = $SPELL$_recipient
					value = root
				}
				set_variable = {
					name = casted_recipient
					value = root
				}
			}
			else_if = {
				limit = {
					var:$SPELL$_target_type = flag:character_list
				}
				add_to_variable_list = {
					name = $SPELL$_targets_list
					target = root
				}
				add_to_variable_list = {
					name = casted_targets_list
					target = root
				}
			}
		}

        if = {
            limit = {
                has_variable_list = $SPELL$_targets_list
            }
            every_in_list = {
                variable = $SPELL$_targets_list
                if = {
                    limit = {
                        NOT = {
                            OR = {
                                NOT = {
                                    has_variable = should_include
                                }
                                var:should_include = yes
                            }
                        }
                    }
                    save_scope_as = new_target
                    remove_list_variable = { name = $SPELL$_targets_list target = scope:new_target }
                    remove_list_variable = { name = casted_targets_list target = scope:new_target }
                }
                remove_variable = should_include
            }
        }

		if = {
			limit = {
				OR = {
					NOT = {
						has_variable = should_cast
					}
					var:should_cast = yes
				}
			}
            remove_variable = should_cast
			# actually cast
			spell_execute = { EFFECT = cast_$SPELL$_effect }
			if = { # Chance to double cast if you have Evocation
				limit = {
					has_character_modifier = wc_evocation_character_modifier
					NOT = {
						spell_is_ritual_trigger = { SPELL = flag:$SPELL$ }
					}
				}
				random_list = {
					50 = {
						spell_execute = { EFFECT = cast_$SPELL$_effect }
					}
					50 = {
					}
				}
			}
		}

        #put the spell on cooldown
        put_spell_on_cooldown_effect = {
            SPELL = $SPELL$
            RANK = 1
            TYPE = $TYPE$
        }

        # Chance to expose secret
        wc_expose_magic_effect = { MAGIC = $TYPE$ SPELL = $SPELL$ }

        ## trigger on_action
        trigger_event = {
            on_action = wc_on_spell_cast_finish
        }

		clear_variable_list = $SPELL$_targets_list
		clear_variable_list = casted_targets_list
		remove_variable = should_cast
        remove_variable = should_reflect
		remove_variable = $SPELL$_progress
		remove_variable = $SPELL$_recipient
		remove_variable = $SPELL$_rank
		remove_variable = $SPELL$_progress_percent
		remove_variable = $SPELL$_progress_remaining
		remove_variable = $SPELL$_type
		remove_variable = $SPELL$_class
		remove_variable = $SPELL$_target_type
		remove_variable = $SPELL$_original_recipient
		remove_variable = elemental_favour_change
		remove_variable = casted_rank
		remove_variable = casted_type
		remove_variable = casted_spell
		remove_variable = casted_recipient
		remove_variable = casted_class
		remove_variable = casted_target_type
	}
	if = { limit = { $RANK$ = 2 } } # error suppression
	if = { limit = { flag:$TYPE$ = flag:spoon } } # error suppression
}

add_spell_progression_effect_elemental = {
    remove_variable = spell_complete
	add_spell_progression_effect = { SPELL = $SPELL$ RANK = $RANK$ TYPE = $TYPE$ }
	if = {
		limit = { # Change elemental disposition
			has_variable = spell_complete
			spell_is_elemental_trigger = { SPELL = flag:$SPELL$ }
			OR = {
				exists = var:$SPELL$_type
				exists = var:elemental_type
			}
		}
		if = {
			limit = {
				NOT = {
					spell_is_ritual_trigger = {
						SPELL = flag:$SPELL$
					}
				}
			}
			save_scope_value_as = {
				name = elemental_favour_change
				value = {
					add = wc_spell_$SPELL$_cost_mana_value
					divide = 2
				}
			}
		}
		else = {
			save_scope_value_as = {
				name = elemental_favour_change
				value = {
					add = wc_spell_$SPELL$_cost_mana_value
					divide = 4
				}
			}
		}

        if = {
            limit = {
                OR = {
                    AND = {
                        exists = var:$SPELL$_type
                        var:$SPELL$_type = flag:spirit
                    }
                    AND = {
                        exists = var:elemental_type
                        var:elemental_type = flag:spirit
                    }
                }
            }
            wc_change_amount_element_favour_effect = {
                ELEMENT = $TYPE$
                CHANGE = add
                VALUE = scope:elemental_favour_change
            }
        }
        else_if = {
            limit = {
                OR = {
                    AND = {
                        exists = var:$SPELL$_type
                        var:$SPELL$_type = flag:decay
                    }
                    AND = {
                        exists = var:elemental_type
                        var:elemental_type = flag:decay
                    }
                }
            }
            wc_change_amount_element_favour_effect = {
                ELEMENT = $TYPE$
                CHANGE = subtract
                VALUE = scope:elemental_favour_change
            }
        }
        remove_variable = spell_complete
    }
}

wc_spell_death_maintenence_effect = {
    set_variable = {
        name = on_death_maint
        value = yes
    }
    ### BURNOUT
    clear_burnout_effect = yes
}

spell_execute = {
    $EFFECT$ = yes
}

magic_buff_maintenance_effect = { # Monthly Maint
    if = { # referesh modifier
        limit = {
            has_character_modifier = wc_hearth_blessing_modifier
        }
        remove_character_modifier = wc_hearth_blessing_modifier
        add_character_modifier = {
            modifier = wc_hearth_blessing_modifier
        }
    }
}

put_spell_on_cooldown_effect = {
    if = {
        limit = {
            NOT = {
                spell_on_cooldown_trigger = {
                    SPELL = flag:$SPELL$
                }
            }
        }

        add_to_variable_list = {
            name = spells_cd
            target = flag:$SPELL$
        }

        if = {
            limit = {
                spell_is_ritual_trigger = {
                    SPELL = flag:$SPELL$
                }
            }
            add_character_flag = {
                flag = any_ritual_cd
                days = wc_spell_cooldown_ritual
            }
        }

        set_variable = {
            name = $SPELL$_cd
            value = wc_spell_$SPELL$_cooldown_value
        }
    }

    if = { limit = { $RANK$ = 2 } } # error suppression

    if = { limit = { flag:$TYPE$ = flag:poop } } # error suppression
}

put_spell_on_cooldown_effect_elemental = {
    put_spell_on_cooldown_effect = { SPELL = $SPELL$ RANK = $RANK$ TYPE = $TYPE$ }
}

remove_spell_cooldown_effect = {
	if = {
		limit = {
			has_variable = $SPELL$_cd
			var:$SPELL$_cd > 0
		}
		remove_variable = $SPELL$_cd
		remove_variable = $SPELL$_cd_percent
		remove_list_variable = {
			name = spells_cd
			target = flag:$SPELL$
		}
	}
}

set_spell_secondary_interaction_effect = {
	switch = {
		trigger = $SPELL$

		flag:fire_shield = {
			if = {
				limit = {
					has_perk = order_magic_tree_4_perk_7
				}
			}
			set_variable = { name = current_secondary_interaction value = flag:wc_magic_fire_shield_interaction }
		}

		fallback = { remove_variable = current_secondary_interaction }
	}
}

wc_halve_cooldown_effect = {
	change_variable = {
		name = $SPELL$_cd
		multiply = 0.5
	}

	set_variable = {
		name = $SPELL$_cd_percent # for gui
		value = {
			add = 1
			add = {
				value = {
					add = var:$SPELL$_cd # e.g. 80 days left
					divide = wc_spell_$SPELL$_cooldown_value # 80 / 120 = 0.66 left
					multiply = -1 # 1 - 0.66 = 0.33
				}
			}
			multiply = 100 # 0.33 * 100 = 33% done, 66% remaning.
		}
	}
	if = { limit = { $RANK$ = 2 } } # error suppression
	if = { limit = { $TYPE$ = flag:poop } } # error suppression
}

wc_halve_cooldown_effect_elemental = {
	wc_halve_cooldown_effect = { SPELL = $SPELL$ RANK = $RANK$ TYPE = $TYPE$ }
}

wc_reverse_causality_effect = {
	#put the spell on cooldown
	put_spell_on_cooldown_effect = {
		SPELL = $SPELL$
		RANK = 1
		TYPE = $TYPE$
	}
	var:$SPELL$_cd = {
		save_scope_as = duration
	}
	set_variable = {
		name = reverse_causality_mult
		value = {
			add = {
				value = var:$SPELL$_cd
				divide = 365
			}
		}
		days = wc_current_spell_duration
	}
	if = { limit = { $RANK$ = 2 } } # error suppression
}

wc_reverse_causality_effect_elemental = {
	wc_reverse_causality_effect = { SPELL = $SPELL$ RANK = $RANK$ TYPE = $TYPE$ }
}
# Prio for removing debuffs -> Magic Illness > Magic Injury > Major Illness > Major Injury > Illness > Injury
# Remove a magic disease
remove_magic_illness_effect = {
    random_character_trait = {
        limit = {
            has_trait_flag = magic_illness
        }
        root = { remove_trait = prev }
    }
}

remove_illness_effect = {
    random_character_trait = {
        limit = {
            has_trait_flag = illness
            NOT = { has_trait_flag = debilitating_illness }
            NOT = { has_trait_flag = magic_illness }
        }
        root = { remove_trait = prev }
    }
}

remove_major_illness_effect = {
    random_character_trait = {
        limit = {
            has_trait_flag = debilitating_illness
            NOT = { has_trait_flag = magic_illness }
        }
        root = { remove_trait = prev }
    }
}

remove_physical_injury_effect = {
    random_character_trait = {
        limit = {
            has_trait_flag = injury
            NOT = { has_trait_flag = major_injury }
            NOT = { has_trait_flag = magic_injury }
        }
        root = { remove_trait = prev }
    }
}

remove_major_physical_injury_effect = {
    random_character_trait = {
        limit = {
            has_trait_flag = major_injury
        }
        root = { remove_trait = prev }
    }
}

remove_magic_injury_effect = {
    random_character_trait = {
        limit = {
            has_trait_flag = magic_injury
        }
        root = { remove_trait = prev }
    }
}

remove_psych_illness_effect = {
    random_character_trait = {
        limit = {
            has_trait_flag = psych_illness
        }
        root = { remove_trait = prev }
    }
}

remove_poison_effect = {
    random_character_trait = {
        limit = {
            has_trait_flag = psych_illness
        }
        root = { remove_trait = prev }
    }
}

# MAGIC_ILLNESS, MAJOR_ILLNESS, MAGIC_INJURY, ILLNESS, MAJOR_INJURY, INJURY, POISON, PSYCH_ILLNESS
# REDUCE_SEVERITY = reduce the severity of the trait, "yes" or "no" - if no, just remove the trait completely, if there is no severity, should always be yes
wc_dispel_template_effect = {
    if = { 
        limit = {
            $MAGIC_ILLNESS$ = "yes"
            has_trait_with_flag = magic_illness
        }
        remove_magic_illness_effect = yes
        add_character_flag = {
            flag = wc_recently_dispelled_flag
            days = wc_spell_cooldown_dispel_personal_medium
        }
    }
    else_if = {
        limit = {
            $MAJOR_ILLNESS$ = "yes"
            has_trait_with_flag = debilitating_illness
        }
        remove_major_illness_effect = yes 
        add_character_flag = {
            flag = wc_recently_dispelled_flag
            days = wc_spell_cooldown_dispel_personal_long
        }
    }
    else_if = {
        limit = {
            $MAGIC_INJURY$ = "yes"
            has_trait_with_flag = magic_injury
        }
        if = { # Add all magic injuries here
            limit = {
                $REDUCE_SEVERITY$ = "yes"
            }
            if = {
                limit = {
                    OR = {
                        has_trait = burned_3
                        has_trait = burned_2
                    }
                }
                change_trait_rank = { trait = burned rank = -1 maximum = 2 }
            } 
            else_if = {
                limit = {
                    OR = {
                        has_trait = frostbite_2
                        has_trait = frostbite_3
                    }
                }
                change_trait_rank = { trait = frostbite rank = -1 maximum = 2 }
            } 
            else_if = {
                limit = {
                    OR = {
                        has_trait = frostbite_1
                        has_trait = burned_1
                    }
                }
                remove_magic_injury_effect = yes
            }
        }
        else = {
            remove_magic_injury_effect = yes
        }
        add_character_flag = {
            flag = wc_recently_dispelled_flag
            days = wc_spell_cooldown_dispel_personal_medium
        }
    }
    else_if = {
        limit = {
            $ILLNESS$ = "yes"
            has_trait_with_flag = illness
        }
        remove_illness_effect = yes 
        add_character_flag = {
            flag = wc_recently_dispelled_flag
            days = wc_spell_cooldown_dispel_personal_medium
        }
    }
    else_if = {
        limit = {
            $MAJOR_INJURY$ = "yes"
            has_trait_with_flag = major_injury
        }
        remove_major_physical_injury_effect = yes 
         add_character_flag = {
            flag = wc_recently_dispelled_flag
            days = wc_spell_cooldown_dispel_personal_medium
        }
    }
    else_if = { 
        limit = {
            $INJURY$ = "yes"
            has_trait_with_flag = injury
        }
        if = { # Add all injuries here
            limit = {
                $REDUCE_SEVERITY$ = "yes"
            }
            if = {
                limit = {
                    OR = {
                        has_trait = wounded_2
                        has_trait = wounded_3
                    }
                }
                change_trait_rank = { trait = wounded rank = -1 maximum = 2 }
            } 
            else_if = {
                limit = {
                    OR = {
                        has_trait = wounded_1
                        has_trait = maimed
                    }
                }
                remove_physical_injury_effect = yes
            }
        }
        else = {
            remove_physical_injury_effect = yes
        }
        add_character_flag = {
            flag = wc_recently_dispelled_flag
            days = wc_spell_cooldown_dispel_personal_short
        }
    }
    else_if = {
        limit = {
            $POISON$ = "yes"
            has_trait_with_flag = poison
        }
        remove_poison_effect = yes 
        add_character_flag = {
            flag = wc_recently_dispelled_flag
            days = wc_spell_cooldown_dispel_personal_short
        }
    }
    else_if = {
        limit = {
            $PSYCH_ILLNESS$ = "yes"
            has_trait_with_flag = psych_illness
        }
        remove_psych_illness_effect = yes 
        add_character_flag = {
            flag = wc_recently_dispelled_flag
            days = wc_spell_cooldown_dispel_personal_short
        }
    }
    # Add tooltip then remove variable
    else = {
        custom_tooltip = wc_dispel_no_effect_tooltip
    }
}

