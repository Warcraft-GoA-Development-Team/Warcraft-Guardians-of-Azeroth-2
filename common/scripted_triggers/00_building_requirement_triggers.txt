######################################################################
# Government
######################################################################

building_requirement_tribal = {
	scope:holder = {
		OR = {
			government_has_flag = government_is_tribal
			
			# Warcraft
			has_dark_government_trigger = yes
		}
	}
}

# Warcraft
building_requirement_civilized = {
	scope:holder = {
		NOT = { government_has_flag = government_is_tribal }
	}
}

building_requirement_tribal_holding_in_county = {
	NOT = {
		county = {
			any_county_province = {
				has_holding_type = tribal_holding
			}
		}
	}
}

######################################################################
# Holding Level
######################################################################

building_requirement_castle_city_church = {
	trigger_if = {
		limit = { has_holding_type = castle_holding }
		has_building_or_higher = castle_$LEVEL$
	}
	trigger_else_if = {
		limit = { has_holding_type = city_holding }
		has_building_or_higher = city_$LEVEL$
	}
	trigger_else_if = {
		limit = { has_holding_type = church_holding }
		has_building_or_higher = temple_$LEVEL$
	}
	trigger_else = {
		custom_description = {
			text = "building_requirement_castle_city_church_failed"
			always = no
		}
	}
}

######################################################################
# Special
######################################################################

building_hall_of_heroes_requirement = {
	custom_description = {
		text = building_requirement_hall_of_heroes_failed
		has_variable = hall_of_heroes
		scope:holder = {
			# Warcraft - TODO for some cultures
			has_titanforged_heritage_trigger = yes
		}
	}
}

building_university_requirement = {
	#has_variable = university
}

######################################################################
# Terrain
######################################################################

building_common_tradeport_requirement_terrain = {
	OR = {
		is_coastal = yes
		is_riverside_province = yes
	}
}

building_pastures_requirement_terrain = {
	OR = {
		terrain = farmlands
		terrain = plains
		terrain = steppe
		terrain = desert
		terrain = drylands
		terrain = oasis
		terrain = mountains
		terrain = desert_mountains
		terrain = hills
		terrain = floodplains
		AND = {
			terrain = jungle
			NOT = { geographical_region = world_innovation_elephants }
		}
	}
}

building_hunting_grounds_requirement_terrain = {
	OR = {
		terrain = plains
		terrain = drylands
		terrain = steppe
		terrain = hills
		terrain = taiga
		terrain = forest
		terrain = jungle
		terrain = wetlands
	}
}

building_orchards_requirement_terrain = {
	OR = {
		terrain = floodplains
		terrain = oasis
		has_building_or_higher = qanats_05
		AND = {
			culture = {
				has_cultural_parameter = vegetarian_fruit_orchard_allowed
			}
		}
	}
}

building_farm_estates_requirement_terrain = {
	terrain = farmlands
}

building_military_camps_requirement_terrain = {
	#OR = { # All Terrains
	#	terrain = farmlands
	#	terrain = plains
	#	terrain = drylands
	#	terrain = desert
	#	terrain = oasis
	#	terrain = floodplains
	#	terrain = steppe
	#	terrain = mountains
	#	terrain = desert_mountains
	#	terrain = wetlands
	#	terrain = forest
	#	terrain = taiga
	#	terrain = jungle
	#	terrain = hills
	#}
}

building_regimental_grounds_requirement_terrain = {
	OR = {
		terrain = floodplains
		terrain = farmlands
	}
}

building_ramparts_requirement_terrain = {
	OR = {
		terrain = taiga
		terrain = forest
		terrain = jungle
	}
}

building_curtain_walls_requirement_terrain = {
	OR = {
		terrain = farmlands
		terrain = plains
		terrain = wetlands
		terrain = floodplains
	}
}

building_watchtowers_requirement_terrain = {
	OR = {
		terrain = desert
		terrain = drylands
		terrain = oasis
		terrain = steppe
	}
}

building_cereal_fields_requirement_terrain = {
	OR = {
		terrain = farmlands
		terrain = plains
		terrain = drylands
		terrain = floodplains
		county = {	
			OR = {
				has_county_modifier = fertile_desert_mountains_modifier
				#has_county_modifier = dodekapolis_modifier  #Warcraft
			}
		}
		has_building_or_higher = qanats_05
	}
}

building_outposts_requirement_terrain = {
	OR = {
		terrain = wetlands
		terrain = taiga
		terrain = forest
		terrain = jungle
	}
}

building_barracks_requirement_terrain = {
	#OR = {
	#	terrain = farmlands
	#	terrain = plains
	#	terrain = drylands
	#	terrain = floodplains # new
	#	terrain = hills
	#	terrain = mountains
	#	terrain = forest
	#	terrain = taiga
	#	terrain = jungle
	#	terrain = wetlands
	#	terrain = steppe
	#}
}

building_camel_farms_requirement_terrain = {
	geographical_region = world_innovation_camels # new
	OR = {
		terrain = desert
		terrain = desert_mountains
		terrain = oasis
		terrain = floodplains
		terrain = drylands # new
	}
}

building_stables_requirement_terrain = {
	# All terrains
}

building_smiths_requirement_terrain = {
	# All terrains
}

building_workshops_requirement_terrain = {
	# All terrains
}

building_logging_camps_requirement_terrain = {
	OR = {
		terrain = taiga
		terrain = forest
		terrain = jungle
	}
}

building_peat_quarries_requirement_terrain = {
	terrain = wetlands
}

building_hill_farms_requirement_terrain = {
	terrain = hills
}

building_elephant_pens_requirement_terrain = {
	landing_of_exodar_happened_trigger = yes
	geographical_region = world_innovation_elephants
}

building_horse_pastures_requirement_terrain = {
	OR = {
		terrain = steppe
		geographical_region = world_steppe_east
		culture = { has_cultural_parameter = unlock_horse_pastures_building }
	}
}

building_plantations_requirement_terrain = {
	OR = {
		terrain = drylands
		terrain = desert
		terrain = oasis
	}
}

building_quarries_requirement_terrain = {
	OR = {
		terrain = mountains
		terrain = desert_mountains
		AND = {
			terrain = hills
			culture = {
				has_cultural_parameter = can_build_quarries_in_hills
			}
		}
	}
}

building_warrior_lodges_requirement_terrain = {
	OR = {
		AND = {
		OR = {
			terrain = mountains
			terrain = desert_mountains
			terrain = hills
		}
		NOT = { geographical_region = world_horse_buildings_in_hills_and_mountains }
			}
			culture = { has_cultural_parameter = warrior_lodges_lift_restrictions }
	}
}

building_hillside_grazing_requirement_terrain = {
	OR = {
		terrain = mountains
		terrain = desert_mountains
		terrain = hills
	}
	geographical_region = world_horse_buildings_in_hills_and_mountains
}

building_wind_furnace_requirement_terrain = {
	# Warcraft - removed
	always = no
	#geographical_region = world_india
	#OR = {
		#is_coastal = yes
		#AND = {
		#	scope:holder.top_liege = {
		#		any_realm_county = {
		#			any_county_province = {
		#				has_building_or_higher = konasamudram_mines_01
		#			}
		#		}
		#	}
		#	duchy = {
		#		any_county = {
		#			any_county_province = {
		#				has_building_or_higher = konasamudram_mines_01
		#			}
		#		}
		#	}
		#}
		
	#}
	
	#scope:holder.culture = { has_innovation = innovation_wootz_steel }
}

building_hill_forts_requirement_terrain = {
	OR = {
		terrain = mountains
		terrain = desert_mountains
		terrain = hills
	}
}

building_windmills_requirement_terrain = {
	county ?= {
		any_county_province = {
			OR = {
				terrain = farmlands
				terrain = plains
				terrain = hills
				is_coastal = yes
			}
		}
	}
}

building_watermills_requirement_terrain = {
	county ?= {
		any_county_province = {
			OR = {
				terrain = mountains
				terrain = wetlands
				terrain = forest
				terrain = taiga
				terrain = jungle
				is_riverside_province = yes
			}
		}
	}
}

building_caravanserai_requirement_terrain = {
	county ?= {
		any_county_province = {
			OR = {
				terrain = drylands
				terrain = desert
				terrain = oasis
				terrain = floodplains
				terrain = steppe
				terrain = desert_mountains
				# Warcraft
				#AND = {
				#	geographical_region = world_europe_west_iberia
				#	has_global_variable = fp2_struggle_conciliation_ending
				#}
			}
		}
	}
}

building_qanats_requirement_terrain = {
	county ?= {
		any_county_province = {
			OR = {
				terrain = hills
				terrain = mountains
				terrain = desert_mountains
				terrain = desert
				terrain = drylands
			}
			culture = { has_cultural_parameter = unlocks_qanat_building }
		}
	}
}

building_hospices_requirement_terrain = {
	always = yes
}

has_any_special_mine_trigger = {
	OR = { # Warcraft
		has_building_or_higher = deadmines_01
		has_building_or_higher = silvershard_mines_01
		has_building_or_higher = night_webs_hollow_mine_01
		has_building_or_higher = skittering_dark_mine_01
		has_building_or_higher = deep_elem_mine_01
		has_building_or_higher = emberstone_mine_01
		has_building_or_higher = havenshire_mine_01
		has_building_or_higher = underlight_mines_01
		has_building_or_higher = azurelode_mine_01
		has_building_or_higher = arathi_gold_mine_01
		has_building_or_higher = golbolar_quarry_mine_01
		has_building_or_higher = silver_stream_mine_01
		has_building_or_higher = slag_pit_01
		has_building_or_higher = echo_ridge_mine_01
		has_building_or_higher = fargodeep_mine_01
		has_building_or_higher = gold_coast_quarry_01
		has_building_or_higher = jangolode_mine_01
		has_building_or_higher = rolands_doom_01
		has_building_or_higher = crystalvein_mine_01
		has_building_or_higher = kajamine_01
		has_building_or_higher = splintertree_mine_01
		has_building_or_higher = mountainfoot_strip_mine_01
		has_building_or_higher = lornesta_mine_01
		has_building_or_higher = boulderslide_cavern_mine_01
		has_building_or_higher = windshear_mine_01
		has_building_or_higher = deep_reaches_mine_01
		has_building_or_higher = venture_co_mine_01
		has_building_or_higher = boulder_lode_mine_01
		has_building_or_higher = frazzlecraz_motherlode_01
		has_building_or_higher = darkmist_cavern_01
		has_building_or_higher = farshire_mine_01
		has_building_or_higher = wildervar_mine_01
		has_building_or_higher = wintergarde_mine_01
		has_building_or_higher = hollowstone_mine_01
		has_building_or_higher = swindlegrins_dig_01
		has_building_or_higher = frozen_mine_01
		has_building_or_higher = forlorn_mine_01
		has_building_or_higher = deepwind_gorge_01
		has_building_or_higher = big_blossom_mine_01
		has_building_or_higher = deep_crawl_mine_01
		has_building_or_higher = ruins_of_ogudei_mine_01
		has_building_or_higher = lightning_vein_mine_01
		has_building_or_higher = bleak_hills_mine_01
		has_building_or_higher = coldtooth_mine_01
		has_building_or_higher = irondeep_mine_01
		has_building_or_higher = jasperlode_mine_01
		has_building_or_higher = nethergarde_mines_01
		has_building_or_higher = elementium_depths_01
		has_building_or_higher = saronite_mines_01
		has_building_or_higher = weeping_quarry_01
		has_building_or_higher = pit_of_saron_01
		has_building_or_higher = greenstone_quarry_01
		has_building_or_higher = winterchill_mine_01
		has_building_or_higher = redrock_mines_01
	}
}

######################################################################
# Baronies that cannot have a holding (intended for Sahara)
######################################################################

barony_cannot_construct_holding = {
	# Warcraft
	always = no
}

######################################################################
# Triggers for add_random_building_effect script effect
######################################################################

# is any existing building of the checked tier? (e.g. 02)
has_any_building_of_level_trigger = {
	OR = {
		has_building = outposts_$BUILDING_LEVEL$
		has_building = logging_camps_$BUILDING_LEVEL$
		has_building = peat_quarries_$BUILDING_LEVEL$
		has_building = hill_forts_$BUILDING_LEVEL$
		has_building = plantations_$BUILDING_LEVEL$
		has_building = quarries_$BUILDING_LEVEL$
		has_building = hunting_grounds_$BUILDING_LEVEL$
		has_building = military_camps_$BUILDING_LEVEL$
		has_building = pastures_$BUILDING_LEVEL$
		has_building = ramparts_$BUILDING_LEVEL$
		has_building = curtain_walls_$BUILDING_LEVEL$
		has_building = watchtowers_$BUILDING_LEVEL$
		has_building = cereal_fields_$BUILDING_LEVEL$
		has_building = barracks_$BUILDING_LEVEL$
		has_building = camel_farms_$BUILDING_LEVEL$
		has_building = hill_farms_$BUILDING_LEVEL$
		has_building = elephant_pens_$BUILDING_LEVEL$
		has_building = common_tradeport_$BUILDING_LEVEL$
		has_building = orchards_$BUILDING_LEVEL$
		has_building = farm_estates_$BUILDING_LEVEL$
		has_building = regimental_grounds_$BUILDING_LEVEL$
		has_building = monastic_schools_$BUILDING_LEVEL$
	}
}

# is any existing building a lower tier than compare building?
has_lesser_building_trigger = {
	trigger_if = {
		limit = { has_building_or_higher = $COMPARE$_02 }
		has_any_building_of_level_trigger = { BUILDING_LEVEL = 01 }
	}
	trigger_else_if = {
		limit = { has_building_or_higher = $COMPARE$_03 }
		OR = {
			has_any_building_of_level_trigger = { BUILDING_LEVEL = 01 }
			has_any_building_of_level_trigger = { BUILDING_LEVEL = 02 }
		}
	}
	trigger_else_if = {
		limit = { has_building_or_higher = $COMPARE$_04 }
		OR = {
			has_any_building_of_level_trigger = { BUILDING_LEVEL = 01 }
			has_any_building_of_level_trigger = { BUILDING_LEVEL = 02 }
			has_any_building_of_level_trigger = { BUILDING_LEVEL = 03 }
		}
	}
	trigger_else_if = {
		limit = { has_building_or_higher = $COMPARE$_05 }
		OR = {
			has_any_building_of_level_trigger = { BUILDING_LEVEL = 01 }
			has_any_building_of_level_trigger = { BUILDING_LEVEL = 02 }
			has_any_building_of_level_trigger = { BUILDING_LEVEL = 03 }
			has_any_building_of_level_trigger = { BUILDING_LEVEL = 04 }
		}
	}
	trigger_else_if = {
		limit = { has_building_or_higher = $COMPARE$_06 }
		OR = {
			has_any_building_of_level_trigger = { BUILDING_LEVEL = 01 }
			has_any_building_of_level_trigger = { BUILDING_LEVEL = 02 }
			has_any_building_of_level_trigger = { BUILDING_LEVEL = 03 }
			has_any_building_of_level_trigger = { BUILDING_LEVEL = 04 }
			has_any_building_of_level_trigger = { BUILDING_LEVEL = 05 }
		}
	}
	trigger_else_if = {
		limit = { has_building_or_higher = $COMPARE$_07 }
		OR = {
			has_any_building_of_level_trigger = { BUILDING_LEVEL = 01 }
			has_any_building_of_level_trigger = { BUILDING_LEVEL = 02 }
			has_any_building_of_level_trigger = { BUILDING_LEVEL = 03 }
			has_any_building_of_level_trigger = { BUILDING_LEVEL = 04 }
			has_any_building_of_level_trigger = { BUILDING_LEVEL = 05 }
			has_any_building_of_level_trigger = { BUILDING_LEVEL = 06 }
		}
	}
	trigger_else = { always = no } # Must already be highest tier possible
}

# can this building be added?
add_random_building_trigger = { 
	building_$BUILDING$_requirement_terrain = yes # terrain fits building type
	trigger_if = { # if all slots are full, this building type exists already
		limit = { free_building_slots = 0 }
		has_building_or_higher = $BUILDING$_01
		NOT = {
			has_lesser_building_trigger = { COMPARE = $BUILDING$ }
		}
	}
	trigger_else = {
		NOT = { has_building_or_higher = $BUILDING$_01 }
	}
}

# Innovation and holding level triggers for most economic buildings
generic_economic_building_innovation_trigger = {
	trigger_if = {
		limit = { has_building_or_higher = $BUILDING$_01 }
		scope:build_owner.culture = { has_innovation = innovation_crop_rotation }
	}
	trigger_if = {
		limit = { has_building_or_higher = $BUILDING$_02 }
		building_requirement_castle_city_church = { LEVEL = 02 }
		scope:build_owner.culture = { has_innovation = innovation_manorialism }
	}
	trigger_if = {
		limit = { has_building_or_higher = $BUILDING$_04 }
		building_requirement_castle_city_church = { LEVEL = 03 }
		scope:build_owner.culture = { has_innovation = innovation_guilds }
	}
	trigger_if = {
		limit = { has_building_or_higher = $BUILDING$_06 }
		building_requirement_castle_city_church = { LEVEL = 04 }
		scope:build_owner.culture = { has_innovation = innovation_cranes }
	}
}

# Innovation and holding level triggers for most fortification buildings
generic_fortification_building_innovations_trigger = {
	trigger_if = {
		limit = { has_building_or_higher = $BUILDING$_01 }
		scope:build_owner.culture = { has_innovation = innovation_motte }
	}
	trigger_if = {
		limit = { has_building_or_higher = $BUILDING$_02 }
		building_requirement_castle_city_church = { LEVEL = 02 }
		scope:build_owner.culture = { has_innovation = innovation_battlements }
	}
	trigger_if = {
		limit = { has_building_or_higher = $BUILDING$_04 }
		building_requirement_castle_city_church = { LEVEL = 03 }
		scope:build_owner.culture = { has_innovation = innovation_hoardings }
	}
	trigger_if = {
		limit = { has_building_or_higher = $BUILDING$_06 }
		building_requirement_castle_city_church = { LEVEL = 04 }
		scope:build_owner.culture = { has_innovation = innovation_machicolations }
	}
}

# Innovation and holding level triggers for most recruitment buildings
generic_recruitment_building_innovations_trigger = {
	trigger_if = {
		limit = { has_building_or_higher = $BUILDING$_01 }
		scope:build_owner.culture = { has_innovation = innovation_barracks }
	}
	trigger_if = {
		limit = { has_building_or_higher = $BUILDING$_02 }
		building_requirement_castle_city_church = { LEVEL = 02 }
		scope:build_owner.culture = { has_innovation = innovation_burhs }
	}
	trigger_if = {
		limit = { has_building_or_higher = $BUILDING$_04 }
		building_requirement_castle_city_church = { LEVEL = 03 }
		scope:build_owner.culture = { has_innovation = innovation_castle_baileys }
	}
	trigger_if = {
		limit = { has_building_or_higher = $BUILDING$_06 }
		building_requirement_castle_city_church = { LEVEL = 04 }
		scope:build_owner.culture = { has_innovation = innovation_royal_armory }
	}
}

#Warcraft
#islamic_special_building_trigger = { }
#christian_special_building_trigger = { }
#eastern_special_building_trigger = { }

# Religious special building triggers
religious_special_building_exclusion_trigger = { # checks if any special buildings present do not fit your religion
	OR = {
		AND = { # Generic
			NOT = {
				barony = { is_holy_site_of = holder.faith }
			}
			OR = {
				has_building = holy_site_cathedral_01
				has_building = holy_site_mosque_01
				has_building = holy_site_pagan_grand_temple_01
				has_building = holy_site_indian_grand_temple_01
				has_building = holy_site_other_grand_temple_01
				# Warcraft
				# islamic_special_building_trigger = yes
				# christian_special_building_trigger = yes
			}
		}
		# Warcraft
		#AND = { # Islamic
		#	NOT = { barony.holder = { like_islam_religion_trigger = yes } }
		#	# islamic_special_building_trigger = yes
		#}
		#AND = { # Christian
		#	NOT = { barony.holder = { like_christianity_religion_trigger = yes } }
		#	# christian_special_building_trigger = yes
		#}
		#AND = { # Islamic/Zoroastrian
		# 	NOT = { barony.holder.religion = religion:zoroastrianism_religion }
		# 	has_building = the_friday_mosque_01 # shared muslim
		# }
		#AND = { # Eastern family
		#	NOR = {
		#		ROOT = { like_hinduism_religion_trigger = yes }
		#		ROOT = { like_buddhism_religion_trigger = yes }
		#		ROOT = { like_jainism_religion_trigger = yes }
		#		# Warcraft
		#		# ROOT.religion = religion:taoism_religion
		#		# ROOT.religion = religion:zoroastrianism_religion
		#	}
		#	# eastern_special_building_trigger = yes
		#}
		# # Judaism
		# AND = {
		# 	barony.holder.religion = religion:judaism_religion
		# 	has_building = dome_of_the_rock_01
		# }
		# AND = {
		# 	NOT = { barony.holder.religion = religion:judaism_religion }
		# 	has_building = temple_in_jerusalem_01
		# }
	}
}

# TODO - Find a use for this
building_murex_farm_requirement_terrain = {
	always = no
	# is_county_capital = yes
	# is_coastal = yes
	# geographical_region = mediteranean_coast
	# NOR = {
	# 	this.barony = title:b_salmydessus
	# 	this.barony = title:b_chelai
	# }
}