test_value = 5
test_bool = yes

#Gold stuff
tiny_gold_value_check = 10
#tiny_gold_value = 10
minor_gold_value_check = 30
#minor_gold_value = 30
medium_gold_value_check = 100
#medium_gold_value = 100
major_gold_value_check = 300
#major_gold_value = 300


#Dynamic gold stuff
tiny_gold_min_value = 5
tiny_gold_max_value_static = 50
tiny_gold_max_value = {
	value = tiny_gold_max_value_static
	if = {
		limit = {
			exists = culture
		}
		culture = {
			if = {
				limit = {
					has_cultural_era_or_later = culture_era_late_medieval
				}
				multiply = 3
			}
			else_if = {
				limit = {
					has_cultural_era_or_later = culture_era_high_medieval
				}
				multiply = 1.5
			}
			else_if = {
				limit = {
					has_cultural_era_or_later = culture_era_early_medieval
				}
				multiply = 1
			}
			else = {
				multiply = 0.75
			}
		}
	}
}
minor_gold_min_value = 15
minor_gold_max_value_static = 150
minor_gold_max_value = {
	value = minor_gold_max_value_static
	if = {
		limit = {
			exists = culture
		}
		culture = {
			if = {
				limit = {
					has_cultural_era_or_later = culture_era_late_medieval
				}
				multiply = 3
			}
			else_if = {
				limit = {
					has_cultural_era_or_later = culture_era_high_medieval
				}
				multiply = 1.5
			}
			else_if = {
				limit = {
					has_cultural_era_or_later = culture_era_early_medieval
				}
				multiply = 1
			}
			else = {
				multiply = 0.75
			}
		}
	}
}
medium_gold_min_value = 50
medium_gold_max_value_static = 300
medium_gold_max_value = {
	value = medium_gold_max_value_static
	if = {
		limit = {
			exists = culture
		}
		culture = {
			if = {
				limit = {
					has_cultural_era_or_later = culture_era_late_medieval
				}
				multiply = 3
			}
			else_if = {
				limit = {
					has_cultural_era_or_later = culture_era_high_medieval
				}
				multiply = 1.5
			}
			else_if = {
				limit = {
					has_cultural_era_or_later = culture_era_early_medieval
				}
				multiply = 1
			}
			else = {
				multiply = 0.75
			}
		}
	}
}
major_gold_min_value = 75
major_gold_max_value_static = 500
major_gold_max_value = {
	value = major_gold_max_value_static
	if = {
		limit = {
			exists = culture
		}
		culture = {
			if = {
				limit = {
					has_cultural_era_or_later = culture_era_late_medieval
				}
				multiply = 3
			}
			else_if = {
				limit = {
					has_cultural_era_or_later = culture_era_high_medieval
				}
				multiply = 1.5
			}
			else_if = {
				limit = {
					has_cultural_era_or_later = culture_era_early_medieval
				}
				multiply = 1
			}
			else = {
				multiply = 0.75
			}
		}
	}
}
massive_gold_min_value = 100
massive_gold_max_value_static = 750
massive_gold_max_value = {
	value = massive_gold_max_value_static
	if = {
		limit = {
			exists = culture
		}
		culture = {
			if = {
				limit = {
					has_cultural_era_or_later = culture_era_late_medieval
				}
				multiply = 3
			}
			else_if = {
				limit = {
					has_cultural_era_or_later = culture_era_high_medieval
				}
				multiply = 1.5
			}
			else_if = {
				limit = {
					has_cultural_era_or_later = culture_era_early_medieval
				}
				multiply = 1
			}
			else = {
				multiply = 0.75
			}
		}
	}
}
monumental_gold_min_value = 200
monumental_gold_max_value_static = 1500
monumental_gold_max_value = {
	value = monumental_gold_max_value_static
	if = {
		limit = {
			exists = culture
		}
		culture = {
			if = {
				limit = {
					has_cultural_era_or_later = culture_era_late_medieval
				}
				multiply = 3
			}
			else_if = {
				limit = {
					has_cultural_era_or_later = culture_era_high_medieval
				}
				multiply = 1.5
			}
			else_if = {
				limit = {
					has_cultural_era_or_later = culture_era_early_medieval
				}
				multiply = 1
			}
			else = {
				multiply = 0.75
			}
		}
	}
}

tiny_income_multiplier_value = 1.2
minor_income_multiplier_value = 3
medium_income_multiplier_value = 6
major_income_multiplier_value = 12
massive_income_multiplier_value = 18
monumental_income_multiplier_value = 36

current_gold_value = {
	value = gold
	floor = yes
}

# TIMERS
default_event_cooldown_duration = 730
long_event_cooldown_duration = 1200
default_favor_duration = 3650

#SKILL RATINGS
average_skill_rating = 8 #Tracks what we see as "typical". For use in duels, etc.

low_skill_rating = 5
mediocre_skill_rating = 8
medium_skill_rating = 10
decent_skill_rating = 12
high_skill_rating = 15
very_high_skill_rating = 18
extremely_high_skill_rating = 20
monumentally_high_skill_rating = 25
inverted_low_skill_rating = {
	value = 0
	subtract = low_skill_rating
}
inverted_mediocre_skill_rating = {
	value = 0
	subtract = mediocre_skill_rating
}
inverted_medium_skill_rating = {
	value = 0
	subtract = medium_skill_rating
}
inverted_decent_skill_rating = {
	value = 0
	subtract = decent_skill_rating
}
inverted_high_skill_rating = {
	value = 0
	subtract = high_skill_rating
}
inverted_very_high_skill_rating = {
	value = 0
	subtract = very_high_skill_rating
}
inverted_extremely_high_skill_rating = {
	value = 0
	subtract = extremely_high_skill_rating
}


# SKILL BONUS/PENALTIES
minor_skill_bonus = 1
minor_skill_penalty = -1
medium_skill_bonus = 2
medium_skill_penalty = -2
major_skill_bonus = 3
major_skill_penalty = -3
massive_skill_bonus = 4
massive_skill_penalty = -4


#TEMPLATE SKILLS
skill_variance = 2

guest_template_average_skill = 10

min_guest_template_skill = {
	add = guest_template_average_skill
	subtract = skill_variance
}
max_guest_template_skill = {
	add = guest_template_average_skill
	add = skill_variance
}

min_template_low_skill = {
	add = low_skill_rating
	subtract = skill_variance
}
max_template_low_skill = {
	add = low_skill_rating
	add = skill_variance
}

min_template_average_skill = {
	add = average_skill_rating
	subtract = skill_variance
}
max_template_average_skill = {
	add = average_skill_rating
	add = skill_variance
}

min_template_medium_skill = {
	add = medium_skill_rating
	subtract = skill_variance
}
max_template_medium_skill = {
	add = medium_skill_rating
	add = skill_variance
}

min_template_decent_skill = {
	add = decent_skill_rating
	subtract = skill_variance
}
max_template_decent_skill = {
	add = decent_skill_rating
	add = skill_variance
}

min_template_high_skill = {
	add = high_skill_rating
	subtract = skill_variance
}
max_template_high_skill = {
	add = high_skill_rating
	add = skill_variance
}

min_template_very_high_skill = {
	add = very_high_skill_rating
	subtract = skill_variance
}
max_template_very_high_skill = {
	add = very_high_skill_rating
	add = skill_variance
}

# SKILL LEVELS
#Relates to the skill levels in the defines: DO NOT UPDATE THESE WITHOUT CHANGING THOSE, and vice versa.
#Each level is everything below it that isn't part of another level, apart from excellency, which is everything at that number and above.
terrible_skill_level = 3
poor_skill_level = 7
average_skill_level = 11
good_skill_level = 15
excellent_skill_level = 16


sum_of_all_skills_value = {
	add = intrigue
	add = diplomacy
	add = stewardship
	add = martial
	add = learning
}

sum_of_all_skills_and_prowess_value = {
	value = sum_of_all_skills_value
	add = prowess
}

average_of_all_skills = {
	value = sum_of_all_skills_value
	divide = 5
}

average_of_all_skills_and_prowess = {
	value = sum_of_all_skills_value
	divide = 6
}

sum_of_all_skills_threshold_terrible = {
	value = low_skill_rating
	multiply = 5
}
sum_of_all_skills_threshold_poor = {
	value = medium_skill_rating
	multiply = 5
}
sum_of_all_skills_threshold_average = {
	value = decent_skill_rating
	multiply = 5
}
sum_of_all_skills_threshold_good = {
	value = high_skill_rating
	multiply = 5
}
sum_of_all_skills_threshold_excellent = {
	value = very_high_skill_rating
	multiply = 5
}

highest_skill_value = {
	value = 0
	if = {
		limit = { highest_skill = diplomacy }
		add = diplomacy
	}
	else_if = {
		limit = { highest_skill = martial }
		add = martial
	}
	else_if = {
		limit = { highest_skill = stewardship }
		add = stewardship
	}
	else_if = {
		limit = { highest_skill = intrigue }
		add = intrigue
	}
	else = { add = learning }
}

#Piety ratings
low_negative_piety_level = -1
low_piety_level = 1
medium_piety_level = 2
high_piety_level = 3
very_high_piety_level = 4
max_piety_level = 5

#Prestige levels
low_prestige_level = 1
medium_prestige_level = 2
high_prestige_level = 3
very_high_prestige_level = 4
max_prestige_level = 5

# HEALTH
miniscule_health_penalty = -0.25
minor_health_penalty = -0.5
medium_health_penalty = -1
major_health_penalty = -1.5
massive_health_penalty = -2
monumental_health_penalty = -3

miniscule_health_bonus = 0.25
minor_health_bonus = 0.5
medium_health_bonus = 1
major_health_bonus = 1.5
massive_health_bonus = 2
monumental_health_bonus = 3

#Pregnancy, Wounds, & Disease
pregnancy_chance = 30 #Chance of becoming pregnant from the had_sex_with_effect
seduce_pregnancy_chance = 50
wound_treatment_success_duration = 1095
wound_treatment_success_duration_plus_1 = 1096
wound_treatment_failure_duration = 365
wound_treatment_failure_duration_plus_1 = 366
disease_treatment_short_duration = 365
disease_treatment_short_duration_plus_1 = 366
disease_treatment_long_duration = 1825
disease_treatment_long_duration_plus_1 = 1826


# FERTILITY
minor_fertility_penalty = -0.05
minor_fertility_bonus = 0.05

#Fertility rating
low_fertility = 0.3
medium_fertility = 0.5
high_fertility = 0.8

#Dread
miniscule_dread_loss = -5
minor_dread_loss = -10
medium_dread_loss = -20
major_dread_loss = -30
massive_dread_loss = -50
miniscule_dread_gain = 5
minor_dread_gain = 10
medium_dread_gain = 20
major_dread_gain = 30
massive_dread_gain = 50
monumental_dread_gain = 70

execute_interaction_minor_dread_gain = 5
execute_interaction_medium_dread_gain = 10
execute_interaction_major_dread_gain = 15
execute_interaction_massive_dread_gain = 30

torture_interaction_minor_dread_gain = 5
torture_interaction_medium_dread_gain = 10
torture_interaction_major_dread_gain = 15
torture_interaction_massive_dread_gain = 20

intimidated_reason_value = {
	value = 50
	if = {
		limit = {
			scope:actor = {
				exists = scope:actor.dynasty
				dynasty = {
					has_dynasty_perk = guile_legacy_5
				}
			}
		}
		multiply = 2
	}
}

cowed_reason_value = {
	value = 100
	if = {
		limit = {
			scope:actor = {
				exists = scope:actor.dynasty
				dynasty = {
					has_dynasty_perk = guile_legacy_5
				}
			}
		}
		multiply = 2
	}
}

intimidated_external_reason_value = {
	value = 10
	if = {
		limit = {
			scope:actor = {
				exists = scope:actor.dynasty
				dynasty = {
					has_dynasty_perk = guile_legacy_5
				}
			}
		}
		multiply = 2
	}
}

cowed_external_reason_value = {
	value = 20
	if = {
		limit = {
			scope:actor = {
				exists = scope:actor.dynasty
				dynasty = {
					has_dynasty_perk = guile_legacy_5
				}
			}
		}
		multiply = 2
	}
}

intimidated_halved_reason_value = {
	value = 25
	if = {
		limit = {
			scope:actor = {
				exists = scope:actor.dynasty
				dynasty = {
					has_dynasty_perk = guile_legacy_5
				}
			}
		}
		multiply = 2
	}
}

cowed_halved_reason_value = {
	value = 50
	if = {
		limit = {
			scope:actor = {
				exists = scope:actor.dynasty
				dynasty = {
					has_dynasty_perk = guile_legacy_5
				}
			}
		}
		multiply = 2
	}
}

intimidated_scheme_reason_value = {
	value = 15
	if = {
		limit = {
			scope:owner = {
				exists = scope:owner.dynasty
				dynasty = {
					has_dynasty_perk = guile_legacy_5
				}
			}
		}
		multiply = 2
	}
}

cowed_scheme_reason_value = {
	value = 30
	if = {
		limit = {
			scope:owner = {
				exists = scope:owner.dynasty
				dynasty = {
					has_dynasty_perk = guile_legacy_5
				}
			}
		}
		multiply = 2
	}
}

intimidated_scheme_external_reason_value = {
	value = 10
	if = {
		limit = {
			scope:owner = {
				exists = scope:owner.dynasty
				dynasty = {
					has_dynasty_perk = guile_legacy_5
				}
			}
		}
		multiply = 2
	}
}

cowed_scheme_external_reason_value = {
	value = 20
	if = {
		limit = {
			scope:owner = {
				exists = scope:owner.dynasty
				dynasty = {
					has_dynasty_perk = guile_legacy_5
				}
			}
		}
		multiply = 2
	}
}

intimidated_marriage_reason_value = {
	value = 75
	if = {
		limit = {
			scope:actor = {
				exists = scope:actor.dynasty
				dynasty = {
					has_dynasty_perk = guile_legacy_5
				}
			}
		}
		multiply = 2
	}
}

cowed_marriage_reason_value = {
	value = 150
	if = {
		limit = {
			scope:actor = {
				exists = scope:actor.dynasty
				dynasty = {
					has_dynasty_perk = guile_legacy_5
				}
			}
		}
		multiply = 2
	}
}

intimidated_marriage_not_secondary_reason_value = {
	value = 25
	if = {
		limit = {
			scope:actor = {
				exists = scope:actor.dynasty
				dynasty = {
					has_dynasty_perk = guile_legacy_5
				}
			}
		}
		multiply = 2
	}
}

cowed_marriage_not_secondary_reason_value = {
	value = 50
	if = {
		limit = {
			scope:actor = {
				exists = scope:actor.dynasty
				dynasty = {
					has_dynasty_perk = guile_legacy_5
				}
			}
		}
		multiply = 2
	}
}

intimidated_marriage_external_reason_value = {
	value = 10
	if = {
		limit = {
			scope:actor = {
				exists = scope:actor.dynasty
				dynasty = {
					has_dynasty_perk = guile_legacy_5
				}
			}
		}
		multiply = 2
	}
}

cowed_marriage_external_reason_value = {
	value = 20
	if = {
		limit = {
			scope:actor = {
				exists = scope:actor.dynasty
				dynasty = {
					has_dynasty_perk = guile_legacy_5
				}
			}
		}
		multiply = 2
	}
}

#DREAD VALUE
low_dread = 20
medium_dread = 40
high_dread = 80

#PRESTIGE

#Note! These are base values, use loss/gain below
miniscule_prestige_value = 35
minor_prestige_value = 75
medium_prestige_value = 150
major_prestige_value = 350
massive_prestige_value = 750
monumental_prestige_value = 1500


miniscule_prestige_loss = {
	value = 0
	subtract = miniscule_prestige_value
}
minor_prestige_loss = {
	value = 0
	subtract = minor_prestige_value
}
medium_prestige_loss = {
	value = 0
	subtract = medium_prestige_value
}
major_prestige_loss = {
	value = 0
	subtract = major_prestige_value
}
massive_prestige_loss = {
	value = 0
	subtract = massive_prestige_value
}
monumental_prestige_loss = {
	value = 0
	subtract = monumental_prestige_value
}

miniscule_prestige_gain = miniscule_prestige_value
minor_prestige_gain = minor_prestige_value
medium_prestige_gain = medium_prestige_value
major_prestige_gain = major_prestige_value
massive_prestige_gain = massive_prestige_value
monumental_prestige_gain = monumental_prestige_value

knight_prestige_gain_on_wound = {
	value = minor_prestige_gain
	if = {
		limit = {
			exists = scope:enemy_knight.primary_title
			scope:enemy_knight.primary_title.tier > 0
		}
		multiply = scope:enemy_knight.primary_title.tier
	}
	if = {
		limit = {
			exists = scope:enemy_knight
			scope:enemy_knight = {
				is_lowborn = yes
			}
		}
		divide = 2
	}
}

knight_prestige_gain_on_kill = {
	value = medium_prestige_gain
	if = {
		limit = {
			exists = scope:enemy_knight.primary_title
			scope:enemy_knight.primary_title.tier > 0
		}
		multiply = scope:enemy_knight.primary_title.tier
	}
	if = {
		limit = {
			exists = scope:enemy_knight
			scope:enemy_knight = {
				is_lowborn = yes
			}
		}
		divide = 2
	}
}

knight_prestige_gain_on_wound_inverse = {
	value = minor_prestige_gain
	if = {
		limit = {
			exists = root.primary_title
			root.primary_title.tier > 0
		}
		multiply = root.primary_title.tier
	}
	if = {
		limit = {
			root = {
				is_lowborn = yes
			}
		}
		divide = 2
	}
}

knight_prestige_gain_on_kill_inverse = {
	value = medium_prestige_gain
	if = {
		limit = {
			exists = root.primary_title
			root.primary_title.tier > 0
		}
		multiply = root.primary_title.tier
	}
	if = {
		limit = {
			root = {
				is_lowborn = yes
			}
		}
		divide = 2
	}
}

#PIETY
miniscule_piety_value = 25
minor_piety_value = 50
medium_piety_value = 100
major_piety_value = 250
massive_piety_value = 500


miniscule_piety_loss = {
	value = 0
	subtract = miniscule_piety_value
}
minor_piety_loss = {
	value = 0
	subtract = minor_piety_value
}
medium_piety_loss = {
	value = 0
	subtract = medium_piety_value
}
major_piety_loss = {
	value = 0
	subtract = major_piety_value
}
massive_piety_loss = {
	value = 0
	subtract = massive_piety_value
}

miniscule_piety_gain = miniscule_piety_value
minor_piety_gain = minor_piety_value
medium_piety_gain = medium_piety_value
major_piety_gain = major_piety_value
massive_piety_gain = massive_piety_value

omega_piety_gain = {
	value = massive_piety_value
	multiply = 4
}

#FAME

#Note! These are base values, use loss/gain below
miniscule_fame_value = 20
minor_fame_value = 50
medium_fame_value = 100
major_fame_value = 200
massive_fame_value = 350
monumental_fame_value = 500


miniscule_fame_loss = {
	value = 0
	subtract = miniscule_fame_value
}
minor_fame_loss = {
	value = 0
	subtract = minor_fame_value
}
medium_fame_loss = {
	value = 0
	subtract = medium_fame_value
}
major_fame_loss = {
	value = 0
	subtract = major_fame_value
}
massive_fame_loss = {
	value = 0
	subtract = massive_fame_value
}

miniscule_fame_gain = miniscule_fame_value
minor_fame_gain = minor_fame_value
medium_fame_gain = medium_fame_value
major_fame_gain = major_fame_value
massive_fame_gain = massive_fame_value
monumental_fame_gain = monumental_fame_value

#DEVOTION

#Note! These are base values, use loss/gain below
miniscule_devotion_value = 10
minor_devotion_value = 25
medium_devotion_value = 50
major_devotion_value = 100
massive_devotion_value = 250


miniscule_devotion_loss = {
	value = 0
	subtract = miniscule_devotion_value
}
minor_devotion_loss = {
	value = 0
	subtract = minor_devotion_value
}
medium_devotion_loss = {
	value = 0
	subtract = medium_devotion_value
}
major_devotion_loss = {
	value = 0
	subtract = major_devotion_value
}
massive_devotion_loss = {
	value = 0
	subtract = massive_devotion_value
}

miniscule_devotion_gain = miniscule_devotion_value
minor_devotion_gain = minor_devotion_value
medium_devotion_gain = medium_devotion_value
major_devotion_gain = major_devotion_value
massive_devotion_gain = massive_devotion_value

#FERVOR
miniscule_fervor_value = 10
minor_fervor_value = 15
medium_fervor_value = 25
major_fervor_value = 50
massive_fervor_value = 100


miniscule_fervor_loss = {
	value = 0
	subtract = miniscule_fervor_value
}
minor_fervor_loss = {
	value = 0
	subtract = minor_fervor_value
}
medium_fervor_loss = {
	value = 0
	subtract = medium_fervor_value
}
major_fervor_loss = {
	value = 0
	subtract = major_fervor_value
}
massive_fervor_loss = {
	value = 0
	subtract = massive_fervor_value
}

miniscule_fervor_gain = miniscule_fervor_value
minor_fervor_gain = minor_fervor_value
medium_fervor_gain = medium_fervor_value
major_fervor_gain = major_fervor_value
massive_fervor_gain = massive_fervor_value

#OPINION
very_high_positive_opinion = 80 # This is someone that trusts you quite a bit, and will be on your side regardless of if it's a major breach of their character - unless it's something that directly opposes them, of course.
high_positive_opinion = 60 #A loyal subject, stalwart ally or respectful ruler. You shouldn't have much to fear from someone with this level of opinion, but they still won't support you should it be a major breach of character for them to do so.
medium_positive_opinion = 40 #At this level a character would be more likely to support you than to keep the status quo, but they could still decide to undermine you should it be in line with their character.
low_positive_opinion = 20 #Someone who has a degree of respect for you. While they are more likely to support you than undermine you, they'd rather prefer to keep the status quo than support you.
neutral_opinion = 0 #Indifferent to you. Will want to keep the status quo, or actively undermine you.
low_negative_opinion = -20 #Someone who doesn't care for you. They'd be amenable to join others in undermining you, but are not interested in starting anything themselves - unless it's something that would mean a great gain for them.
medium_negative_opinion = -40 #Light contempt. These characters would actively work against you given the chance, though they would still need a reason for doing so. They might also not want to, for example, ruin the realm during an active war should they be your vassal.
high_negative_opinion = -60 #Contempt. These characters will often work to undermine you, unless there are extreme circumstances (such as them being your parent).
very_high_negative_opinion = -80 #This is someone who hates you. They will want to do anything in their power to undermine you, and frequently so. (edited)



#WAR VALUES
break_truce_prestige_loss = -250
break_truce_prestige_level_loss = -1
attack_ally_prestige_loss = -250
attack_ally_prestige_level_loss = -1

#TYRANNY VALUES
minor_tyranny_value = 5
medium_tyranny_value = 10
major_tyranny_value = 20
massive_tyranny_value = 30

minor_tyranny_gain = minor_tyranny_value
medium_tyranny_gain = medium_tyranny_value
major_tyranny_gain = major_tyranny_value
massive_tyranny_gain = massive_tyranny_value

minor_tyranny_loss = {
	value = 0
	subtract = minor_tyranny_value
}
medium_tyranny_loss = {
	value = 0
	subtract = medium_tyranny_value
}
major_tyranny_loss = {
	value = 0
	subtract = major_tyranny_value
}
massive_tyranny_loss = {
	value = 0
	subtract = massive_tyranny_value
}

low_tyranny = 10
medium_tyranny = 40
high_tyranny = 80

imprisonment_tyranny_gain = {
	value = 20
	if = {
		limit = {
			exists = scope:imprisonment_target
			scope:imprisonment_target = {
				has_no_real_status_trigger = yes
			}
		}
		add = -15
	}
}
execution_tyranny_gain = {
	value = 10
	if = {
		limit = {
			exists = scope:victim
			scope:victim = {
				has_no_real_status_trigger = yes
			}
		}
		add = -5
	}
}
banishment_tyranny_gain = 5
revoke_title_tyranny_gain = 20
revoke_vassal_tyranny_gain = 5

#TRAIT VALUES
commander_trait_limit = 3
childhood_personality_trait_gain_limit = 3 #Trigger in a compare modifier in child_personaluity.9999
childhood_fourth_personality_trait_chance = 5 #Percentage in a random chance in child_personaluity.9999

personality_trait_minimum = 2
personality_trait_standard = 3
personality_trait_limit = 4


#LIFESTYLE VALUES
lifestyle_rank_up_1_threshold = 30
lifestyle_rank_up_2_threshold = 50
lifestyle_rank_up_3_threshold = 70
minimum_event_rank_up_threshold = 3
decline_rank_up_cost = -5
reimburse_declined_rank_up_cost = 2 #1 lower to prevent a new event from firing immediately
standard_lifestyle_focus_progress = 1
ongoing_lifestyle_event_delay = 1
#Reveler rank up thresholds
reveler_rank_up_1_threshold = 3
reveler_rank_up_2_threshold = 5
reveler_rank_up_3_threshold = 7
#Hunter rank up thresholds
hunter_rank_up_1_threshold = 3
hunter_rank_up_2_threshold = 5
hunter_rank_up_3_threshold = 7
#Seduce progress chances and values
monthly_seduce_lifestyle_progress_chance = 20
seduce_lifestyle_seduction_success_base_progress = 8
seduce_lifestyle_3_tiers_above_progress_multiplier = 2.5
seduce_lifestyle_2_tiers_above_progress_multiplier = 1.8
seduce_lifestyle_1_tier_above_progress_multiplier =  1.25
seduce_lifestyle_1_tier_below_progress_multiplier = 0.6
seduce_lifestyle_2_tiers_below_progress_multiplier = 0.4
seduce_lifestyle_3_tiers_below_progress_multiplier = 0.15

#BUILDINGS
minor_building_cost = 400
medium_building_cost = 500
major_building_cost = 600

#ATTRACTION
low_positive_attraction = 10
medium_positive_attraction = 20
high_positive_attraction = 30
low_negative_attraction = -10
medium_negative_attraction = -20
high_negative_attraction = -30


#DEVELOPMENT LEVEL VALUES
terrible_development_level = 10
bad_development_level = 20
medium_development_level = 40
good_development_level = 60
great_development_level = 80
max_development_level = 100

#DEVELOPMENT CHANGE VALUES
minor_development_level_loss = -10
medium_development_level_loss = -20
major_development_level_loss = -30
minor_development_level_gain = 10
medium_development_level_gain = 20
major_development_level_gain = 30

#DEVELOPMENT PROGRESS VALUES
minimal_development_progress_loss = -10
minor_development_progress_loss = -20
medium_development_progress_loss = -40
major_development_progress_loss = -80
massive_development_progress_loss = -100
minimal_development_progress_gain = 10
minor_development_progress_gain = 20
medium_development_progress_gain = 40
major_development_progress_gain = 80
massive_development_progress_ = 100

#DEVELOPMENT GROWTH VALUES
tiny_development_growth_gain = 0.05
small_development_growth_gain = 0.1
medium_development_growth_gain = 0.2
large_development_growth_gain = 0.3
very_large_development_growth_gain = 0.5

tiny_development_growth_loss = -0.1
small_development_growth_loss = -0.2
medium_development_growth_loss = -0.3
large_development_growth_loss = -0.5
very_large_development_growth_loss = -0.8

#HEALTH
excellent_health = 7
good_health = 5
medium_health = 4
fine_health = 3 #The names of these should be updated to match the defines (HEALTH_STATE_LEVELS_VALUES, HEALTH_STATE_LEVELS_TEXTS)
poor_health = 1
dying_health = 0

death_chance_starts_health = 3
death_chance_dying_health = 1.5

#Incest Opinion Values
close_relative_known_incest_opinion_loss_value = -25
same_dynasty_known_incest_opinion_loss_value = -15
known_incest_opinion_loss_value = -10


#SIEGE VALUES
siege_capture_chance = 50

#Relation values
friend_opinion_impact = 50
rival_opinion_impact = -50
mentor_opinion_impact = 15
student_opinion_impact = 30
lover_opinion_impact = 40
guardian_opinion_impact = 15
ward_opinion_impact = 5
bully_opinion_impact = -30
victim_opinion_impact = -40
crush_opinion_impact = 30

#DYNASTY PRESTIGE

#Note! These are base values, use loss/gain below
miniscule_dynasty_prestige_value = {
	value = 25
	multiply = { value = scale_dynasty_prestige_by_era }
}
minor_dynasty_prestige_value = {
	value = 50
	multiply = { value = scale_dynasty_prestige_by_era }
}
medium_dynasty_prestige_value = {
	value = 75
	multiply = { value = scale_dynasty_prestige_by_era }
}
major_dynasty_prestige_value = {
	value = 150
	multiply = { value = scale_dynasty_prestige_by_era}
}
massive_dynasty_prestige_value = {
	value = 250
	multiply = { value = scale_dynasty_prestige_by_era }
}
monumental_dynasty_prestige_value = 1000
excessive_dynasty_prestige_value = 2500

scale_dynasty_prestige_by_era = {
	value = 1
	if = {
		limit = {
			exists = dynast.culture
		}
		dynast.culture = {
			if = {
				limit = { has_cultural_era_or_later = culture_era_late_medieval }
				add = 3
			}
			else_if = {
				limit = { has_cultural_era_or_later = culture_era_high_medieval }
				add = 2
			}
			else_if = {
				limit = { has_cultural_era_or_later = culture_era_early_medieval }
				add = 1
			}
		}
	}
}

miniscule_dynasty_prestige_loss = {
	value = 0
	subtract = miniscule_dynasty_prestige_value
}
minor_dynasty_prestige_loss = {
	value = 0
	subtract = minor_dynasty_prestige_value
}
medium_dynasty_prestige_loss = {
	value = 0
	subtract = medium_dynasty_prestige_value
}
major_dynasty_prestige_loss = {
	value = 0
	subtract = major_dynasty_prestige_value
}
massive_dynasty_prestige_loss = {
	value = 0
	subtract = massive_prestige_value
}
monumental_dynasty_prestige_loss = {
	value = 0
	subtract = monumental_dynasty_prestige_value
}
excessive_dynasty_prestige_loss = {
	value = 0
	subtract = excessive_dynasty_prestige_value
}

miniscule_dynasty_prestige_gain = { value = miniscule_dynasty_prestige_value }
minor_dynasty_prestige_gain = { value = minor_dynasty_prestige_value }
medium_dynasty_prestige_gain = { value = medium_dynasty_prestige_value }
major_dynasty_prestige_gain = { value = major_dynasty_prestige_value }
massive_dynasty_prestige_gain = { value = massive_dynasty_prestige_value }
monumental_dynasty_prestige_gain = { value = monumental_dynasty_prestige_value }
excessive_dynasty_prestige_gain = { value = excessive_dynasty_prestige_value }

max_dynasty_prestige_level = 10
high_dynasty_prestige_level = 7
medium_dynasty_prestige_level = 4
low_dynasty_prestige_level = 2
min_dynasty_prestige_level = 0

#RANGES

#For use in "squared_distance" triggers
diplomatic_range = 1000000

#DE JURE DRIFT
medium_de_jure_drift_progress_gain = 15
medium_de_jure_drift_progress_loss = -15

#Send Gift
send_gift_opinion = {
	value = 5
	add = {
		if = {
			limit = {
				scope:actor.diplomacy > 0
			}
			add = {
				value = scope:actor.diplomacy
				multiply = 3
			}
		}
		if = {
			limit = {
				scope:recipient.ai_greed > 0
			}
			add = {
				value = scope:recipient.ai_greed
				divide = 3
			}
		}
		if = {
			limit = {
				scope:recipient.liege = scope:actor
			}
			divide = 1.5
		}
		if = {
			limit = {
				scope:recipient = scope:actor.faith.religious_head
			}
			divide = 3
		}
		if = {
			limit = {
				scope:actor.culture ?= {
					has_innovation = fp3_innovation_fritware
				}
			}
			multiply = 1.2
		}
		max = 100
	}
	if = {
		limit = {
			scope:actor.culture = { has_cultural_parameter = more_gift_opinion }
		}
		multiply = 1.2
	}
	if = {
		limit = {
			scope:actor = { has_perk = thoughtful_perk }
		}
		multiply = 2
	}
}

gift_artifact_opinion = {
	value = 0
	scope:target = {
		# Per level of Rarity
		if = {
			limit = { rarity = common }
			add = 10
		}
		else_if = {
			limit = { rarity = masterwork }
			add = 25
		}
		else_if = {
			limit = { rarity = famed }
			add = 50
		}
		else = { add = 100 }
		if = { # AI Greed
			limit = { scope:recipient.ai_greed > 0 }
			multiply = { # Up to *2
				value = 1
				add = {
					value = scope:recipient.ai_greed
					divide = 100
				}
			}
		}
		if = {
			limit = { artifact_durability <= define:NInventory|ARTIFACT_LOW_DURABILITY }
			divide = 3 # 1/3 for damaged artifacts
		}
		if = {
			limit = { artifact_durability <= define:NInventory|ARTIFACT_VERY_LOW_DURABILITY }
			divide = 3 # 1/3 for very damaged artifacts
		}
		if = {
			limit = { can_be_claimed_by = scope:recipient }
			multiply = 1.5 # 3/2 for claimed artifacts
		}
		if = {
			limit = { scope:recipient.liege = scope:actor }
			divide = 1.33 # 3/4 for vassals
		}
		floor = yes
		if = {
			limit = { scope:recipient = scope:actor.faith.religious_head }
			divide = 2 # 1/2 for religious heads
		}
		if = {
			limit = {
				OR = {
					AND = {
						has_variable = banner_house
						NOT = { var:banner_house = scope:recipient.house }
					}
					AND = {
						has_variable = banner_dynasty
						NOT = { var:banner_dynasty = scope:recipient.dynasty }
					}
				}
			}
			subtract = 100 # 1/10 for useless banners
			min = 0
		}
		else_if = {
			limit = {
				scope:recipient = {
					NOR = {
						can_equip_artifact = scope:target
						can_benefit_from_artifact = scope:target
					}
				}
			}
			divide = 10 # 1/10 for useless artifacts
		}
		else_if = {
			limit = {
				scope:recipient = {
					OR = {
						NOT = { can_equip_artifact = scope:target }
						NOT = { can_benefit_from_artifact = scope:target }
					}
				}
			}
			divide = 5 # 1/5 for unfit artifacts
		}
		else = { min = 5 }
	}
	max = 150
}


#POOL VALUES

full_pool_size = 30

# CULTURE VALUES
convert_to_local_culture_base_cost = 1000


# Sexuality

default_heterosexuality_chance = {
	value = 100
	subtract = define:NCharacter|PERCENTAGE_HOMOSEXUAL
	subtract = define:NCharacter|PERCENTAGE_BISEXUAL
	subtract = define:NCharacter|PERCENTAGE_ASEXUAL
}

heterosexuality_chance = {
	if = {
		limit = { has_game_rule = sexuality_distribution_default }
		value = default_heterosexuality_chance
	}
	else_if = {
		limit = { has_game_rule = sexuality_distribution_equal }
		value = 25
	}
	else_if = {
		limit = { has_game_rule = sexuality_distribution_most_common_homosexuality }
		value = define:NCharacter|PERCENTAGE_HOMOSEXUAL #Swapping with homosexual
	}
	else_if = {
		limit = { has_game_rule = sexuality_distribution_most_common_bisexuality }
		value = define:NCharacter|PERCENTAGE_BISEXUAL #Swapping with bisexual
	}
	else_if = {
		limit = { has_game_rule = sexuality_distribution_most_common_asexuality }
		value = define:NCharacter|PERCENTAGE_ASEXUAL #Swapping with asexuality
	}
}

homosexuality_chance = {
	if = {
		limit = { has_game_rule = sexuality_distribution_default }
		value = define:NCharacter|PERCENTAGE_HOMOSEXUAL
	}
	else_if = {
		limit = { has_game_rule = sexuality_distribution_equal }
		value = 25
	}
	else_if = {
		limit = { has_game_rule = sexuality_distribution_most_common_homosexuality }
		value = default_heterosexuality_chance #Swapped with heterosexuality
	}
	else_if = {
		limit = { has_game_rule = sexuality_distribution_most_common_bisexuality }
		value = define:NCharacter|PERCENTAGE_HOMOSEXUAL
	}
	else_if = {
		limit = { has_game_rule = sexuality_distribution_most_common_asexuality }
		value = define:NCharacter|PERCENTAGE_HOMOSEXUAL
	}
}

bisexuality_chance = {
	if = {
		limit = { has_game_rule = sexuality_distribution_default }
		value = define:NCharacter|PERCENTAGE_BISEXUAL
	}
	else_if = {
		limit = { has_game_rule = sexuality_distribution_equal }
		value = 25
	}
	else_if = {
		limit = { has_game_rule = sexuality_distribution_most_common_homosexuality }
		value = define:NCharacter|PERCENTAGE_BISEXUAL
	}
	else_if = {
		limit = { has_game_rule = sexuality_distribution_most_common_bisexuality }
		value = default_heterosexuality_chance #Swapped with heterosexuality
	}
	else_if = {
		limit = { has_game_rule = sexuality_distribution_most_common_asexuality }
		value = define:NCharacter|PERCENTAGE_BISEXUAL
	}
}

asexuality_chance = {
	if = {
		limit = { has_game_rule = sexuality_distribution_default }
		value = define:NCharacter|PERCENTAGE_ASEXUAL
	}
	else_if = {
		limit = { has_game_rule = sexuality_distribution_equal }
		value = 25
	}
	else_if = {
		limit = { has_game_rule = sexuality_distribution_most_common_homosexuality }
		value = define:NCharacter|PERCENTAGE_ASEXUAL
	}
	else_if = {
		limit = { has_game_rule = sexuality_distribution_most_common_bisexuality }
		value = define:NCharacter|PERCENTAGE_ASEXUAL
	}
	else_if = {
		limit = { has_game_rule = sexuality_distribution_most_common_asexuality }
		value = default_heterosexuality_chance #Swapped with heterosexuality
	}
}

# Requires changed_obligations list to be set for contract obligations
# This = Person who's obligation we are checking
count_obligation_improvements_for_vassal = {
	value = 0

	save_temporary_scope_as = vassal

	every_in_list = {
		list = changed_obligations

		vassal_contract_type = {
			save_temporary_scope_as = contract_type
		}

		add = {
			value = obligation_level_score
			subtract = "scope:vassal.vassal_contract_obligation_level_score( scope:contract_type )"
		}
	}
}

# Requires local_var:<obligation_type> to be set for feudal obligations
# Requires scope:recipient to be set
# This = Person who's obligation we are checking
count_obligation_improvements_for_vassal_include_hook = {
	value = count_obligation_improvements_for_vassal
	if = {
		limit = { always = scope:hook }
		subtract = 1
	}
	if = {
		limit = { always = scope:diarch }
		subtract = 1
	}
}

vassal_obligation_increase_tyranny_gain_base = 20

# Requires scope:recipient to bet set
# Requires local_var:<obligation_type> to be set for feudal obligations
vassal_obligation_increase_tyranny_gain_multiplier = {
	subtract = scope:recipient.count_obligation_improvements_for_vassal # Good for vassal is bad for liege
	if = {
		limit = {
			always = scope:hook
		}
		subtract = 1
	}
	min = 0
}

# Requires scope:recipient to bet set
# Requires local_var:<obligation_type> to be set for feudal obligations
# Use in the scope of the person getting tyranny
vassal_obligation_increase_tyranny_gain = {
	value = vassal_obligation_increase_tyranny_gain_base
	multiply = vassal_obligation_increase_tyranny_gain_multiplier
}

#REALM SIZE
##About a moderate duchy.
tiny_realm_size = 6
##About x1 (de jure) Wales.
minor_realm_size = 12
##About x1 (de jure) Scotland.
medium_realm_size = 24
##About x1 (1066) England.
major_realm_size = 40
##About x1 (1066) France.
massive_realm_size = 84
##About x1 (1066) ERE.
monumental_realm_size = 160
##About x1 (1066) HRE.
enormous_realm_size = 250

# Percentages of realm size for comparison.
75_percent_realm_size_value = {
	value = sub_realm_size
	multiply = 0.75
	floor = yes
}
50_percent_realm_size_value = {
	value = sub_realm_size
	multiply = 0.5
	floor = yes
}
33_percent_realm_size_value = {
	value = sub_realm_size
	multiply = 0.33
	floor = yes
}
25_percent_realm_size_value = {
	value = sub_realm_size
	multiply = 0.25
	floor = yes
}

#FOR DIVORCE
divorce_cost = 100

#PERKS 
sound_foundations_max = 5
embassies_max = 5
friendly_counsel_max = 5
decentralized_rule_max = 5
confidants_max = 5

#AMENITIES
low_amenity_level = 1
medium_amenity_level = 2
high_amenity_level = 3
very_high_amenity_level = 4
max_amenity_level = 5

#COURT GRANDEUR LEVEL VALUES
low_court_grandeur_level = 2
medium_court_grandeur_level = 4
high_court_grandeur_level = 6
very_high_court_grandeur_level = 8
max_court_grandeur_level = 10

#CURRENT COURT GRANDEUR VALUES
miniscule_court_grandeur_value = 3
minor_court_grandeur_value = 6
medium_court_grandeur_value = 10
major_court_grandeur_value = 14
massive_court_grandeur_value = 18
monumental_court_grandeur_value = 25

## Positives.
miniscule_court_grandeur_gain = miniscule_court_grandeur_value
minor_court_grandeur_gain = minor_court_grandeur_value
medium_court_grandeur_gain = medium_court_grandeur_value
major_court_grandeur_gain = major_court_grandeur_value
massive_court_grandeur_gain = massive_court_grandeur_value
monumental_court_grandeur_gain = monumental_court_grandeur_value

## Negatives.
miniscule_court_grandeur_loss = {
	value = 0
	subtract = miniscule_court_grandeur_value
}
minor_court_grandeur_loss = {
	value = 0
	subtract = minor_court_grandeur_value
}
medium_court_grandeur_loss = {
	value = 0
	subtract = medium_court_grandeur_value
}
major_court_grandeur_loss = {
	value = 0
	subtract = major_court_grandeur_value
}
massive_court_grandeur_loss = {
	value = 0
	subtract = massive_court_grandeur_value
}
monumental_court_grandeur_loss = {
	value = 0
	subtract = monumental_court_grandeur_value
}

# SCALES OF POWER

miniscule_sop_swing_value = 3
minor_sop_swing_value = 5
medium_sop_swing_value = 10
major_sop_swing_value = 20
massive_sop_swing_value = 30
monumental_sop_swing_value = 40

miniscule_sop_swing_diarch_gain = miniscule_sop_swing_value
minor_sop_swing_diarch_gain = minor_sop_swing_value
medium_sop_swing_diarch_gain = medium_sop_swing_value
major_sop_swing_diarch_gain = major_sop_swing_value
massive_sop_swing_diarch_gain = massive_sop_swing_value
monumental_sop_swing_diarch_gain = monumental_sop_swing_value

miniscule_sop_swing_liege_gain = {
	value = miniscule_sop_swing_value
	multiply = -1
}
minor_sop_swing_liege_gain = {
	value = minor_sop_swing_value
	multiply = -1
}
medium_sop_swing_liege_gain = {
	value = medium_sop_swing_value
	multiply = -1
}
major_sop_swing_liege_gain = {
	value = major_sop_swing_value
	multiply = -1
}
massive_sop_swing_liege_gain = {
	value = massive_sop_swing_value
	multiply = -1
}
monumental_sop_swing_liege_gain = {
	value = monumental_sop_swing_value
	multiply = -1
}

# STRIFE VALUES
minor_strife_value = 10
medium_strife_value = 15
major_strife_value = 25
massive_strife_value = 35
monumental_strife_value = 50

minor_strife_gain = minor_strife_value
medium_strife_gain = medium_strife_value
major_strife_gain = major_strife_value
massive_strife_gain = massive_strife_value
monumental_strife_gain = monumental_strife_value

minor_strife_loss = {
	value = minor_strife_value
	multiply = -1
}
medium_strife_loss = {
	value = medium_strife_value
	multiply = -1
}
major_strife_loss = {
	value = major_strife_value
	multiply = -1
}
massive_strife_loss = {
	value = massive_strife_value
	multiply = -1
}
monumental_strife_loss = {
	value = monumental_strife_value
	multiply = -1
}

strife_harm_threshold_value = {
	value = 20
	# Lower this for just or underhanded characters.
	## Just
	if = {
		limit = { has_trait = just }
		add = -10
	}
	## Deceitful
	if = {
		limit = { has_trait = deceitful }
		add = -5
	}
	## Vengeful
	if = {
		limit = { has_trait = vengeful }
		add = -5
	}
	# Increase it for arbitrary or honest ones.
	## Arbitrary
	if = {
		limit = { has_trait = arbitrary }
		add = 20
	}
	## Honest
	if = {
		limit = { has_trait = honest }
		add = 10
	}
	## Forgiving
	if = {
		limit = { has_trait = forgiving }
		add = 10
	}
}

# GLORY VALUES

sub_minimal_glory_value = 5
minimal_glory_value = 10
minor_glory_value = 25
medium_glory_value = 50
major_glory_value = 100
massive_glory_value = 150
monumental_glory_value = 250

sub_minimal_glory_gain = sub_minimal_glory_value
minimal_glory_gain = minimal_glory_value
minor_glory_gain = minor_glory_value
medium_glory_gain = medium_glory_value
major_glory_gain = major_glory_value
massive_glory_gain = massive_glory_value
monumental_glory_gain = monumental_glory_value

minimal_glory_loss = {
	value = minimal_glory_value
	multiply = -1
}
minor_glory_loss = {
	value = minor_glory_value
	multiply = -1
}
medium_glory_loss = {
	value = medium_glory_value
	multiply = -1
}
major_glory_loss = {
	value = major_glory_value
	multiply = -1
}
massive_glory_loss = {
	value = massive_glory_value
	multiply = -1
}
monumental_glory_loss = {
	value = monumental_glory_value
	multiply = -1
}
starting_provisions_value = 1500

microscopic_provisions_value = 20
miniscule_provisions_value = 75
minor_provisions_value = 200
medium_provisions_value = 400
major_provisions_value = 600
massive_provisions_value = 1200
monumental_provisions_value = 2000

microscopic_provisions_gain = microscopic_provisions_value
miniscule_provisions_gain = miniscule_provisions_value
minor_provisions_gain = minor_provisions_value
medium_provisions_gain = medium_provisions_value
major_provisions_gain = major_provisions_value
massive_provisions_gain = massive_provisions_value
monumental_provisions_gain = monumental_provisions_value

microscopic_provisions_loss = {
	value = microscopic_provisions_value
	multiply = -1
}
miniscule_provisions_loss = {
	value = miniscule_provisions_value
	multiply = -1
}
minor_provisions_loss = {
	value = minor_provisions_value
	multiply = -1
}
medium_provisions_loss = {
	value = medium_provisions_value
	multiply = -1
}
major_provisions_loss = {
	value = major_provisions_value
	multiply = -1
}
massive_provisions_loss = {
	value = massive_provisions_value
	multiply = -1
}
monumental_provisions_loss = {
	value = monumental_provisions_value
	multiply = -1
}
